/*! Empire 2
 *  @description  eCore
 *  @version      0.1.0.REL20221118
 *  @copyright    2022 New York State Office of Information Technology Services
 */
/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.22 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.22',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            try {
                                exports = context.execCb(id, factory, depExports, exports);
                            } catch (e) {
                                err = e;
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                // If there is an error listener, favor passing
                                // to that instead of throwing an error. However,
                                // only do it for define()'d  modules. require
                                // errbacks should not be called for failures in
                                // their callbacks (#699). However if a global
                                // onError is set, use that.
                                if ((this.events.error && this.map.isDefine) ||
                                    req.onError !== defaultOnError) {
                                    err.requireMap = this.map;
                                    err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                    err.requireType = this.map.isDefine ? 'define' : 'require';
                                    return onError((this.error = err));
                                } else if (typeof console !== 'undefined' &&
                                           console.error) {
                                    // Log the error for debugging. If promises could be
                                    // used, this would be different, but making do.
                                    console.error(err);
                                } else {
                                    // Do not want to completely lose the error. While this
                                    // will mess up processing and lead to similar results
                                    // as bug 1440, it at least surfaces the error.
                                    req.onError(err);
                                }
                            }
                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function (depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.map.normalizedMap = normalizedMap;
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +
                        args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function(value, key) {
                        if (key.indexOf('_@r') !== 0) {
                            each(value.depMaps, function(depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                }
                                return true;
                            });
                        }
                    });
                    return onError(makeError('scripterror', 'Script error for "' + data.id +
                                             (parents.length ?
                                             '", needed by: ' + parents.join(', ') :
                                             '"'), evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    };

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));
define("requirejs", function(){});

/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.


var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );
define('lazyLoader',['require'], function (require) {

  // Module Object
  var lazyLoader = {};

  // Create the function used to load scripts inline.
  lazyLoader.load = function(request, requestCb) {

    var processor = function(request, requestCb) {

      // Check to see if the requested library is already been defined in requirejs
      if (require.defined(request)) {

        // The item being requested already exists in requie. Just call its callback
        if (typeof(requestCb) === 'function') {
          requestCb();
        }

      } else {

          require([request], requestCb);

      }

    };

    // Check what type of request we have string single load vs array for multiload.
    if (typeof(request) === "string") {

      // Handle the one off request.
      processor(request, requestCb);

    } else {

      // We have a array so loop through and request each item in the array
      for (var i = 0, len = request.length; i < len; i++) {
        processor(request[i]);
      }

    }


  };

  return lazyLoader;

});

/*
=======================================================================
 New York State Department of Taxation and Finance
 User Interface Team
 Core script (mainly utilities) to be used across projects
=======================================================================
*/
define('cui',['jquery', 'lazyLoader'], function ($, lazyLoader) {
    // Create the namespace
    var cui = {};

    var defaults = {
        optIns: {
            iOSFix: false
        }
    };

    var _priv = {
        initilized: false,
        iOSFix: function iOSFix () {
            // Disable zooming on input focus on iOS
            (function () {
                function zoomDisable () {
                    $('head').find('meta[name=viewport]').remove();
                    $('head').prepend('<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">');
                }

                function zoomEnable () {
                    $('head').find('meta[name=viewport]').remove();
                    $('head').prepend('<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=1">');
                }

                // Disable zooming when focus begins
                $('input[type=text], textarea').on('touchstart', function () {
                    zoomDisable();
                });

                // Re-enable zooming after input has finished getting focus. This is not on blur, but a moment after the user stopped touching the screen.
                $('input[type=text], textarea').on('touchend', function () {
                    setTimeout(zoomEnable, 500);
                });
            }());
        }
    };

    /**
     * Non-destructive implementation for creating namespaces or adding properties inside of them
     *
     * @param   {String}  namespace  Namespace to be registered
     * @param   {Object}  parent     Parent of namespace
     *
     * @return  {Object}             Parent of namespace
     */
    cui.namespace = function _namespace (namespace, parent) {
        var parts = namespace.split('.');
        var i;

        parent = parent || cui;

        // Strip redundant leading global
        if (parts[0] === 'cui') {
            parts = parts.slice(1);
        }

        for (i = 0; i < parts.length; i += 1) {
            // Create a property if it does not exist
            if (typeof parent[parts[i]] === 'undefined') {
                parent[parts[i]] = {};
            }

            parent = parent[parts[i]];
        }

        return parent;
    };

    /**
     * Simple script init function that needs to run on every page that uses the core ui framework
     *
     * @param   {Object}    options  Settings
     * @param   {Function}  cb       Callback function
     */
    cui.init = function _cui_init (options, cb) {
        var opt;

        // Make sure the init has not run once already
        if (!this.initilized) {
            // Get all the options including the user defined so we can build the inital load items
            this.options = $.extend(true, {}, defaults, options);

            // Loop through all the optIn functions
            for (opt in this.options.optIns) {
                if (this.options.optIns.hasOwnProperty(opt)) {
                    // Check to see if the optIn private function exists and execute it if its true
                    if (typeof _priv[opt] === 'function') {
                        _priv[opt]();
                    }
                }
            }

            // Mark init as true so it cant easily be re-kicked off.
            _priv.initilized = true;

            if (typeof cb === 'function') {
                cb();
            }
        }
    };

    // Place the lazyloader into the cui namespace.
    cui.load = lazyLoader.load;

    return cui;
});
define('guid',[], function () {
    // Private method namespace
    var priv = {};

    ///////////////////
    // Public method //
    ///////////////////

    /**
     * Generates a random ID, or ensures an element has an ID and then returns it
     *
     * This may be used to get an element's ID while at the same time ensuring it has one. If the element does not have an ID it will be assigned one that is unique within the document.
     *
     * @param   {Object}  elem  Optional DOM element or other object
     *
     * @return  {String}        Four random alphanumeric characters
     */
    var _guid = function _guid (elem) {
        var id;

        // An element was provided
        if (elem) {
            // See if the element already has an ID
            if (elem.id && typeof elem.id === 'string') {
                return elem.id;
            }

            // Randomly generate an ID
            id = priv.stringOf4RandChars();

            // Try again if this ID is already in use
            if (document.getElementById(id)) {
                id = priv.stringOf4RandChars();
            }

            // Assign the ID to the element
            if (typeof elem === 'object') {
                elem.id = id;
            }

            return id;
        }
        // No element given, just return a random ID
        else {
            return priv.stringOf4RandChars();
        }
    };

    /////////////////////
    // Private methods //
    /////////////////////

    /**
     * Generates a string of four random numbers and letters
     *
     * @return  {String}  Four-character string
     */
    priv.stringOf4RandChars = function _stringOf4RandChars () {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };

    /////////////////////
    // Expose publicly //
    /////////////////////

    return _guid;
});

define('dataStore',['guid'], function (guid) {
    var store = {};
    var templateStore = {};

    var createStore = function (data, id) {

        // Check to see if the create store was passed with a pre-selected ID.
        if (id !== undefined) {
            // Check to see if the id is in use
            if (store.hasOwnProperty(id)) {
                // The id was already in use, do we will still generate one
                id = guid();

                while (store.hasOwnProperty(id)) {
                    id = guid();
                }
            }
        }
        else {
            // The id was already in use, do we will still generate one
            id = guid();

            while (store.hasOwnProperty(id)) {
                id = guid();
            }
        }

        // Store the data
        store[id] = data;

        var template = data.template;

        if (typeof template === "string") {

            if (!templateStore[template]) {

                templateStore[template] = [];
            }

            templateStore[template].push(id);
        }

        return id;
    };

    var deleteStore = function (id) {
        if (store.id) {

            var template = store.id.template;

            if (typeof template === "string") {

                var index = templateStore[template].indexof(id);

                if (index !== -1) {
                    templateStore[template].splice(index, 1);
                }
            }

            delete store[id];

            return true;
        }
        else {
            return false;
        }
    };

    var getStore = function (id) {
        if (store.hasOwnProperty(id)) {
            return store[id];
        }
        else {

            return false;
        }
    };

    /**
     * Check whether a particular store exists
     * @param   {String}   id  The key to be looked up
     * @return  {Boolean}      Whether the key has been defined in the data store
     */
    var hasStore = function (id) {
        return store.hasOwnProperty(id);
    };

    var updateStore = function (id, data) {

        // Hook to prevent error when id is not provided.
        if (id !== undefined) {

            if (store.hasOwnProperty(id)) {
                store[id] = data;
            }
            else {
                console.error('Data store update failed for: "', id, '". Data store does not exist');
            }

            return store[id];
        }

        return false;
    };

    var getStoreType = function (template) {

        if (templateStore[template]) {

            return templateStore[template];
        }

        return false;
    };

    var returnStore = function () {
        return store;
    };

    // Expose public functions
    return {
        createStore: createStore,
        deleteStore: deleteStore,
        getStore: getStore,
        getStoreType: getStoreType,
        hasStore: hasStore,
        returnStore: returnStore,
        updateStore: updateStore,
    };
});

/**!

 @license
 handlebars v4.4.3

Copyright (C) 2011-2017 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define('handlebars',[], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(1)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(3);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(20);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(5);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(4);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(21);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(33);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(9);

	var _decorators = __webpack_require__(17);

	var _logger = __webpack_require__(19);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.4.3';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 8;
	exports.COMPILER_REVISION = COMPILER_REVISION;
	var LAST_COMPATIBLE_COMPILER_REVISION = 7;

	exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0 <4.3.0',
	  8: '>= 4.3.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;

	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$defineProperty = __webpack_require__(6)['default'];

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  try {
	    if (loc) {
	      this.lineNumber = line;

	      // Work around issue under safari where we can't directly set the column value
	      /* istanbul ignore next */
	      if (_Object$defineProperty) {
	        Object.defineProperty(this, 'column', {
	          value: column,
	          enumerable: true
	        });
	      } else {
	        this.column = column;
	      }
	    }
	  } catch (nop) {
	    /* Ignore if the browser is very particular */
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(7), __esModule: true };

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(8);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;
	exports.moveHelperToHooks = moveHelperToHooks;

	var _helpersBlockHelperMissing = __webpack_require__(10);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(11);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(12);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(13);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(14);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(15);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(16);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

	function moveHelperToHooks(instance, helperName, keepHelper) {
	  if (instance.helpers[helperName]) {
	    instance.hooks[helperName] = instance.helpers[helperName];
	    if (!keepHelper) {
	      delete instance.helpers[helperName];
	    }
	  }
	}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else if (global.Symbol && context[global.Symbol.iterator]) {
	        var newContext = [];
	        var iterator = context[global.Symbol.iterator]();
	        for (var it = iterator.next(); !it.done; it = iterator.next()) {
	          newContext.push(it.value);
	        }
	        context = newContext;
	        for (var j = context.length; i < j; i++) {
	          execIteration(i, i, i === context.length - 1);
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    if (!obj) {
	      return obj;
	    }
	    if (field === 'constructor' && !obj.propertyIsEnumerable(field)) {
	      return undefined;
	    }
	    return obj[field];
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(18);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(4);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$seal = __webpack_require__(22)['default'];

	var _interopRequireWildcard = __webpack_require__(1)['default'];

	var _interopRequireDefault = __webpack_require__(2)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(4);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(5);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(3);

	var _helpers = __webpack_require__(9);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
	    return;
	  }

	  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
	    var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	        compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	    throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	  } else {
	    // Use the embedded version info since the runtime doesn't know about this revision yet
	    throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	  }
	}

	function template(templateSpec, env) {

	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as pseudo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)
	  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }
	    partial = env.VM.resolvePartial.call(this, partial, context, options);

	    var optionsWithHooks = Utils.extend({}, options, { hooks: this.hooks });

	    var result = env.VM.invokePartial.call(this, partial, context, optionsWithHooks);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, optionsWithHooks);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    // An empty object to use as replacement for null-contexts
	    nullContext: _Object$seal({}),

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = Utils.extend({}, env.helpers, options.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = Utils.extend({}, env.partials, options.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = Utils.extend({}, env.decorators, options.decorators);
	      }

	      container.hooks = {};

	      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
	      _helpers.moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);
	      _helpers.moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	      container.hooks = options.hooks;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	/**
	 * This is currently part of the official API, therefore implementation details should not be changed.
	 */

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  // Use the current closure context to save the partial-block if this partial
	  var currentPartialBlock = options.data && options.data['partial-block'];
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    (function () {
	      options.data = _base.createFrame(options.data);
	      // Wrapper function to get access to currentPartialBlock from the closure
	      var fn = options.fn;
	      partialBlock = options.data['partial-block'] = function partialBlockWrapper(context) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	        // Restore the partial-block from the closure for the execution of the block
	        // i.e. the part inside the block of the partial call.
	        options.data = _base.createFrame(options.data);
	        options.data['partial-block'] = currentPartialBlock;
	        return fn(context, options);
	      };
	      if (fn.partials) {
	        options.partials = Utils.extend({}, options.partials, fn.partials);
	      }
	    })();
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(23), __esModule: true };

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	module.exports = __webpack_require__(29).Object.seal;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(25);

	__webpack_require__(26)('seal', function($seal){
	  return function seal(it){
	    return $seal && isObject(it) ? $seal(it) : it;
	  };
	});

/***/ }),
/* 25 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(27)
	  , core    = __webpack_require__(29)
	  , fails   = __webpack_require__(32);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(28)
	  , core      = __webpack_require__(29)
	  , ctx       = __webpack_require__(30)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 29 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(31);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ })
/******/ ])
});
;
define('handlebars-templates',['handlebars'], function(Handlebars) {

this["JST"] = this["JST"] || {};

this["JST"]["agency-footer"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<footer class=\"emp-global-footer orpts-theme\">\r\n    <ul>\r\n        <li>\r\n            <a href=\"https://www.tax.ny.gov/help/tech/accessibility.htm\" title=\"This will open a new window to the Web Site Accessibility page\" target=\"_blank\">Accessibility</a>\r\n        </li>\r\n        <li>\r\n            <a href=\"https://www.tax.ny.gov/help/tech/disclaimer.htm\" title=\"This will open a new window to the Web Site Disclaimer page\" target=\"_blank\">Disclaimer</a>\r\n        </li>\r\n        <li>\r\n            <a href=\"https://www.tax.ny.gov/help/tech/privacy-policy.htm\" title=\"This will open a new window to the Privacy Policy page\" target=\"_blank\">Privacy</a>\r\n        </li>\r\n        <li>\r\n            <a href=\"https://www.tax.ny.gov/help/tech/securesite.htm\" title=\"This will open a new window to the Web Site Security page\" target=\"_blank\">Security</a>\r\n        </li>       \r\n        <li>\r\n            <a href=\"https://www.tax.ny.gov/help/tech/email-phishing.htm\" title=\"This will open a new window to the Email/Phishing page\" target=\"_blank\">Email/Phishing</a>\r\n        </li>\r\n    </ul>\r\n</footer>\r\n";
},"useData":true});

this["JST"]["agency-header"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"bannerLink") : depth0), depth0));
},"3":function(container,depth0,helpers,partials,data) {
    return "https://tax.ny.gov";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <li>\r\n            <button id=\"userAcct\" role=\"button\" "
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"inlineUserAcctMenu") : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":48},"end":{"line":18,"column":108}}})) != null ? stack1 : "")
    + ">\r\n                <span class=\"user-icon\"></span>\r\n                <span class=\"label\">"
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"userAcct") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n            </button>\r\n        </li>\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    return "data-inlineMenu=\"true\"";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <li>\r\n            <button id=\"agencyHelp\" role=\"button\">\r\n                <span class=\"support-icon\"></span>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"support") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":28,"column":16},"end":{"line":32,"column":23}}})) != null ? stack1 : "")
    + "            </button>\r\n        </li>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <span class=\"label\">"
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"support") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    return "                    <span class=\"label\">Get Support</span>\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    return "        <button class=\"menu-button\">\r\n            <svg height=\"20\" version=\"1\" viewBox=\"0 0 20 20\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path fill=\"#454545\" d=\"M1 3h18v3H1zM1 9h18v3H1zM1 15h18v3H1z\"></path>\r\n            </svg>\r\n            <span>Menu</span>\r\n        </button>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"agency-header\">\r\n    <div id=\"banner-toggle\" class=\"banner-toggle\">\r\n        <button class=\"nys-logo banner-button\">\r\n            <span>\r\n                Toggle New York State Banner\r\n            </span>\r\n        </button>\r\n    </div>\r\n    <div class=\"agency-title\">\r\n        <a href=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"bannerLink") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":92}}})) != null ? stack1 : "")
    + "\">\r\n            <span>Department of</span>\r\n            <span>Taxation and Finance</span>\r\n        </a>\r\n    </div>\r\n    <ul class=\"agency-support-login\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"showUserAcct") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":16,"column":8},"end":{"line":23,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"showSupportMenu") : depth0),{"name":"if","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":24,"column":8},"end":{"line":35,"column":15}}})) != null ? stack1 : "")
    + "    </ul>\r\n</div>\r\n"
    + alias2(lookupProperty(helpers,"log").call(alias1,depth0,{"name":"log","hash":{},"data":data,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":12}}}))
    + "\r\n<header class=\"emp-global-header external-view oprts-theme\">\r\n    <div class=\"application-header\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"showMenu") : depth0),{"name":"if","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":8},"end":{"line":48,"column":15}}})) != null ? stack1 : "")
    + "        <h1 class=\"application-title\">"
    + alias2(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "</h1>\r\n    </div>\r\n</header>\r\n<ul class=\"cui-messages emp-messages cui-hidden\"></ul>\r\n";
},"useData":true});

this["JST"]["buttonGroup"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_grid"),depth0,{"name":"_grid","hash":{"extend":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"extendDefaults","hash":{"defaults":"{\"className\":\"emp-button-row\"}"},"data":data,"loc":{"start":{"line":5,"column":27},"end":{"line":5,"column":85}}})},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"align") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":11,"column":4},"end":{"line":19,"column":12}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_grid"),depth0,{"name":"_grid","hash":{"extend":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"extendDefaults","hash":{"align":(depth0 != null ? lookupProperty(depth0,"align") : depth0),"defaults":"{\"className\":\"button-col emp-button-group\"}"},"data":data,"loc":{"start":{"line":13,"column":31},"end":{"line":13,"column":120}}})},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_grid"),depth0,{"name":"_grid","hash":{"extend":"{\"className\":\"button-col emp-button-group\"}"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"row","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":7,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"column","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":0},"end":{"line":20,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["closed-session"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10\">\r\n            <div class=\"cui-row\">\r\n                <div class=\"cui-col-small-12\">\r\n                    <p>\r\n                        You have been successfully logged out.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["closePopup"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"cui-row emp-button-row\">\r\n    <div class=\"emp-col-full button-col emp-button-group cui-align-center\">\r\n        <button type=\"button\" onclick=\"window.close();\">Close Window</button>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["composite"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_composite-iframe"),depth0,{"name":"_composite-iframe","hash":{"attributes":(depth0 != null ? lookupProperty(depth0,"properties") : depth0)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"type") : depth0),{"name":"getPartialName","hash":{"composite":true},"data":data,"loc":{"start":{"line":5,"column":9},"end":{"line":5,"column":50}}}),(lookupProperty(helpers,"extendParts")||(depth0 && lookupProperty(depth0,"extendParts"))||alias2).call(alias1,{"name":"extendParts","hash":{"attributes":(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),"parentObj":(depth0 != null ? lookupProperty(depth0,"parentObj") : depth0),"properties":(depth0 != null ? lookupProperty(depth0,"properties") : depth0),"parts":(depth0 != null ? lookupProperty(depth0,"parts") : depth0)},"data":data,"loc":{"start":{"line":5,"column":51},"end":{"line":5,"column":160}}}),{"hash":{"scope":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"iframe","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":6,"column":11}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["developmentError"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-dev-error-container\">\r\n    <div class=\"emp-dev-error-contents\">\r\n        <p>\r\n            <strong>"
    + alias4(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"title","hash":{},"data":data,"loc":{"start":{"line":4,"column":20},"end":{"line":4,"column":31}}}) : helper)))
    + "</strong>"
    + alias4(((helper = (helper = lookupProperty(helpers,"text") || (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"text","hash":{},"data":data,"loc":{"start":{"line":5,"column":12},"end":{"line":5,"column":22}}}) : helper)))
    + "</p>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["ec-add-group-component"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <li class=\"ec-not-content-item\">\r\n                            <em>"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"sNoItemsText") || (depth0 != null ? lookupProperty(depth0,"sNoItemsText") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"sNoItemsText","hash":{},"data":data,"loc":{"start":{"line":17,"column":32},"end":{"line":17,"column":48}}}) : helper)))
    + "</em>\r\n                        </li>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <li class=\"ec-not-content-item cui-hide-from-screen\">\r\n                            <em>"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"sNoItemsText") || (depth0 != null ? lookupProperty(depth0,"sNoItemsText") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"sNoItemsText","hash":{},"data":data,"loc":{"start":{"line":21,"column":32},"end":{"line":21,"column":48}}}) : helper)))
    + "</em>\r\n                        </li>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"aItems") : depth0),{"name":"each","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":23,"column":24},"end":{"line":32,"column":33}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                            <li>\r\n                                <span class=\"ec-pill\">\r\n                                    <span class=\"ec-pill-item-text\">"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n                                    <button type=\"button\">\r\n                                        <span>&times;</span>\r\n                                    </button>\r\n                                </span>\r\n                            </li>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"ec-add-group-component emp-collapse\">\r\n    <div class=\"ec-group-wrapper\">\r\n        <header>\r\n            "
    + alias4(((helper = (helper = lookupProperty(helpers,"sTitle") || (depth0 != null ? lookupProperty(depth0,"sTitle") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sTitle","hash":{},"data":data,"loc":{"start":{"line":4,"column":12},"end":{"line":4,"column":22}}}) : helper)))
    + "\r\n        </header>\r\n        <div class=\"ec-add-group-header\">\r\n            <div class=\"ec-sub-header\">\r\n                "
    + alias4(((helper = (helper = lookupProperty(helpers,"sSubTitle") || (depth0 != null ? lookupProperty(depth0,"sSubTitle") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sSubTitle","hash":{},"data":data,"loc":{"start":{"line":8,"column":16},"end":{"line":8,"column":29}}}) : helper)))
    + "\r\n            </div>\r\n        </div>\r\n        <div class=\"ec-add-group-contents\">\r\n            <div class=\"ec-add-group-open-header\">\r\n                <header>"
    + alias4(((helper = (helper = lookupProperty(helpers,"sContentHeader") || (depth0 != null ? lookupProperty(depth0,"sContentHeader") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sContentHeader","hash":{},"data":data,"loc":{"start":{"line":13,"column":24},"end":{"line":13,"column":42}}}) : helper)))
    + "</header>\r\n                <ul class=\"ec-pill-list\">\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"aItems") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":15,"column":20},"end":{"line":33,"column":31}}})) != null ? stack1 : "")
    + "                </ul>\r\n                <div class=\"cui-row\">\r\n                    <div class=\"emp-col-full\">\r\n                        <div class=\"emp-composite emp-search-composite\">\r\n                            <div class=\"cui-label\">\r\n                                <label for=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"sAddId") || (depth0 != null ? lookupProperty(depth0,"sAddId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sAddId","hash":{},"data":data,"loc":{"start":{"line":39,"column":44},"end":{"line":39,"column":54}}}) : helper)))
    + "\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"sAddLabel") || (depth0 != null ? lookupProperty(depth0,"sAddLabel") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sAddLabel","hash":{},"data":data,"loc":{"start":{"line":39,"column":56},"end":{"line":39,"column":69}}}) : helper)))
    + "</label>\r\n                            </div>\r\n                            <div class=\"cui-data emp-search\">\r\n                                <div class=\"emp-field\">\r\n                                    <input type=\"text\" size=\"20\" class=\"add-input\" id=\""
    + alias4(((helper = (helper = lookupProperty(helpers,"sAddId") || (depth0 != null ? lookupProperty(depth0,"sAddId") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"sAddId","hash":{},"data":data,"loc":{"start":{"line":43,"column":87},"end":{"line":43,"column":97}}}) : helper)))
    + "\" />\r\n                                </div>\r\n                                <div class=\"emp-field\">\r\n                                    <button type=\"button\" class=\"add-button\">Add</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"ec-header-control\">\r\n            <a href=\"#\" role=\"button\" class=\"ec-add-edit-control\">Edit</a>\r\n        </div>\r\n    </div>\r\n</div>";
},"useData":true});

this["JST"]["ec-manage-group-component"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "                    <i class=\"ec-has-emails-icon reserve-space\"></i>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "                    <i class=\"ec-has-emails-icon\"></i>\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    return "                    <i class=\"ec-has-phones-icon reserve-space\"></i>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    return "                    <i class=\"ec-has-phones-icon\"></i>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    return "                            <li class=\"no-email-subscribed\">\r\n                                <em>No emails subscribed</em>\r\n                            </li>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                            <li class=\"no-email-subscribed cui-hide-from-screen\">\r\n                                <em>No emails subscribed</em>\r\n                            </li>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"aEmails") : depth0),{"name":"each","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":52,"column":28},"end":{"line":61,"column":37}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                                <li>\r\n                                    <span class=\"ec-pill\">\r\n                                        <span class=\"ec-pill-item-text\">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n                                        <button type=\"button\" data-id=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"id") : depth0), depth0))
    + "\">\r\n                                            <span>&times;</span>\r\n                                        </button>\r\n                                    </span>\r\n                                </li>\r\n";
},"14":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                                            <option id=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"id") : depth0), depth0))
    + "\">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</option>\r\n";
},"16":function(container,depth0,helpers,partials,data) {
    return "                            <li class=\"no-phones-subscribed\">\r\n                                <em>No phone numbers subscribed</em>\r\n                            </li>\r\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                            <li class=\"no-phones-subscribed cui-hide-from-screen\">\r\n                                <em>No phone numbers subscribed</em>\r\n                            </li>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"aPhones") : depth0),{"name":"each","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":105,"column":28},"end":{"line":114,"column":37}}})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"ec-manage-group-component emp-collapse\">\r\n    <div class=\"ec-header-group-wrapper\">\r\n        <div class=\"ec-title-instructions\">\r\n            <header>\r\n                <span class=\"ec-header-title\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"sTitle") || (depth0 != null ? lookupProperty(depth0,"sTitle") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"sTitle","hash":{},"data":data,"loc":{"start":{"line":5,"column":46},"end":{"line":5,"column":56}}}) : helper)))
    + "</span>\r\n                <div class=\"ec-short-instructions\"></div>\r\n                <div class=\"ec-long-instructions\"></div>\r\n            </header>\r\n        </div>\r\n        <div class=\"ec-header-icons\">\r\n            <div class=\"ec-icon-container\">\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"aEmails") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":12,"column":16},"end":{"line":16,"column":27}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"aPhones") : depth0),{"name":"unless","hash":{},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":18,"column":16},"end":{"line":22,"column":27}}})) != null ? stack1 : "")
    + "                \r\n            </div>\r\n        </div>\r\n        <div class=\"ec-header-edit\">\r\n            <a role=\"button\" href=\"#\" class=\"ec-manage-edit-control\">Edit</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"ec-manage-content-wrapper\">\r\n        <header>\r\n            Where you receive these notifications\r\n        </header>\r\n        <div class=\"email-text-row\">\r\n            <div class=\"email-text-columns\">\r\n                <div class=\"email-text-header\">\r\n                    <div class=\"header-icon-wrapper\">\r\n                        <i class=\"ec-has-emails-icon\"></i>\r\n                        <span>Email</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"email-text-subscriptions\">\r\n                    <ul class=\"email-subscriptions\">\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"aEmails") : depth0),{"name":"unless","hash":{},"fn":container.program(9, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":44,"column":24},"end":{"line":62,"column":35}}})) != null ? stack1 : "")
    + "                    </ul>\r\n                    <div class=\"ec-email-text-add-row\">\r\n                        <div class=\"emp-composite emp-search-composite\">\r\n                            <div class=\"cui-label\">\r\n                                <label for=\"\">Add email:</label>\r\n                            </div>\r\n                            <div class=\"cui-data emp-search\">\r\n                                <div class=\"emp-field\">\r\n                                    <select class=\"add-email-input\">\r\n                                        <option></option>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"aEmailAvaliable") : depth0),{"name":"each","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":73,"column":40},"end":{"line":75,"column":49}}})) != null ? stack1 : "")
    + "                                    </select>\r\n                                </div>\r\n                                <div class=\"emp-field\">\r\n                                    <button type=\"button\" class=\"add-email-button\">Add</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"email-text-row\">\r\n            <div class=\"email-text-columns\">\r\n                <div class=\"email-text-header\">\r\n                    <div class=\"header-icon-wrapper\">\r\n                        <i class=\"ec-has-phones-icon\"></i>\r\n                        <span>SMS</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"email-text-subscriptions\">\r\n                    <ul class=\"phone-subscriptions\">\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"aPhones") : depth0),{"name":"unless","hash":{},"fn":container.program(16, data, 0),"inverse":container.program(18, data, 0),"data":data,"loc":{"start":{"line":97,"column":24},"end":{"line":115,"column":35}}})) != null ? stack1 : "")
    + "                    </ul>\r\n                    <div class=\"ec-email-text-add-row\">\r\n                        <div class=\"emp-composite emp-search-composite\">\r\n                            <div class=\"cui-label\">\r\n                                <label for=\"\">Add Phone:</label>\r\n                            </div>\r\n                            <div class=\"cui-data emp-search\">\r\n                                <div class=\"emp-field\">\r\n                                    <select class=\"add-phone-input\">\r\n                                        <option></option>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"aPhoneAvaliable") : depth0),{"name":"each","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":126,"column":40},"end":{"line":128,"column":49}}})) != null ? stack1 : "")
    + "                                    </select>\r\n                                </div>\r\n                                <div class=\"emp-field\">\r\n                                    <button type=\"button\" class=\"add-phone-button\">Add</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["error"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span  "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"error","defaults":"{\"className\":\"emp-framework-error emp-icon-ghost\", \"title\":\"click to see error message\", \"tabindex\": 0}"},"data":data,"loc":{"start":{"line":2,"column":65},"end":{"line":2,"column":211}}})},"data":data,"loc":{"start":{"line":2,"column":23},"end":{"line":2,"column":212}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":2,"column":11},"end":{"line":2,"column":214}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>";
},"3":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span  "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"error","defaults":"{\"className\":\"emp-framework-error emp-icon-ghost\", \"title\":\"click to see error message\", \"tabindex\": 0}"},"data":data,"loc":{"start":{"line":6,"column":65},"end":{"line":6,"column":211}}})},"data":data,"loc":{"start":{"line":6,"column":23},"end":{"line":6,"column":212}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":214}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"tableColumn","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":9,"column":12}}})) != null ? stack1 : "");
},"useData":true});

this["JST"]["external-agency-footer"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-agency-footer being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":81}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_agency-footer"),depth0,{"name":"_agency-footer","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["external-agency-header"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-agency-header being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":81}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_agency-header"),depth0,{"name":"_agency-header","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["external-group"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-group being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":73}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_group"),depth0,{"name":"_group","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["external-pageinfo"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-pageinfo being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":76}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_pageInfo"),depth0,{"name":"_pageInfo","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["external-universal-footer"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-universal-footer being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":84}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_universal-footer"),depth0,{"name":"_universal-footer","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["external-universal-header"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-universal-header being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":84}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_universal-header"),depth0,{"name":"_universal-header","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["external-user-account-popover"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <div class=\"emp-user-information emp-user-account-popover-section\">\r\n        <div class=\"cui-row emp-user-name\">\r\n            <div class=\"column emp-col-full\">\r\n                <span>"
    + alias4(((helper = (helper = lookupProperty(helpers,"userRealName") || (depth0 != null ? lookupProperty(depth0,"userRealName") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"userRealName","hash":{},"data":data,"loc":{"start":{"line":5,"column":22},"end":{"line":5,"column":38}}}) : helper)))
    + "</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"cui-row emp-user-company\">\r\n            <div class=\"column emp-col-full\">\r\n                <span>"
    + alias4(((helper = (helper = lookupProperty(helpers,"userCompany") || (depth0 != null ? lookupProperty(depth0,"userCompany") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"userCompany","hash":{},"data":data,"loc":{"start":{"line":10,"column":22},"end":{"line":10,"column":37}}}) : helper)))
    + "</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <div class=\"emp-user-account-information emp-user-account-popover-section\">\r\n        <div class=\"cui-row emp-user-account-type\">\r\n            <div class=\"column emp-col-full\">\r\n                <span class=\"static-list\">Account:</span>\r\n                <span>"
    + alias4(((helper = (helper = lookupProperty(helpers,"accountType") || (depth0 != null ? lookupProperty(depth0,"accountType") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"accountType","hash":{},"data":data,"loc":{"start":{"line":21,"column":22},"end":{"line":21,"column":37}}}) : helper)))
    + "</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"cui-row emp-user-account-role\">\r\n            <div class=\"column emp-col-full\">\r\n                <span class=\"static-list\">Role:</span>\r\n                <span>"
    + alias4(((helper = (helper = lookupProperty(helpers,"role") || (depth0 != null ? lookupProperty(depth0,"role") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"role","hash":{},"data":data,"loc":{"start":{"line":27,"column":22},"end":{"line":27,"column":30}}}) : helper)))
    + "</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"information","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":14,"column":11}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"role","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":16,"column":0},"end":{"line":31,"column":11}}})) != null ? stack1 : "");
},"useData":true});

this["JST"]["field"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_file"),depth0,{"name":"_file","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(31, data, 0),"data":data,"loc":{"start":{"line":16,"column":4},"end":{"line":140,"column":12}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"radio,checkbox","op":"!in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(5, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":19,"column":8},"end":{"line":107,"column":20}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"noFieldWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(6, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":21,"column":12},"end":{"line":38,"column":24}}})) != null ? stack1 : "");
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"ignoreRequired") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":23,"column":16},"end":{"line":32,"column":24}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"state":(depth0 != null ? lookupProperty(depth0,"state") : depth0),"scope":"field","validationError":((stack1 = (depth0 != null ? lookupProperty(depth0,"message") : depth0)) != null ? lookupProperty(stack1,"type") : stack1),"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"federal":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"federal") : stack1),"defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":24,"column":79},"end":{"line":24,"column":248}}})},"data":data,"loc":{"start":{"line":24,"column":37},"end":{"line":24,"column":249}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":24,"column":25},"end":{"line":24,"column":252}}}))
    + ">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"state":(depth0 != null ? lookupProperty(depth0,"state") : depth0),"scope":"field","validationError":((stack1 = (depth0 != null ? lookupProperty(depth0,"message") : depth0)) != null ? lookupProperty(stack1,"type") : stack1),"total":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"federal":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"federal") : stack1),"required":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":29,"column":79},"end":{"line":29,"column":285}}})},"data":data,"loc":{"start":{"line":29,"column":37},"end":{"line":29,"column":286}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":29,"column":25},"end":{"line":29,"column":289}}}))
    + ">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":(depth0 != null ? lookupProperty(depth0,"flip") : depth0),"op":"||","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"flip") : stack1)},"fn":container.program(14, data, 0),"inverse":container.program(17, data, 0),"data":data,"loc":{"start":{"line":43,"column":12},"end":{"line":105,"column":24}}})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"noFieldWrap") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":45,"column":16},"end":{"line":54,"column":24}}})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"field","defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":51,"column":79},"end":{"line":51,"column":147}}})},"data":data,"loc":{"start":{"line":51,"column":37},"end":{"line":51,"column":148}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":51,"column":25},"end":{"line":51,"column":151}}}))
    + ">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"sectionHeader") : depth0),{"name":"if","hash":{},"fn":container.program(18, data, 0),"inverse":container.program(21, data, 0),"data":data,"loc":{"start":{"line":59,"column":16},"end":{"line":103,"column":24}}})) != null ? stack1 : "");
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"field","defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":61,"column":79},"end":{"line":61,"column":147}}})},"data":data,"loc":{"start":{"line":61,"column":37},"end":{"line":61,"column":148}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":61,"column":25},"end":{"line":61,"column":151}}}))
    + ">\r\n                        <div class=\"cui-data-left "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1),{"name":"if","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":62,"column":50},"end":{"line":62,"column":101}}})) != null ? stack1 : "")
    + "\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","hash":{"flip":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n                    </div>";
},"19":function(container,depth0,helpers,partials,data) {
    return "emp-boolean-image";
},"21":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"insideTable") : depth0),{"name":"if","hash":{},"fn":container.program(22, data, 0),"inverse":container.program(24, data, 0),"data":data,"loc":{"start":{"line":69,"column":20},"end":{"line":101,"column":28}}})) != null ? stack1 : "");
},"22":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"field","defaults":"{}"},"data":data,"loc":{"start":{"line":72,"column":84},"end":{"line":72,"column":128}}})},"data":data,"loc":{"start":{"line":72,"column":42},"end":{"line":72,"column":129}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":72,"column":30},"end":{"line":72,"column":132}}}))
    + ">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "<span>";
},"24":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"noFieldWrap") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(25, data, 0),"data":data,"loc":{"start":{"line":77,"column":24},"end":{"line":99,"column":32}}})) != null ? stack1 : "");
},"25":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1),{"name":"if","hash":{},"fn":container.program(26, data, 0),"inverse":container.program(29, data, 0),"data":data,"loc":{"start":{"line":83,"column":28},"end":{"line":97,"column":36}}})) != null ? stack1 : "");
},"26":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"field","defaults":"{\"className\": \"emp-field cui-data-left emp-boolean-image\"}"},"data":data,"loc":{"start":{"line":84,"column":91},"end":{"line":84,"column":191}}})},"data":data,"loc":{"start":{"line":84,"column":49},"end":{"line":84,"column":192}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":84,"column":37},"end":{"line":84,"column":195}}}))
    + ">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","hash":{"flip":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":87,"column":36},"end":{"line":89,"column":44}}})) != null ? stack1 : "")
    + "</div>";
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"29":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"field","defaults":"{\"className\": \"emp-field cui-data-left\"}"},"data":data,"loc":{"start":{"line":93,"column":91},"end":{"line":93,"column":173}}})},"data":data,"loc":{"start":{"line":93,"column":49},"end":{"line":93,"column":174}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":93,"column":37},"end":{"line":93,"column":177}}}))
    + ">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_fieldLayout"),depth0,{"name":"_fieldLayout","hash":{"flip":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n\r\n";
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"if","hash":{},"fn":container.program(32, data, 0),"inverse":container.program(41, data, 0),"data":data,"loc":{"start":{"line":112,"column":8},"end":{"line":134,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"messages") : depth0),{"name":"if","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":136,"column":8},"end":{"line":138,"column":16}}})) != null ? stack1 : "");
},"32":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"hidden","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(33, data, 0),"inverse":container.program(35, data, 0),"data":data,"loc":{"start":{"line":114,"column":12},"end":{"line":118,"column":23}}})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_input"),depth0,{"name":"_input","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"sortOn","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(37, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":123,"column":16},"end":{"line":125,"column":27}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"dateRange","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(39, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":128,"column":16},"end":{"line":130,"column":27}}})) != null ? stack1 : "")
    + "            </div>";
},"33":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\": \"emp-field emp-hidden-field\"}"},"data":data,"loc":{"start":{"line":115,"column":33},"end":{"line":115,"column":121}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":115,"column":21},"end":{"line":115,"column":124}}}))
    + ">";
},"35":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":117,"column":33},"end":{"line":117,"column":104}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":117,"column":21},"end":{"line":117,"column":107}}}))
    + ">\r\n";
},"37":function(container,depth0,helpers,partials,data) {
    return "                    <span>on</span>\r\n";
},"39":function(container,depth0,helpers,partials,data) {
    return "                    <span>to</span>\r\n";
},"41":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_input"),depth0,{"name":"_input","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"file","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":9,"column":0},"end":{"line":142,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["grid"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"grid-row","style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"width":(depth0 != null ? lookupProperty(depth0,"width") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"extend":(depth0 != null ? lookupProperty(depth0,"extend") : depth0),"defaults":"{\"className\":\"cui-row\"}"},"data":data,"loc":{"start":{"line":4,"column":63},"end":{"line":4,"column":207}}})},"data":data,"loc":{"start":{"line":4,"column":21},"end":{"line":4,"column":208}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":4,"column":9},"end":{"line":4,"column":210}}}))
    + "></div>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"noWidth") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":10,"column":4},"end":{"line":32,"column":11}}})) != null ? stack1 : "")
    + "\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n        <div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"grid-column","style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"push":(depth0 != null ? lookupProperty(depth0,"push") : depth0),"extend":(depth0 != null ? lookupProperty(depth0,"extend") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":12,"column":67},"end":{"line":12,"column":191}}})},"data":data,"loc":{"start":{"line":12,"column":25},"end":{"line":12,"column":192}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":12,"column":13},"end":{"line":12,"column":194}}}))
    + "></div>\r\n\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"width") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":17,"column":8},"end":{"line":30,"column":16}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"grid-column","style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"push":(depth0 != null ? lookupProperty(depth0,"push") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"extend":(depth0 != null ? lookupProperty(depth0,"extend") : depth0),"width":(depth0 != null ? lookupProperty(depth0,"width") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":19,"column":71},"end":{"line":19,"column":212}}})},"data":data,"loc":{"start":{"line":19,"column":29},"end":{"line":19,"column":213}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":19,"column":17},"end":{"line":19,"column":215}}}))
    + "></div>";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"cuiSize") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.program(12, data, 0),"data":data,"loc":{"start":{"line":22,"column":12},"end":{"line":28,"column":20}}})) != null ? stack1 : "");
},"10":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"grid-column","style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"cuiSize":(depth0 != null ? lookupProperty(depth0,"cuiSize") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"extend":(depth0 != null ? lookupProperty(depth0,"extend") : depth0),"push":(depth0 != null ? lookupProperty(depth0,"push") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":24,"column":75},"end":{"line":24,"column":220}}})},"data":data,"loc":{"start":{"line":24,"column":33},"end":{"line":24,"column":221}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":24,"column":21},"end":{"line":24,"column":223}}}))
    + "></div>";
},"12":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"grid-column","style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"width":(depth0 != null ? lookupProperty(depth0,"width") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"extend":(depth0 != null ? lookupProperty(depth0,"extend") : depth0),"defaults":"{\"className\":\"emp-col-full\"}"},"data":data,"loc":{"start":{"line":27,"column":75},"end":{"line":27,"column":227}}})},"data":data,"loc":{"start":{"line":27,"column":33},"end":{"line":27,"column":228}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":27,"column":21},"end":{"line":27,"column":231}}}))
    + "></div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"row","op":"in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":5,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"column","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":0},"end":{"line":34,"column":12}}})) != null ? stack1 : "");
},"useData":true});

this["JST"]["group"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"title-instructions","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":32,"column":15}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <section class=\"emp-instructional-header\">\r\n            <header>\r\n                <div class=\"emp-section-title\">\r\n                    <h3>\r\n                        "
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":24},"end":{"line":10,"column":31}}})) != null ? stack1 : "")
    + "                    </h3>\r\n                </div>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"instructions") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":13,"column":16},"end":{"line":19,"column":23}}})) != null ? stack1 : "")
    + "            </header>\r\n        </section>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <div class=\"emp-section-instructions\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"instructions") : depth0),{"name":"each","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":15,"column":24},"end":{"line":17,"column":33}}})) != null ? stack1 : "")
    + "                    </div>\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_output"),depth0,{"name":"_output","hash":{"raw":true},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    return "";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <section\r\n        "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"collapse":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":35,"column":62},"end":{"line":35,"column":155}}})},"data":data,"loc":{"start":{"line":35,"column":20},"end":{"line":35,"column":156}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":35,"column":8},"end":{"line":35,"column":159}}}))
    + ">\r\n        <header>\r\n            <div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"emp-section-title\"}"},"data":data,"loc":{"start":{"line":37,"column":29},"end":{"line":37,"column":107}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":110}}}))
    + ">\r\n                <h3>\r\n                    "
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"header") : depth0)) != null ? lookupProperty(stack1,"titleEnhancements") : stack1),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":20},"end":{"line":45,"column":28}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.program(14, data, 0),"data":data,"loc":{"start":{"line":47,"column":20},"end":{"line":53,"column":27}}})) != null ? stack1 : "")
    + "\r\n\r\n                </h3>\r\n            </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"header") : depth0)) != null ? lookupProperty(stack1,"columns") : stack1),{"name":"each","hash":{},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":59,"column":12},"end":{"line":84,"column":22}}})) != null ? stack1 : "")
    + "        </header>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"instructions") : depth0),{"name":"if","hash":{},"fn":container.program(24, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":97,"column":8},"end":{"line":103,"column":15}}})) != null ? stack1 : "")
    + "\r\n    </section>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"header") : depth0)) != null ? lookupProperty(stack1,"titleEnhancements") : stack1)) != null ? lookupProperty(stack1,"contents") : stack1),{"name":"each","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":42,"column":24},"end":{"line":44,"column":34}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":43,"column":33},"end":{"line":43,"column":63}}}),depth0,{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"header") : depth0)) != null ? lookupProperty(stack1,"help") : stack1),{"name":"if","hash":{},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":50,"column":24},"end":{"line":52,"column":31}}})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),((stack1 = (depth0 != null ? lookupProperty(depth0,"header") : depth0)) != null ? lookupProperty(stack1,"help") : stack1),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"emp-section-field\"}"},"data":data,"loc":{"start":{"line":60,"column":33},"end":{"line":60,"column":111}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":60,"column":21},"end":{"line":60,"column":114}}}))
    + ">\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"if","hash":{},"fn":container.program(18, data, 0),"inverse":container.program(19, data, 0),"data":data,"loc":{"start":{"line":62,"column":20},"end":{"line":82,"column":28}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"each","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":64,"column":24},"end":{"line":72,"column":34}}})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(20, data, 0),"inverse":container.program(22, data, 0),"data":data,"loc":{"start":{"line":66,"column":28},"end":{"line":70,"column":36}}})) != null ? stack1 : "");
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":67,"column":37},"end":{"line":67,"column":67}}}),depth0,{"hash":{"sectionHeader":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"22":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0));
},"24":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <div class=\"emp-section-instructions\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"instructions") : depth0),{"name":"each","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":99,"column":12},"end":{"line":101,"column":21}}})) != null ? stack1 : "")
    + "        </div>\r\n";
},"25":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_output"),depth0,{"name":"_output","hash":{"raw":true},"data":data,"indent":"                ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"type") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(10, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":106,"column":7}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["groupWrap"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"emp-section-in-section-container\">\r\n</div>";
},"useData":true});

this["JST"]["icon"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(((helper = (helper = lookupProperty(helpers,"text") || (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"text","hash":{},"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":3,"column":18}}}) : helper)));
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"tile") : stack1), depth0));
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<i "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"skipAttributes":"name,for,type,value,checked,required","defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"title":(depth0 != null ? lookupProperty(depth0,"title") : depth0),"iconClass":(depth0 != null ? lookupProperty(depth0,"icon") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":57},"end":{"line":1,"column":119}}})},"data":data,"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":175}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":3},"end":{"line":1,"column":178}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"test") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":6,"column":12}}})) != null ? stack1 : "")
    + "</i>\r\n";
},"useData":true});

this["JST"]["image"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_image"),depth0,{"name":"_image","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["inputGroup"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-readonly-group\">\r\n        <div class=\"cui-label\">\r\n            <span class=\"cui-legend\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"legend") || (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"legend","hash":{},"data":data,"loc":{"start":{"line":5,"column":37},"end":{"line":5,"column":47}}}) : helper)))
    + "</span>\r\n        </div>\r\n        <div class=\"cui-data\">\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"checkbox,radio","op":"in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":8,"column":12},"end":{"line":15,"column":24}}})) != null ? stack1 : "")
    + "</div>\r\n    </div>";
},"2":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span class=\"emp-data\">"
    + container.escapeExpression((lookupProperty(helpers,"readOnlyInputGroup")||(depth0 && lookupProperty(depth0,"readOnlyInputGroup"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"options") : depth0),{"name":"readOnlyInputGroup","hash":{},"data":data,"loc":{"start":{"line":10,"column":39},"end":{"line":10,"column":76}}}))
    + "</span>";
},"4":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span class=\"emp-data\">"
    + container.escapeExpression((lookupProperty(helpers,"readOnlyInputGroupInputs")||(depth0 && lookupProperty(depth0,"readOnlyInputGroupInputs"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"options") : depth0),{"name":"readOnlyInputGroupInputs","hash":{},"data":data,"loc":{"start":{"line":14,"column":39},"end":{"line":14,"column":82}}}))
    + "</span>\r\n";
},"6":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"fieldSearch") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0, blockParams, depths),"inverse":container.program(9, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":20,"column":4},"end":{"line":24,"column":12}}})) != null ? stack1 : "")
    + "<div class=\"emp-fieldset-contents\" role=\"group\" aria-labelledby=\"\">\r\n	        <div class=\"cui-label\">\r\n	            <legend id=\"\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"legend") || (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"legend","hash":{},"data":data,"loc":{"start":{"line":29,"column":17},"end":{"line":29,"column":29}}}) : helper)))
    + "</legend>\r\n	        </div>\r\n	        <div class=\"cui-data\">\r\n	            <div "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"radio,checkbox","op":"in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(11, data, 0, blockParams, depths),"inverse":container.program(14, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":34,"column":18},"end":{"line":34,"column":190}}})) != null ? stack1 : "")
    + ">\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"radio,checkbox","op":"in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(16, data, 0, blockParams, depths),"inverse":container.program(22, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":37,"column":17},"end":{"line":69,"column":29}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"fieldSearch") : depth0),{"name":"if","hash":{},"fn":container.program(31, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":72,"column":17},"end":{"line":74,"column":25}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"entityLookup","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(33, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":76,"column":17},"end":{"line":82,"column":28}}})) != null ? stack1 : "")
    + "	            </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"itag") : depth0),{"name":"if","hash":{},"fn":container.program(36, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":85,"column":13},"end":{"line":87,"column":21}}})) != null ? stack1 : "")
    + "</div>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(38, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":89,"column":9},"end":{"line":91,"column":17}}})) != null ? stack1 : "")
    + "</div>\r\n\r\n    </fieldset>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<fieldset "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"required":(lookupProperty(helpers,"legendRequired")||(depth0 && lookupProperty(depth0,"legendRequired"))||alias2).call(alias1,depth0,{"name":"legendRequired","hash":{},"data":data,"loc":{"start":{"line":21,"column":204},"end":{"line":21,"column":225}}}),"scope":"inputGroup","style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"defaults":"{\"className\":\"emp-search-composite emp-search-input-group\"}"},"data":data,"loc":{"start":{"line":21,"column":72},"end":{"line":21,"column":227}}})},"data":data,"loc":{"start":{"line":21,"column":30},"end":{"line":21,"column":228}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":231}}}))
    + ">";
},"9":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<fieldset "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"federal":(lookupProperty(helpers,"federalMarker")||(depth0 && lookupProperty(depth0,"federalMarker"))||alias2).call(alias1,depth0,{"name":"federalMarker","hash":{},"data":data,"loc":{"start":{"line":23,"column":177},"end":{"line":23,"column":197}}}),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"required":(lookupProperty(helpers,"legendRequired")||(depth0 && lookupProperty(depth0,"legendRequired"))||alias2).call(alias1,depth0,{"name":"legendRequired","hash":{},"data":data,"loc":{"start":{"line":23,"column":130},"end":{"line":23,"column":151}}}),"scope":"inputGroup","defaults":"{}"},"data":data,"loc":{"start":{"line":23,"column":72},"end":{"line":23,"column":199}}})},"data":data,"loc":{"start":{"line":23,"column":30},"end":{"line":23,"column":200}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":23,"column":18},"end":{"line":23,"column":203}}}))
    + ">\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return " "
    + ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"regularInputs") : depth0),{"name":"unless","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":34,"column":71},"end":{"line":34,"column":140}}})) != null ? stack1 : "")
    + " ";
},"12":function(container,depth0,helpers,partials,data) {
    return "class=\"cui-selection-group\"";
},"14":function(container,depth0,helpers,partials,data) {
    return " class=\"emp-input-collection\" ";
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"options") : depth0),{"name":"each","hash":{},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":39,"column":21},"end":{"line":48,"column":31}}})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"regularInputs") : depth0),{"name":"unless","hash":{},"fn":container.program(18, data, 0),"inverse":container.program(20, data, 0),"data":data,"loc":{"start":{"line":42,"column":25},"end":{"line":46,"column":37}}})) != null ? stack1 : "");
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),depth0,{"name":"_field","hash":{"isGroup":"true","noWrap":"true","noFieldWrap":"true","flip":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),depth0,{"name":"_field","hash":{"isGroup":"true","noWrap":"true","flip":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"22":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"options") : depth0),{"name":"each","hash":{},"fn":container.program(23, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":52,"column":21},"end":{"line":67,"column":31}}})) != null ? stack1 : "");
},"23":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depths[1] != null ? lookupProperty(depths[1],"ignoreRequired") : depths[1]),{"name":"if","hash":{},"fn":container.program(24, data, 0, blockParams, depths),"inverse":container.program(26, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":53,"column":25},"end":{"line":66,"column":33}}})) != null ? stack1 : "");
},"24":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),depth0,{"name":"_field","hash":{"ignoreRequired":"true","isGroup":"true","noWrap":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"26":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(27, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":58,"column":29},"end":{"line":62,"column":36}}})) != null ? stack1 : "")
    + "\r\n	                            "
    + ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||alias2).call(alias1,(lookupProperty(helpers,"extendData")||(depth0 && lookupProperty(depth0,"extendData"))||alias2).call(alias1,depth0,{"name":"extendData","hash":{"isGroup":"true","noWrap":"true"},"data":data,"loc":{"start":{"line":64,"column":45},"end":{"line":64,"column":91}}}),{"name":"rendererHook","hash":{"scope":"inputGroup"},"fn":container.program(29, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":64,"column":29},"end":{"line":64,"column":129}}})) != null ? stack1 : "")
    + "\r\n\r\n";
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	                                <div class=\"emp-field\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "	                                </div>\r\n";
},"29":function(container,depth0,helpers,partials,data) {
    return "";
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"fieldSearch") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":73,"column":26},"end":{"line":73,"column":68}}}),(depth0 != null ? lookupProperty(depth0,"fieldSearch") : depth0),{"hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"33":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"clearButton") : depth0),{"name":"if","hash":{},"fn":container.program(34, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":77,"column":21},"end":{"line":81,"column":28}}})) != null ? stack1 : "");
},"34":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	                        <div class=\"emp-field\">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"clearButton") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":79,"column":34},"end":{"line":79,"column":76}}}),(depth0 != null ? lookupProperty(depth0,"clearButton") : depth0),{"hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"36":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<button class=\"cui-icon emp-icon-help\" data-tooltip-source="
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"itag") : depth0)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + " title=\"More information\" type=\"button\">More information</button>\r\n";
},"38":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"readOnly") : depth0)},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.program(6, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":96,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true,"useDepths":true});

this["JST"]["link"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"link","state":"disabled","linkType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":2,"column":64},"end":{"line":2,"column":144}}})},"data":data,"loc":{"start":{"line":2,"column":22},"end":{"line":2,"column":145}}}),{"name":"attribute","hash":{"skip":"role,href,title"},"data":data,"loc":{"start":{"line":2,"column":10},"end":{"line":2,"column":170}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"disabledText") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":7,"column":16}}})) != null ? stack1 : "")
    + "</span>";
},"2":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"disabledText") : depth0), depth0));
},"4":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0));
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"globalHeader","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(7, data, 0),"inverse":container.program(12, data, 0),"data":data,"loc":{"start":{"line":11,"column":4},"end":{"line":29,"column":16}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"sendID","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":13,"column":8},"end":{"line":17,"column":20}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"getID","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":8},"end":{"line":23,"column":20}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"link","selected":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"state":"active","linkType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{\"className\":\"emp-button-send-id\"}"},"data":data,"loc":{"start":{"line":15,"column":69},"end":{"line":15,"column":202}}})},"data":data,"loc":{"start":{"line":15,"column":27},"end":{"line":15,"column":203}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":15,"column":15},"end":{"line":15,"column":205}}}))
    + ">Send ID</a>\r\n\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"link","selected":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"state":"active","linkType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{\"className\":\"emp-button-get-id\"}"},"data":data,"loc":{"start":{"line":21,"column":69},"end":{"line":21,"column":201}}})},"data":data,"loc":{"start":{"line":21,"column":27},"end":{"line":21,"column":202}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":21,"column":15},"end":{"line":21,"column":204}}}))
    + ">Get ID</a>\r\n\r\n";
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"link","selected":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"state":"active","linkType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":27,"column":65},"end":{"line":27,"column":183}}})},"data":data,"loc":{"start":{"line":27,"column":23},"end":{"line":27,"column":184}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":27,"column":11},"end":{"line":27,"column":186}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"popup") : depth0),{"name":"if","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":28,"column":27},"end":{"line":28,"column":83}}})) != null ? stack1 : "")
    + "</a>\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_popup"),depth0,{"name":"_popup","hash":{"scope":"link"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"true","op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"readOnly") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":31,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["lists"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"ordered","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":8,"column":16}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<ol "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":(depth0 != null ? lookupProperty(depth0,"scope") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"collapse":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":4,"column":66},"end":{"line":4,"column":184}}})},"data":data,"loc":{"start":{"line":4,"column":24},"end":{"line":4,"column":185}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":4,"column":12},"end":{"line":4,"column":188}}}))
    + ">";
},"4":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<ul "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":(depth0 != null ? lookupProperty(depth0,"scope") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"collapse":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":7,"column":66},"end":{"line":7,"column":184}}})},"data":data,"loc":{"start":{"line":7,"column":24},"end":{"line":7,"column":185}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":7,"column":12},"end":{"line":7,"column":188}}}))
    + ">\r\n";
},"6":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<li "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"listAttributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"selected":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":14,"column":70},"end":{"line":14,"column":140}}})},"data":data,"loc":{"start":{"line":14,"column":24},"end":{"line":14,"column":141}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":14,"column":12},"end":{"line":14,"column":144}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0, blockParams, depths),"inverse":container.program(13, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":15,"column":8},"end":{"line":54,"column":16}}})) != null ? stack1 : "")
    + "</li>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"each","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":17,"column":12},"end":{"line":27,"column":22}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":19,"column":16},"end":{"line":25,"column":24}}})) != null ? stack1 : "");
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":21,"column":25},"end":{"line":21,"column":55}}}),depth0,{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0));
},"13":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"key-value","op":"===","v1":(depths[1] != null ? lookupProperty(depths[1],"style") : depths[1])},"fn":container.program(14, data, 0, blockParams, depths),"inverse":container.program(16, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":31,"column":12},"end":{"line":52,"column":24}}})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var helper, alias1=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                <div><strong>"
    + alias1(((helper = (helper = lookupProperty(helpers,"key") || (data && lookupProperty(data,"key"))) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"key","hash":{},"data":data,"loc":{"start":{"line":33,"column":29},"end":{"line":33,"column":39}}}) : helper)))
    + "</strong> <span>"
    + alias1(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span></div>";
},"16":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(17, data, 0, blockParams, depths),"inverse":container.program(19, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":37,"column":16},"end":{"line":50,"column":24}}})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":38,"column":25},"end":{"line":38,"column":55}}}),depth0,{"hash":{"style":(depths[1] != null ? lookupProperty(depths[1],"style") : depths[1]),"scope":(depths[1] != null ? lookupProperty(depths[1],"scope") : depths[1])},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(20, data, 0),"data":data,"loc":{"start":{"line":41,"column":20},"end":{"line":48,"column":27}}})) != null ? stack1 : "")
    + "\r\n";
},"20":function(container,depth0,helpers,partials,data) {
    return "\r\n                        "
    + container.escapeExpression(container.lambda(depth0, depth0))
    + "\r\n\r\n";
},"22":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"ordered","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(23, data, 0),"inverse":container.program(25, data, 0),"data":data,"loc":{"start":{"line":60,"column":4},"end":{"line":64,"column":16}}})) != null ? stack1 : "");
},"23":function(container,depth0,helpers,partials,data) {
    return "</ol>";
},"25":function(container,depth0,helpers,partials,data) {
    return "</ul>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"skipOrderTag","op":"missingProperty","v1":depth0},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":10,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"options") : depth0),{"name":"each","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":4},"end":{"line":57,"column":14}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"op":"!==","v1":(depth0 != null ? lookupProperty(depth0,"skipOrderTag") : depth0)},"fn":container.program(22, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":59,"column":0},"end":{"line":65,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true,"useDepths":true});

this["JST"]["message"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"list") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":3,"column":1},"end":{"line":20,"column":9}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"hasLength","v1":(depth0 != null ? lookupProperty(depth0,"list") : depth0)},"fn":container.program(3, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":5,"column":8},"end":{"line":13,"column":20}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<ul class=\"cui-messages emp-messages\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"list") : depth0),{"name":"each","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":7,"column":16},"end":{"line":9,"column":26}}})) != null ? stack1 : "")
    + "</ul>";
},"4":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<li "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"message","messageType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":8,"column":78},"end":{"line":8,"column":173}}})},"data":data,"loc":{"start":{"line":8,"column":36},"end":{"line":8,"column":174}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":176}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</li>\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    return "<ul class=\"cui-messages emp-messages cui-hidden\"></ul>\r\n";
},"8":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-messages\">\r\n			<div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"message","messageType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":16,"column":62},"end":{"line":16,"column":157}}})},"data":data,"loc":{"start":{"line":16,"column":20},"end":{"line":16,"column":158}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":16,"column":8},"end":{"line":16,"column":161}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</div>\r\n        </div>\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"list") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(14, data, 0),"data":data,"loc":{"start":{"line":23,"column":4},"end":{"line":35,"column":12}}})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<ul class=\"cui-messages\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"list") : depth0),{"name":"each","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":25,"column":12},"end":{"line":27,"column":22}}})) != null ? stack1 : "")
    + "</ul>";
},"12":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <li "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"message","messageType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":26,"column":74},"end":{"line":26,"column":169}}})},"data":data,"loc":{"start":{"line":26,"column":32},"end":{"line":26,"column":170}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":26,"column":20},"end":{"line":26,"column":172}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</li>\r\n";
},"14":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-messages\">\r\n            <div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"message","messageType":(depth0 != null ? lookupProperty(depth0,"type") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":31,"column":71},"end":{"line":31,"column":166}}})},"data":data,"loc":{"start":{"line":31,"column":29},"end":{"line":31,"column":167}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":31,"column":17},"end":{"line":31,"column":170}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</div>\r\n        </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"globalHeader","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(10, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":36,"column":12}}})) != null ? stack1 : "");
},"useData":true});

this["JST"]["notifier"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"scope") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":33,"column":12}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"table-column","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":8},"end":{"line":10,"column":20}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"globalHeader","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":13,"column":8},"end":{"line":18,"column":20}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"formLineNotifier","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":20,"column":8},"end":{"line":25,"column":19}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"title":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"alt") : stack1),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"notifierColor":(depth0 != null ? lookupProperty(depth0,"color") : depth0),"federal":(depth0 != null ? lookupProperty(depth0,"federal") : depth0),"scope":"notifier","notifierLengthClass":(depth0 != null ? lookupProperty(depth0,"text") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":7,"column":72},"end":{"line":7,"column":254}}})},"data":data,"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":255}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":7,"column":18},"end":{"line":7,"column":258}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"notifierColor":(depth0 != null ? lookupProperty(depth0,"color") : depth0),"federal":(depth0 != null ? lookupProperty(depth0,"federal") : depth0),"scope":"notifier","notifierLengthClass":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"alt") : stack1),"defaults":"{}"},"data":data,"loc":{"start":{"line":14,"column":72},"end":{"line":14,"column":238}}})},"data":data,"loc":{"start":{"line":14,"column":30},"end":{"line":14,"column":239}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":14,"column":18},"end":{"line":14,"column":242}}}))
    + ">\r\n                <span class=\"notifier-text\">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n            </span>\r\n\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"title":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"alt") : stack1),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"notifierColor":(depth0 != null ? lookupProperty(depth0,"color") : depth0),"federal":(depth0 != null ? lookupProperty(depth0,"federal") : depth0),"scope":"notifier","notifierLengthClass":(depth0 != null ? lookupProperty(depth0,"text") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":22,"column":72},"end":{"line":22,"column":254}}})},"data":data,"loc":{"start":{"line":22,"column":30},"end":{"line":22,"column":255}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":22,"column":18},"end":{"line":22,"column":258}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"title":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"alt") : stack1),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"notifierColor":(depth0 != null ? lookupProperty(depth0,"color") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"federal":(depth0 != null ? lookupProperty(depth0,"federal") : depth0),"notifierLengthClass":(depth0 != null ? lookupProperty(depth0,"text") : depth0),"scope":"notifier","defaults":"{}"},"data":data,"loc":{"start":{"line":30,"column":68},"end":{"line":30,"column":250}}})},"data":data,"loc":{"start":{"line":30,"column":26},"end":{"line":30,"column":251}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":30,"column":14},"end":{"line":30,"column":254}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"globalHeader","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(12, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":38,"column":4},"end":{"line":54,"column":16}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"notifierLengthClass":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"alt") : stack1),"popup":(depth0 != null ? lookupProperty(depth0,"popup") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"notifierColor":(depth0 != null ? lookupProperty(depth0,"color") : depth0),"federal":(depth0 != null ? lookupProperty(depth0,"federal") : depth0),"scope":"notifier","defaults":"{\"role\": \"button\", \"className\": \"emp-header-popup\"}"},"data":data,"loc":{"start":{"line":40,"column":65},"end":{"line":40,"column":297}}})},"data":data,"loc":{"start":{"line":40,"column":23},"end":{"line":40,"column":298}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":40,"column":11},"end":{"line":40,"column":301}}}))
    + ">\r\n            <span class=\"notifier-text\">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"popup") : depth0),{"name":"if","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":42,"column":12},"end":{"line":44,"column":20}}})) != null ? stack1 : "")
    + "</a>";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_popup"),depth0,{"name":"_popup","hash":{"scope":"link"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"popup":(depth0 != null ? lookupProperty(depth0,"popup") : depth0),"notifierColor":(depth0 != null ? lookupProperty(depth0,"color") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"federal":(depth0 != null ? lookupProperty(depth0,"federal") : depth0),"scope":"notifier","defaults":"{}"},"data":data,"loc":{"start":{"line":48,"column":65},"end":{"line":48,"column":208}}})},"data":data,"loc":{"start":{"line":48,"column":23},"end":{"line":48,"column":209}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":48,"column":11},"end":{"line":48,"column":212}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"popup") : depth0),{"name":"if","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":50,"column":12},"end":{"line":52,"column":20}}})) != null ? stack1 : "")
    + "</a>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"static","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":56,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["notifierGroup"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<li>"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":4,"column":17},"end":{"line":4,"column":47}}}),depth0,{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</li>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<ul "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\": \"emp-indicators\"}"},"data":data,"loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":92}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":4},"end":{"line":1,"column":95}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"notifiers") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":6,"column":14}}})) != null ? stack1 : "")
    + "</ul>\r\n";
},"usePartial":true,"useData":true});

this["JST"]["output"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    "
    + ((stack1 = container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0)) != null ? stack1 : "")
    + "\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <p>"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</p>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"raw") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":5,"column":7}}})) != null ? stack1 : "");
},"useData":true});

this["JST"]["page"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":23},"end":{"line":1,"column":47}}}));
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":5},"end":{"line":1,"column":54}}})) != null ? stack1 : "")
    + ">\r\n    <h1>"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"title","hash":{},"data":data,"loc":{"start":{"line":2,"column":8},"end":{"line":2,"column":19}}}) : helper)))
    + "</h1>\r\n</div>\r\n";
},"useData":true});

this["JST"]["pagebody"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<main "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":90}}})},"data":data,"loc":{"start":{"line":1,"column":18},"end":{"line":1,"column":91}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":94}}}))
    + "></main>\r\n";
},"useData":true});

this["JST"]["pageInfo"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_pageTitle"),depth0,{"name":"_pageTitle","hash":{"mode":(depth0 != null ? lookupProperty(depth0,"mode") : depth0)},"data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <div class=\"emp-page-instructions\" id=\"emp-page-instructions\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"instructions") : depth0),{"name":"each","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":12},"end":{"line":11,"column":21}}})) != null ? stack1 : "")
    + "        </div>\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_output"),depth0,{"name":"_output","hash":{"raw":true},"data":data,"indent":"                ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <div class=\"emp-page-legend\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"pageLegend") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":17,"column":12},"end":{"line":22,"column":19}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"pageLegend") : depth0)) != null ? lookupProperty(stack1,"helpText") : stack1),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":23,"column":12},"end":{"line":28,"column":19}}})) != null ? stack1 : "")
    + "        </div>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    return "                <div class=\"emp-legend\">\r\n                    <span class=\"cui-required\"></span>\r\n                    <span>Required field</span>\r\n                </div>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    return "                <div class=\"emp-legend\">\r\n                    <button type=\"button\" class=\"cui-icon emp-icon-help emp-page-itags emp-legend-help\" title=\"More information\">More information</button>\r\n                    <span>To learn more about a particular field</span>\r\n                </div>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"messages") : depth0),{"name":"_message","hash":{"section":"globalHeader"},"data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"13":function(container,depth0,helpers,partials,data) {
    return "        <ul class=\"cui-messages emp-messages cui-hidden\"></ul>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-page-info\">\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"title") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":5,"column":11}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"instructions") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":7,"column":4},"end":{"line":13,"column":11}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"pageLegend") : depth0)) != null ? lookupProperty(stack1,"helpText") : stack1),"op":"||","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"pageLegend") : depth0)) != null ? lookupProperty(stack1,"required") : stack1)},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":15,"column":4},"end":{"line":30,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"messages") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":32,"column":4},"end":{"line":36,"column":11}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"usePartial":true,"useData":true});

this["JST"]["partialCaller"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_searchBoxInputs"),depth0,{"name":"_searchBoxInputs","hash":{"values":((stack1 = (depth0 != null ? lookupProperty(depth0,"arguments") : depth0)) != null ? lookupProperty(stack1,"values") : stack1),"selection":((stack1 = (depth0 != null ? lookupProperty(depth0,"arguments") : depth0)) != null ? lookupProperty(stack1,"selection") : stack1)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"partialTemp") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":7,"column":9},"end":{"line":7,"column":42}}}),(depth0 != null ? lookupProperty(depth0,"arguments") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"searchInputBox","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"partialTemp") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":9,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["popover"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"emp-popover\">\r\n</div>\r\n";
},"useData":true});

this["JST"]["raw"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.lambda((depth0 != null ? lookupProperty(depth0,"raw") : depth0), depth0)) != null ? stack1 : "")
    + "\r\n";
},"useData":true});

this["JST"]["region"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"region","collapse":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"defaults":"{\"className\":\"emp-region\", \"aria-live\":\"polite\"}"},"data":data,"loc":{"start":{"line":1,"column":59},"end":{"line":1,"column":190}}})},"data":data,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":191}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":5},"end":{"line":1,"column":193}}}))
    + ">\r\n\r\n</div>\r\n";
},"useData":true});

this["JST"]["responsiveTableToggleControl"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <button type=\"button\" class=\"emp-pivote-table-expand\">\r\n            <div class=\"primary-title\">\r\n                <strong>"
    + alias4(((helper = (helper = lookupProperty(helpers,"primaryText") || (depth0 != null ? lookupProperty(depth0,"primaryText") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"primaryText","hash":{},"data":data,"loc":{"start":{"line":5,"column":24},"end":{"line":5,"column":39}}}) : helper)))
    + "</strong><br>\r\n                <span>"
    + alias4(((helper = (helper = lookupProperty(helpers,"secondaryText") || (depth0 != null ? lookupProperty(depth0,"secondaryText") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"secondaryText","hash":{},"data":data,"loc":{"start":{"line":6,"column":22},"end":{"line":6,"column":39}}}) : helper)))
    + "</span>\r\n            </div>\r\n        </button>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <button type=\"button\" class=\"emp-pivote-table-expand\">\r\n            <div class=\"primary-title\">\r\n                <strong>"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"primaryText") || (depth0 != null ? lookupProperty(depth0,"primaryText") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"primaryText","hash":{},"data":data,"loc":{"start":{"line":12,"column":24},"end":{"line":12,"column":39}}}) : helper)))
    + "</strong>\r\n            </div>\r\n        </button>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"expandable-header\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"secondaryText") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":15,"column":11}}})) != null ? stack1 : "")
    + "    <span class=\"cui-hide-from-screen\">Click to collapse or expand row contents</span>\r\n</div>\r\n";
},"useData":true});

this["JST"]["selection"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a tabindex=\"0\" "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"iconClass":(depth0 != null ? lookupProperty(depth0,"icon") : depth0),"scope":"selectionPopup","defaults":"{\"role\": \"button\", \"className\": \"emp-selection-popup\"}"},"data":data,"loc":{"start":{"line":3,"column":74},"end":{"line":3,"column":200}}})},"data":data,"loc":{"start":{"line":3,"column":32},"end":{"line":3,"column":201}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":204}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</a>";
},"3":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<button tabindex=\"0\" "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"iconClass":(depth0 != null ? lookupProperty(depth0,"icon") : depth0),"scope":"selectionPopup","defaults":"{\"type\": \"button\", \"className\": \"emp-selection-popup\"}"},"data":data,"loc":{"start":{"line":8,"column":79},"end":{"line":8,"column":205}}})},"data":data,"loc":{"start":{"line":8,"column":37},"end":{"line":8,"column":206}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":8,"column":25},"end":{"line":8,"column":209}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</button>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"link","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":11,"column":12}}})) != null ? stack1 : "");
},"useData":true});

this["JST"]["span"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"span","enhancedAttributes":(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":139}}})},"data":data,"loc":{"start":{"line":1,"column":18},"end":{"line":1,"column":140}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":143}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"useData":true});

this["JST"]["standard-error-existing-session"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10\">\r\n            This application is either open in another window or was not properly closed during your last session. If it is open in\r\n            another window, please return to that window to continue. Otherwise, to resume your current session, select <strong>Continue</strong> to\r\n            restart your session in this window.\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>\r\n<div class=\"cui-row button-row\">\r\n    <div class=\"cui-col-small-12 cui-align-center\">\r\n        <button type=\"button\" onClick=\"javascript:window.location='invalidSessionError.jsp\" class=\"cui-button-primary\">\r\n            Continue\r\n        </button>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["standard-error-expired-session"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10\">\r\n            <p>Your session has expired. For security reasons, we’ve logged you out of your account.</p>\r\n            <p>To log back in and begin a new session, select Log In.</p>\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>\r\n<div class=\"cui-row button-row\">\r\n    <div class=\"cui-col-small-12 cui-align-center\">\r\n        <button type=\"button\" onClick=\"javascript:window.location='"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"url") || (depth0 != null ? lookupProperty(depth0,"url") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"url","hash":{},"data":data,"loc":{"start":{"line":13,"column":67},"end":{"line":13,"column":74}}}) : helper)))
    + "\" class=\"cui-button-primary\">\r\n            Log In\r\n        </button>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["standard-error-generic-auth"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10\">\r\n            If you are receiving this message, you have either attempted to use a bookmark without logging into your account, or you have timed out. Please log into your\r\n            account to access this application.\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["standard-error-invalid-session"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10 cui-align-center\">\r\n            Your session has expired. Please <a href=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"url") || (depth0 != null ? lookupProperty(depth0,"url") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"url","hash":{},"data":data,"loc":{"start":{"line":5,"column":54},"end":{"line":5,"column":61}}}) : helper)))
    + "\">click here</a> to log in again.\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["standard-error-request-access"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10 cui-align-center\">\r\n            <p>\r\n                If you are receiving this message you currently do not have access to this application. To request access please visit <a href=\"https://www.tax.ny.gov/e-services/orpts/login-assistance.htm\">Requesting Access</a>.\r\n            </p>\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>";
},"useData":true});

this["JST"]["standard-error"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"error-page-overrides\">\r\n    <div class=\"cui-row\">\r\n        <div class=\"cui-col-small-1\"></div>\r\n        <div class=\"cui-col-small-10\">\r\n            <div class=\"cui-row\">\r\n                <div class=\"cui-col-small-12\">\r\n                    <p>\r\n                        The Department of Taxation and Finance conducts information technology maintenance during the following time periods:\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"cui-row\">\r\n                <div class=\"cui-col-medium-9 cui-col-large-6 cui-hide-col-small\">\r\n                    <p class=\"cui-align-right cui-no-wrap cui-no-padding\">\r\n                        Monday through Saturday: 4:00 am - 6:00 am\r\n                    </p>\r\n                    <p class=\"cui-align-right cui-no-wrap\">\r\n                        Sundays: 9:00 pm - 10:00 pm\r\n                    </p>\r\n                </div>\r\n                <div class=\"cui-col-small-9 cui-hide-col-medium cui-hide-col-large\">\r\n                    <p class=\"cui-no-wrap cui-no-padding\">\r\n                        Monday through Saturday: 4:00 am - 6:00 am\r\n                    </p>\r\n                    <p class=\"cui-no-wrap\">\r\n                        Sundays: 9:00 pm - 10:00 pm\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"cui-row\">\r\n                <div class=\"cui-col-small-12\">\r\n                    <p>\r\n                        If you have received this message during one of these time periods, please try again after the maintenance\r\n                        is completed\r\n                        and all services are restored.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"cui-row\">\r\n                <div class=\"cui-col-small-12\">\r\n                    <p>\r\n                        If you are receiving this message outside of these time periods, we invite you to inform us of the problem.\r\n                        Please\r\n                        include information concerning the specific services you are experiencing issues with. This feedback will\r\n                        assist us in\r\n                        improving the performance of our Web site and electronic services.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"cui-col-small-1\"></div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["table"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "id=\""
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_table_root\"";
},"3":function(container,depth0,helpers,partials,data) {
    return "        <div class=\"emp-table-wrapper emp-caption-legend\">";
},"5":function(container,depth0,helpers,partials,data) {
    return "<div class=\"emp-table-wrapper\">\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-table-controls\">\r\n                <div class=\"emp-header-controls\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"headerControls") : depth0)) != null ? lookupProperty(stack1,"contents") : stack1),{"name":"each","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":30}}})) != null ? stack1 : "")
    + "</div>\r\n            </div>\r\n";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,"table-header-controls",{"name":"rendererHook","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":16,"column":24},"end":{"line":16,"column":87}}})) != null ? stack1 : "")
    + "\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    return "";
},"11":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"emp-sticky-caption\">"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "</div>\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"emp-table-legend\">\r\n                <ul>"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_legend"),((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"contents") : stack1),{"name":"_legend","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "                </ul>\r\n            </div>\r\n";
},"15":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"paging") : depth0),{"name":"if","hash":{},"fn":container.program(16, data, 0, blockParams, depths),"inverse":container.program(45, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":37,"column":12},"end":{"line":188,"column":19}}})) != null ? stack1 : "")
    + "\r\n";
},"16":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"op":"emptyObject","v1":(depth0 != null ? lookupProperty(depth0,"paging") : depth0)},"fn":container.program(17, data, 0, blockParams, depths),"inverse":container.program(19, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":39,"column":16},"end":{"line":133,"column":27}}})) != null ? stack1 : "")
    + "\r\n";
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                    <div class=\"table-control-row emp-table-no-paging\">\r\n                        <div class=\"emp-table-client-side-controls\">\r\n                            "
    + ((stack1 = (lookupProperty(helpers,"tableClientSideControls")||(depth0 && lookupProperty(depth0,"tableClientSideControls"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"tableClientSideControls","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":43,"column":28},"end":{"line":43,"column":101}}})) != null ? stack1 : "")
    + "\r\n                        </div>\r\n                    </div>\r\n";
},"19":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                    <div class=\"table-control-row\">\r\n\r\n\r\n                                <div class=\"emp-paging-container-advance emp-table-pagination\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"pagingCursor") : depth0),{"name":"if","hash":{},"fn":container.program(20, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":53,"column":36},"end":{"line":55,"column":43}}})) != null ? stack1 : "")
    + "\r\n                                    <div class=\"emp-paging-advance-controls\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"name":"if","hash":{},"fn":container.program(22, data, 0, blockParams, depths),"inverse":container.program(24, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":58,"column":40},"end":{"line":64,"column":47}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"name":"if","hash":{},"fn":container.program(27, data, 0, blockParams, depths),"inverse":container.program(29, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":65,"column":40},"end":{"line":71,"column":47}}})) != null ? stack1 : "")
    + "                                        <span class=\"emp-page-cursor\">\r\n                                            "
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"pagingText") : depth0), depth0))
    + "\r\n                                        </span>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"name":"if","hash":{},"fn":container.program(31, data, 0, blockParams, depths),"inverse":container.program(33, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":75,"column":40},"end":{"line":81,"column":47}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"name":"if","hash":{},"fn":container.program(35, data, 0, blockParams, depths),"inverse":container.program(37, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":82,"column":40},"end":{"line":88,"column":47}}})) != null ? stack1 : "")
    + "                                    </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"pagingCursor") : depth0),{"name":"if","hash":{},"fn":container.program(39, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":92,"column":36},"end":{"line":107,"column":43}}})) != null ? stack1 : "")
    + "                                </div>\r\n\r\n\r\n                        <div class=\"emp-table-client-side-controls\">\r\n                            "
    + ((stack1 = (lookupProperty(helpers,"tableClientSideControls")||(depth0 && lookupProperty(depth0,"tableClientSideControls"))||container.hooks.helperMissing).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"tableClientSideControls","hash":{},"fn":container.program(9, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":130,"column":28},"end":{"line":130,"column":101}}})) != null ? stack1 : "")
    + "\r\n                        </div>\r\n                    </div>\r\n";
},"20":function(container,depth0,helpers,partials,data) {
    return "                                        <div class=\"emp-paging-view-limit\"></div>\r\n";
},"22":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":59,"column":48},"end":{"line":59,"column":91}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"first"},"data":data,"indent":"                                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"24":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":61,"column":44},"end":{"line":63,"column":51}}})) != null ? stack1 : "");
},"25":function(container,depth0,helpers,partials,data) {
    return "                                                <span class=\"emp-paging-spacer\"></span>\r\n";
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":66,"column":48},"end":{"line":66,"column":94}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"previous"},"data":data,"indent":"                                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"29":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":68,"column":44},"end":{"line":70,"column":51}}})) != null ? stack1 : "");
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":76,"column":48},"end":{"line":76,"column":90}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"next"},"data":data,"indent":"                                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"33":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":78,"column":44},"end":{"line":80,"column":51}}})) != null ? stack1 : "");
},"35":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":83,"column":48},"end":{"line":83,"column":90}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"last"},"data":data,"indent":"                                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"37":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":85,"column":44},"end":{"line":87,"column":51}}})) != null ? stack1 : "");
},"39":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                                        <div class=\"emp-paging-view-limit\">\r\n                                            <span>View:</span>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"pagingCursor") : depth0)) != null ? lookupProperty(stack1,"limit") : stack1),{"name":"each","hash":{},"fn":container.program(40, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":95,"column":44},"end":{"line":105,"column":53}}})) != null ? stack1 : "")
    + "                                        </div>\r\n";
},"40":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),"op":"===","v1":((stack1 = (depths[1] != null ? lookupProperty(depths[1],"pagingCursor") : depths[1])) != null ? lookupProperty(stack1,"currentLimit") : stack1)},"fn":container.program(41, data, 0, blockParams, depths),"inverse":container.program(43, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":98,"column":48},"end":{"line":104,"column":59}}})) != null ? stack1 : "");
},"41":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                                                    \r\n                                                    <span class=\"emp-current-cursor\">"
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n";
},"43":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_button"),depth0,{"name":"_button","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"45":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"pagingText") : depth0),{"name":"if","hash":{},"fn":container.program(46, data, 0),"inverse":container.program(17, data, 0),"data":data,"loc":{"start":{"line":137,"column":16},"end":{"line":187,"column":23}}})) != null ? stack1 : "");
},"46":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                    <div class=\"table-control-row\">\r\n                        <div class=\"emp-paging-container-advance emp-table-pagination\">\r\n                            <div class=\"emp-paging-advance-controls\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"name":"if","hash":{},"fn":container.program(47, data, 0),"inverse":container.program(49, data, 0),"data":data,"loc":{"start":{"line":142,"column":32},"end":{"line":148,"column":39}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"name":"if","hash":{},"fn":container.program(52, data, 0),"inverse":container.program(54, data, 0),"data":data,"loc":{"start":{"line":149,"column":32},"end":{"line":155,"column":39}}})) != null ? stack1 : "")
    + "                                <span class=\"emp-page-cursor\">\r\n                                    "
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"pagingText") : depth0), depth0))
    + "\r\n                                </span>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"name":"if","hash":{},"fn":container.program(56, data, 0),"inverse":container.program(58, data, 0),"data":data,"loc":{"start":{"line":159,"column":32},"end":{"line":165,"column":39}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"name":"if","hash":{},"fn":container.program(60, data, 0),"inverse":container.program(62, data, 0),"data":data,"loc":{"start":{"line":166,"column":32},"end":{"line":172,"column":39}}})) != null ? stack1 : "")
    + "                            </div>\r\n                        </div>\r\n                        <div class=\"emp-table-client-side-controls\">\r\n                            "
    + ((stack1 = (lookupProperty(helpers,"tableClientSideControls")||(depth0 && lookupProperty(depth0,"tableClientSideControls"))||container.hooks.helperMissing).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"tableClientSideControls","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":176,"column":28},"end":{"line":176,"column":101}}})) != null ? stack1 : "")
    + "\r\n                        </div>\r\n                    </div>\r\n\r\n";
},"47":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":143,"column":36},"end":{"line":143,"column":79}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"first"},"data":data,"indent":"                                ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"49":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"name":"if","hash":{},"fn":container.program(50, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":145,"column":32},"end":{"line":147,"column":39}}})) != null ? stack1 : "");
},"50":function(container,depth0,helpers,partials,data) {
    return "                                <span class=\"emp-paging-spacer\"></span>\r\n";
},"52":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":150,"column":36},"end":{"line":150,"column":82}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"previous"},"data":data,"indent":"                                ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"54":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"name":"if","hash":{},"fn":container.program(50, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":152,"column":32},"end":{"line":154,"column":39}}})) != null ? stack1 : "");
},"56":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":160,"column":36},"end":{"line":160,"column":78}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"next"},"data":data,"indent":"                                ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"58":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"name":"if","hash":{},"fn":container.program(50, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":162,"column":32},"end":{"line":164,"column":39}}})) != null ? stack1 : "");
},"60":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":167,"column":36},"end":{"line":167,"column":78}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"hash":{"idSuffix":"_header","specialIcon":"last"},"data":data,"indent":"                                ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"62":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"name":"if","hash":{},"fn":container.program(50, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":169,"column":32},"end":{"line":171,"column":39}}})) != null ? stack1 : "");
},"64":function(container,depth0,helpers,partials,data) {
    return "            <div class=\"view-wrapper emp-remove-overflow\">\r\n";
},"66":function(container,depth0,helpers,partials,data) {
    return "            <div class=\"view-wrapper\">\r\n";
},"68":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<table "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"validationTable":(depth0 != null ? lookupProperty(depth0,"selectionRequired") : depth0),"scope":"table","defaults":"{\"className\": \"emp-table-selectable\"}"},"data":data,"loc":{"start":{"line":199,"column":77},"end":{"line":199,"column":213}}})},"data":data,"loc":{"start":{"line":199,"column":35},"end":{"line":199,"column":215}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":199,"column":23},"end":{"line":199,"column":218}}}))
    + ">";
},"70":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<table "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"scope":"table","defaults":"{}"},"data":data,"loc":{"start":{"line":201,"column":77},"end":{"line":201,"column":139}}})},"data":data,"loc":{"start":{"line":201,"column":35},"end":{"line":201,"column":141}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":201,"column":23},"end":{"line":201,"column":144}}}))
    + ">\r\n";
},"72":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input type=\"hidden\" id=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_indexOrder\" name=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_indexOrder\" />\r\n";
},"74":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_tableHiddenInputs"),depth0,{"name":"_tableHiddenInputs","hash":{"id":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"id") : stack1)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"76":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(lookupProperty(helpers,"tableButtons")||(depth0 && lookupProperty(depth0,"tableButtons"))||container.hooks.helperMissing).call(alias1,depth0,{"name":"tableButtons","hash":{},"data":data,"loc":{"start":{"line":216,"column":23},"end":{"line":216,"column":42}}}),{"name":"if","hash":{},"fn":container.program(77, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":216,"column":16},"end":{"line":221,"column":24}}})) != null ? stack1 : "");
},"77":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<!-- Button inputs-->"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_tableHiddenInputs"),depth0,{"name":"_tableHiddenInputs","hash":{"id":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"id") : stack1)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"79":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"first,last","op":"hasAnyProperties","v1":(depth0 != null ? lookupProperty(depth0,"paging") : depth0)},"fn":container.program(80, data, 0, blockParams, depths),"inverse":container.program(95, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":229,"column":12},"end":{"line":281,"column":23}}})) != null ? stack1 : "");
},"80":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                <div class=\"emp-paging-container-advance emp-table-pagination\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"pagingCursor") : depth0),{"name":"if","hash":{},"fn":container.program(81, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":232,"column":20},"end":{"line":234,"column":27}}})) != null ? stack1 : "")
    + "\r\n                    <div class=\"emp-paging-advance-controls\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"name":"if","hash":{},"fn":container.program(83, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":237,"column":24},"end":{"line":239,"column":31}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"name":"if","hash":{},"fn":container.program(85, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":240,"column":24},"end":{"line":242,"column":31}}})) != null ? stack1 : "")
    + "                        <span>\r\n                            "
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"pagingText") : depth0), depth0))
    + "\r\n                        </span>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"name":"if","hash":{},"fn":container.program(87, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":246,"column":24},"end":{"line":248,"column":31}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"name":"if","hash":{},"fn":container.program(89, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":249,"column":24},"end":{"line":251,"column":31}}})) != null ? stack1 : "")
    + "                    </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"pagingCursor") : depth0),{"name":"if","hash":{},"fn":container.program(91, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":255,"column":20},"end":{"line":270,"column":27}}})) != null ? stack1 : "")
    + "                </div>\r\n\r\n";
},"81":function(container,depth0,helpers,partials,data) {
    return "                        <div class=\"emp-paging-view-limit\"></div>\r\n";
},"83":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":238,"column":32},"end":{"line":238,"column":75}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"first") : stack1),{"hash":{"idSuffix":"_footer","specialIcon":"first"},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"85":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":241,"column":32},"end":{"line":241,"column":78}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"hash":{"idSuffix":"_footer","specialIcon":"previous"},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"87":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":247,"column":32},"end":{"line":247,"column":74}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"hash":{"idSuffix":"_footer","specialIcon":"next"},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"89":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":250,"column":32},"end":{"line":250,"column":74}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"last") : stack1),{"hash":{"idSuffix":"_footer","specialIcon":"last"},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"91":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <div class=\"emp-paging-view-limit\">\r\n                            <span>View:</span>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"pagingCursor") : depth0)) != null ? lookupProperty(stack1,"limit") : stack1),{"name":"each","hash":{},"fn":container.program(92, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":258,"column":28},"end":{"line":268,"column":37}}})) != null ? stack1 : "")
    + "                        </div>\r\n";
},"92":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),"op":"===","v1":((stack1 = (depths[1] != null ? lookupProperty(depths[1],"pagingCursor") : depths[1])) != null ? lookupProperty(stack1,"currentLimit") : stack1)},"fn":container.program(93, data, 0, blockParams, depths),"inverse":container.program(43, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":261,"column":32},"end":{"line":267,"column":43}}})) != null ? stack1 : "");
},"93":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                                    \r\n                                    <span class=\"emp-current-cursor\">"
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n";
},"95":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <div class=\"table-paging-control-row\">\r\n                    <div class=\"emp-table-pagination\">\r\n                        "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"name":"if","hash":{},"fn":container.program(96, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":276,"column":24},"end":{"line":277,"column":52}}})) != null ? stack1 : "")
    + " "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"name":"if","hash":{},"fn":container.program(98, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":277,"column":53},"end":{"line":278,"column":71}}})) != null ? stack1 : "")
    + "\r\n                    </div>\r\n                </div>\r\n";
},"96":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return " "
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":276,"column":57},"end":{"line":276,"column":103}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"previous") : stack1),{"hash":{"idSuffix":"_footer","specialIcon":"previous"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + " ";
},"98":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return " "
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":277,"column":82},"end":{"line":277,"column":124}}}),((stack1 = (depth0 != null ? lookupProperty(depth0,"paging") : depth0)) != null ? lookupProperty(stack1,"next") : stack1),{"hash":{"idSuffix":"_footer","specialIcon":"next"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + " ";
},"100":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-table-controls\">\r\n                <div class=\"emp-footer-controls\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"footerControls") : depth0)) != null ? lookupProperty(stack1,"contents") : stack1),{"name":"each","hash":{},"fn":container.program(101, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":287,"column":20},"end":{"line":289,"column":30}}})) != null ? stack1 : "")
    + "</div>\r\n            </div>\r\n";
},"101":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,"table-column",{"name":"rendererHook","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":288,"column":24},"end":{"line":288,"column":78}}})) != null ? stack1 : "")
    + "\r\n";
},"103":function(container,depth0,helpers,partials,data) {
    return "\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-table\" "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"css","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":23},"end":{"line":1,"column":114}}})) != null ? stack1 : "")
    + ">\r\n\r\n    "
    + container.escapeExpression(lookupProperty(helpers,"log").call(alias1,depth0,{"name":"log","hash":{},"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":16}}}))
    + "\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":(depth0 != null ? lookupProperty(depth0,"legend") : depth0),"op":"&&","v1":(depth0 != null ? lookupProperty(depth0,"title") : depth0)},"fn":container.program(3, data, 0, blockParams, depths),"inverse":container.program(5, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":5,"column":4},"end":{"line":10,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"headerControls") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":8},"end":{"line":21,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"title") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":23,"column":8},"end":{"line":25,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"legend") : depth0),{"name":"if","hash":{},"fn":container.program(13, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":27,"column":8},"end":{"line":33,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noControls") : depth0),{"name":"unless","hash":{},"fn":container.program(15, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":35,"column":8},"end":{"line":190,"column":19}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"false","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"attributes") : depth0)) != null ? lookupProperty(stack1,"data-sticky") : stack1)},"fn":container.program(64, data, 0, blockParams, depths),"inverse":container.program(66, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":192,"column":8},"end":{"line":196,"column":19}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"true","op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"selectable") : depth0)},"fn":container.program(68, data, 0, blockParams, depths),"inverse":container.program(70, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":198,"column":12},"end":{"line":202,"column":24}}})) != null ? stack1 : "")
    + "</table>\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"order","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(72, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":206,"column":12},"end":{"line":208,"column":23}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"selectable") : depth0)},"fn":container.program(74, data, 0, blockParams, depths),"inverse":container.program(76, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":211,"column":12},"end":{"line":224,"column":24}}})) != null ? stack1 : "")
    + "</div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"paging") : depth0),{"name":"if","hash":{},"fn":container.program(79, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":228,"column":8},"end":{"line":282,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"footerControls") : depth0),{"name":"if","hash":{},"fn":container.program(100, data, 0, blockParams, depths),"inverse":container.program(103, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":284,"column":8},"end":{"line":294,"column":16}}})) != null ? stack1 : "")
    + "</div>\r\n</div>\r\n";
},"usePartial":true,"useData":true,"useDepths":true});

this["JST"]["tabNavigation"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(depth0 != null ? lookupProperty(depth0,"defaults") : depth0)},"data":data,"loc":{"start":{"line":4,"column":22},"end":{"line":4,"column":73}}}),{"name":"attribute","hash":{"skip":"tabindex"},"data":data,"loc":{"start":{"line":4,"column":10},"end":{"line":4,"column":92}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"disabledText") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":5,"column":8},"end":{"line":9,"column":16}}})) != null ? stack1 : "")
    + "</span>";
},"2":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"disabledText") : depth0), depth0));
},"4":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0));
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"link","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":13,"column":4},"end":{"line":19,"column":16}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_link"),depth0,{"name":"_link","hash":{"source":"tabNavLink","defaults":"{}"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"disabled") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":21,"column":8}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["tabs"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<a tabindex=\"0\" "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"tab-control","tabIndex":(data && lookupProperty(data,"index")),"selected":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"defaults":"{\"className\":\"emp-tab-item emp-header-tab emp-tab-control\", \"role\":\"button\"}"},"data":data,"loc":{"start":{"line":4,"column":82},"end":{"line":5,"column":48}}})},"data":data,"loc":{"start":{"line":4,"column":40},"end":{"line":5,"column":49}}}),{"name":"attribute","hash":{"skip":"id"},"data":data,"loc":{"start":{"line":4,"column":28},"end":{"line":5,"column":61}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "</a>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,false,{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"tab-container","tabState":depth0,"state":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"defaults":"{\"className\": \"emp-tab\"}"},"data":data,"loc":{"start":{"line":13,"column":65},"end":{"line":13,"column":173}}})},"data":data,"loc":{"start":{"line":13,"column":33},"end":{"line":13,"column":174}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":13,"column":21},"end":{"line":13,"column":176}}}))
    + ">\r\n\r\n                    <a tabindex=\"0\" "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"tab-control","selected":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"tabIndex":(data && lookupProperty(data,"index")),"defaults":"{\"className\":\"emp-tab-item emp-accordion-tab emp-tab-control\", \"role\":\"button\"}"},"data":data,"loc":{"start":{"line":15,"column":90},"end":{"line":15,"column":257}}})},"data":data,"loc":{"start":{"line":15,"column":48},"end":{"line":15,"column":258}}}),{"name":"attribute","hash":{"skip":"id"},"data":data,"loc":{"start":{"line":15,"column":36},"end":{"line":15,"column":270}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "</a>\r\n\r\n                    <div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,false,{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"tab-contents","contentState":depth0,"state":(depth0 != null ? lookupProperty(depth0,"selected") : depth0),"defaults":"{\"className\": \"emp-tab-contents\"}"},"data":data,"loc":{"start":{"line":19,"column":69},"end":{"line":19,"column":189}}})},"data":data,"loc":{"start":{"line":19,"column":37},"end":{"line":19,"column":190}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":19,"column":25},"end":{"line":19,"column":192}}}))
    + ">\r\n                            "
    + ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"container") : depth0),"tabs",{"name":"rendererHook","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":20,"column":28},"end":{"line":20,"column":84}}})) != null ? stack1 : "")
    + "\r\n                    </div>\r\n                </div>\r\n\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    return "";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<section "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{\"className\":\"emp-tabs\"}"},"data":data,"loc":{"start":{"line":1,"column":63},"end":{"line":1,"column":115}}})},"data":data,"loc":{"start":{"line":1,"column":21},"end":{"line":1,"column":116}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":9},"end":{"line":1,"column":118}}}))
    + ">\r\n    <header>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"tabs") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":8,"column":18}}})) != null ? stack1 : "")
    + "</header>\r\n        <div class=\"emp-tab-container\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"tabs") : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":12},"end":{"line":24,"column":22}}})) != null ? stack1 : "")
    + "</div>\r\n</section>\r\n";
},"useData":true});

this["JST"]["tax-footer"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-agency-header being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":81}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_agency-footer"),depth0,{"name":"_agency-footer","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["tax-header"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(lookupProperty(helpers,"log").call(depth0 != null ? depth0 : (container.nullContext || {}),"external-agency-header being called, this need to be fixed by framework",{"name":"log","hash":{},"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":81}}}))
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_agency-header"),depth0,{"name":"_agency-header","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["text"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span>"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>";
},"useData":true});

this["JST"]["tree"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <ul "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"treeRoot":(depth0 != null ? lookupProperty(depth0,"root") : depth0),"defaults":"{\"className\":\"emp-draggable-tree\"}"},"data":data,"loc":{"start":{"line":2,"column":62},"end":{"line":2,"column":143}}})},"data":data,"loc":{"start":{"line":2,"column":20},"end":{"line":2,"column":144}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":2,"column":8},"end":{"line":2,"column":147}}}))
    + ">\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"items","op":"hasProperty","v1":depth0},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":37,"column":19}}})) != null ? stack1 : "")
    + "    </ul>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"items") : depth0),{"name":"each","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":12},"end":{"line":36,"column":21}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <li>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"items") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":6,"column":20},"end":{"line":34,"column":27}}})) != null ? stack1 : "")
    + "                </li>\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <div class=\"emp-draggable-container\" draggable=\"true\">\r\n                            <div class=\"emp-menu-item-container-info\">\r\n                                <span class=\"emp-menu-item\">\r\n                                    <span class=\"emp-menu-item-title\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"text") || (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"text","hash":{},"data":data,"loc":{"start":{"line":10,"column":70},"end":{"line":10,"column":78}}}) : helper)))
    + "</span>\r\n                                    <div class=\"emp-menu-item-controls\">\r\n                                        <button class=\"emp-icon-delete\">Delete</button>\r\n                                        <button class=\"emp-icon-edit\">Edit</button>\r\n                                    </div>\r\n                                </span>\r\n                            </div>\r\n"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_tree"),depth0,{"name":"_tree","hash":{"type":"draggable","root":false,"scope":"tree"},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "                        </div>\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <span class=\"emp-draggable-item\" draggable=\"true\">\r\n                            <span class=\"emp-menu-item\">\r\n                                <div class=\"emp-menu-above-placeholder\"></div>\r\n                                <div class=\"emp-menu-item-wrapper\">\r\n                                    <span class=\"emp-menu-item-title\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"text") || (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"text","hash":{},"data":data,"loc":{"start":{"line":24,"column":70},"end":{"line":24,"column":78}}}) : helper)))
    + "</span>\r\n                                    <div class=\"emp-menu-item-controls\">\r\n                                        <button class=\"emp-icon-delete\">Delete</button>\r\n                                        <button class=\"emp-icon-edit\">Edit</button>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"emp-menu-below-placeholder\"></div>\r\n                            </span>\r\n\r\n                        </span>\r\n";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <ul "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"expandRoot":(depth0 != null ? lookupProperty(depth0,"root") : depth0),"defaults":"{\"className\":\"emp-static-tree\"}"},"data":data,"loc":{"start":{"line":40,"column":62},"end":{"line":40,"column":142}}})},"data":data,"loc":{"start":{"line":40,"column":20},"end":{"line":40,"column":143}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":146}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"items") : depth0),{"name":"each","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":8},"end":{"line":58,"column":17}}})) != null ? stack1 : "")
    + "    </ul>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <li>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"items") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":43,"column":16},"end":{"line":56,"column":23}}})) != null ? stack1 : "")
    + "            </li>\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),{"name":"unless","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":44,"column":20},"end":{"line":52,"column":31}}})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_tree"),depth0,{"name":"_tree","hash":{"root":false,"scope":"tree"},"data":data,"indent":"                    ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"expandable-control","collapseChildren":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"defaults":"{\"className\":\"emp-expandable-control emp-collapse-children\"}"},"data":data,"loc":{"start":{"line":45,"column":84},"end":{"line":45,"column":230}}})},"data":data,"loc":{"start":{"line":45,"column":42},"end":{"line":45,"column":231}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":45,"column":30},"end":{"line":45,"column":234}}}))
    + ">\r\n                            "
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "\r\n                        </span>\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                        <span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"expandable-control","collapseChildren":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"defaults":"{\"className\":\"emp-expandable-control\"}"},"data":data,"loc":{"start":{"line":49,"column":84},"end":{"line":49,"column":208}}})},"data":data,"loc":{"start":{"line":49,"column":42},"end":{"line":49,"column":209}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":49,"column":30},"end":{"line":49,"column":212}}}))
    + ">\r\n                            "
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "\r\n                        </span>\r\n";
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":55,"column":25},"end":{"line":55,"column":55}}}),depth0,{"hash":{"scope":"treeItem"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"draggable","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":60,"column":11}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

this["JST"]["universal-footer"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"unav-footer\">\r\n    <div class=\"unav-footer-contents clearfix\">\r\n        <div class=\"unav-flex-row\">\r\n            <div class=\"footer-logo clearfix\">\r\n                <span class=\"nys-logo unav-footer-logo\"></span>\r\n            </div>\r\n            <div class=\"footer-links clearfix\">\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"https://www.ny.gov/agencies\">Agencies</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://www.ny.gov/mobileapps\">App Directory</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://www.ny.gov/counties\">Counties</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://www.ny.gov/events\">Events</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://www.ny.gov/programs\">Programs</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"https://www.ny.gov/services\">Services</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["universal-header"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"unav-agency-wrapper\">\r\n    <div class=\"unav-header\">\r\n        <div class=\"unav-header-links\">\r\n            <ul>\r\n                <li>\r\n                    <a href=\"https://ny.gov/services\">Services</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://www.governor.ny.gov/news\">News</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://ny.gov/agencies\">Government</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://ny.gov/local\">Local</a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        <div class=\"unav-primary-bar\">\r\n            <div class=\"unav-header-logo\">\r\n                <a href=\"#\">\r\n                    <span class=\"accessibly-hide-text\">\r\n                        New York State Home\r\n                    </span>\r\n                </a>\r\n            </div>\r\n            <div class=\"unav-toggle-arrow\">\r\n                <a href=\"#\" role=\"button\">\r\n                    <span class=\"arrow\"></span>\r\n                    <span class=\"accessibly-hide-text\">Expand Mobile Universal Menu</span>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n";
},"useData":true});

this["JST"]["universal"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"section","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":5,"column":15}}})) != null ? stack1 : "")
    + "\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    return "        <div class=\"emp-section-in-section-container\">\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<"
    + alias3(((helper = (helper = lookupProperty(helpers,"type") || (depth0 != null ? lookupProperty(depth0,"type") : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"type","hash":{},"data":data,"loc":{"start":{"line":11,"column":9},"end":{"line":11,"column":17}}}) : helper)))
    + " "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"collapse":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":11,"column":72},"end":{"line":11,"column":165}}})},"data":data,"loc":{"start":{"line":11,"column":30},"end":{"line":11,"column":166}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":11,"column":18},"end":{"line":11,"column":169}}}))
    + ">";
},"6":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"collapse":(depth0 != null ? lookupProperty(depth0,"collapse") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"addClass":(depth0 != null ? lookupProperty(depth0,"addClass") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":13,"column":67},"end":{"line":13,"column":160}}})},"data":data,"loc":{"start":{"line":13,"column":25},"end":{"line":13,"column":161}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":13,"column":13},"end":{"line":13,"column":164}}}))
    + ">\r\n";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"universal","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"template") : depth0)},"fn":container.program(9, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":20,"column":12},"end":{"line":28,"column":24}}})) != null ? stack1 : "");
},"9":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0));
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":51}}}),depth0,{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.program(14, data, 0),"data":data,"loc":{"start":{"line":33,"column":12},"end":{"line":45,"column":20}}})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"universal","op":"!==","v1":(depth0 != null ? lookupProperty(depth0,"template") : depth0)},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":39,"column":16},"end":{"line":43,"column":28}}})) != null ? stack1 : "");
},"16":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "</"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"type") || (depth0 != null ? lookupProperty(depth0,"type") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"type","hash":{},"data":data,"loc":{"start":{"line":50,"column":10},"end":{"line":50,"column":18}}}) : helper)))
    + " }}>";
},"18":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"section","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(21, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":57,"column":4},"end":{"line":59,"column":15}}})) != null ? stack1 : "")
    + "\r\n";
},"21":function(container,depth0,helpers,partials,data) {
    return "        </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"wrapper") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":7,"column":7}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"type") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":9,"column":4},"end":{"line":14,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":(depth0 != null ? lookupProperty(depth0,"template") : depth0),"op":"&&","v1":(depth0 != null ? lookupProperty(depth0,"text") : depth0)},"fn":container.program(8, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":17,"column":8},"end":{"line":47,"column":20}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"type") : depth0),{"name":"if","hash":{},"fn":container.program(16, data, 0),"inverse":container.program(18, data, 0),"data":data,"loc":{"start":{"line":49,"column":4},"end":{"line":53,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"wrapper") : depth0),{"name":"if","hash":{},"fn":container.program(20, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":55,"column":0},"end":{"line":61,"column":7}}})) != null ? stack1 : "")
    + "\r\n";
},"usePartial":true,"useData":true});

this["JST"]["viewer"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_viewerContents"),(lookupProperty(helpers,"viewerContents")||(depth0 && lookupProperty(depth0,"viewerContents"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"viewerContents","hash":{"index":(depth0 != null ? lookupProperty(depth0,"index") : depth0),"contents":(depth0 != null ? lookupProperty(depth0,"window") : depth0),"controls":(depth0 != null ? lookupProperty(depth0,"controls") : depth0)},"data":data,"loc":{"start":{"line":4,"column":29},"end":{"line":4,"column":106}}}),{"name":"_viewerContents","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<section "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"viewerSize":(depth0 != null ? lookupProperty(depth0,"size") : depth0),"defaults":"{\"className\": \"emp-document-viewer\"}"},"data":data,"loc":{"start":{"line":1,"column":63},"end":{"line":1,"column":148}}})},"data":data,"loc":{"start":{"line":1,"column":21},"end":{"line":1,"column":150}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":9},"end":{"line":1,"column":153}}}))
    + ">\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"index","op":"hasProperty","v1":depth0},"fn":container.program(1, data, 0),"inverse":container.program(1, data, 0),"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":8,"column":16}}})) != null ? stack1 : "")
    + "</section>\r\n";
},"usePartial":true,"useData":true});

this["JST"]["yesno"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <div class=\"emp-field\">\r\n        <div class=\"cui-label\">\r\n            <span class=\"emp-label\">"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"legend") : depth0), depth0))
    + "</span>\r\n        </div>\r\n        <div class=\"cui-data\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"yes") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":7,"column":12},"end":{"line":19,"column":19}}})) != null ? stack1 : "")
    + "        </div>\r\n    </div>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"yes") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.program(5, data, 0),"data":data,"loc":{"start":{"line":8,"column":16},"end":{"line":12,"column":23}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <span class=\"emp-data\">"
    + container.escapeExpression(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"yes") : depth0)) != null ? lookupProperty(stack1,"label") : stack1)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    return "                    <span class=\"emp-data\">Yes</span>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"no") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"if","hash":{},"fn":container.program(8, data, 0),"inverse":container.program(10, data, 0),"data":data,"loc":{"start":{"line":14,"column":16},"end":{"line":18,"column":23}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <span class=\"emp-data\">"
    + container.escapeExpression(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"no") : depth0)) != null ? lookupProperty(stack1,"label") : stack1)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    return "                    <span class=\"emp-data\">No</span>\r\n";
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, alias4=container.lambda, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <fieldset "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,false,{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"yesNo","required":(depth0 != null ? lookupProperty(depth0,"required") : depth0),"defaults":"{\"className\": \"emp-yes-no-component emp-boolean-input-group\"}"},"data":data,"loc":{"start":{"line":23,"column":58},"end":{"line":23,"column":184}}})},"data":data,"loc":{"start":{"line":23,"column":26},"end":{"line":23,"column":185}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":23,"column":14},"end":{"line":23,"column":187}}}))
    + ">\r\n        <div class=\"emp-fieldset-contents\" role=\"group\" aria-labelledby=\""
    + alias3(alias4((depth0 != null ? lookupProperty(depth0,"name") : depth0), depth0))
    + "\">\r\n	        <div class=\"cui-label\">\r\n	            <legend class=\"cui-required\" id=\""
    + alias3(alias4((depth0 != null ? lookupProperty(depth0,"name") : depth0), depth0))
    + "\">"
    + alias3(alias4((depth0 != null ? lookupProperty(depth0,"legend") : depth0), depth0))
    + "</legend>\r\n	        </div>\r\n	        <div class=\"cui-data\">\r\n	            <div class=\"emp-input-collection\">\r\n	                <div class=\"emp-field cui-data-left\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"required") : depth0),{"name":"if","hash":{},"fn":container.program(13, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":31,"column":24},"end":{"line":35,"column":31}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"yes") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"if","hash":{},"fn":container.program(17, data, 0),"inverse":container.program(19, data, 0),"data":data,"loc":{"start":{"line":36,"column":21},"end":{"line":40,"column":28}}})) != null ? stack1 : "")
    + "	                </div>\r\n	                <div class=\"emp-field cui-data-left\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"required") : depth0),{"name":"if","hash":{},"fn":container.program(21, data, 0),"inverse":container.program(23, data, 0),"data":data,"loc":{"start":{"line":43,"column":24},"end":{"line":47,"column":31}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"no") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"if","hash":{},"fn":container.program(25, data, 0),"inverse":container.program(27, data, 0),"data":data,"loc":{"start":{"line":48,"column":21},"end":{"line":52,"column":28}}})) != null ? stack1 : "")
    + "	                </div>\r\n	            </div>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(29, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":55,"column":13},"end":{"line":57,"column":23}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(31, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":58,"column":16},"end":{"line":60,"column":24}}})) != null ? stack1 : "")
    + "</div>\r\n    	</div>\r\n    </fieldset>\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_booleanInput"),(depth0 != null ? lookupProperty(depth0,"yes") : depth0),{"name":"_booleanInput","hash":{"scope":"yesNo","required":true,"noWrap":true},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_booleanInput"),(depth0 != null ? lookupProperty(depth0,"yes") : depth0),{"name":"_booleanInput","hash":{"noWrap":true},"data":data,"indent":"\t                        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),((stack1 = (depth0 != null ? lookupProperty(depth0,"yes") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"_label","hash":{"noWrap":true},"data":data,"indent":"\t                        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	                        <label for=\""
    + container.escapeExpression(container.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"yes") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\">Yes</label>\r\n";
},"21":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_booleanInput"),(depth0 != null ? lookupProperty(depth0,"no") : depth0),{"name":"_booleanInput","hash":{"scope":"yesNo","required":true,"noWrap":true},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"23":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_booleanInput"),(depth0 != null ? lookupProperty(depth0,"no") : depth0),{"name":"_booleanInput","hash":{"noWrap":true},"data":data,"indent":"                            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"25":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),((stack1 = (depth0 != null ? lookupProperty(depth0,"no") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"_label","hash":{"noWrap":true},"data":data,"indent":"\t                        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	                        <label for=\""
    + container.escapeExpression(container.lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"no") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\">No</label>\r\n";
},"29":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"indent":"                    ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"readOnly") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(12, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":64,"column":7}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true});

return this["JST"];

});
define('handlebars-partials',['handlebars'], function(Handlebars) {

this["JST"] = this["JST"] || {};

Handlebars.registerPartial("_booleanInput", this["JST"]["_booleanInput"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "<div class=\"cui-data\">\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"checkbox","op":"===","v1":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"type") : stack1)},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":4},"end":{"line":16,"column":16}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":10,"column":8},"end":{"line":14,"column":16}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_icon"),depth0,{"name":"_icon","hash":{"attributes":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),"title":"Item checked","class":"emp-boolean-icon","icon":"checkmark"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_icon"),depth0,{"name":"_icon","hash":{"attributes":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),"title":"Item not checked","class":"emp-boolean-icon","icon":"not-applicable"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"yesNo","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(10, data, 0),"inverse":container.program(17, data, 0),"data":data,"loc":{"start":{"line":23,"column":4},"end":{"line":54,"column":15}}})) != null ? stack1 : "")
    + "\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"required") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(14, data, 0),"data":data,"loc":{"start":{"line":27,"column":8},"end":{"line":43,"column":15}}})) != null ? stack1 : "")
    + "\r\n\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"boolean-input","required":(depth0 != null ? lookupProperty(depth0,"required") : depth0),"expands":depth0,"defaults":"{}"},"data":data,"loc":{"start":{"line":29,"column":79},"end":{"line":29,"column":167}}})},"data":data,"loc":{"start":{"line":29,"column":31},"end":{"line":29,"column":169}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":29,"column":19},"end":{"line":29,"column":172}}}))
    + " />\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"checkbox","op":"===","v1":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"type") : stack1)},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":31,"column":12},"end":{"line":34,"column":25}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input type=\"hidden\" name=\"!"
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "\" id=\"!"
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\"\r\n                value=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"uncheckValue") : stack1), depth0))
    + "\" />\r\n";
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"boolean-input","required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"expands":depth0,"defaults":"{}"},"data":data,"loc":{"start":{"line":38,"column":79},"end":{"line":38,"column":173}}})},"data":data,"loc":{"start":{"line":38,"column":31},"end":{"line":38,"column":174}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":38,"column":19},"end":{"line":38,"column":177}}}))
    + " />\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"checkbox","op":"===","v1":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"type") : stack1)},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":40,"column":12},"end":{"line":42,"column":25}}})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input type=\"hidden\" name=\"!"
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "\" id=\"!"
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"uncheckValue") : stack1), depth0))
    + "\" />\r\n";
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n        <input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"boolean-input","required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"expands":depth0,"defaults":"{}"},"data":data,"loc":{"start":{"line":48,"column":75},"end":{"line":48,"column":169}}})},"data":data,"loc":{"start":{"line":48,"column":27},"end":{"line":48,"column":170}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":48,"column":15},"end":{"line":48,"column":173}}}))
    + " />\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"checkbox","op":"===","v1":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"type") : stack1)},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":50,"column":8},"end":{"line":52,"column":21}}})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"fn":container.program(3, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":6,"column":0},"end":{"line":56,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":58,"column":0},"end":{"line":60,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_button", this["JST"]["_button"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"action","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1)},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":45,"column":15}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n        <button\r\n            "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"iconClass":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"icon") : stack1),"defaults":"{\"className\":\"emp-external-actions-menu\"}"},"data":data,"loc":{"start":{"line":6,"column":72},"end":{"line":6,"column":211}}})},"data":data,"loc":{"start":{"line":6,"column":24},"end":{"line":6,"column":212}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":6,"column":12},"end":{"line":6,"column":215}}}))
    + ">\r\n            Actions\r\n        </button>\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"op":"in","v1":"unregistered"},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":11,"column":8},"end":{"line":42,"column":19}}})) != null ? stack1 : "")
    + "\r\n\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <button "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"iconClass":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"icon") : stack1),"defaults":"{\"className\":\"emp-button-switch\"}"},"data":data,"loc":{"start":{"line":13,"column":80},"end":{"line":13,"column":188}}})},"data":data,"loc":{"start":{"line":13,"column":32},"end":{"line":13,"column":189}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":13,"column":20},"end":{"line":13,"column":192}}}))
    + ">\r\n                Unregistered Button\r\n                <span class=\"cui-hide-from-screen\">"
    + alias3(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "</span>\r\n            </button>\r\n\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"globalSwitch","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(8, data, 0),"inverse":container.program(10, data, 0),"data":data,"loc":{"start":{"line":20,"column":12},"end":{"line":41,"column":24}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <button "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"iconClass":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"icon") : stack1),"defaults":"{\"className\":\"emp-button-switch\"}"},"data":data,"loc":{"start":{"line":23,"column":84},"end":{"line":23,"column":192}}})},"data":data,"loc":{"start":{"line":23,"column":36},"end":{"line":23,"column":193}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":196}}}))
    + ">Switch</button>";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"specialIcon") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":27,"column":16},"end":{"line":32,"column":23}}})) != null ? stack1 : "")
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"popup") : stack1),{"name":"if","hash":{},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":36,"column":16},"end":{"line":38,"column":24}}})) != null ? stack1 : "")
    + "</button>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <button "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"idSuffix":(depth0 != null ? lookupProperty(depth0,"idSuffix") : depth0),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"iconClass":(depth0 != null ? lookupProperty(depth0,"specialIcon") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":29,"column":88},"end":{"line":29,"column":212}}})},"data":data,"loc":{"start":{"line":29,"column":40},"end":{"line":29,"column":213}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":29,"column":28},"end":{"line":29,"column":216}}}))
    + ">\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <button "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"primary":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"primary") : stack1),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"iconClass":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"icon") : stack1),"defaults":"{}"},"data":data,"loc":{"start":{"line":31,"column":88},"end":{"line":31,"column":215}}})},"data":data,"loc":{"start":{"line":31,"column":40},"end":{"line":31,"column":216}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":31,"column":28},"end":{"line":31,"column":219}}}))
    + ">\r\n";
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_popup"),(depth0 != null ? lookupProperty(depth0,"input") : depth0),{"name":"_popup","hash":{"scope":"button"},"data":data,"indent":"                    ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <button\r\n        "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"primary":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"primary") : stack1),"section":(depth0 != null ? lookupProperty(depth0,"section") : depth0),"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"iconClass":(depth0 != null ? lookupProperty(depth0,"icon") : depth0),"defaults":"{}"},"data":data,"loc":{"start":{"line":52,"column":62},"end":{"line":52,"column":183}}})},"data":data,"loc":{"start":{"line":52,"column":20},"end":{"line":52,"column":184}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":52,"column":8},"end":{"line":52,"column":187}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"popup") : stack1),{"name":"if","hash":{},"fn":container.program(18, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":54,"column":8},"end":{"line":56,"column":16}}})) != null ? stack1 : "")
    + "</button>\r\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_popup"),(depth0 != null ? lookupProperty(depth0,"input") : depth0),{"name":"_popup","hash":{"scope":"button"},"data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"input") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(17, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":58,"column":8}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_column", this["JST"]["_column"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"header","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":25,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":27,"column":8},"end":{"line":38,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"header","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(17, data, 0),"inverse":container.program(19, data, 0),"data":data,"loc":{"start":{"line":40,"column":4},"end":{"line":44,"column":16}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":6,"column":8},"end":{"line":20,"column":16}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"each","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":12},"end":{"line":15,"column":22}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":10,"column":16},"end":{"line":13,"column":24}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<th "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"colIndex":(depth0 != null ? lookupProperty(depth0,"colIndex") : depth0),"responsive":(depth0 != null ? lookupProperty(depth0,"responsive") : depth0),"sortable":(depth0 != null ? lookupProperty(depth0,"sortable") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"table-column","defaults":"{}"},"data":data,"loc":{"start":{"line":12,"column":78},"end":{"line":12,"column":247}}})},"data":data,"loc":{"start":{"line":12,"column":36},"end":{"line":12,"column":249}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":12,"column":24},"end":{"line":12,"column":252}}}))
    + ">\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<th "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"colIndex":(depth0 != null ? lookupProperty(depth0,"colIndex") : depth0),"sortable":(depth0 != null ? lookupProperty(depth0,"sortable") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"table-column","defaults":"{}"},"data":data,"loc":{"start":{"line":19,"column":70},"end":{"line":19,"column":212}}})},"data":data,"loc":{"start":{"line":19,"column":28},"end":{"line":19,"column":214}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":19,"column":16},"end":{"line":19,"column":217}}}))
    + ">\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<td "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,false,{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"cellSearch":(depth0 != null ? lookupProperty(depth0,"contents") : depth0),"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"table-column","defaults":"{}"},"data":data,"loc":{"start":{"line":24,"column":56},"end":{"line":24,"column":176}}})},"data":data,"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":178}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":24,"column":12},"end":{"line":24,"column":181}}}))
    + ">\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"contents") : depth0),{"name":"each","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":12},"end":{"line":33,"column":22}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,"table-column",{"name":"rendererHook","hash":{},"fn":container.program(13, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":31,"column":16},"end":{"line":31,"column":71}}})) != null ? stack1 : "");
},"13":function(container,depth0,helpers,partials,data) {
    return "";
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_columnContents"),depth0,{"name":"_columnContents","hash":{"hideLabel":(depth0 != null ? lookupProperty(depth0,"hideLabel") : depth0)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    return "</th>";
},"19":function(container,depth0,helpers,partials,data) {
    return "</td>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"skipRender") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":45,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_columnContents", this["JST"]["_columnContents"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"radio,checkbox","op":"!in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":4,"column":4},"end":{"line":14,"column":16}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}}}),depth0,{"hash":{"scope":"table-column"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":12,"column":13},"end":{"line":12,"column":43}}}),depth0,{"hash":{"scope":"table-column","noWrap":"true","insideTable":"true"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":4},"end":{"line":46,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":49,"column":4},"end":{"line":63,"column":12}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"hideLabel") : depth0)},"fn":container.program(8, data, 0),"inverse":container.program(10, data, 0),"data":data,"loc":{"start":{"line":21,"column":8},"end":{"line":44,"column":20}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span class=\"cui-hide-from-screen\">"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":27,"column":12},"end":{"line":42,"column":20}}})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":29,"column":76},"end":{"line":29,"column":106}}})},"data":data,"loc":{"start":{"line":29,"column":34},"end":{"line":29,"column":108}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":29,"column":22},"end":{"line":29,"column":110}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"footer","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"rowLoc") : depth0)},"fn":container.program(14, data, 0),"inverse":container.program(16, data, 0),"data":data,"loc":{"start":{"line":34,"column":16},"end":{"line":40,"column":28}}})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"footer","section":"table-footer","footerTooltip":depth0,"defaults":"{\"className\": \"footer-cell\"}"},"data":data,"loc":{"start":{"line":35,"column":80},"end":{"line":35,"column":193}}})},"data":data,"loc":{"start":{"line":35,"column":38},"end":{"line":35,"column":194}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":35,"column":26},"end":{"line":35,"column":196}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>";
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":39,"column":20},"end":{"line":39,"column":58}}})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":(depth0 != null ? lookupProperty(depth0,"template") : depth0),"op":"&&","v1":(depth0 != null ? lookupProperty(depth0,"text") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":65,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-addRemove", this["JST"]["_composite-addRemove"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<li>"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":19,"column":29},"end":{"line":19,"column":59}}}),depth0,{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</li>\r\n";
},"3":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depths[1] != null ? lookupProperty(depths[1],"checklist") : depths[1]),{"name":"each","hash":{},"fn":container.program(4, data, 2, blockParams, depths),"inverse":container.noop,"data":data,"blockParams":blockParams,"loc":{"start":{"line":27,"column":20},"end":{"line":31,"column":29}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data,blockParams) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),"op":"===","v1":blockParams[1][0]},"fn":container.program(5, data, 0, blockParams),"inverse":container.noop,"data":data,"blockParams":blockParams,"loc":{"start":{"line":28,"column":24},"end":{"line":30,"column":35}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data,blockParams) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                            <li data-checkValue=\""
    + alias2(alias1(blockParams[2][0], depth0))
    + "\" tabindex=\"0\"><span>"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "<span></li>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-add-remove-list\">\r\n    <div class=\"emp-add-remove-list-box\">\r\n        <div class=\"emp-add-remove-container\">\r\n            <header>"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"listName") : depth0), depth0))
    + "</header>\r\n            <ul>\r\n                <li>    \r\n                    <div class=\"emp-field emp-check-include-all-div\"> \r\n                        <div class=\"cui-data-left\">\r\n                            <div class=\"cui-data\">\r\n                                <input type=\"checkbox\" id=\"check-all\" class=\"emp-check-include-all\">\r\n                            </div>\r\n                            <div class=\"cui-label\"> \r\n                                <label for=\"check-all\">Include All</label> \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias3,(depth0 != null ? lookupProperty(depth0,"checklist") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"blockParams":blockParams,"loc":{"start":{"line":18,"column":16},"end":{"line":20,"column":27}}})) != null ? stack1 : "")
    + "</ul>\r\n        </div>\r\n        <div class=\"emp-order-list-container\">\r\n            <header>"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"listOrderName") : depth0), depth0))
    + "</header>\r\n            <ol>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias3,(lookupProperty(helpers,"splitString")||(depth0 && lookupProperty(depth0,"splitString"))||alias4).call(alias3,{"name":"splitString","hash":{"hiddenValue":((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"selectedOrder") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1)},"data":data,"blockParams":blockParams,"loc":{"start":{"line":26,"column":24},"end":{"line":26,"column":91}}}),{"name":"each","hash":{},"fn":container.program(3, data, 2, blockParams, depths),"inverse":container.noop,"data":data,"blockParams":blockParams,"loc":{"start":{"line":26,"column":16},"end":{"line":32,"column":25}}})) != null ? stack1 : "")
    + "            </ol>\r\n        </div>\r\n        <div class=\"emp-order-list-move-controls-container\">\r\n            <div class=\"emp-order-list-move-controls\">\r\n                <button class=\"emp-add-remove-up-button\" title=\"Select an item from the right list and press to move it up.\">\r\n                    Move item up\r\n                </button>\r\n                <button class=\"emp-add-remove-down-button\" title=\"Select an item from the right list and press to move it down.\">\r\n                    Move item down\r\n                </button>\r\n            </div>\r\n        </div>"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||alias4).call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"selectedOrder") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"blockParams":blockParams,"loc":{"start":{"line":45,"column":13},"end":{"line":45,"column":57}}}),(depth0 != null ? lookupProperty(depth0,"selectedOrder") : depth0),{"data":data,"blockParams":blockParams,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n</div>\r\n";
},"usePartial":true,"useData":true,"useDepths":true,"useBlockParams":true}));

Handlebars.registerPartial("_composite-buttonField", this["JST"]["_composite-buttonField"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-field\">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"button") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":8,"column":21},"end":{"line":8,"column":58}}}),(depth0 != null ? lookupProperty(depth0,"button") : depth0),{"hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-field emp-composite emp-buttonField-composite\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"_label","hash":{"scope":"buttonField-composite","readOnly":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "<div class=\"cui-data\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"button") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":8},"end":{"line":10,"column":16}}})) != null ? stack1 : "")
    + "</div>\r\n</div>\r\n\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-camera", this["JST"]["_composite-camera"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_button"),(depth0 != null ? lookupProperty(depth0,"button") : depth0),{"name":"_button","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-captcha", this["JST"]["_composite-captcha"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-field emp-captcha-composite\">\r\n    <div class=\"cui-label\"></div>\r\n    <div class=\"cui-data\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_image"),(depth0 != null ? lookupProperty(depth0,"image") : depth0),{"name":"_image","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-checkboxOther", this["JST"]["_composite-checkboxOther"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "cui-hidden";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-check-other-checkbox\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),(depth0 != null ? lookupProperty(depth0,"checkbox") : depth0),{"name":"_field","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n<div class=\"emp-check-other-describe "
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"checkbox") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":37},"end":{"line":4,"column":109}}})) != null ? stack1 : "")
    + "\">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"describe") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":5,"column":9},"end":{"line":5,"column":48}}}),(depth0 != null ? lookupProperty(depth0,"describe") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-dateTime", this["JST"]["_composite-dateTime"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"date") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":11,"column":21},"end":{"line":11,"column":56}}}),(depth0 != null ? lookupProperty(depth0,"date") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"hour") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":15,"column":21},"end":{"line":15,"column":56}}}),(depth0 != null ? lookupProperty(depth0,"hour") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"minute") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":19,"column":21},"end":{"line":19,"column":58}}}),(depth0 != null ? lookupProperty(depth0,"minute") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"minute") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":23,"column":21},"end":{"line":23,"column":58}}}),(depth0 != null ? lookupProperty(depth0,"period") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<fieldset "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{\"className\": \"emp-composite emp-date-time-composite\"}"},"data":data,"loc":{"start":{"line":1,"column":64},"end":{"line":1,"column":147}}})},"data":data,"loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":148}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":10},"end":{"line":1,"column":151}}}))
    + ">\r\n    <div class=\"cui-label\">\r\n        <legend>"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"legend") : depth0), depth0))
    + "</legend>\r\n    </div>\r\n\r\n    <div class=\"cui-data\">\r\n        <div class=\"emp-input-collection\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"date") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":10,"column":12},"end":{"line":12,"column":19}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"hour") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":14,"column":12},"end":{"line":16,"column":19}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"minute") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":12},"end":{"line":20,"column":19}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"period") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":22,"column":12},"end":{"line":24,"column":19}}})) != null ? stack1 : "")
    + "        </div>\r\n    </div>\r\n</fieldset>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-employeeLookup", this["JST"]["_composite-employeeLookup"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"prefix") : depth0), depth0))
    + "-";
},"3":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "-"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"suffix") : depth0), depth0));
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<fieldset "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"emp-search-composite emp-employee-search\"}"},"data":data,"loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":123}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":10},"end":{"line":1,"column":126}}}))
    + ">\r\n	<div class=\"cui-label\">\r\n        <legend>\r\n            Employee Search By:\r\n        </legend>\r\n    </div>\r\n    <div class=\"cui-data emp-search\">\r\n		<div class=\"emp-input-collection\">\r\n			<div class=\"emp-field\">\r\n				<label class=\"cui-hide-from-screen\" for=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":10,"column":45},"end":{"line":10,"column":87}}})) != null ? stack1 : "")
    + "employee-search-select"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":10,"column":109},"end":{"line":10,"column":151}}})) != null ? stack1 : "")
    + "\">Search By:</label>\r\n                <select id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":28},"end":{"line":11,"column":70}}})) != null ? stack1 : "")
    + "employee-search-select"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":92},"end":{"line":11,"column":134}}})) != null ? stack1 : "")
    + "\" name=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":142},"end":{"line":11,"column":184}}})) != null ? stack1 : "")
    + "employee-search-select"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":206},"end":{"line":11,"column":248}}})) != null ? stack1 : "")
    + "\" class=\"employee-search-select\">\r\n                	<option value=\"id\">ID</option>\r\n                	<option value=\"name\">Name</option>\r\n                </select>\r\n			</div>\r\n            <div class=\"emp-id-lookup-container\">\r\n    			<div class=\"emp-field emp-id-search\">\r\n                    <label class=\"cui-hide-from-screen\" for=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":61},"end":{"line":18,"column":103}}})) != null ? stack1 : "")
    + "employee-search-id"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":121},"end":{"line":18,"column":163}}})) != null ? stack1 : "")
    + "\">ID</label>\r\n                    <input name=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":33},"end":{"line":19,"column":75}}})) != null ? stack1 : "")
    + "employee-search-id"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":93},"end":{"line":19,"column":135}}})) != null ? stack1 : "")
    + "\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":141},"end":{"line":19,"column":183}}})) != null ? stack1 : "")
    + "employee-search-id"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":201},"end":{"line":19,"column":243}}})) != null ? stack1 : "")
    + "\" type=\"text\">\r\n                </div>\r\n            </div>\r\n            <div class=\"emp-name-lookup-container cui-hidden\">\r\n    			<div class=\"emp-field emp-name-search\">\r\n                    <label class=\"cui-hide-from-screen\" for=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":24,"column":61},"end":{"line":24,"column":103}}})) != null ? stack1 : "")
    + "employee-search-fname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":24,"column":124},"end":{"line":24,"column":166}}})) != null ? stack1 : "")
    + "\">First Name</label>\r\n                    <input name=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":75}}})) != null ? stack1 : "")
    + "employee-search-fname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":25,"column":96},"end":{"line":25,"column":138}}})) != null ? stack1 : "")
    + "\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":25,"column":144},"end":{"line":25,"column":186}}})) != null ? stack1 : "")
    + "employee-search-fname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":25,"column":207},"end":{"line":25,"column":249}}})) != null ? stack1 : "")
    + "\" type=\"text\">\r\n                </div>\r\n                <div class=\"emp-field emp-name-search\">\r\n                    <label class=\"cui-hide-from-screen\" for=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":28,"column":61},"end":{"line":28,"column":103}}})) != null ? stack1 : "")
    + "employee-search-mname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":28,"column":124},"end":{"line":28,"column":166}}})) != null ? stack1 : "")
    + "\">Middle Initial</label>\r\n                    <input name=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":33},"end":{"line":29,"column":75}}})) != null ? stack1 : "")
    + "employee-search-mname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":96},"end":{"line":29,"column":138}}})) != null ? stack1 : "")
    + "\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":144},"end":{"line":29,"column":186}}})) != null ? stack1 : "")
    + "employee-search-mname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":207},"end":{"line":29,"column":249}}})) != null ? stack1 : "")
    + "\" type=\"text\" size=\"1\">\r\n                </div>\r\n                <div class=\"emp-field emp-name-search\">\r\n                    <label class=\"cui-hide-from-screen\" for=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":32,"column":61},"end":{"line":32,"column":103}}})) != null ? stack1 : "")
    + "employee-search-lname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":32,"column":124},"end":{"line":32,"column":166}}})) != null ? stack1 : "")
    + "\">Last Name</label>\r\n                    <input name=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":33,"column":33},"end":{"line":33,"column":75}}})) != null ? stack1 : "")
    + "employee-search-lname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":33,"column":96},"end":{"line":33,"column":138}}})) != null ? stack1 : "")
    + "\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":33,"column":144},"end":{"line":33,"column":186}}})) != null ? stack1 : "")
    + "employee-search-lname"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":33,"column":207},"end":{"line":33,"column":249}}})) != null ? stack1 : "")
    + "\" type=\"text\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</fieldset>\r\n<div class=\"emp-search-results\">\r\n    <div class=\"emp-col-half emp-remove-padding\">\r\n        <div class=\"emp-field\">\r\n            <div class=\"cui-label\">\r\n                <span class=\"emp-label\">Employee ID:</span>\r\n            </div>\r\n            <div class=\"cui-data\">\r\n                <span class=\"emp-data employee-search-readonly-id\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":49,"column":71},"end":{"line":49,"column":113}}})) != null ? stack1 : "")
    + "employee-search-readonly-id"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":49,"column":140},"end":{"line":49,"column":182}}})) != null ? stack1 : "")
    + "\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"emp-col-half emp-remove-padding\">\r\n        <div class=\"emp-field\">\r\n            <div class=\"cui-label\">\r\n                <span class=\"emp-label\">Employee Name:</span>\r\n            </div>\r\n            <div class=\"cui-data\">\r\n                <span class=\"emp-data employee-search-readonly-name\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"prefix") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":59,"column":73},"end":{"line":59,"column":115}}})) != null ? stack1 : "")
    + "employee-search-readonly-name"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":59,"column":144},"end":{"line":59,"column":186}}})) != null ? stack1 : "")
    + "\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-entityLookup", this["JST"]["_composite-entityLookup"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return " emp-entity-lookup-legend ";
},"3":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            "
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"legendText") : depth0), depth0))
    + "\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    return "            Lookup entity by:\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<fieldset class=\"emp-composite emp-entity-lookup "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"showLegend") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":49},"end":{"line":1,"column":105}}})) != null ? stack1 : "")
    + "\">\r\n    <legend>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"legendText") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.program(5, data, 0),"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":7,"column":15}}})) != null ? stack1 : "")
    + "    </legend>\r\n    <div class=\"emp-entity-lookup-toggle\">\r\n"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),(depth0 != null ? lookupProperty(depth0,"select") : depth0),{"name":"_field","data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "    </div>\r\n    <div class=\"emp-entity-containers\">\r\n"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_composite-entityLookupSections"),(depth0 != null ? lookupProperty(depth0,"sections") : depth0),{"name":"_composite-entityLookupSections","hash":{"scope":"entityLookup","showContainer":(lookupProperty(helpers,"entityContainerSelect")||(depth0 && lookupProperty(depth0,"entityContainerSelect"))||container.hooks.helperMissing).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"select") : depth0)) != null ? lookupProperty(stack1,"input") : stack1),{"name":"entityContainerSelect","hash":{},"data":data,"loc":{"start":{"line":13,"column":72},"end":{"line":13,"column":113}}})},"data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "    </div>\r\n</fieldset>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-entityLookupSections", this["JST"]["_composite-entityLookupSections"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <div class=\"emp-entity-container "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":(depths[1] != null ? lookupProperty(depths[1],"showContainer") : depths[1]),"op":"===","v1":(data && lookupProperty(data,"key"))},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":37},"end":{"line":2,"column":114}}})) != null ? stack1 : "")
    + "\" data-entity-key=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"key") || (data && lookupProperty(data,"key"))) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":2,"column":133},"end":{"line":2,"column":141}}}) : helper)))
    + "\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":6,"column":15}}})) != null ? stack1 : "")
    + "    </div>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    return "emp-show-container";
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":47}}}),depth0,{"hash":{"scope":"entityLookup"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"parts") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":8,"column":9}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true,"useDepths":true}));

Handlebars.registerPartial("_composite-errorReport", this["JST"]["_composite-errorReport"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div id=\"errorReportScreen\" class=\"emp-report-container\" data-url=\""
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"reportURL") : depth0), depth0))
    + "\">\r\n</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-eventsComments", this["JST"]["_composite-eventsComments"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "    <div class=\"emp-event-comment\">\r\n      <div class=\"cui-row\">\r\n        <div class=\"emp-col-full\">\r\n          <div class=\"emp-field\">\r\n            <div class=\"cui-label\" for=\"E_NAME\"> <span>Name:</span> </div>\r\n            <div class=\"cui-data\"> <span class=\"emp-data\" id=\"E_NAME\">Billy Bob Thorton</span> </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"cui-row\">\r\n        <div class=\"emp-col-full\">\r\n          <div class=\"emp-field\">\r\n            <div class=\"cui-label\" for=\"E_DATE\"> <span>Date:</span> </div>\r\n            <div class=\"cui-data\"> <span class=\"emp-data\" id=\"E_DATE\">01/01/2018</span> </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"cui-row\">\r\n        <div class=\"emp-col-full\">\r\n          <div class=\"emp-field\">\r\n            <div class=\"cui-label\"> <span class=\"cui-hide-from-screen\">Event Comment:</span> </div>\r\n            <div class=\"cui-data\"> <span class=\"emp-data\">Armageddon was the best picture ever made!</span> </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <span class=\"emp-comment-breaker\"></span>\r\n    </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<section class=\"emp-events-comments\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"comments") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":2},"end":{"line":30,"column":11}}})) != null ? stack1 : "")
    + "</section>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-external-account-demo", this["JST"]["_composite-external-account-demo"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-popover-group emp-account-group\">\r\n    <div class=\"emp-account-type\">\r\n        <span class=\"emp-static-key\">Account:</span>\r\n        <span class=\"emp-static-value\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"account") || (depth0 != null ? lookupProperty(depth0,"account") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"account","hash":{},"data":data,"loc":{"start":{"line":4,"column":39},"end":{"line":4,"column":50}}}) : helper)))
    + "</span>\r\n    </div>\r\n    <div class=\"emp-account-role\">\r\n        <span class=\"emp-static-key\">Role:</span>\r\n        <span class=\"emp-static-value\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"role") || (depth0 != null ? lookupProperty(depth0,"role") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"role","hash":{},"data":data,"loc":{"start":{"line":8,"column":39},"end":{"line":8,"column":47}}}) : helper)))
    + "</span>\r\n    </div>\r\n</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-external-auth-user", this["JST"]["_composite-external-auth-user"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3="function", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-popover-group emp-auth-user-group\">\r\n    <div class=\"emp-auth-real-name\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"realName") || (depth0 != null ? lookupProperty(depth0,"realName") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"realName","hash":{},"data":data,"loc":{"start":{"line":2,"column":36},"end":{"line":2,"column":48}}}) : helper)))
    + "</div>\r\n    <div class=\"emp-auth-company-name\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"companyName") || (depth0 != null ? lookupProperty(depth0,"companyName") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"companyName","hash":{},"data":data,"loc":{"start":{"line":3,"column":39},"end":{"line":3,"column":54}}}) : helper)))
    + "</div>\r\n    <div class=\"emp-auth-user-id\">"
    + alias4(((helper = (helper = lookupProperty(helpers,"userid") || (depth0 != null ? lookupProperty(depth0,"userid") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{"name":"userid","hash":{},"data":data,"loc":{"start":{"line":4,"column":34},"end":{"line":4,"column":44}}}) : helper)))
    + "</div>\r\n</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-external-legal-terms", this["JST"]["_composite-external-legal-terms"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-legal-agree-wrapper\">\r\n"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_booleanInput"),(depth0 != null ? lookupProperty(depth0,"checkbox") : depth0),{"name":"_booleanInput","hash":{"noWrap":true},"data":data,"indent":"    ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(depth0 != null ? lookupProperty(depth0,"checkbox") : depth0),{"name":"_label","hash":{"noWrap":true},"data":data,"indent":"    ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-fwNameSearchList", this["JST"]["_composite-fwNameSearchList"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, alias1=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<li>\r\n			<strong>"
    + alias1(((helper = (helper = lookupProperty(helpers,"key") || (data && lookupProperty(data,"key"))) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"key","hash":{},"data":data,"loc":{"start":{"line":4,"column":11},"end":{"line":4,"column":19}}}) : helper)))
    + "</strong>"
    + alias1(container.lambda(depth0, depth0))
    + "\r\n		</li>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<ul>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"list") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":1},"end":{"line":6,"column":11}}})) != null ? stack1 : "")
    + "</ul>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-iframe", this["JST"]["_composite-iframe"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<iframe class=\"emp-iframe\" "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"properties") : depth0),{"name":"mergeAttributes","hash":{},"data":data,"loc":{"start":{"line":1,"column":39},"end":{"line":1,"column":72}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":74}}}))
    + "></iframe>";
},"useData":true}));

Handlebars.registerPartial("_composite-inlineSections", this["JST"]["_composite-inlineSections"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"type") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.program(6, data, 0),"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":11,"column":15}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"section","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":12},"end":{"line":6,"column":23}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                 "
    + ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||alias2).call(alias1,(lookupProperty(helpers,"extendData")||(depth0 && lookupProperty(depth0,"extendData"))||alias2).call(alias1,depth0,{"name":"extendData","hash":{},"data":data,"loc":{"start":{"line":5,"column":33},"end":{"line":5,"column":50}}}),{"name":"rendererHook","hash":{"scope":"inlineSection"},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":17},"end":{"line":5,"column":91}}})) != null ? stack1 : "")
    + "\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    return "";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"group","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"template") : depth0)},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":12},"end":{"line":10,"column":23}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                "
    + ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||alias2).call(alias1,(lookupProperty(helpers,"extendData")||(depth0 && lookupProperty(depth0,"extendData"))||alias2).call(alias1,depth0,{"name":"extendData","hash":{},"data":data,"loc":{"start":{"line":9,"column":32},"end":{"line":9,"column":49}}}),{"name":"rendererHook","hash":{"scope":"inlineSection"},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":16},"end":{"line":9,"column":90}}})) != null ? stack1 : "")
    + "\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-inline-sections\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":12,"column":13}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_composite-inputLabel", this["JST"]["_composite-inputLabel"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-field emp-labelInput-composite\">\r\n    <div class=\"cui-label\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"_label","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_input"),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"_input","hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n    <div class=\"cui-data\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(depth0 != null ? lookupProperty(depth0,"input") : depth0),{"name":"_label","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_input"),(depth0 != null ? lookupProperty(depth0,"input") : depth0),{"name":"_input","hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-linkList", this["JST"]["_composite-linkList"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"attributes,scope,state,section","op":"!in","v1":(lookupProperty(helpers,"getKey")||(depth0 && lookupProperty(depth0,"getKey"))||alias2).call(alias1,(data && lookupProperty(data,"key")),{"name":"getKey","hash":{},"data":data,"loc":{"start":{"line":4,"column":21},"end":{"line":4,"column":34}}})},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":8},"end":{"line":10,"column":19}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"link","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"template") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":12},"end":{"line":9,"column":23}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <li>"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),"link",{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":7,"column":22},"end":{"line":7,"column":45}}}),depth0,{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</li>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-link-list\">\r\n    <ul>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"links") : depth0),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":11,"column":13}}})) != null ? stack1 : "")
    + "    </ul>\r\n</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-search", this["JST"]["_composite-search"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_inputGroup"),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"_inputGroup","hash":{"scope":(depth0 != null ? lookupProperty(depth0,"scope") : depth0),"clearButton":(depth0 != null ? lookupProperty(depth0,"clearButton") : depth0),"fieldSearch":(depth0 != null ? lookupProperty(depth0,"button") : depth0)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(16, data, 0),"data":data,"loc":{"start":{"line":7,"column":4},"end":{"line":118,"column":12}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n        <div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"search-composite","dynamicLabel":(depth0 != null ? lookupProperty(depth0,"label") : depth0),"federal":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"federal") : stack1),"compositeSearchRequired":depth0,"validationError":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"message") : stack1)) != null ? lookupProperty(stack1,"type") : stack1),"defaults":"{\"className\": \"emp-composite emp-search-composite\"}"},"data":data,"loc":{"start":{"line":9,"column":67},"end":{"line":9,"column":296}}})},"data":data,"loc":{"start":{"line":9,"column":25},"end":{"line":9,"column":297}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":9,"column":13},"end":{"line":9,"column":299}}}))
    + ">\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"input","op":"hasProperty","v1":(depth0 != null ? lookupProperty(depth0,"label") : depth0)},"fn":container.program(5, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":12,"column":12},"end":{"line":30,"column":24}}})) != null ? stack1 : "")
    + "<div class=\"cui-data emp-search\">\r\n\r\n                <div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"search-composite","style":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"style") : stack1),"defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":34,"column":75},"end":{"line":34,"column":183}}})},"data":data,"loc":{"start":{"line":34,"column":33},"end":{"line":34,"column":184}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":34,"column":21},"end":{"line":34,"column":186}}}))
    + ">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":35,"column":25},"end":{"line":35,"column":60}}}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"hash":{"composite":"search","noWrap":true,"noFieldWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "                </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"button") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":38,"column":16},"end":{"line":42,"column":24}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"entityLookup","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"scope") : depth0)},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":44,"column":16},"end":{"line":48,"column":27}}})) != null ? stack1 : "")
    + "\r\n            </div>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"message") : stack1),{"name":"if","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":52,"column":12},"end":{"line":56,"column":20}}})) != null ? stack1 : "")
    + "</div>";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"select","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"type") : stack1)},"fn":container.program(6, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":14,"column":16},"end":{"line":24,"column":28}}})) != null ? stack1 : "");
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-label\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"_field","hash":{"scope":"search-composite","readOnly":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"readOnly") : stack1),"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n\r\n";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"_label","hash":{"scope":"search-composite","readOnly":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-field\">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"button") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":40,"column":29},"end":{"line":40,"column":66}}}),(depth0 != null ? lookupProperty(depth0,"button") : depth0),{"hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                    <div class=\"emp-field\">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"clearButton") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":46,"column":30},"end":{"line":46,"column":72}}}),(depth0 != null ? lookupProperty(depth0,"clearButton") : depth0),{"hash":{"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-composite-message\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"message") : stack1),{"name":"_message","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"search-composite","dynamicLabel":(depth0 != null ? lookupProperty(depth0,"label") : depth0),"federal":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"federal") : stack1),"compositeSearchRequired":depth0,"validationError":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"message") : stack1)) != null ? lookupProperty(stack1,"type") : stack1),"defaults":"{\"className\": \"emp-composite emp-search-composite\"}"},"data":data,"loc":{"start":{"line":62,"column":67},"end":{"line":62,"column":296}}})},"data":data,"loc":{"start":{"line":62,"column":25},"end":{"line":62,"column":297}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":62,"column":13},"end":{"line":62,"column":299}}}))
    + ">\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"input","op":"hasProperty","v1":(depth0 != null ? lookupProperty(depth0,"text") : depth0)},"fn":container.program(17, data, 0),"inverse":container.program(22, data, 0),"data":data,"loc":{"start":{"line":64,"column":12},"end":{"line":82,"column":24}}})) != null ? stack1 : "")
    + "<div class=\"cui-data emp-search\">\r\n\r\n                <div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"search-composite","style":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"style") : stack1),"defaults":"{\"className\": \"emp-field\"}"},"data":data,"loc":{"start":{"line":86,"column":75},"end":{"line":86,"column":183}}})},"data":data,"loc":{"start":{"line":86,"column":33},"end":{"line":86,"column":184}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":86,"column":21},"end":{"line":86,"column":186}}}))
    + ">"
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":87,"column":25},"end":{"line":87,"column":60}}}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"hash":{"composite":"search","noWrap":true,"noFieldWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "                </div>\r\n\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"button") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":96,"column":16},"end":{"line":100,"column":24}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"clearButton") : depth0),{"name":"if","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":102,"column":16},"end":{"line":106,"column":23}}})) != null ? stack1 : "")
    + "\r\n            </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"message") : stack1),{"name":"if","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":111,"column":12},"end":{"line":115,"column":20}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"select","op":"===","v1":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"label") : stack1)) != null ? lookupProperty(stack1,"type") : stack1)},"fn":container.program(18, data, 0),"inverse":container.program(20, data, 0),"data":data,"loc":{"start":{"line":66,"column":16},"end":{"line":76,"column":28}}})) != null ? stack1 : "");
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-label\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"_field","hash":{"scope":"search-composite","readOnly":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"readOnly") : stack1),"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n\r\n";
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(lookupProperty(helpers,"alterVisibility")||(depth0 && lookupProperty(depth0,"alterVisibility"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"alterVisibility","hash":{},"data":data,"loc":{"start":{"line":74,"column":32},"end":{"line":74,"column":59}}}),{"name":"_label","hash":{"scope":"search-composite","readOnly":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"22":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"_label","hash":{"scope":"search-composite","readOnly":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"inputGroup","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"text") : depth0)) != null ? lookupProperty(stack1,"template") : stack1)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":119,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-selectionList", this["JST"]["_composite-selectionList"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"label") : stack1),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":5},"end":{"line":17,"column":12}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"label") : stack1)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":6},"end":{"line":16,"column":13}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	    		<legend "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"required") : stack1),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":15},"end":{"line":5,"column":115}}})) != null ? stack1 : "")
    + ">\r\n	    			"
    + container.escapeExpression(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"label") : stack1)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + "\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"input") : stack1),{"name":"if","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":8},"end":{"line":14,"column":12}}})) != null ? stack1 : "")
    + "	    		</legend>\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "aria-label=\""
    + container.escapeExpression(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"label") : stack1)) != null ? lookupProperty(stack1,"text") : stack1), depth0))
    + " Required\"";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":9},"end":{"line":13,"column":13}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"legend") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"required") : stack1),{"name":"if","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":10,"column":10},"end":{"line":12,"column":14}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    return "				    			<span class=\"cui-required\"></span>\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"fields") : depth0),{"name":"each","hash":{},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":21,"column":5},"end":{"line":27,"column":11}}})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	        <div class=\"emp-selection-list-field-container "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"===","v1":((stack1 = ((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"parts") : depth0)) != null ? lookupProperty(stack1,"field") : stack1)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"checked") : stack1)},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":22,"column":56},"end":{"line":22,"column":165}}})) != null ? stack1 : "")
    + "\" data-entity-key=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"key") || (data && lookupProperty(data,"key"))) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":22,"column":184},"end":{"line":22,"column":192}}}) : helper)))
    + "\">			    	\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(14, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":23,"column":10},"end":{"line":25,"column":17}}})) != null ? stack1 : "")
    + "		    </div>\r\n";
},"12":function(container,depth0,helpers,partials,data) {
    return "emp-selection-list-active";
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":24,"column":19},"end":{"line":24,"column":49}}}),depth0,{"hash":{"scope":"selectionList"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<fieldset class=\"emp-composite emp-selection-list\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"legend") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":18,"column":11}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"fields") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":20,"column":4},"end":{"line":28,"column":8}}})) != null ? stack1 : "")
    + "</fieldset>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-selectionListField", this["JST"]["_composite-selectionListField"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"field") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":3,"column":7},"end":{"line":3,"column":43}}}),(depth0 != null ? lookupProperty(depth0,"field") : depth0),{"hash":{"scope":"selectionListField-header"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    return "";
},"5":function(container,depth0,helpers,partials,data) {
    return "emp-collapse";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"field") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"expands") : stack1), depth0));
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":2},"end":{"line":10,"column":12}}})) != null ? stack1 : "");
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "	        "
    + ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,"",{"name":"rendererHook","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":9},"end":{"line":9,"column":51}}})) != null ? stack1 : "")
    + "\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-composite emp-selection-list-field-header\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"field") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":1},"end":{"line":4,"column":8}}})) != null ? stack1 : "")
    + "</div>\r\n<div class=\"emp-composite emp-selection-list-field-body emp-region "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = ((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"field") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"checked") : stack1)},"fn":container.program(3, data, 0),"inverse":container.program(5, data, 0),"data":data,"loc":{"start":{"line":6,"column":67},"end":{"line":6,"column":173}}})) != null ? stack1 : "")
    + " emp-expandable-region\" id=\""
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"field") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"expands") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":201},"end":{"line":6,"column":268}}})) != null ? stack1 : "")
    + "\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,(depth0 != null ? lookupProperty(depth0,"container") : depth0),{"name":"each","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":7,"column":1},"end":{"line":11,"column":10}}})) != null ? stack1 : "")
    + "</div>";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-selectOther", this["JST"]["_composite-selectOther"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),(depth0 != null ? lookupProperty(depth0,"select") : depth0),{"name":"_field","hash":{"scope":"selectOther","otherValue":(depth0 != null ? lookupProperty(depth0,"otherValue") : depth0)},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_field"),(depth0 != null ? lookupProperty(depth0,"select") : depth0),{"name":"_field","hash":{"scope":"selectOther","otherValue":"other"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-select-other-describe "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"select") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),"op":"!=","v1":(depth0 != null ? lookupProperty(depth0,"otherValue") : depth0)},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":38},"end":{"line":9,"column":125}}})) != null ? stack1 : "")
    + "\">\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    return "cui-hidden";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-select-other-describe "
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"select") : depth0)) != null ? lookupProperty(stack1,"input") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),"op":"!=","v1":"other"},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":38},"end":{"line":11,"column":117}}})) != null ? stack1 : "")
    + "\"></div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-select-other-selectbox\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"otherValue") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":6,"column":11}}})) != null ? stack1 : "")
    + "</div>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"otherValue") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":8,"column":0},"end":{"line":12,"column":7}}})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"describe") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":13,"column":9},"end":{"line":13,"column":48}}}),(depth0 != null ? lookupProperty(depth0,"describe") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-tableColumn", this["JST"]["_composite-tableColumn"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<table>\r\n    <tbody>\r\n        <tr id=\"generated-column\">"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_column"),(depth0 != null ? lookupProperty(depth0,"column") : depth0),{"name":"_column","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "</tr>\r\n    </tbody>\r\n</table>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_composite-threeButtonColumn", this["JST"]["_composite-threeButtonColumn"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "				<div class=\"cui-row emp-button-row\">\r\n					<div class=\"emp-col-full button-col emp-button-group\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"left") : depth0),{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":7,"column":6},"end":{"line":9,"column":25}}})) != null ? stack1 : "")
    + "</div>\r\n		       	</div>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"rendererHook")||(depth0 && lookupProperty(depth0,"rendererHook"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,"",{"name":"rendererHook","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":10},"end":{"line":8,"column":53}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    return "";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "				<div class=\"cui-row emp-button-row\">\r\n					<div class=\"emp-col-full button-col emp-button-group cui-align-center\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"center") : depth0),{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":6},"end":{"line":20,"column":25}}})) != null ? stack1 : "")
    + "</div>\r\n		       	</div>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "				<div class=\"cui-row emp-button-row\">\r\n					<div class=\"emp-col-full button-col emp-button-group cui-align-right\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"right") : depth0),{"name":"each","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":6},"end":{"line":31,"column":25}}})) != null ? stack1 : "")
    + "</div>\r\n		       	</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-composite emp-threeButtonColumn\">\r\n	<div class=\"cui-row\">\r\n		<div class=\"cui-col-medium-4\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"left") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":3},"end":{"line":12,"column":16}}})) != null ? stack1 : "")
    + "		</div>\r\n		<div class=\"cui-col-medium-4\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"center") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":15,"column":3},"end":{"line":23,"column":16}}})) != null ? stack1 : "")
    + "		</div>\r\n		<div class=\"cui-col-medium-4\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"right") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":26,"column":3},"end":{"line":34,"column":16}}})) != null ? stack1 : "")
    + "		</div>\r\n	</div>\r\n</div>";
},"useData":true}));

Handlebars.registerPartial("_currencySuffix", this["JST"]["_currencySuffix"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span class=\"cui-input-append\">"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>";
},"useData":true}));

Handlebars.registerPartial("_date", this["JST"]["_date"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "<div class=\"cui-data\">\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":8,"column":74},"end":{"line":8,"column":126}}})},"data":data,"loc":{"start":{"line":8,"column":26},"end":{"line":8,"column":127}}}),{"name":"attribute","hash":{"skip":"value,name,type,aria-required,data-validation","defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1)},"data":data,"loc":{"start":{"line":8,"column":14},"end":{"line":8,"column":223}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":9,"column":12},"end":{"line":9,"column":68}}})) != null ? stack1 : "")
    + "</span>";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"dynamics":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"formats") : stack1),"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"required":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"defaults":"{\"className\":\"emp-date\"}"},"data":data,"loc":{"start":{"line":13,"column":75},"end":{"line":13,"column":188}}})},"data":data,"loc":{"start":{"line":13,"column":27},"end":{"line":13,"column":217}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":13,"column":15},"end":{"line":13,"column":220}}}))
    + " />\r\n        <button type=\"button\" id=\"cal_"
    + alias3(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" class=\"cui-icon cui-c-datepicker\" title=\"Select Date\" >Date picker</button>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":16}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"fn":container.program(3, data, 0),"inverse":container.program(5, data, 0),"data":data,"loc":{"start":{"line":6,"column":4},"end":{"line":15,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"composite") : depth0),{"name":"unless","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":4},"end":{"line":22,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":24,"column":4},"end":{"line":26,"column":11}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":28,"column":0},"end":{"line":30,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_fieldLayout", this["JST"]["_fieldLayout"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_input"),depth0,{"name":"_input","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),depth0,{"name":"_label","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),depth0,{"name":"_label","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_input"),depth0,{"name":"_input","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"flip") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":7,"column":8}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_file", this["JST"]["_file"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),depth0,{"name":"_label","hash":{"scope":"file-upload","readOnly":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1),"noWrap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-label\">\r\n"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_label"),depth0,{"name":"_label","hash":{"scope":"file-upload","readOnly":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1),"noWrap":true},"data":data,"indent":"            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "        </div>\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-composite-message\">\r\n"
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"indent":"        ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "")
    + "        </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"file-upload","federal":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"federal") : stack1),"required":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"validationError":((stack1 = (depth0 != null ? lookupProperty(depth0,"message") : depth0)) != null ? lookupProperty(stack1,"type") : stack1),"defaults":"{\"className\": \"emp-composite emp-search-composite emp-file-upload\"}"},"data":data,"loc":{"start":{"line":1,"column":59},"end":{"line":1,"column":256}}})},"data":data,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":257}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":5},"end":{"line":1,"column":259}}}))
    + ">\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"false","op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"hasLayout") : stack1)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":10,"column":16}}})) != null ? stack1 : "")
    + "<div class=\"cui-data emp-search\">\r\n        <div class=\"emp-field\">\r\n            <span class=\"emp-data emp-file-upload-name\">Select a file</span>\r\n        </div>\r\n        <div class=\"emp-field\">\r\n            <button type=\"button\" class=\"emp-file-upload-button\" type=\"button\">Browse</button>\r\n        </div>\r\n        <input "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"file-upload","required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"defaults":"{\"className\": \"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":19,"column":75},"end":{"line":19,"column":189}}})},"data":data,"loc":{"start":{"line":19,"column":27},"end":{"line":19,"column":191}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":19,"column":15},"end":{"line":19,"column":194}}}))
    + ">\r\n    </div>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":23,"column":4},"end":{"line":27,"column":12}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_hidden", this["JST"]["_hidden"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n    <input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"defaults":"{\"data-required\":true}"},"data":data,"loc":{"start":{"line":3,"column":71},"end":{"line":3,"column":191}}})},"data":data,"loc":{"start":{"line":3,"column":23},"end":{"line":3,"column":192}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":195}}}))
    + " />\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n    <input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"defaults":"{}"},"data":data,"loc":{"start":{"line":6,"column":71},"end":{"line":6,"column":171}}})},"data":data,"loc":{"start":{"line":6,"column":23},"end":{"line":6,"column":172}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":175}}}))
    + " />\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"forceRequired","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"state") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":7,"column":11}}})) != null ? stack1 : "");
},"useData":true}));

Handlebars.registerPartial("_image", this["JST"]["_image"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<img "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":59},"end":{"line":1,"column":89}}})},"data":data,"loc":{"start":{"line":1,"column":17},"end":{"line":1,"column":91}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":5},"end":{"line":1,"column":93}}}))
    + "/>\r\n";
},"useData":true}));

Handlebars.registerPartial("_input", this["JST"]["_input"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_text"),depth0,{"name":"_text","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_date"),depth0,{"name":"_date","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_textArea"),depth0,{"name":"_textArea","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"multiple") : stack1),{"name":"if","hash":{},"fn":container.program(8, data, 0),"inverse":container.program(10, data, 0),"data":data,"loc":{"start":{"line":25,"column":4},"end":{"line":29,"column":12}}})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_select"),depth0,{"name":"_select","hash":{"mode":"multi","defaults":"{\"multiple\": \"\", \"size\": 4}"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_select"),depth0,{"name":"_select","hash":{"mode":"single","defaults":"{}"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"primary") : stack1)},"fn":container.program(13, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":36,"column":4},"end":{"line":40,"column":16}}})) != null ? stack1 : "");
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_button"),depth0,{"name":"_button","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"extendDefaults","hash":{"defaults":"{\"className\":\"cui-button-primary\"}"},"data":data,"loc":{"start":{"line":37,"column":35},"end":{"line":37,"column":97}}})},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_button"),depth0,{"name":"_button","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"extendDefaults","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":39,"column":35},"end":{"line":39,"column":65}}})},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_hidden"),depth0,{"name":"_hidden","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_booleanInput"),depth0,{"name":"_booleanInput","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"text,email,month,number,range,search,tel,time,url,week,color,password","op":"in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":6,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"date","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":0},"end":{"line":13,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"textarea","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":16,"column":0},"end":{"line":20,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"select","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":23,"column":0},"end":{"line":31,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"button","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(12, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":34,"column":0},"end":{"line":42,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"hidden","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":45,"column":0},"end":{"line":49,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"radio,checkbox","op":"in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":52,"column":0},"end":{"line":56,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_itag", this["JST"]["_itag"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_output"),depth0,{"name":"_output","hash":{"raw":true},"data":data,"indent":"            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<button class=\"cui-icon emp-icon-help\" title=\"More information\" type=\"button\">More information\r\n    <div class=\"cui-hide-from-screen\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":5},"end":{"line":5,"column":17}}})) != null ? stack1 : "")
    + "    </div>\r\n</button>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_label", this["JST"]["_label"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":4},"end":{"line":6,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"visibility") : stack1),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":8,"column":4},"end":{"line":30,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":32,"column":4},"end":{"line":34,"column":16}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"labelStyles":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"labelLength":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),"defaults":"{\"className\":\"cui-label\"}"},"data":data,"loc":{"start":{"line":5,"column":67},"end":{"line":5,"column":177}}})},"data":data,"loc":{"start":{"line":5,"column":25},"end":{"line":5,"column":178}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":5,"column":13},"end":{"line":5,"column":181}}}))
    + ">\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":false,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"hasLayout") : stack1)},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":10,"column":8},"end":{"line":22,"column":20}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"skipAttributes":"for","defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":12,"column":30},"end":{"line":12,"column":138}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":12,"column":18},"end":{"line":12,"column":141}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":13,"column":16},"end":{"line":13,"column":60}}})) != null ? stack1 : "")
    + "</span>";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"emp-hide-label-with-space\">\r\n                <span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"skipAttributes":"for","defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":18,"column":34},"end":{"line":18,"column":142}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":18,"column":22},"end":{"line":18,"column":145}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":19,"column":20},"end":{"line":19,"column":64}}})) != null ? stack1 : "")
    + "</span>\r\n            </div>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"skipAttributes":"for","defaults":(depth0 != null ? lookupProperty(depth0,"defaults") : depth0)},"data":data,"loc":{"start":{"line":27,"column":26},"end":{"line":27,"column":104}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":27,"column":14},"end":{"line":27,"column":107}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":28,"column":12},"end":{"line":28,"column":56}}})) != null ? stack1 : "")
    + "</span>\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"readOnly") : depth0)},"fn":container.program(14, data, 0),"inverse":container.program(20, data, 0),"data":data,"loc":{"start":{"line":39,"column":4},"end":{"line":168,"column":16}}})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"visibility") : stack1),{"name":"if","hash":{},"fn":container.program(15, data, 0),"inverse":container.program(18, data, 0),"data":data,"loc":{"start":{"line":41,"column":8},"end":{"line":64,"column":16}}})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":false,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"hasLayout") : stack1)},"fn":container.program(5, data, 0),"inverse":container.program(16, data, 0),"data":data,"loc":{"start":{"line":43,"column":12},"end":{"line":55,"column":24}}})) != null ? stack1 : "");
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-label emp-hide-label-with-space\">\r\n                    <span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"skipAttributes":"for","defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":51,"column":38},"end":{"line":51,"column":146}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":51,"column":26},"end":{"line":51,"column":149}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":52,"column":24},"end":{"line":52,"column":68}}})) != null ? stack1 : "")
    + "</span>\r\n                </div>\r\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"cui-label\">\r\n                <span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"skipAttributes":"for","defaults":"{\"className\":\"emp-label\"}"},"data":data,"loc":{"start":{"line":60,"column":34},"end":{"line":60,"column":131}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":60,"column":22},"end":{"line":60,"column":134}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":61,"column":20},"end":{"line":61,"column":64}}})) != null ? stack1 : "")
    + "</span>\r\n            </div>\r\n";
},"20":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"visibility") : stack1),{"name":"if","hash":{},"fn":container.program(21, data, 0),"inverse":container.program(26, data, 0),"data":data,"loc":{"start":{"line":69,"column":8},"end":{"line":167,"column":16}}})) != null ? stack1 : "");
},"21":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":false,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"hasLayout") : stack1)},"fn":container.program(22, data, 0),"inverse":container.program(24, data, 0),"data":data,"loc":{"start":{"line":72,"column":12},"end":{"line":87,"column":24}}})) != null ? stack1 : "");
},"22":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":75,"column":35},"end":{"line":75,"column":122}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":75,"column":23},"end":{"line":75,"column":125}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":76,"column":20},"end":{"line":76,"column":64}}})) != null ? stack1 : "")
    + "</label>\r\n";
},"24":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <div class=\"cui-label emp-hide-label-with-space\">\r\n                    <label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":82,"column":39},"end":{"line":82,"column":126}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":82,"column":27},"end":{"line":82,"column":129}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":83,"column":24},"end":{"line":83,"column":68}}})) != null ? stack1 : "")
    + "</label>\r\n                </div>\r\n\r\n";
},"26":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"radio,checkbox","op":"!in","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(27, data, 0),"inverse":container.program(42, data, 0),"data":data,"loc":{"start":{"line":92,"column":12},"end":{"line":166,"column":24}}})) != null ? stack1 : "");
},"27":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"label") : depth0),{"name":"if","hash":{},"fn":container.program(28, data, 0),"inverse":container.program(31, data, 0),"data":data,"loc":{"start":{"line":94,"column":16},"end":{"line":153,"column":23}}})) != null ? stack1 : "");
},"28":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(29, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":97,"column":20},"end":{"line":100,"column":32}}})) != null ? stack1 : "")
    + "<label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"labelStyles":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"defaults":"{}"},"data":data,"loc":{"start":{"line":102,"column":91},"end":{"line":102,"column":150}}})},"data":data,"loc":{"start":{"line":102,"column":43},"end":{"line":102,"column":152}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":102,"column":31},"end":{"line":102,"column":155}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":103,"column":28},"end":{"line":103,"column":72}}})) != null ? stack1 : "")
    + "</label>\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":106,"column":20},"end":{"line":108,"column":32}}})) != null ? stack1 : "");
},"29":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"skipAttributes":"for","defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"labelStyles":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"labelLength":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),"defaults":"{\"className\":\"cui-label\"}"},"data":data,"loc":{"start":{"line":98,"column":89},"end":{"line":99,"column":53}}})},"data":data,"loc":{"start":{"line":98,"column":41},"end":{"line":99,"column":76}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":98,"column":29},"end":{"line":99,"column":79}}}))
    + ">\r\n";
},"31":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"if","hash":{},"fn":container.program(32, data, 0),"inverse":container.program(34, data, 0),"data":data,"loc":{"start":{"line":113,"column":20},"end":{"line":151,"column":27}}})) != null ? stack1 : "")
    + "\r\n";
},"32":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                        <label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":115,"column":43},"end":{"line":115,"column":91}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":115,"column":31},"end":{"line":115,"column":94}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":116,"column":28},"end":{"line":116,"column":66}}})) != null ? stack1 : "")
    + "</label>\r\n\r\n";
},"34":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"hasLayout","op":(depth0 != null ? lookupProperty(depth0,"hasProperty") : depth0),"v1":depth0},"fn":container.program(35, data, 0),"inverse":container.program(40, data, 0),"data":data,"loc":{"start":{"line":121,"column":20},"end":{"line":149,"column":31}}})) != null ? stack1 : "")
    + "\r\n";
},"35":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":false,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"hasLayout") : depth0)},"fn":container.program(36, data, 0),"inverse":container.program(38, data, 0),"data":data,"loc":{"start":{"line":124,"column":24},"end":{"line":138,"column":36}}})) != null ? stack1 : "");
},"36":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                            <label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":127,"column":47},"end":{"line":127,"column":129}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":127,"column":35},"end":{"line":127,"column":132}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":128,"column":32},"end":{"line":128,"column":70}}})) != null ? stack1 : "")
    + "</label>\r\n";
},"38":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                            <div class=\"cui-label emp-hide-label-with-space\">\r\n                                <label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"cui-hide-from-screen\"}"},"data":data,"loc":{"start":{"line":133,"column":51},"end":{"line":133,"column":133}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":133,"column":39},"end":{"line":133,"column":136}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":134,"column":36},"end":{"line":134,"column":74}}})) != null ? stack1 : "")
    + "</label>\r\n                            </div>\r\n\r\n";
},"40":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n                    <div class=\"cui-label\">\r\n\r\n                        <label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":144,"column":43},"end":{"line":144,"column":91}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":144,"column":31},"end":{"line":144,"column":94}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":145,"column":28},"end":{"line":145,"column":66}}})) != null ? stack1 : "")
    + "</label>\r\n                    </div>\r\n\r\n";
},"42":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"op":"==","v1":(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0)},"fn":container.program(43, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":157,"column":16},"end":{"line":159,"column":28}}})) != null ? stack1 : "")
    + "<label "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":160,"column":35},"end":{"line":160,"column":88}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":160,"column":23},"end":{"line":160,"column":91}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":161,"column":20},"end":{"line":161,"column":64}}})) != null ? stack1 : "")
    + "</label>\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"op":"==","v1":(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0)},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":163,"column":16},"end":{"line":165,"column":28}}})) != null ? stack1 : "");
},"43":function(container,depth0,helpers,partials,data) {
    return "<div class=\"cui-label\">\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"fn":container.program(1, data, 0),"inverse":container.program(13, data, 0),"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":169,"column":12}}})) != null ? stack1 : "");
},"useData":true}));

Handlebars.registerPartial("_legend", this["JST"]["_legend"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<li class=\"emp-legend-item\">\r\n        \r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"template") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":8},"end":{"line":6,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":8,"column":8},"end":{"line":15,"column":15}}})) != null ? stack1 : "")
    + "    </li>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_icon"),depth0,{"name":"_icon","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"icon") : depth0),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":9,"column":12},"end":{"line":14,"column":19}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <span> - "
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <span>"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":17,"column":10}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_output", this["JST"]["_output"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    "
    + ((stack1 = container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0)) != null ? stack1 : "")
    + "\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <p>"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</p>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"raw") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":5,"column":7}}})) != null ? stack1 : "");
},"useData":true}));

Handlebars.registerPartial("_pageInstructions", this["JST"]["_pageInstructions"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-page-instructions\">\r\n    <p>"
    + ((stack1 = container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"pageinstructions") : depth0)) != null ? lookupProperty(stack1,"text") : stack1), depth0)) != null ? stack1 : "")
    + "</p>\r\n</div>";
},"useData":true}));

Handlebars.registerPartial("_pageLegend", this["JST"]["_pageLegend"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-legend\">\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"required","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":4,"column":12},"end":{"line":7,"column":26}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"info","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(4, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":12},"end":{"line":12,"column":26}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    return "<span class=\"cui-required\"></span>\r\n                <span>Field required</span>";
},"4":function(container,depth0,helpers,partials,data) {
    return "<button class=\"cui-icon emp-icon-help emp-page-itags\" title=\"More information\" type=\"button\">More information</button>\r\n               <span>Select to learn more about a field</span>";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-page-legend\">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"pagelegend") : depth0)) != null ? lookupProperty(stack1,"legends") : stack1),{"name":"each","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":14,"column":13}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_pageTitle", this["JST"]["_pageTitle"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <h2>"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "<span>"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"mode") : depth0), depth0))
    + "</span></h2>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <h2>"
    + container.escapeExpression(container.lambda((depth0 != null ? lookupProperty(depth0,"title") : depth0), depth0))
    + "</h2>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-page-title\">\r\n    <div class=\"emp-text\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"mode") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":3,"column":8},"end":{"line":7,"column":15}}})) != null ? stack1 : "")
    + "    </div>\r\n</div>\r\n";
},"useData":true}));

Handlebars.registerPartial("_popup", this["JST"]["_popup"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<span class=\"emp-popup\"></span>";
},"useData":true}));

Handlebars.registerPartial("_row", this["JST"]["_row"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"columns") : depth0),{"name":"each","hash":{},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":8},"end":{"line":50,"column":18}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":0,"op":"===","v1":(data && lookupProperty(data,"index"))},"fn":container.program(3, data, 0, blockParams, depths),"inverse":container.program(16, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":8,"column":12},"end":{"line":48,"column":24}}})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"head","op":"===","v1":(depths[1] != null ? lookupProperty(depths[1],"rowLoc") : depths[1])},"fn":container.program(4, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":11,"column":16},"end":{"line":26,"column":28}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"body","op":"==","v1":(depths[1] != null ? lookupProperty(depths[1],"rowLoc") : depths[1])},"fn":container.program(12, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":16},"end":{"line":33,"column":28}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"footer","op":"==","v1":(depths[1] != null ? lookupProperty(depths[1],"rowLoc") : depths[1])},"fn":container.program(14, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":36,"column":16},"end":{"line":40,"column":28}}})) != null ? stack1 : "")
    + ((stack1 = container.invokePartial(lookupProperty(partials,"_column"),depth0,{"name":"_column","hash":{"tableData":(depths[1] != null ? lookupProperty(depths[1],"tableData") : depths[1]),"rowLoc":(depths[1] != null ? lookupProperty(depths[1],"rowLoc") : depths[1]),"colIndex":(data && lookupProperty(data,"index")),"includeMap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depths[1] != null ? lookupProperty(depths[1],"tableData") : depths[1])) != null ? lookupProperty(stack1,"selectAll") : stack1)},"fn":container.program(5, data, 0, blockParams, depths),"inverse":container.program(10, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":13,"column":20},"end":{"line":24,"column":32}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"body","op":"hasProperty","v1":(depths[1] != null ? lookupProperty(depths[1],"tableData") : depths[1])},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.program(8, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":14,"column":24},"end":{"line":18,"column":36}}})) != null ? stack1 : "");
},"6":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_tableSelection"),depths[1],{"name":"_tableSelection","hash":{"index":"all","section":"head"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"8":function(container,depth0,helpers,partials,data) {
    return "<th></th>\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    return "<th class=\"emp-min-width table-control-col\">\r\n                            <span class=\"cui-hide-from-screen\" title=\r\n                            \"Select Rows\">Select Rows</span>\r\n                        </th>\r\n";
},"12":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_tableSelection"),depths[1],{"name":"_tableSelection","hash":{"checked":(depths[1] != null ? lookupProperty(depths[1],"selected") : depths[1]),"key":(lookupProperty(helpers,"keyOrIndex")||(depth0 && lookupProperty(depth0,"keyOrIndex"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"keyOrIndex","hash":{"index":(depths[1] != null ? lookupProperty(depths[1],"rowIndex") : depths[1]),"key":(depths[1] != null ? lookupProperty(depths[1],"key") : depths[1])},"data":data,"loc":{"start":{"line":31,"column":91},"end":{"line":31,"column":142}}}),"index":(depths[1] != null ? lookupProperty(depths[1],"rowIndex") : depths[1]),"section":"body"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    return "<td class=\"footer-selection\"></td>\r\n\r\n";
},"16":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_column"),depth0,{"name":"_column","hash":{"tableData":(depths[1] != null ? lookupProperty(depths[1],"tableData") : depths[1]),"rowLoc":(depths[1] != null ? lookupProperty(depths[1],"rowLoc") : depths[1]),"colIndex":(data && lookupProperty(data,"index")),"includeMap":true},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"18":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"columns") : depth0),{"name":"each","hash":{},"fn":container.program(16, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":55,"column":8},"end":{"line":57,"column":18}}})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<tr "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":(depth0 != null ? lookupProperty(depth0,"style") : depth0),"rowKey":(lookupProperty(helpers,"keyOrIndex")||(depth0 && lookupProperty(depth0,"keyOrIndex"))||alias2).call(alias1,{"name":"keyOrIndex","hash":{"index":(depth0 != null ? lookupProperty(depth0,"rowIndex") : depth0),"key":(depth0 != null ? lookupProperty(depth0,"key") : depth0)},"data":data,"loc":{"start":{"line":1,"column":165},"end":{"line":1,"column":210}}}),"highlight":(depth0 != null ? lookupProperty(depth0,"highlight") : depth0),"visibility":(depth0 != null ? lookupProperty(depth0,"visibility") : depth0),"scope":"table-row","defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":58},"end":{"line":1,"column":229}}})},"data":data,"loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":231}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":4},"end":{"line":1,"column":234}}}))
    + " data-row-index=\""
    + alias3(((helper = (helper = lookupProperty(helpers,"rowIndex") || (depth0 != null ? lookupProperty(depth0,"rowIndex") : depth0)) != null ? helper : alias2),(typeof helper === "function" ? helper.call(alias1,{"name":"rowIndex","hash":{},"data":data,"loc":{"start":{"line":1,"column":251},"end":{"line":1,"column":263}}}) : helper)))
    + "\">\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"selectable") : stack1)},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.program(18, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":59,"column":16}}})) != null ? stack1 : "")
    + "</tr>\r\n";
},"usePartial":true,"useData":true,"useDepths":true}));

Handlebars.registerPartial("_select", this["JST"]["_select"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "<div class=\"cui-data\">\r\n";
},"3":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"title") : stack1),{"name":"if","hash":{},"fn":container.program(4, data, 0, blockParams, depths),"inverse":container.program(11, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":8,"column":8},"end":{"line":45,"column":16}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":(lookupProperty(helpers,"concat")||(depth0 && lookupProperty(depth0,"concat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"title") : stack1),":",{"name":"concat","hash":{},"data":data,"loc":{"start":{"line":10,"column":52},"end":{"line":10,"column":92}}}),"op":"!=","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1)},"fn":container.program(5, data, 0, blockParams, depths),"inverse":container.program(9, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":10,"column":12},"end":{"line":32,"column":24}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":12,"column":34},"end":{"line":12,"column":109}}}),{"name":"attribute","hash":{"skip":"name,aria-required,data-validation"},"data":data,"loc":{"start":{"line":12,"column":22},"end":{"line":12,"column":154}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"options") : stack1),{"name":"each","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":13,"column":20},"end":{"line":19,"column":30}}})) != null ? stack1 : "")
    + "</span>";
},"6":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":(depth0 != null ? lookupProperty(depth0,"value") : depth0),"op":"==","v1":((stack1 = (depths[1] != null ? lookupProperty(depths[1],"input") : depths[1])) != null ? lookupProperty(stack1,"value") : stack1)},"fn":container.program(7, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":15,"column":24},"end":{"line":17,"column":36}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"text") : depth0),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":16,"column":28},"end":{"line":16,"column":66}}})) != null ? stack1 : "");
},"9":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":23,"column":34},"end":{"line":23,"column":109}}}),{"name":"attribute","hash":{"skip":"name,aria-required,data-validation,title"},"data":data,"loc":{"start":{"line":23,"column":22},"end":{"line":23,"column":160}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"options") : stack1),{"name":"each","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":24,"column":20},"end":{"line":30,"column":30}}})) != null ? stack1 : "")
    + "</span>\r\n";
},"11":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":36,"column":30},"end":{"line":36,"column":105}}}),{"name":"attribute","hash":{"skip":"name,aria-required,data-validation"},"data":data,"loc":{"start":{"line":36,"column":18},"end":{"line":36,"column":150}}}))
    + ">\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"options") : stack1),{"name":"each","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":37,"column":16},"end":{"line":43,"column":26}}})) != null ? stack1 : "")
    + "</span>\r\n";
},"13":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"scope") : depth0),{"name":"if","hash":{},"fn":container.program(14, data, 0, blockParams, depths),"inverse":container.program(16, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":50,"column":8},"end":{"line":54,"column":15}}})) != null ? stack1 : "")
    + "\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":"single","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"mode") : depth0)},"fn":container.program(18, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":58,"column":12},"end":{"line":65,"column":25}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"options") : stack1),{"name":"each","hash":{},"fn":container.program(21, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":68,"column":12},"end":{"line":101,"column":23}}})) != null ? stack1 : "")
    + "</select>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(33, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":103,"column":8},"end":{"line":105,"column":15}}})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <select "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":(depth0 != null ? lookupProperty(depth0,"scope") : depth0),"multipleSelection":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"expands":depth0,"defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"required":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"selectOther":(depth0 != null ? lookupProperty(depth0,"otherValue") : depth0)},"data":data,"loc":{"start":{"line":51,"column":80},"end":{"line":51,"column":244}}})},"data":data,"loc":{"start":{"line":51,"column":32},"end":{"line":51,"column":245}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":51,"column":20},"end":{"line":51,"column":248}}}))
    + ">\r\n";
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <select "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"field","multipleSelection":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"expands":depth0,"defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"required":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"selectOther":(depth0 != null ? lookupProperty(depth0,"otherValue") : depth0)},"data":data,"loc":{"start":{"line":53,"column":80},"end":{"line":53,"column":241}}})},"data":data,"loc":{"start":{"line":53,"column":32},"end":{"line":53,"column":242}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":53,"column":20},"end":{"line":53,"column":245}}}))
    + ">\r\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"noBlankOption") : stack1),{"name":"unless","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":61,"column":16},"end":{"line":63,"column":28}}})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    return "<option value=\"\">Select one</option>\r\n";
},"21":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"optgroup","op":"==","v1":(depth0 != null ? lookupProperty(depth0,"type") : depth0)},"fn":container.program(22, data, 0, blockParams, depths),"inverse":container.program(28, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":69,"column":16},"end":{"line":100,"column":29}}})) != null ? stack1 : "");
},"22":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<optgroup label=\""
    + ((stack1 = container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0)) != null ? stack1 : "")
    + "\">\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"options") : depth0),{"name":"each","hash":{},"fn":container.program(23, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":73,"column":24},"end":{"line":85,"column":34}}})) != null ? stack1 : "")
    + "</optgroup>";
},"23":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depths[1] != null ? lookupProperty(depths[1],"input") : depths[1])) != null ? lookupProperty(stack1,"value") : stack1),"op":"==","v1":(depth0 != null ? lookupProperty(depth0,"value") : depth0)},"fn":container.program(24, data, 0, blockParams, depths),"inverse":container.program(26, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":75,"column":28},"end":{"line":83,"column":40}}})) != null ? stack1 : "");
},"24":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<option value=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"value") : depth0), depth0))
    + "\" "
    + alias2((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias4).call(alias3,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias4).call(alias3,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":"{\"selected\": \"\"}"},"data":data,"loc":{"start":{"line":76,"column":75},"end":{"line":76,"column":136}}}),{"name":"attribute","hash":{"skip":"text"},"data":data,"loc":{"start":{"line":76,"column":63},"end":{"line":76,"column":151}}}))
    + ">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</option>";
},"26":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<option value=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"value") : depth0), depth0))
    + "\" "
    + alias2((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias4).call(alias3,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias4).call(alias3,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{},"data":data,"loc":{"start":{"line":80,"column":75},"end":{"line":80,"column":108}}}),{"name":"attribute","hash":{"skip":"text"},"data":data,"loc":{"start":{"line":80,"column":63},"end":{"line":80,"column":123}}}))
    + ">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</option>\r\n";
},"28":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depths[1] != null ? lookupProperty(depths[1],"input") : depths[1])) != null ? lookupProperty(stack1,"value") : stack1),"op":"==","v1":(depth0 != null ? lookupProperty(depth0,"value") : depth0)},"fn":container.program(29, data, 0, blockParams, depths),"inverse":container.program(31, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":91,"column":20},"end":{"line":99,"column":33}}})) != null ? stack1 : "");
},"29":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<option value=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"value") : depth0), depth0))
    + "\" "
    + alias2((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias4).call(alias3,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias4).call(alias3,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias4).call(alias3,{"name":"extendDefaults","hash":{"scope":"option","expands":depth0,"defaults":"{\"selected\": \"\"}"},"data":data,"loc":{"start":{"line":92,"column":109},"end":{"line":92,"column":181}}})},"data":data,"loc":{"start":{"line":92,"column":67},"end":{"line":92,"column":182}}}),{"name":"attribute","hash":{"skip":"text"},"data":data,"loc":{"start":{"line":92,"column":55},"end":{"line":92,"column":197}}}))
    + ">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</option>";
},"31":function(container,depth0,helpers,partials,data) {
    var alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<option value=\""
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"value") : depth0), depth0))
    + "\" "
    + alias2((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias4).call(alias3,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias4).call(alias3,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias4).call(alias3,{"name":"extendDefaults","hash":{"scope":"option","expands":depth0,"defaults":""},"data":data,"loc":{"start":{"line":96,"column":109},"end":{"line":96,"column":165}}})},"data":data,"loc":{"start":{"line":96,"column":67},"end":{"line":96,"column":166}}}),{"name":"attribute","hash":{"skip":"text"},"data":data,"loc":{"start":{"line":96,"column":55},"end":{"line":96,"column":181}}}))
    + ">"
    + alias2(alias1((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</option>\r\n";
},"33":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"35":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(36, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":110,"column":8},"end":{"line":112,"column":16}}})) != null ? stack1 : "");
},"36":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"38":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"fn":container.program(3, data, 0, blockParams, depths),"inverse":container.program(13, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":6,"column":4},"end":{"line":106,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"composite") : depth0),{"name":"unless","hash":{},"fn":container.program(35, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":109,"column":4},"end":{"line":113,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(38, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":115,"column":0},"end":{"line":117,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true,"useDepths":true}));

Handlebars.registerPartial("_span", this["JST"]["_span"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":90}}})},"data":data,"loc":{"start":{"line":1,"column":18},"end":{"line":1,"column":92}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":94}}}))
    + ">"
    + alias3(container.lambda((depth0 != null ? lookupProperty(depth0,"text") : depth0), depth0))
    + "</span>\r\n";
},"useData":true}));

Handlebars.registerPartial("_submit", this["JST"]["_submit"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":"{}"},"data":data,"loc":{"start":{"line":1,"column":19},"end":{"line":1,"column":72}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":75}}}))
    + " />";
},"useData":true}));

Handlebars.registerPartial("_tableHiddenInputs", this["JST"]["_tableHiddenInputs"] = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return container.escapeExpression((lookupProperty(helpers,"tableHiddenInputs")||(depth0 && lookupProperty(depth0,"tableHiddenInputs"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),depth0,{"name":"tableHiddenInputs","hash":{},"data":data,"loc":{"start":{"line":2,"column":0},"end":{"line":2,"column":26}}}))
    + "\r\n";
},"useData":true}));

Handlebars.registerPartial("_tablePaging", this["JST"]["_tablePaging"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"previous") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":3,"column":7},"end":{"line":3,"column":46}}}),(depth0 != null ? lookupProperty(depth0,"previous") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial((lookupProperty(helpers,"getPartialName")||(depth0 && lookupProperty(depth0,"getPartialName"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"next") : depth0)) != null ? lookupProperty(stack1,"template") : stack1),{"name":"getPartialName","hash":{},"data":data,"loc":{"start":{"line":6,"column":7},"end":{"line":6,"column":42}}}),(depth0 != null ? lookupProperty(depth0,"next") : depth0),{"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"emp-table-pagination\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"previous") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":2,"column":1},"end":{"line":4,"column":9}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"next") : depth0),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":1},"end":{"line":7,"column":9}}})) != null ? stack1 : "")
    + "</div>\r\n";
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_tableSections", this["JST"]["_tableSections"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"head","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"specificSection") : depth0)},"fn":container.program(2, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":9,"column":16}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<thead>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"head") : depth0)) != null ? lookupProperty(stack1,"rows") : stack1),{"name":"each","hash":{},"fn":container.program(3, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":12},"end":{"line":7,"column":22}}})) != null ? stack1 : "")
    + "</thead>\r\n";
},"3":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_row"),depth0,{"name":"_row","hash":{"tableData":depths[1],"rowLoc":"head"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<thead>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"head") : depth0)) != null ? lookupProperty(stack1,"rows") : stack1),{"name":"each","hash":{},"fn":container.program(3, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":18}}})) != null ? stack1 : "")
    + "</thead>\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"footer") : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":19,"column":4},"end":{"line":25,"column":12}}})) != null ? stack1 : "")
    + "<tbody>\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":false,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"optimize") : depth0)},"fn":container.program(9, data, 0, blockParams, depths),"inverse":container.program(14, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":28,"column":8},"end":{"line":62,"column":20}}})) != null ? stack1 : "")
    + "</tbody>\r\n";
},"6":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<tfoot>\r\n"
    + ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"footer") : depth0)) != null ? lookupProperty(stack1,"rows") : stack1),{"name":"each","hash":{},"fn":container.program(7, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":21,"column":12},"end":{"line":23,"column":22}}})) != null ? stack1 : "")
    + "</tfoot>\r\n";
},"7":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_row"),depth0,{"name":"_row","hash":{"tableData":depths[1],"rowLoc":"footer"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"9":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"each").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"body") : depth0)) != null ? lookupProperty(stack1,"rows") : stack1),{"name":"each","hash":{},"fn":container.program(10, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":30,"column":12},"end":{"line":47,"column":22}}})) != null ? stack1 : "");
},"10":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"skip") : depth0),{"name":"if","hash":{},"fn":container.program(11, data, 0, blockParams, depths),"inverse":container.program(12, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":33,"column":16},"end":{"line":45,"column":24}}})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":false,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"skip") : depth0)},"fn":container.program(12, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":35,"column":20},"end":{"line":39,"column":32}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_row"),depth0,{"name":"_row","hash":{"rowIndex":(data && lookupProperty(data,"index")),"tableData":depths[1],"rowLoc":"body"},"data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"14":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"tableIter")||(depth0 && lookupProperty(depth0,"tableIter"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"body") : depth0)) != null ? lookupProperty(stack1,"rows") : stack1),{"name":"tableIter","hash":{"start":((stack1 = (depth0 != null ? lookupProperty(depth0,"body") : depth0)) != null ? lookupProperty(stack1,"start") : stack1),"limit":((stack1 = (depth0 != null ? lookupProperty(depth0,"body") : depth0)) != null ? lookupProperty(stack1,"limit") : stack1)},"fn":container.program(15, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":52,"column":12},"end":{"line":60,"column":27}}})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":(data && lookupProperty(data,"limit")),"op":"<=","v1":(data && lookupProperty(data,"rendered"))},"fn":container.program(12, data, 0, blockParams, depths),"inverse":container.noop,"data":data,"loc":{"start":{"line":54,"column":16},"end":{"line":58,"column":28}}})) != null ? stack1 : "");
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data,blockParams,depths) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"specificSection") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0, blockParams, depths),"inverse":container.program(5, data, 0, blockParams, depths),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":65,"column":8}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true,"useDepths":true}));

Handlebars.registerPartial("_tableSelection", this["JST"]["_tableSelection"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    return "<td class=\"table-control-col emp-min-width\">";
},"3":function(container,depth0,helpers,partials,data) {
    return "<th class=\"table-control-col emp-min-width\">\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.lambda, alias3=container.escapeExpression, alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input type=\"radio\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"checked") : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":9,"column":28},"end":{"line":9,"column":72}}})) != null ? stack1 : "")
    + " id=\""
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias3(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias1,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":9,"column":110},"end":{"line":9,"column":119}}}) : helper)))
    + "\" name=\""
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\""
    + alias3(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias1,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":9,"column":168},"end":{"line":9,"column":175}}}) : helper)))
    + "\" />";
},"6":function(container,depth0,helpers,partials,data) {
    return "checked=\"checked\"";
},"8":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.lambda, alias3=container.escapeExpression, alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<input type=\"checkbox\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"checked") : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":31},"end":{"line":12,"column":65}}})) != null ? stack1 : "")
    + " id=\""
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias3(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias1,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":12,"column":103},"end":{"line":12,"column":112}}}) : helper)))
    + "\" name=\""
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\""
    + alias3(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias1,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":12,"column":161},"end":{"line":12,"column":168}}}) : helper)))
    + "\" />"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias4).call(alias1,{"name":"ifCond","hash":{"v2":"head","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(11, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":13,"column":8},"end":{"line":16,"column":20}}})) != null ? stack1 : "");
},"9":function(container,depth0,helpers,partials,data) {
    return "checked";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.lambda, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <input type=\"hidden\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"checked") : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":15,"column":33},"end":{"line":15,"column":67}}})) != null ? stack1 : "")
    + " id=\""
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias3(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":15,"column":105},"end":{"line":15,"column":114}}}) : helper)))
    + "_hidden\" name=\"_"
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\"false\" />\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    return "</td>";
},"15":function(container,depth0,helpers,partials,data) {
    return "</th>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, alias4="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"body","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":5,"column":12}}})) != null ? stack1 : "")
    + "<label for=\""
    + alias3(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias3(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":7,"column":49},"end":{"line":7,"column":58}}}) : helper)))
    + "\" class=\"cui-hide-from-screen\">Row "
    + alias3(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":7,"column":93},"end":{"line":7,"column":103}}}) : helper)))
    + "</label>\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"single","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"selectionType") : stack1)},"fn":container.program(5, data, 0),"inverse":container.program(8, data, 0),"data":data,"loc":{"start":{"line":8,"column":4},"end":{"line":18,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":"body","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(13, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":20,"column":0},"end":{"line":24,"column":12}}})) != null ? stack1 : "");
},"useData":true}));

Handlebars.registerPartial("_tableSelectionControl", this["JST"]["_tableSelectionControl"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"readOnly") : depth0)},"fn":container.program(2, data, 0),"inverse":container.program(5, data, 0),"data":data,"loc":{"start":{"line":3,"column":4},"end":{"line":27,"column":15}}})) != null ? stack1 : "")
    + "\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":5,"column":8},"end":{"line":7,"column":15}}})) != null ? stack1 : "")
    + "\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "            <span class=\"emp-table-select-true\"></span>\r\n";
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"single","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"selectionType") : stack1)},"fn":container.program(6, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":11,"column":8},"end":{"line":25,"column":19}}})) != null ? stack1 : "")
    + "\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <label for=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":13,"column":57},"end":{"line":13,"column":66}}}) : helper)))
    + "\" class=\"cui-hide-from-screen\">Row "
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":13,"column":101},"end":{"line":13,"column":110}}}) : helper)))
    + "</label>\r\n            <input "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":14,"column":19},"end":{"line":14,"column":73}}})) != null ? stack1 : "")
    + " type=\"radio\" value=\""
    + alias2(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":14,"column":94},"end":{"line":14,"column":101}}}) : helper)))
    + "\" name=\"test\" id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":14,"column":152},"end":{"line":14,"column":161}}}) : helper)))
    + "\" />\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    return "checked=\"checked\"";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <label for=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":17,"column":57},"end":{"line":17,"column":66}}}) : helper)))
    + "\" class=\"cui-hide-from-screen\">Row "
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":17,"column":101},"end":{"line":17,"column":110}}}) : helper)))
    + "</label>\r\n            <input type=\"checkbox\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":18,"column":35},"end":{"line":18,"column":89}}})) != null ? stack1 : "")
    + " id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":18,"column":127},"end":{"line":18,"column":136}}}) : helper)))
    + "\" name=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\""
    + alias2(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":18,"column":185},"end":{"line":18,"column":192}}}) : helper)))
    + "\" />\r\n\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias4).call(alias3,{"name":"ifCond","hash":{"v2":"head","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(10, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":20,"column":12},"end":{"line":23,"column":23}}})) != null ? stack1 : "")
    + "\r\n";
},"10":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.lambda, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <input type=\"hidden\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":22,"column":37},"end":{"line":22,"column":91}}})) != null ? stack1 : "")
    + " id=\""
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias3(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(alias1,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":22,"column":129},"end":{"line":22,"column":138}}}) : helper)))
    + "_hidden\" name=\"_"
    + alias3(alias2(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\"false\" />\r\n";
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"single","op":"===","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"selectionType") : stack1)},"fn":container.program(13, data, 0),"inverse":container.program(15, data, 0),"data":data,"loc":{"start":{"line":31,"column":4},"end":{"line":53,"column":15}}})) != null ? stack1 : "")
    + "\r\n";
},"13":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n        <label for=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":33,"column":53},"end":{"line":33,"column":62}}}) : helper)))
    + "\" class=\"cui-hide-from-screen\">Row "
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":33,"column":97},"end":{"line":33,"column":106}}}) : helper)))
    + "</label>\r\n        <input "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":34,"column":15},"end":{"line":34,"column":69}}})) != null ? stack1 : "")
    + " type=\"radio\" value=\""
    + alias2(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":34,"column":90},"end":{"line":34,"column":97}}}) : helper)))
    + "\" name=\"test\" id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":34,"column":148},"end":{"line":34,"column":157}}}) : helper)))
    + "\" />\r\n\r\n";
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n"
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":"head","op":"===","v1":(depth0 != null ? lookupProperty(depth0,"section") : depth0)},"fn":container.program(16, data, 0),"inverse":container.program(18, data, 0),"data":data,"loc":{"start":{"line":38,"column":8},"end":{"line":49,"column":19}}})) != null ? stack1 : "")
    + "\r\n\r\n\r\n";
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <label for=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":40,"column":57},"end":{"line":40,"column":66}}}) : helper)))
    + "\" class=\"cui-hide-from-screen\">Row "
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":40,"column":101},"end":{"line":40,"column":110}}}) : helper)))
    + "</label>\r\n            <input type=\"checkbox\" "
    + ((stack1 = (lookupProperty(helpers,"tableAllSeclected")||(depth0 && lookupProperty(depth0,"tableAllSeclected"))||alias4).call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"body") : stack1),{"name":"tableAllSeclected","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":41,"column":35},"end":{"line":41,"column":116}}})) != null ? stack1 : "")
    + " id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":41,"column":154},"end":{"line":41,"column":163}}}) : helper)))
    + "\" name=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\""
    + alias2(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":41,"column":212},"end":{"line":41,"column":219}}}) : helper)))
    + "\" />\r\n\r\n            <input type=\"hidden\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":44,"column":33},"end":{"line":44,"column":87}}})) != null ? stack1 : "")
    + " id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":44,"column":125},"end":{"line":44,"column":134}}}) : helper)))
    + "_hidden\" name=\"_"
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\"false\" />\r\n";
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <label for=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":47,"column":57},"end":{"line":47,"column":66}}}) : helper)))
    + "\" class=\"cui-hide-from-screen\">Row "
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":47,"column":101},"end":{"line":47,"column":110}}}) : helper)))
    + "</label>\r\n            <input type=\"checkbox\" "
    + ((stack1 = lookupProperty(helpers,"if").call(alias3,((stack1 = (depth0 != null ? lookupProperty(depth0,"selection") : depth0)) != null ? lookupProperty(stack1,"checked") : stack1),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":48,"column":35},"end":{"line":48,"column":89}}})) != null ? stack1 : "")
    + " id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "_"
    + alias2(((helper = (helper = lookupProperty(helpers,"index") || (depth0 != null ? lookupProperty(depth0,"index") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"index","hash":{},"data":data,"loc":{"start":{"line":48,"column":127},"end":{"line":48,"column":136}}}) : helper)))
    + "\" name=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"tableData") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\""
    + alias2(((helper = (helper = lookupProperty(helpers,"key") || (depth0 != null ? lookupProperty(depth0,"key") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"key","hash":{},"data":data,"loc":{"start":{"line":48,"column":185},"end":{"line":48,"column":192}}}) : helper)))
    + "\" />\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":(depth0 != null ? lookupProperty(depth0,"selectionObj") : depth0)},"fn":container.program(1, data, 0),"inverse":container.program(12, data, 0),"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":55,"column":11}}})) != null ? stack1 : "")
    + "\r\n";
},"useData":true}));

Handlebars.registerPartial("_text", this["JST"]["_text"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,(depth0 != null ? lookupProperty(depth0,"attributes") : depth0),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"scope":"input-div","defaults":"{\"className\": \"cui-data\"}"},"data":data,"loc":{"start":{"line":2,"column":63},"end":{"line":2,"column":157}}})},"data":data,"loc":{"start":{"line":2,"column":21},"end":{"line":2,"column":158}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":2,"column":9},"end":{"line":2,"column":160}}}))
    + ">\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"title") : stack1),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(5, data, 0),"data":data,"loc":{"start":{"line":8,"column":8},"end":{"line":27,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":29,"column":8},"end":{"line":31,"column":15}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||alias2).call(alias1,{"name":"ifCond","hash":{"v2":(lookupProperty(helpers,"concat")||(depth0 && lookupProperty(depth0,"concat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"title") : stack1),":",{"name":"concat","hash":{},"data":data,"loc":{"start":{"line":10,"column":52},"end":{"line":10,"column":92}}}),"op":"!=","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? lookupProperty(stack1,"text") : stack1)},"fn":container.program(5, data, 0),"inverse":container.program(7, data, 0),"data":data,"loc":{"start":{"line":10,"column":12},"end":{"line":20,"column":24}}})) != null ? stack1 : "");
},"5":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"text","defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"enhancedAttributes":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":12,"column":82},"end":{"line":12,"column":229}}})},"data":data,"loc":{"start":{"line":12,"column":34},"end":{"line":12,"column":230}}}),{"name":"attribute","hash":{"skip":"value,type,name,aria-required,size,maxlength,data-validation"},"data":data,"loc":{"start":{"line":12,"column":22},"end":{"line":12,"column":301}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":13,"column":20},"end":{"line":13,"column":76}}})) != null ? stack1 : "")
    + "</span>\r\n";
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<span "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"text","defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"enhancedAttributes":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":17,"column":82},"end":{"line":17,"column":229}}})},"data":data,"loc":{"start":{"line":17,"column":34},"end":{"line":17,"column":230}}}),{"name":"attribute","hash":{"skip":"value,type,name,aria-required,size,maxlength,data-validation,title"},"data":data,"loc":{"start":{"line":17,"column":22},"end":{"line":17,"column":307}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":18,"column":20},"end":{"line":18,"column":76}}})) != null ? stack1 : "")
    + "</span>\r\n";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_itag"),(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"_itag","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"op":"in","v1":"password-toggle"},"fn":container.program(12, data, 0),"inverse":container.program(14, data, 0),"data":data,"loc":{"start":{"line":35,"column":8},"end":{"line":53,"column":19}}})) != null ? stack1 : "");
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"emp-password-wrapper\">\r\n                <input type=\"password\" "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"text","isPassword":true,"defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"defaults":(depth0 != null ? lookupProperty(depth0,"defaults") : depth0)},"data":data,"loc":{"start":{"line":37,"column":99},"end":{"line":37,"column":232}}})},"data":data,"loc":{"start":{"line":37,"column":51},"end":{"line":37,"column":234}}}),{"name":"attribute","hash":{"skip":"type"},"data":data,"loc":{"start":{"line":37,"column":39},"end":{"line":37,"column":249}}}))
    + " />\r\n                <button type=\"button\" class=\"emp-password-toggle\">Show</button>\r\n            </div>\r\n\r\n";
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <input "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"text","defaultSelection":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"defaultValue") : stack1),"required":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"required") : stack1),"defaults":(depth0 != null ? lookupProperty(depth0,"defaults") : depth0)},"data":data,"loc":{"start":{"line":42,"column":79},"end":{"line":42,"column":196}}})},"data":data,"loc":{"start":{"line":42,"column":31},"end":{"line":42,"column":198}}}),{"name":"attribute","hash":{},"data":data,"loc":{"start":{"line":42,"column":19},"end":{"line":42,"column":201}}}))
    + " />\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"if","hash":{},"fn":container.program(15, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":45,"column":12},"end":{"line":47,"column":19}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,(depth0 != null ? lookupProperty(depth0,"help") : depth0),{"name":"if","hash":{},"fn":container.program(9, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":50,"column":12},"end":{"line":52,"column":19}}})) != null ? stack1 : "");
},"15":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_currencySuffix"),(depth0 != null ? lookupProperty(depth0,"suffix") : depth0),{"name":"_currencySuffix","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(18, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":59,"column":8},"end":{"line":61,"column":16}}})) != null ? stack1 : "");
},"18":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"indent":"            ","helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"20":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"fn":container.program(3, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":6,"column":4},"end":{"line":54,"column":17}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"composite") : depth0),{"name":"unless","hash":{},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":58,"column":4},"end":{"line":62,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(20, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":63,"column":0},"end":{"line":65,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_textArea", this["JST"]["_textArea"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"op":"===","v1":"editor"},"fn":container.program(2, data, 0),"inverse":container.program(4, data, 0),"data":data,"loc":{"start":{"line":2,"column":4},"end":{"line":6,"column":15}}})) != null ? stack1 : "");
},"2":function(container,depth0,helpers,partials,data) {
    return "            <div class=\"cui-data emp-allow-overflow\">\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    return "            <div class=\"cui-data\">\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"op":"in","v1":"container"},"fn":container.program(7, data, 0),"inverse":container.program(9, data, 0),"data":data,"loc":{"start":{"line":12,"column":8},"end":{"line":24,"column":19}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <div "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"textarea","enhancedAttributes":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":14,"column":77},"end":{"line":14,"column":187}}})},"data":data,"loc":{"start":{"line":14,"column":29},"end":{"line":14,"column":188}}}),{"name":"attribute","hash":{"skip":"value,name,aria-required,maxlength,data-validation"},"data":data,"loc":{"start":{"line":14,"column":17},"end":{"line":14,"column":249}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":15,"column":16},"end":{"line":15,"column":72}}})) != null ? stack1 : "")
    + "</div>";
},"9":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<p "
    + container.escapeExpression((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"scope":"textarea","enhancedAttributes":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),"defaults":"{\"className\":\"emp-data\"}"},"data":data,"loc":{"start":{"line":20,"column":75},"end":{"line":20,"column":185}}})},"data":data,"loc":{"start":{"line":20,"column":27},"end":{"line":20,"column":186}}}),{"name":"attribute","hash":{"skip":"value,name,aria-required,maxlength,data-validation,type,rows,cols"},"data":data,"loc":{"start":{"line":20,"column":15},"end":{"line":20,"column":262}}}))
    + ">"
    + ((stack1 = (lookupProperty(helpers,"standardTextFormat")||(depth0 && lookupProperty(depth0,"standardTextFormat"))||alias2).call(alias1,((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1),{"name":"standardTextFormat","hash":{},"data":data,"loc":{"start":{"line":21,"column":16},"end":{"line":21,"column":72}}})) != null ? stack1 : "")
    + "</p>\r\n\r\n";
},"11":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"ifCond","hash":{"v2":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"op":"in","v1":"editor"},"fn":container.program(12, data, 0),"inverse":container.program(14, data, 0),"data":data,"loc":{"start":{"line":29,"column":8},"end":{"line":83,"column":19}}})) != null ? stack1 : "")
    + "\r\n";
},"12":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <div class=\"emp-quill-editor\" data-editor-for=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\">\r\n                <div class=\"emp-quill-toolbar\">\r\n                    <span class=\"ql-formats\">\r\n                        <select class=\"ql-size\">\r\n                            <option value=\"10px\">10px</option>\r\n                            <option value=\"12px\">12px</option>\r\n                            <option selected>14px</option>\r\n                            <option value=\"16px\">16px</option>\r\n                            <option value=\"18px\">18px</option>\r\n                            <option value=\"20px\">20px</option>\r\n                        </select>\r\n                    </span>\r\n                    <span class=\"ql-formats\">\r\n                        <button class=\"ql-undo\" title=\"Undo\">\r\n                            <svg viewbox=\"0 0 18 18\">\r\n                              <polygon class=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\"></polygon>\r\n                              <path class=\"ql-stroke\" d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"></path>\r\n                            </svg>\r\n                        </button>\r\n                        <button class=\"ql-redo\" title=\"Redo\">\r\n                            <svg viewbox=\"0 0 18 18\">\r\n                              <polygon class=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\"></polygon>\r\n                              <path class=\"ql-stroke\" d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"></path>\r\n                            </svg>\r\n                        </button>\r\n                    </span>\r\n                    <span class=\"ql-formats\">\r\n                        <button class=\"ql-bold\">Bold</button>\r\n                        <button class=\"ql-italic\">Italic</button>\r\n                        <button class=\"ql-strike\">Strike</button>\r\n                        <button class=\"ql-underline\">Underline</button>\r\n                    </span>\r\n                    <span class=\"ql-formats\">\r\n                        <button class=\"ql-link\">Link</button>\r\n                    </span>\r\n                    <span class=\"ql-formats\">\r\n                        <button type=\"button\" class=\"ql-list\" value=\"ordered\"></button>\r\n                        <button type=\"button\" class=\"ql-list\" value=\"bullet\"></button>\r\n                        <button class=\"ql-indent\" value=\"-1\" type=\"button\"></button>\r\n                        <button class=\"ql-indent\" value=\"+1\" type=\"button\"></button>\r\n                    </span>\r\n                </div>\r\n                <div class=\"emp-quill-container\" data-hidden=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\">\r\n                     "
    + ((stack1 = alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1), depth0)) != null ? stack1 : "")
    + "\r\n                </div>\r\n                <input type=\"hidden\" name=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "\" id=\""
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"id") : stack1), depth0))
    + "\" value=\"\" />\r\n            </div>\r\n\r\n";
},"14":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "\r\n            <textarea "
    + alias3((lookupProperty(helpers,"attribute")||(depth0 && lookupProperty(depth0,"attribute"))||alias2).call(alias1,(lookupProperty(helpers,"mergeAttributes")||(depth0 && lookupProperty(depth0,"mergeAttributes"))||alias2).call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1),{"name":"mergeAttributes","hash":{"dynamics":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"formats") : stack1),"defaults":(lookupProperty(helpers,"extendDefaults")||(depth0 && lookupProperty(depth0,"extendDefaults"))||alias2).call(alias1,{"name":"extendDefaults","hash":{"style":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"style") : stack1),"required":(depth0 != null ? lookupProperty(depth0,"input") : depth0),"defaults":(depth0 != null ? lookupProperty(depth0,"defaults") : depth0)},"data":data,"loc":{"start":{"line":81,"column":82},"end":{"line":81,"column":159}}})},"data":data,"loc":{"start":{"line":81,"column":34},"end":{"line":81,"column":188}}}),{"name":"attribute","hash":{"skip":"value"},"data":data,"loc":{"start":{"line":81,"column":22},"end":{"line":81,"column":204}}}))
    + ">"
    + alias3(container.lambda(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"attributes") : stack1)) != null ? lookupProperty(stack1,"value") : stack1), depth0))
    + "</textarea>\r\n\r\n";
},"16":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"if","hash":{},"fn":container.program(17, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":89,"column":8},"end":{"line":91,"column":16}}})) != null ? stack1 : "");
},"17":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = container.invokePartial(lookupProperty(partials,"_message"),(depth0 != null ? lookupProperty(depth0,"message") : depth0),{"name":"_message","data":data,"helpers":helpers,"partials":partials,"decorators":container.decorators})) != null ? stack1 : "");
},"19":function(container,depth0,helpers,partials,data) {
    return "</div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":7,"column":12}}})) != null ? stack1 : "")
    + ((stack1 = (lookupProperty(helpers,"ifCond")||(depth0 && lookupProperty(depth0,"ifCond"))||container.hooks.helperMissing).call(alias1,{"name":"ifCond","hash":{"v2":true,"op":"boolCheck","v1":((stack1 = (depth0 != null ? lookupProperty(depth0,"input") : depth0)) != null ? lookupProperty(stack1,"readOnly") : stack1)},"fn":container.program(6, data, 0),"inverse":container.program(11, data, 0),"data":data,"loc":{"start":{"line":10,"column":4},"end":{"line":85,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"composite") : depth0),{"name":"unless","hash":{},"fn":container.program(16, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":88,"column":4},"end":{"line":92,"column":16}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"unless").call(alias1,(depth0 != null ? lookupProperty(depth0,"noWrap") : depth0),{"name":"unless","hash":{},"fn":container.program(19, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":94,"column":0},"end":{"line":96,"column":12}}})) != null ? stack1 : "");
},"usePartial":true,"useData":true}));

Handlebars.registerPartial("_viewerContents", this["JST"]["_viewerContents"] = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<header>\r\n    <div class=\"emp-section-title\">\r\n        <h3>"
    + container.escapeExpression(container.lambda(((stack1 = (depth0 != null ? lookupProperty(depth0,"contents") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + "</h3>\r\n    </div>\r\n"
    + ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"hideControls") : depth0),{"name":"unless","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":6,"column":4},"end":{"line":17,"column":16}}})) != null ? stack1 : "")
    + "</header>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    return "<div class=\"emp-section-controls\">\r\n            <ul>\r\n                <li>\r\n                    <button type=\"button\" class=\"emp-view-document-resizer emp-icon-resize-section\" title=\"Resize section\"></button>\r\n                </li>\r\n                <li>\r\n                    <button type=\"button\" class=\"emp-icon-section-toggle-collapse\" title=\"Hide section\"></button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=container.lambda, alias2=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"unless").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"skipHeader") : depth0),{"name":"unless","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":1,"column":0},"end":{"line":20,"column":12}}})) != null ? stack1 : "")
    + "<div class=\"emp-viewer-contents\">\r\n    <object data=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"contents") : depth0)) != null ? lookupProperty(stack1,"src") : stack1), depth0))
    + "\" class=\"emp-pdf-object\" type=\"application/pdf\">\r\n        <embed src=\""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"contents") : depth0)) != null ? lookupProperty(stack1,"src") : stack1), depth0))
    + "\" class=\"emp-pdf-embed\">\r\n            <p>Something has gone wrong!</p>\r\n        </embed>\r\n    </object>\r\n</div>\r\n";
},"useData":true}));

return this["JST"];

});
define('handlebars-helpers',['handlebars'], function(Handlebars) {
Handlebars.registerHelper("alterVisibility", function(context, options){

    if (context) {

        //make copy of JSON object
        var jsonObj = context;

        var jsonObjCopy = JSON.parse(JSON.stringify(jsonObj));

        if (jsonObjCopy.label.visibility) {

            delete jsonObjCopy.label.visibility;
        }

        return jsonObjCopy;
    }

    return context;

});
;Handlebars.registerHelper('assetPath', function(context, options) {

    var host = window.location.hostname;
    var protocol = window.location.protocol;
    var port = window.location.port;

    if (port === 80 || port === 443) {

        if (host === "localhost" || protocol === "file") {
            return window.location.protocol + "//" + host + "/dist/";
        }
        else {
            return window.location.protocol + "//" + host + "/emp/";
        }

    }
    else {

        if (host === "localhost" || protocol === "file") {
            return window.location.protocol + "//" + host + ":" + port + "/dist/";
        }
        else {
            return window.location.protocol + "//" + host + ":" + port + "/emp/";
        }

    }

});






;Handlebars.registerHelper('attribute', function(context, options){

    var attributes = "";

    // Check to see if we have a comma deliminated string array
    var skip = (options.hash && options.hash.skip) ? options.hash.skip.split(',') : [];

    var byPassSafeRetrun = false;

    function objectParser(obj) {

        var returnString = "";

        for (var key in obj) {

            var value = obj[key];

            returnString += "\"" + key + "\":";

            switch (typeof value) {

                case "number":
                case "boolean":
                    returnString += value;
                    break;

                case "string":
                    returnString += " \"" + value + "\"";
                    break;

            }

        }

        return returnString;
    }

    // Loop all attributes
    (function nextAttribute(attrs) {

        var attribute = attrs.shift();

        // Double check to make sure we are not trying to skip this particular attribute type.
        if (skip.indexOf(attribute) === -1) {


            if (attribute !== undefined && attribute.indexOf("data-") !== -1) {

                // Check to see if a string is being passed in
                if (typeof context[attribute] !== "object") {

                    // String get the normal double quote treatment.
                    attributes += " " + attribute + "=\"" + context[attribute] + "\"";

                } else {

                    attributes += attribute + "=" + JSON.stringify(context[attribute]);

                }

            } else {

                // Handle special attribute structure
                switch(attribute) {

                    // No value attributes
                    case 'required':
                    case 'selected':
                    case 'multiple':
                    case 'checked':
                        attributes += " " + attribute;
                        break;

                    // Convert the classname attribute to HTML5 class
                    case 'className':
                        attributes += " class=\"" + context[attribute] + "\"";
                        break;

                    // attribute that we want to ignore
                    case 'class': // now a reserved work in ES6/ES2015
                    case undefined:
                        break;

                    // Extends only attributes
                    default:
                        attributes += " " + attribute + "=\"" + context[attribute] + "\"";
                        break;
                }

            }

        }

        // Move to the next attribute or return
        if (attrs.length !== 0) {
            nextAttribute(attrs);
        }
    })(Object.keys(context));

    return new Handlebars.SafeString(attributes);
});
;Handlebars.registerHelper('columnCount', function(context){

    var head = context.hash.head[0].columns;
    var limit = context.hash.limit;

    if (limit === undefined) {
        limit = 15;
    }

    // Check to see if the table is even at the limit
    if (head.length <= limit) {

        return false;
    }
    else {

        var showable = 0;

        for (var i = 0, len = head.length; i < len; i++) {

            if (
                // Filter out hidden columns
                (head[i].hasOwnProperty('visibility') && head[i].visibility === "hidden") ||
                // Filter out Button Columns
                ((head[i].attributes && head[i].attributes['data-type'] === "button") || (head[i].attributes && head[i].attributes['data-type'] === "buttonMenu") || (head[i].attributes && head[i].attributes['data-columnType'] === "button")) ||
                // Filter out Notifier Columns
                ((head[i].attributes && (head[i].attributes['data-type'] === "notifier" || head[i].attributes['data-columntype'] === "notifier")) || (head[i].attributes && head[i].attributes['data-type'] === "alpha" && head[i].style && head[i].style.indexOf('min-width') !== -1 && head[i].hideLabel))
                ) {

                continue;
            }

            showable = showable + 1;

        }

        if (showable > limit) {

            return true;
        }
        else {

            return false;
        }
    }
});
;Handlebars.registerHelper('columnTitle', function(context){

    var headerData = context.hash.headData;
    var index = context.hash.index;

    if (headerData.head.rows[0].columns[index].text) {

        return headerData.head.rows[0].columns[index].text.trim();
    }
    else {

        return "";
    }

});
;Handlebars.registerHelper('commaSplit', function (context) {

    if (context.length) {

        var arr = context.split(",").map(function (item) {
            return item.trim();
        });

        return arr;
    }

    return false;

});
;Handlebars.registerHelper('concat', function(){

    var stringArray = [];

    // Loop through all of the provided areguments and take all the defined string values our and use them to create a message
    for (var i = 0, len = arguments.length; i < len; i++) {

        if (typeof arguments[i] === "string") {

            stringArray.push(arguments[i]);
        }
    }

    // We are assuming that all of the arguments passed are strings, join them and return a singe string
    return stringArray.join('');

});;Handlebars.registerHelper('entityContainerSelect', function(data, context){

    if (data.value) {

        return data.value;
    }
    else {

        return data.options[0].value;
    }

});
;Handlebars.registerHelper('extendData', function(data, context){

    if (typeof context.hash === "object") {

        for (var item in context.hash) {
            data[item] = context.hash[item];
        }
    }

    return data;

});
;Handlebars.registerHelper('extendDefaults', function (params) {

    // Get the provided default setting for the element.

    var defaults = false;

    if (params.hash.defaults) {

        if (typeof params.hash.defaults !== "object")  {

            if (typeof params.hash.defaults === "string") {

                defaults = JSON.parse(params.hash.defaults);
            }
            else {

                defaults = {};
            }
        }
        else {

            defaults = JSON.parse(JSON.stringify(params.hash.defaults));
        }

    }
    else {

        defaults = {};
    }

    //var defaults = (params.hash.defaults) ? JSON.parse(params.hash.defaults) : {};

    // Get a copy of the scope if its supplied
    var scope = (params.hash.scope) ? params.hash.scope : false;
    var state = (params.hash.state) ? params.hash.state : false;
    var section = (params.hash.section) ? params.hash.section : false;

    function addValue (type, value) {

        // Check to see if this attribute value exists
        if (defaults.hasOwnProperty(type)) {
            defaults[type] += ' ' + value;
        }
        else {
            // Defautl does not have this type, so lets create it.
            defaults[type] = value;
        }
    };

    function replaceValue(type, value) {
        defaults[type] = value;
    };

    function suffixValue(type, suffix) {

        defaults[type] = (defaults[type] + suffix);
    };

    function addInlineStyle (rule, value) {

        // Create the html attribute
        addValue('style', rule + ':' + value + ';');
    };

    var _extendFuncs = {};

    _extendFuncs.extend = function _extend (obj, section, scope, state) {

        if (obj !== undefined) {
            if (typeof obj === 'string') {
                obj = JSON.parse(obj);
            }

            for (var prop in obj) {
                addValue(prop, obj[prop]);
            }
        }
    };

    // Look for special attribute attached based on specific sections. These are not passed in from framework as UI wants the ability to change them as needed.
    _extendFuncs.section = function _section_attributes (source, section, scope, state) {
        if (section !== undefined) {
            switch (section) {
                case 'asof-previous':
                    addValue('className', 'emp-asof-prev');
                    break;

                case 'asof-next':
                    addValue('className', 'emp-asof-next');
                    break;

                case 'globalHeader':
                    if (scope === 'message') {

                        addValue('className', 'cui-messages');
                        addValue('className', 'emp-messages');
                    }

                    break;
            }
        }
    };

    // This function handles when a element has a selected attribute
    _extendFuncs.selected = function _selected (bool, section, scope, state) {
        if (bool === true || bool === 'true') {
            addValue('className', 'emp-selected');
        }
    };

    _extendFuncs.style = function _style (styles, section, scope, state) {

        if (styles !== undefined) {

            if (styles.indexOf(',') !== -1) {
                styles = styles.split(',');
            }
            else {
                styles = [styles];
            }

            for (var i = 0, len = styles.length; i < len; i++) {

                switch (styles[i]) {

                    case 'error':
                        addValue('className', 'cui-error');
                        break;

                    case 'info':
                    case 'informational':
                        addValue('className', 'cui-informational');
                        break;

                    case 'warning':
                        addValue('className', 'cui-warning');
                        break;

                    case 'success':
                        addValue('className', 'cui-success');
                        break;

                    case 'currency':
                        addValue('className', 'cui-currency');
                        break;

                    case 'numeric':
                    addValue('className', 'cui-numeric');
                    break;

                    case 'align-right':
                        addValue('className', 'cui-align-right');
                        break;

                    case 'align-center':
                        addValue('className', 'cui-align-center');
                        break;

                    case 'currency-left':
                        addValue('className', 'emp-currency-left');
                        break;

                    case 'min-width':
                        addValue('className', 'emp-min-width');
                        break;

                    case 'negative':
                    case 'negative-number':

                        addValue('className', 'emp-negative-number');
                        break;

                    case 'no-wrap':
                        addValue('className', 'cui-no-wrap');
                        break;

                    case 'equal-height':
                        addValue('className', 'emp-equal-height');
                        break;

                    case 'key-value':
                        addValue('className', 'emp-key-value-pairs');
                        break;

                    case 'bold':

                        addValue('className', 'emp-bold');
                        break;

                    case 'top-align-label':
                        addValue('className', 'emp-top-align-label');
                        break;

                    case 'skip-blocker':
                        addValue('data-skip-blocker', 'true');
                        break;

                    case 'indicator-1':
                        addValue('className', 'emp-indicator-1');
                        break;

                    case 'indicator-2':
                        addValue('className', 'emp-indicator-2');
                        break;

                    case 'indicator-3':
                        addValue('className', 'emp-indicator-3');
                        break;

                    case 'order-column':
                        addValue('className', 'emp-order-column');
                        break;

                    case 'mobile-responsive':
                        addValue('className', 'emp-pivot-table');
                        break;

                    case 'manual-stripping':
                        addValue('className', 'cui-no-stripes');
                        break;

                    // Disable table plugins

                    case 'noFilter':
                        addValue('data-filter', 'false');
                        break;

                    case 'noResize':
                        addValue('data-resize', 'false');
                        break;

                    case 'noColumns':
                        addValue('data-responsive', 'false');
                        break;

                    case "employee":

                        addValue('className', 'emp-ajax-tooltip');
                        break;

                    case "boolean-list":
                        addValue('className', 'emp-boolean-input-group');
                        break;

                    case "hidden":
                        addValue('className', 'cui-hide-from-screen');
                        break;

                    // Expandable Text Areas
                    case "expanding":
                        addValue('className', 'emp-expanding');
                        break;

                    // Expandable region hooks for rows and columns!
                    // Already open expandable regions
                    case "expandable-region":
                        addValue('aria-live', 'polite');
                        break;

                    // Rendered closed expandable regions
                    case "expandable-region-collapsed":
                        addValue('aria-live', 'polite');
                        addValue('className', 'emp-collapse');
                        break;

                    case "actions":
                        addValue('className', 'emp-external-actions-menu');
                        break;

                    case "light-header":
                        addValue('className', 'emp-light-header');
                        break;

                    // EC COMPONENTS
                    case 'ecSubComp':
                        addValue('className', "ec-sub-component-source");
                        break;

                    case 'ec-short-section':
                        addValue('className', 'ec-short-section');
                        break;

                    case 'ec-long-section':
                        addValue('className', 'ec-long-section');
                        break;

                    // EMP TEST STYLES NOT FOR PRODUCTION USE
                    case 'active-green':
                        addValue('className', 'emp-active-green');
                        break;

                    case 'active-red':
                        addValue('className', 'emp-active-red');
                        break;

                }
            }
        }
    };

    _extendFuncs.theme = function(theme, section, scope, state) {

        switch (theme) {
            case 'orpts':
                addValue('className', 'emp-orpts-subtheme');
                break;
        }

    };

    _extendFuncs.align = function _align(align, styles, section, scope, state) {
        if (align !== undefined) {
            if (align === 'right') {
                addValue('className', 'cui-align-right');
            }
            else if (align === 'center') {
                addValue('className', 'cui-align-center');
            }
        }
    };

    _extendFuncs.collapse = function _collapse (bool, section, scope, state) {
        if (bool === true || bool === 'true') {
            addValue('className', 'emp-collapse');
        }
    };

    _extendFuncs.collapseChildren = function _collapseChilden(bool, section, scope, state) {
        if (bool === true || bool === 'true') {
            addValue('className', 'emp-collapse-children');
        }
    };

    _extendFuncs.visibility = function _visibility (value, section, scope, state) {
        // Check to see if a scope and a state of hidden was defined, otherwise do nothing
        if (scope !== undefined) {
            switch (scope) {
                default:

                    addValue('className', 'cui-hidden');
                    break;
            }
        }
    };

    _extendFuncs.federal = function _federal (bool, section, scope, state) {
        if (bool === true || bool === 'true') {
            switch (scope) {
                case 'notifier':
                    // Check to see if this is a global Header notifier
                    if (section === 'globalHeader') {
                        addValue('className', 'emp-indicator');
                    }

                    addValue('className', 'emp-federal-data');

                    break;

                case 'inputGroup':
                    addValue('className', 'emp-federal-data');

                    break;

                default:
                    addValue('className', 'emp-federal-data');

                    break;
            }
        }
    };

    _extendFuncs.primary = function _primary (bool, section, scope, state) {

        if (bool === true || bool === 'true') {
            addValue('className', 'cui-button-primary');
        }
    };

    _extendFuncs.required = function _required (def, section, scope, state) {

        if (typeof def === "object") {

            // Check the scope here as many elements are affected by a single value.
            switch (scope) {

                case 'boolean-input':
                    addValue('required', 'true');
                    break;

                case 'field':
                case 'inputGroup':
                case 'search-composite':
                case 'file-upload':

                    if (state === "forceRequired" && def.required) {

                        addValue('className', 'cui-required');
                    }
                    else if (def.required && !def.readOnly) {

                        addValue('className', 'cui-required');
                    }

                    break;
            }
        }
        else if (typeof def === "boolean" && def) {

            // Check the scope here as many elements are affected by a single value.
            switch (scope) {

                case 'boolean-input':
                    addValue('required', 'true');
                    break;

                case 'yesNo':
                    addValue('className', 'cui-required');
                    addValue('aria-required', 'true');
                    break;

                case 'field':
                case 'inputGroup':
                case 'search-composite':
                case 'file-upload':

                    addValue('className', 'cui-required');
                    break;
            }

        }
    };

    _extendFuncs.total = function _total(def, section, scope, state){

        if(def.total || def.total === 'true'){

            addValue('className', 'emp-total');

        }else if(def.totalLine || def.totalLine === 'true'){

            addValue('className', 'emp-total-line');
        }
    }

    _extendFuncs.nestCheck = function _nest_check (elem, section, scope, state) {
        if (elem !== undefined) {
            switch (elem) {
                case 'section':
                    addValue('className', 'emp-section-in-section-container');
                    break;
            }
        }
    };

    _extendFuncs.addClass = function _add_class(classString, section, scope, state) {

        if (classString !== undefined) {
            addValue('className', classString);
        }
    };

    _extendFuncs.idSuffix = function _id_suffix(suffix, section, scope, state) {

        if (defaults && defaults.id !== undefined && typeof suffix === "string") {

            suffixValue("id", suffix);
        }
    };

    _extendFuncs.title = function _title (title, section, scope, state) {

        if (title) {
            addValue('title', title);
        }

    };

    // This function polly fills in all icon classes
    _extendFuncs.iconClass = function _icon_class (icon, section, scope, state) {
        var iconClass;
        var prefix = 'emp-icon-';

        // Use a switch case to get the right icon
        switch (icon) {
            case 'checkmark':
            case 'redcheck':
                iconClass = 'redcheck';
                break;

            case 'green-check':
            case 'greencheck':
                iconClass = 'greencheck';
                break;

            case 'credits-claimed':
                iconClass = 'credits-claimed'
                break;
    
            case 'error':
                iconClass = 'error';
                break;

            case 'stop':
            case 'not-applicable':
                iconClass = 'stop';
                break;

            case 'legal':
            case 'iLegalRepresentative.gif':
                iconClass = 'legal-rep';
                break;

            case 'printer':
            case 'iprint.gif':
                iconClass = 'print';
                break;

            case 'data-joint':
                iconClass = 'data-joint';
                break;

            case 'list-joint':
                iconClass = 'list-joint';
                break;

            case 'tax-type':
                iconClass = 'tax-type';
                break;

            case 'add-event':
            case 'iCommentsAdd.gif': // Backward support icon
                iconClass = 'add-event';
                break;

            case 'emp-work-items.svg':
                iconClass = 'work-items';
                break;

            case 'diff-mail':
                iconClass = 'diff-mail';
                break;

            case 'resize-section':
                iconClass = 'resize-section';
                break;

            case 'ipopup.gif':
            case 'popup':
            case 'popup-view-list':
                iconClass = 'popup-view-list';
                break;

            case 'view-notes':
                iconClass = 'view-notes';
                break;

            case 'work-items':
                iconClass = 'work-items';
                break;

            case 'iViewMoreDetails.gif':
            case 'view-details':
                iconClass = 'view-details';
                break;

            case 'delete':
            case 'iDeleteImage.gif':
                iconClass = 'delete';
                break;

            case 'edit':
            case 'iEditImage.gif':
                iconClass = 'edit';
                break;

            case 'help':
                iconClass="help";
                break;

            case 'letters-tx':
                iconClass = 'letters-tx';
                break;

            case 'star-red':
                iconClass = 'star-red';
                break;

            case 'ipreview.gif':
            case 'iPreview.gif':
            case 'more-info':
                iconClass = 'more-info';
                break;

            case 'previous':
                iconClass = "previous";
                break;

            case 'next':
                iconClass = "next";
                break;

            case "first":
                iconClass = "first";
                break;

            case "last":
                iconClass= "last";
                break;

            // Old Icons ....

            case 'iAdjustReturn.gif':
                iconClass = 'adjust-return';
                break;

            // Missing from empire 1
            case 'iact_inact.gif':
                iconClass = 'iact-inact';
                break;

            case 'iAssignmentHistory.gif':
                iconClass = 'assignment-history';
                break;

            case 'associations.gif':
                iconClass = 'associations';
                break;

            case 'iAssociate.gif':
                iconClass = 'associate';
                break;

            case 'ibank.gif':
                iconClass = 'bank';
                break;

            case 'iCARTSAssessments.gif':
                iconClass = 'cart-assignment';
                break;

            case 'iCreatedUnderJoint.gif':
                iconClass = 'created-under-joint';
                break;

            case 'iClaims.gif':
                iconClass = 'claims';
                break;

            case 'iCopy.gif':
                iconClass = 'copy';
                break;

            case 'icreateMigNum.gif':
                iconClass = 'create-migration-number';
                break;

            case 'iCTProfile.gif':
                iconClass = 'ct-profile';
                break;

            case 'iCSProfile.gif':
                iconClass = 'cs-profile';
                break;

            case 'iDirectDeposit.gif':
                iconClass = 'direct-deposit';
                break;

            case 'document-out.gif':
                iconClass = 'document-out';
                break;

            case 'idrilldown.gif':
            case 'drill-down':
                iconClass = 'drill-down';
                break;

            case 'iEventsLog.gif':
                iconClass = 'event-log';
                break;

            case 'iExternalTransmittal.gif':
            case 'iExternalTransmittal.png':
                iconClass = 'external-transmittal';
                break;

            case 'ifilingcomp.gif':
                iconClass = 'filing-comp';
                break;

            case 'ipicture.gif':
            case 'iPicture.gif':
            case 'view-image':
                iconClass = 'view-image';
                break;

            case 'iinformation.gif':
            case 'informational':
                iconClass = 'informational';
                break;

            case 'iInternalTransmittal.png':
                iconClass = 'internal-transmittal';
                break;

            case 'iLPSummary.png':
                iconClass = 'lp-summary';
                break;

            case 'iLocked.gif':
                iconClass = 'lock';
                break;

            case 'iLiabilityPeriod.gif':
                iconClass = 'liability-period';
                break;

            case 'imanualadjust.gif':
                iconClass = 'manual-adjust';
                break;

            case 'iMap.gif':
                iconClass = 'map';
                break;

            case 'dollar-sign':
            case 'imoney.gif':
                iconClass = 'dollar-sign';
                break;

            case 'iMultipleReturns.gif':
                iconClass = 'multiple-returns';
                break;

            case 'iFormOrder.gif':
                iconClass = 'form-order';
                break;

            case 'iOSCVoid.gif':
                iconClass = 'osc-void';
                break;

            case 'iDraft.gif':
                iconClass = 'draft';
                break;

            case 'iArrowDown1.gif':
                iconClass = 'arrow-down';
                break;

            case 'iFinal.gif':
                iconClass = 'final-copy';
                break;

            case 'iRecordMatch.gif':
                iconClass = 'record-match';
                break;

            case 'iTransmittal.png':
                iconClass = 'transmittal';
                break;

            case 'iremoveMigNum.gif':
                iconClass = 'remove-mig-num';
                break;

            case 'iRollup.gif':
                iconClass = 'roll-up'
                break;

            case 'iSalesTaxLiabilities.gif':
                iconClass = 'sales-tax-liabilities';
                break;

            case 'iSalesTaxProfile.gif':
                iconClass = 'sales-tax-profile';
                break;

            case 'iArrowUp1.gif':
                iconClass = 'arrow-up';
                break;

            case 'iSourceOfDeficiency.gif':
                iconClass = 'source-of-deficiency';
                break;

            case 'itabledetails.gif':
                iconClass = 'table-details';
                break;

            case 'iTransfInOut.gif':
                iconClass = 'transfer-in-out';
                break;

            case 'iTaxpayerData.png':
                iconClass = 'tax-payer-data';
                break;

            case 'iTaxpayerAssessments.gif':
                iconClass = 'tax-payer-assessments';
                break;

            case 'iTrxn.gif':
                iconClass = 'trxn';
                break;

            case 'iUnlink.gif':
                iconClass = 'unlink';
                break;

            case 'iUnlocked.gif':
                iconClass = 'unlock';
                break;

            case 'iUserProfiles.gif':
                iconClass = 'user-profile';
                break;

            case 'iViewMap.gif':
                iconClass = 'view-map';
                break;

            case 'iViewPDF.gif':
                iconClass = 'view-pdf';
                break;

            case 'iWageReporting.gif':
                iconClass = 'wage-reporting';
                break;

            case 'icalculator.png':
                iconClass = 'calculator';
                break;

            case 'iFinancialWorksheet.gif':
                iconClass = 'financial-worksheet';
                break;

            case 'iLink.gif':
                iconClass = 'link';
                break;

            case 'ifolderclosed.gif':
                iconClass = 'folder-closed';
                break;

            case 'iLowPriority.gif':
            case 'low-priority':
                iconClass = 'low-priority';
                break;

            case "medium-priority":
                iconClass = 'medium-priority';
                break;

            case 'priority-1':
            case 'high-priority':
                iconClass = 'high-priority';
                break;

            // Workflow

            case 'iWorklistLaunch.gif':
                iconClass = 'worklist-launch';
                break;

            case 'iWFpending.gif':
                iconClass = 'work-flow-pending'
                break;

            case 'iWFgetNext.gif':
            case 'workflow-item-next':
                iconClass = 'work-flow-next'
                break;

            case 'iWFgotoSubCategoryWorklist.png':
            case 'work-flow-subcategory-work-list':
            case 'iWFgotoSubCategoryWorklist.gif':
                iconClass = 'work-flow-subcategory-work-list'
                break;

            case 'iWFreturnToWorkList.gif':
            case 'work-flow-return-to-work-list':
                iconClass = 'work-flow-return-to-work-list';
                break;

            case 'workflow-item-comments':
            case 'iComments.gif':
                iconClass = 'workflow-item-comments';
                break;

            case 'workflow-item-no-comments':
            case 'iCommentsmt.gif':
                iconClass = 'workflow-item-no-comments';
                break;

            case 'workflow-item-work-management':
                iconClass = 'workflow-item-work-management';
                break;

            case 'responsive-table-menu':
                iconClass = 'responsive-table-menu';
                break;

            case 'exclamation':
                iconClass = 'exclamation';
                break;

            case 'up-arrow':
            case 'filled-up':
            case 'positive-influence':
                iconClass = 'filled-up';

                break;

            case 'down-arrow':
            case 'outline-down':
            case 'negative-influence':
                iconClass = 'outline-down';
                break;

            case 'order-table-move-down':
                iconClass = 'order-table-move-down';
                break;

            case 'order-table-move-up':
                iconClass = 'order-table-move-up';
                break;

        }

        // Check to make sure a value was found
        if (iconClass) {
            addValue('className', prefix + iconClass);
        }

        switch (icon) {

            case 'down-arrow':
            case 'outline-down':
            case 'negative-influence':

                addValue('data-sortValue', "0");
                break;

            case 'up-arrow':
            case 'filled-up':
            case 'positive-influence':

                addValue('data-sortValue', "1");
                break;

        }
    };

    // Function is used by both buttons, links and notifiers
    _extendFuncs.popup = function _popup (bool, section, scope, state) {
        if (bool === true || bool === 'true') {
            switch (scope) {
                case 'notifier':
                    addValue('className', 'popup');
                    break;

                default:
                    addValue('className', 'emp-popup');
                    break;
            }
        }
    };

    _extendFuncs.compositeSearchRequired = function _composite_search_required(compositeDef, section, scope, state) {

        if (typeof compositeDef === "object") {

            if (compositeDef.text && compositeDef.text.input.required && compositeDef.button) {

                addValue('className', 'cui-required');
            }

        }
    };

    _extendFuncs.expands = function _expandable_contorl(control, section, scope, state ) {

        switch (control.type) {

            case "select":

                if (control.input && !control.input.readOnly && control.input.options && control.input.options.length) {

                    var foundExpandable = false;
                    var expandableOpen = false;
                    var controlContainers = [];

                    for (var o = 0, oLen = control.input.options.length; o < oLen; o++) {

                        if (control.input.options[o].expands) {

                            foundExpandable = true;

                            if (controlContainers.indexOf(control.input.options[o].expands) === -1) {

                                controlContainers.push(control.input.options[o].expands);
                            }

                            if (control.input.options[o].value === control.input.value) {
                                expandableOpen = true;
                            }

                        }

                    }

                    if (foundExpandable && controlContainers.length) {
                        addValue('className', 'emp-expandable-control');
                        addValue('aria-controls', controlContainers.join(' '));

                        if (expandableOpen) {
                            addValue('aria-expanded', "true");
                        }
                        else {
                            addValue('aria-expanded', "false");
                        }
                    }

                }

                break;

            case "radio":
            case "checkbox":

                if (control.input && control.input.expands) {

                    var controlSections = control.input.expands.split(','). join(" ");

                    // Add the aria definition for what this input controls
                    addValue('aria-controls', controlSections);

                    // Add genaric expandable-control hook
                    addValue('className', 'emp-expandable-control');

                    if (control.input.attributes && control.input.attributes.checked) {
                        addValue('aria-expanded', "true");
                    }
                    else {
                        addValue('aria-expanded', "false");
                    }

                }

                break;

            // Hook for no input controls but sub elements
            default:

                if (scope === "option" && control.expands) {

                    addValue('data-expands', control.expands);
                }

                break;

        }


    };

    // ====================
    // Tag Specific Extends
    // ====================

    // Notifiers
    _extendFuncs.notifierLengthClass = function _notifier_length_class (text, section, scope, state) {
        if (text !== undefined) {
            var textLength = text.length;
            var className = 'emp-indicator-' + textLength;

            addValue('className', className);
        }
    };

    _extendFuncs.notifierColor = function _notifier_color(color, section, scope, state) {

        if (color !== undefined) {

            switch (color) {

                case "black":

                    addValue('className', 'emp-notifier-color-black');
                    break;

                case "green":

                    addValue('className', 'emp-notifier-color-green');
                    break;

                case "lightgray":

                    addValue('className', 'emp-notifier-color-lightgray');
                    break;

                default:
                    addValue('className', 'emp-notifier-color-red');
                    break;
            }

        }
        else {

            // Undefined requests will default to red
            addValue('className', 'emp-notifier-color-red');

        }
    };

    // Labels
    _extendFuncs.labelLength = function _label_length (text, section, scope, state) {
        if (typeof text === 'string') {
            if (text.split(' ').length > 5) {
                addValue('className', 'emp-long-wrapping-label');
            }
        }
        else {
            journal.log({owner: 'Java', type: 'warn'}, 'Label tag has no text');
        }
    };

    _extendFuncs.labelStyles = function _label_styles (styles, section, scope, state) {
        if (styles !== undefined) {

            if (styles.indexOf(',') !== -1) {
                styles = styles.split(',');
            }
            else {
                styles = [styles];
            }

            for (var i = 0, len = styles.length; i < len; i++) {
                switch (styles[i]) {
                    case 'label-min-width':
                        addValue('className', 'emp-min-width-label');
                        break;

                    case 'top-align-label':
                        addValue('className', 'emp-top-align-label');
                        break;

                    case 'unregistered':
                        addValue('className', 'emp-unregistered-field');
                        break;

                    default:
                        break;
                }
            }
        }
    };

    _extendFuncs.messageType = function _message_type(value, section, scope, state) {
        if (value !== undefined) {
            switch (value) {
                case 'info':
                    addValue('className', 'cui-informational');
                    break;

                case 'warning':
                case 'warn':
                    addValue('className', 'cui-warning');
                    break;

                case 'error':
                    addValue('className', 'cui-error');
                    break;

                case 'success':
                    addValue('className', 'cui-success');
                    break;

                case 'federal':
                    addValue('className', 'emp-federal');
                    break;
            }
        }
    };

    // Select
    _extendFuncs.multipleSelection = function _multiple_selection(select, section, scope, state) {

        var newSize = 2;

        if (select.attributes && select.attributes.multiple) {

            if (select.options && select.options.length >= 2) {

                if (select.options.length > 10) {

                    newSize = 10;
                }
                else {

                    newSize = select.options.length;
                }
            }

            if (select.attributes && select.attributes.size) {

                replaceValue('size', newSize);
            }
            else {

                addValue('size', newSize);
            }

        }

    }

    // =========
    // Grids ===
    // =========
    _extendFuncs.width = function _width(width, section, scope, state) {

        var colClassSize = null;

        if (width !== undefined) {

            if (isNaN(width)) {

                // Developer declared a string so check to see if matches one of our supported shorthand names
                switch (width) {

                    case 'full':

                        colClassSize = 'emp-col-full';
                        break;

                    case 'half':

                        colClassSize = 'emp-col-half';
                        break;

                    // Unused spec
                    case 'three-quarters':

                        colClassSize = 'emp-col-three-quarters';
                        break;

                    // Unused spec
                    case 'quarter':

                        colClassSize = 'emp-col-quarter';
                        break;
                }

            } else {

                if (parseInt(width) >= 1 && parseInt(width) <= 12) {

                    colClassSize = 'cui-col-small-' + width;
                }
            }
        }

        if (colClassSize !== null) {

            addValue('className', colClassSize);
        }
    };

    _extendFuncs.push = function _push(push, section, scope, state) {

        var pushSize = null;

        if (push !== undefined) {

            switch (push) {

                case 'half':

                    pushSize = 'emp-col-pull-half';
                    break;
            }
        }

        if (pushSize !== null) {

            addValue('className', pushSize);
        }
    };

    _extendFuncs.cuiSize = function _cui_size(colAryObj, section, scope, state) {

        if (Array.isArray(colAryObj) && colAryObj.length >= 1) {

            for (var co = 0, coLen = colAryObj.length; co < coLen; co++) {

                var colClass = "cui-col-";

                colClass += colAryObj[co].screen + "-" + colAryObj[co].count;

                addValue('className', colClass);
            }

        }


    };

    // =========
    // Table ===
    // =========

    // Table Row Key
    _extendFuncs.rowKey = function _row_key(value, section, scope, state) {

        if (value !== undefined) {

            addValue('data-key', value);
        }
    };

    _extendFuncs.colIndex = function _col_index(value, section, scope, state) {

        if (value !== undefined) {

            addValue("data-col-index", value);
        }
    };

    // Searches cells to find specific content templates
    _extendFuncs.cellSearch = function _cell_search(contents, section, scope, state) {

        if (contents !== undefined) {

            if (contents.template === "composite") {

                switch (contents.type) {

                    case "fwNameSearchList":

                        addValue('className', 'emp-key-value-pairs');
                        break;

                }

            }
        }
    };

    _extendFuncs.dynamicLabel = function _dynamic_label(contents, section, scope, state) {

        if (contents !== undefined) {

            switch (scope) {

                case "search-composite":

                    if (contents.type === "select") {

                        addValue('className', 'emp-seach-composite-dynamic-label');
                    }

                    break;
            }
        }
    };

    _extendFuncs.footerTooltip = function _footer_tooltips(obj, section, scope, state) {

        if (obj && typeof obj === "object") {

            var headerText = obj.tableData.head.rows[0].columns[obj.colIndex].text;

            addValue('title', 'Total ' + headerText + ": " + obj.text);
            addValue('data-title', 'Total ' + headerText + ": " + obj.text);

            addValue('className', 'emp-tooltip');
        }
    };

    _extendFuncs.validationTable = function _validation_table(bool, section, scope, state) {

        if (bool === true || bool === "true") {

            addValue('className', 'emp-selectionRequired');
        }
    };

    // ==========
    // Viewer ===
    // ==========

    _extendFuncs.viewerSize = function _viewer_size(size, section, scope, state) {

        if (size === "medium") {

            addValue('className', 'emp-viewer-size-medium');
        }
        else if (size === "large") {

            addValue('className', 'emp-viewer-size-large');
        }
        else {

            addValue('className', 'emp-viewer-size-small');
        }
    }

    // ==========
    // Fields ===
    // ==========

    _extendFuncs.validationError = function _validation_error(type, section, scope, state) {

        if (type !== undefined && typeof type === "string") {

            if (type === "error") {

                addValue('className', 'emp-validation-error');
            }

        }
    };

    _extendFuncs.isPassword = function _is_password(type, section, scope, state) {
        addValue('className', 'emp-password-input');
    };

    _extendFuncs.enhancedAttributes = function _enhanced_attributes(object, section, scope, state) {

        if (object && typeof object === "object") {

            switch (scope) {

                case "text":
                case "textarea":
                case "span":

                    if (object.hasOwnProperty('data-title')) {

                        addValue('title', 'Click to see more.');
                        addValue('className', 'emp-tooltip');
                    }

                    if(object.hasOwnProperty('data-tooltip-url')){

                        addValue('className', 'emp-ajax-tooltip');
                    }

            }

        }
    };

    // ===============
    // Dropdowns =====
    // ===============

    _extendFuncs.selectOther = function _select_other(value, section, scope, state) {

        if (scope === "selectOther") {

            if (value) {

                addValue('data-select-other', value);
            }
            else if (value === undefined || value === null) {

                addValue('data-select-other', 'other');
            }
        }


    };

    // ==========
    // Tabs =====
    // ==========

    _extendFuncs.tabState = function _tab_pane(id, section, scope, state) {

        if (state) {

            addValue('className', 'emp-active-tab');
        }
    };

    _extendFuncs.contentState = function _content_pane(id, section, scope, state) {

        if (state) {

            addValue('className', 'emp-active-tab');
        }else{
            addValue('className', 'cui-hidden-for-tabs');
        }
    };

    _extendFuncs.tabIndex = function _tab_index(index, section, scope, state) {

        /*if (scope === "tab-container") {

            if (index !== 0) {
                addValue('style', "top: -" + index + "px");
            }
            else {
                addValue('style', "top: " + index + "px");
            }
        }
        else {*/

            addValue('data-tab-index', index);
        //}

    };

    _extendFuncs.defaultSelection = function _default_selection(value, section, scope, state) {

        if (value && value.trim().length > 0) {
            addValue('data-default', value);
        }

    };

    // ===============
    // Form Lines ====
    // ===============

    _extendFuncs.formLineColumnDetect = function _form_line_column_detect(sectionObj, section, scope, state) {

        if (sectionObj['lineAdjustmentTitle']) {
            addValue('className', 'has-adjustment-column');
        }
        else {
            addValue('className', 'no-adjustment-column');
        }

        if (sectionObj['lineAdjustmentReasonTitle']) {
            addValue('className', 'has-reason-column');
        }
        else {
            addValue('className', 'no-reason-column');
        }

    };

    _extendFuncs.expandRoot = function _expandRoot(rootValue, section, scope, state) {

        if (rootValue !== false) {
            addValue('className', 'emp-tree-root');
        }

    };

    _extendFuncs.check

    var extendArguments = Object.keys(params.hash);

    var i = 0;

    // Loop through extendArguments
    while(extendArguments[i]) {

        // Skip the default item
        if (extendArguments[i] !== 'defaults') {

            var extendedName = extendArguments[i];

            // Check to see if the extended name matches a known function
            if (_extendFuncs.hasOwnProperty(extendedName)) {

                if (params.hash[extendedName] !== undefined) {

                    if (scope !== "grid-column") {

                        var extendedArg = (params.hash[extendedName].constructor === Array) ? params.hash[extendedName].concat() : [params.hash[extendedName]];
                    }
                    else {

                        var extendedArg = [params.hash[extendedName]];
                    }
                }
                else {
                    var extendedArg = [];
                }

                if (section) {
                    extendedArg.push(section);
                }
                else {
                    extendedArg.push(undefined);
                }

                // If scope was defined, let make sure its passed along
                if (scope) {
                    extendedArg.push(scope);
                }
                else {
                    extendedArg.push(undefined);
                }

                if (state) {
                    extendedArg.push(state);
                }
                else {
                    extendedArg.push(undefined);
                }

                _extendFuncs[extendedName].apply(this, extendedArg);

            }

        }

        i++;
    }

    return defaults;

});
;Handlebars.registerHelper('extendParts', function(params) {

    var parts = params.hash.parts
    var properties = params.hash.properties;
    var parentObj = params.hash.parentObj;
    var attributes = params.hash.attributes;
    var prefix = params.hash.prefix;

    if (parts === undefined) {
        parts = {};
    }

    if (properties === undefined) {
        properties = {};
    }

    // Special extend for attributes/prefix.
    if (attributes !== undefined) {
        parts['attributes'] = attributes;
    }

    if (prefix !== undefined) {
        parts.prefix = prefix;
    }

    if (typeof properties === "object") {

        for (prop in properties) {

            if (!parts.hasOwnProperty(prop)) {
                parts[prop] = properties[prop];
            }

        }
    }

    if (typeof parentObj === "object") {

        parts["parentObj"] = {};

        for (prop in parentObj) {

            if (!parts.hasOwnProperty(prop)) {
                parts["parentObj"][prop] = parentObj[prop];
            }

        }
    }

    return parts;

});
;Handlebars.registerHelper('federalMarker', function(context, options){

    var federalInput = false;

    var optionList = context.options

    // Start by looping the context (options) and look for an occurange were a label is visible and a input is required.
    for (var i=0, len=optionList.length; i < len; i++) {

        // Pull the array object
        var inputObj = optionList[i];

        // Check to see if we have a required field.
        if (inputObj.input && inputObj.input.federal && inputObj.input.federal === true) {
            federalInput = true;

            break;
        }

    }

    // Now based on the final results
    if (federalInput) {

        context['federal'] = true;

        // We have labels that need to be shown, so hide then
        return true;

    } else {

        // Some other stange combinations, so do nothing.
        return false;
    }


});;// Create the attribute helper
Handlebars.registerHelper('formatString', function(context, options) {

    var value = context;

    if (options.hash.appendExtra) {
        value += options.hash.appendExtra;
    }

    // Make sure the first character is lower case
    value = value.substring(0, 1).toLowerCase() + value.substring(1);

    return value.replace(/\s+/g, '');;

});
;Handlebars.registerHelper('getKey', function (context, options) {
    return context;
});
;Handlebars.registerHelper('getPartialName', function(context, options){

    if (options.hash.composite) {

        // Add the icon class prefix and return
        return new Handlebars.SafeString("_composite-" + context);

    } else {

        // Add the icon class prefix and return
        return new Handlebars.SafeString("_" + context);

    }

});
;// Create the attribute helper
Handlebars.registerHelper('getSearchBoxInputs', function(options) {

	var selected = options.hash.selected;
	var values = options.hash.values;

	if (selected !== undefined && values !== undefined) {

		if (values.hasOwnProperty(selected)) {

			return values[selected];

		}

		return false;

	} else {

		return false;

	}

});;Handlebars.registerHelper('ifCond', function (options) {

    function cleanUpBools (bool) {

        if (typeof bool === 'string') {

            if (bool === "true") {
                bool = true;
            } else {
                bool = false;
            }

        }

        return bool;
    }

    var v1, v2, operator;

    v1 = options.hash.v1;
    v2 = options.hash.v2;
    operator  = options.hash.op;
    switch (operator) {
        case '==':
            return (v1 == v2) ? options.fn(this) : options.inverse(this);
        case '!=':
            return (v1 != v2) ? options.fn(this) : options.inverse(this);
        case '===':
            return (v1 === v2) ? options.fn(this) : options.inverse(this);
        case '<':
            return (v1 < v2) ? options.fn(this) : options.inverse(this);
        case '<=':
            return (v1 <= v2) ? options.fn(this) : options.inverse(this);
        case '>':
            return (v1 > v2) ? options.fn(this) : options.inverse(this);
        case '>=':
            return (v1 >= v2) ? options.fn(this) : options.inverse(this);
        case '&&':
            return (v1 && v2) ? options.fn(this) : options.inverse(this);
        case '||':
            return (v1 || v2) ? options.fn(this) : options.inverse(this);

        case 'hasProperty':

            if (v1 === undefined) {

               return options.inverse(this);
            }
            else {

                return (v1.hasOwnProperty(v2)) ? options.fn(this) : options.inverse(this);

            }

        // Checks to see if a given object has any of the included properties
        case 'hasAnyProperties':

            var array;

            if (v1 !== undefined) {

                if (v2 !== undefined) {

                    // Check to see if we already have an array
                    if (!Array.isArray(v2)) {

                        // Turn this string into an array
                        if (v2.constructor === String) {
                            array = v2.split(",");
                        }

                    } else {

                        // Just use the existing array.
                        array = v2;
                    }

                } else {
                    array = [];
                }

                if (array.length === 0) {

                    return options.inverse(this);
                }
                else {

                    for (var i = 0, len = array.length; i < len; i++) {

                        if (v1.hasOwnProperty(array[i])) {

                            return options.fn(this);
                        }
                    }

                    return options.inverse(this);
                }

            }
            else {

                return options.inverse(this);
            }

        case "emptyObject":

            if (v1 !== undefined) {

                var props = Object.keys(v1);

                if (props.length) {

                    return options.inverse(this);
                }
                else {

                    return options.fn(this);
                }

            }
            else {

                return option.inverse(this);
            }

        case "!emptyObject":

            if (v1 !== undefined) {

                var props = Object.keys(v1);

                if (props.length === 0) {

                    return options.fn(this);
                }
                else {

                    return options.inverse(this);
                }
            }
            else {

                return option.inverse(this);
            }

        case 'missingProperty':

            return (!v1.hasOwnProperty(v2)) ? options.fn(this) : options.inverse(this);

        case 'in':

            var array;

            if (v2 !== undefined) {

                // Check to see if we already have an array
                if (!Array.isArray(v2)) {

                    // Turn this string into an array
                    if (v2.constructor === String) {
                        array = v2.split(",");
                    }

                } else {

                    // Just use the existing array.
                    array = v2;
                }

            } else {
                array = [];
            }

            return (array.indexOf(v1) !== -1) ? options.fn(this) : options.inverse(this);

        case '!in':

            if (v2 !== undefined) {
                array = v2.split(",");
            } else {
                array = [];
            }

            return (array.indexOf(v1) === -1) ? options.fn(this) : options.inverse(this);

        case "boolCheck":

            v1 = cleanUpBools(v1);
            v2 = cleanUpBools(v2);

            return (v1 === v2) ? options.fn(this) : options.inverse(this);

        case "!boolCheck":

            v1 = cleanUpBools(v1);
            v2 = cleanUpBools(v2);

            return (v1 !== v2) ? options.fn(this) : options.inverse(this);

        case "hardBoolCheck":

            if (v1 === undefined) {
                v1 = false;
            }
            else {
                v1 = cleanUpBools(v1);
            }

            if (v2 === undefined) {
                v2 = false;
            }
            else {
                v2 = cleanUpBools(v2);
            }

            return (v1 === v2) ? options.fn(this) : options.inverse(this);

        case "!hardBoolCheck":

            if (v1 === undefined) {
                v1 = false;
            }
            else {
                v1 = cleanUpBools(v1);
            }

            if (v2 === undefined) {
                v2 = false;
            }
            else {
                v2 = cleanUpBools(v2);
            }

            return (v1 !== v2) ? options.fn(this) : options.inverse(this);

        case "hasLength":

            if (Array.isArray(v1) && v1.length > 0) {

                // Look for a contents object
                for (var i = 0, len = v1.length; i < len; i++) {

                    if (typeof v1[i] !== "object") {

                        return options.inverse(this);
                    }

                }

                return options.fn(this);

            }
            else {

                if (typeof v1 === "object") {

                }
                else {

                    return options.inverse(this);
                }

            }

        case "arrayLength":

            if (Array.isArray(v1) && v1.length === parseInt(v2)) {

                return options.fn(this);
            }
            else {

                return options.inverse(this);
            }

        case "typeCheck":

            if (typeof v1 === v2) {

                return options.fn(this);
            }
            else {

                return options.inverse(this);
            }

        case "testValue":

            return options.fn(this);

        case "typeof":

            var v1Type = typeof v1;

            if (v1Type === "object" && Array.isArray(v1)) {
                v1Type = "array";
            }

            if (v1Type === v2) {
                return options.fn(this);
            }

            return options.inverse(this);

        case "ratingIndex":

            if (v2 === undefined) {

                return options.inverse(this);
            }
            else {

                v1 = v1 + 1;

                return (v1 <= v2) ? options.fn(this) : options.inverse(this);

            }

        default:
            return options.inverse(this);
    }

});
;Handlebars.registerHelper("incrementValue", function(value, num) {

	if (value !== undefined && num !== undefined) {

		value = parseInt(value);
		num = parseInt(num);

		value = value + num;

		return value;

	}
	else {

		return false;
	}

});;Handlebars.registerHelper('keyOrIndex', function (options) {

    if (options.hash.key !== undefined) {

        return options.hash.key;
    }
    else {

        return options.hash.index;
    }

});;Handlebars.registerHelper('legendRequired', function(context, options){

    var requiredInput = false;
    var visibleLabel = false;

    var optionList = context.options

    // Start by looping the context (options) and look for an occurange were a label is visible and a input is required.
    for (var i=0, len=optionList.length; i < len; i++) {

        // Pull the array object
        var inputObj = optionList[i];

        // Check to see if we have a required field.
        if (inputObj.input && inputObj.input.required && !inputObj.input.readOnly) {
            requiredInput = true;
        }

        // Check to see if there is even a label (not all inputs in the group might need them)
        if (inputObj.label) {

            // Make sure to exclude radio and checkbox inputs as they need to show the label
            if (inputObj.input.type !== "radio" && inputObj.input.type !== "checkbox") {

                // Check to see if the label is visible
                if (inputObj.label.hasOwnProperty('visibility') && inputObj.label.visibility !== "hidden") {
                    visibleLabel = true;
                }

            }

        }

        // Break out of the loop as soon as both equal.
        if (requiredInput && visibleLabel) {
            break;
        }

    }

    // Now based on the final results
    if (requiredInput && !visibleLabel) {

        context['ignoreRequired'] = true;

        // We have labels that need to be shown, so hide then
        return true;

    } else {

        // Some other stange combinations, so do nothing.
        return false;
    }


});
;// Create the attribute helper
Handlebars.registerHelper('mergeAttributes', function(context, options) {

    // Pull the default JSON object
    if (options !== undefined) {

        var defaults = (options.hash && options.hash.defaults) ? options.hash.defaults : {};
        var extend = (options.hash && options.hash.extend) ? options.hash.extend : {};
        var dynamics = (options.hash && options.hash.dynamics) ? options.hash.dynamics : [];
        var skipAttributes = (options.hash && options.hash.skipAttributes) ? options.hash.skipAttributes : false;
        var suppressClasses = (options.hash && options.hash.suppressClasses) ? options.hash.suppressClasses : false;

    } else {

        var defaults = {};
        var extend = {};
        var dynamics = {};
    }

    var temp = {};

    // Merge the objects
    function merge(obj1, obj2) {

        var temp = obj1 || {};

        // Loop through all of the passed objects
        for (var p in obj2) {

            // Check to see if the defaults are in the passed settings
            if (temp.hasOwnProperty(p)) {

                // Alway override on id
                if (p === "id") {

                    temp[p] = obj2[p]
                }
                if (p === "size") {
                    temp[p] = temp[p];
                }
                else {

                    if (typeof obj2[p] === "string" && typeof temp[p] === "string") {

                        var classes = obj2[p].split(' ');

                        for (var c = 0, len = classes.length; c < len; c++) {

                            if (temp[p].indexOf(classes[c]) === -1) {
                                temp[p] += " " + classes[c];
                            }
                        }

                    }
                    else {

                        temp[p] = obj2[p];
                    }
                }

                //break;

            } else {

                if(p.indexOf('data-') !== -1) {
                    if (typeof obj2[p] === "object") {
                        temp[p] = JSON.stringify(obj2[p]);
                    }
                }

                // Defaults dont have the passes setting so add.
                temp[p] = obj2[p];

            }


        }

        return temp;

    };

    // Function to add attribute formats to elements
    function addDefaultAttributes(type, value) {

        if (temp.hasOwnProperty(type)) {

            temp[type] += " " + value;

        } else {
            temp[type] = value;
        }

    };

    // Check to see if the templated call included a default option. If so lets make sure that its in a stringified json format
    if (defaults.constructor === String) {

        try {

            defaults = JSON.parse(defaults);

        } catch(e) {

            console.log("Failed to change the defaults object into a JSON do to a JSON parse error");

        }

    }

    // Now try to make the extend object and object as handlebars templates are strings
    if (extend.constructor === String) {

        try {

            extend = JSON.parse(extend);

            if (Object.keys(extend).length) {

                defaults = merge(defaults, extend);
            }


        } catch(e) {

            console.log("Failed to change the extend object into a JSON do to a JSON parse error");

        }

    } else if (extend.constructor === Object) {

        if (Object.keys(extend).length) {
            defaults = merge(defaults, extend);
        }
    }

    // Merge the data sets
    defaults = merge(defaults, context);

    // Check to see if the skip attribute was provided
    if (skipAttributes) {

        var keys = skipAttributes.split(',');

        for (var i = 0, len = keys.length; i < len; i++) {

            if (defaults[keys[i]]) {

                delete defaults[keys[i]];
            }
        }
    }

    if (suppressClasses && defaults.className) {

        var scl = suppressClasses.split(',');

        if (scl.length) {

            for (var s = 0, sLen = scl.length; s < sLen; s++) {

                if (defaults.className.indexOf(scl[s]) !== -1) {
                    defaults.className = defaults.className.replace(scl[s], '');
                }

            }

        }

    }

    // Return the raw set
    return defaults;


});
;Handlebars.registerHelper('output', function(context, options){

    // Add the icon class prefix and return
    return new Handlebars.SafeString(context);

});
;Handlebars.registerHelper('readOnlyInputGroup', function(array) {

    var displayedText = "";

    for (var i = 0, len = array.length; i < len; i++) {

        if (array[i].input.attributes.checked) {

            if (displayedText === "") {

                displayedText += array[i].label.text;
            }
            else {

                displayedText += ", " + array[i].label.text;
            }

        }

    }

    return displayedText;

});
;Handlebars.registerHelper('readOnlyInputGroupInputs', function(array) {

    var displayedText = "";

    for (var i = 0, len = array.length; i < len; i++) {

        if (array[i].type === "text" || array[i].type === "textarea") {

            if (array[i].input.attributes.value && array[i].input.attributes.value !== "" && array[i].input.attributes.value !== undefined) {

                displayedText += " " + array[i].input.attributes.value;
            }

        }
        else if (array[i].type === "select") {

            var selected = array[i].input.value || false;

            if (selected !== undefined && selected !== false && selected !== "") {

                for (var o = 0, oLen = array[i].input.options.length; o < oLen; o++) {

                    if (array[i].input.options[o].value === selected) {

                        displayedText += " " + array[i].input.options[o].text;
                    }

                }

            }

        }

    }

    return displayedText.trim();

});
;Handlebars.registerHelper('rendererHook', function(context, scope) {

    if (window.emp && window.emp.render) {

        var returnHTML;

        if (scope === "table-column" && !context.type && context.template !== "icon") {


            if (!context.type && context.template !== "icon") {

                context.type = "span";

                emp.render.section(undefined, context, 'return', function(html) {

                    returnHTML = $('<div>').append(html).html();
                });

            }

        }
        else {

            if (scope === "tabs") {

                if (Array.isArray(context)) {
                    context = {"contents":context};
                }

                emp.render.section(undefined, context, 'return', function(html, data) {

                    returnHTML = $('<div>').append(html).html();
                });
            }
            else {

                emp.render.section(undefined, context, 'return', function(html) {

                    returnHTML = $('<div>').append(html).html();
                });

            }

        }

        return new Handlebars.SafeString(returnHTML);
    }
    else {

        console.error("Failed because renderer hook could not be found!");
    }

});
;Handlebars.registerHelper("repeat", function(from, to, incr, block) {
    var accum = '';
    for(var i = from; i < to; i += incr)
        accum += block.fn(i);
    return accum;
});;Handlebars.registerHelper("splitString", function(context) {

    if (typeof context.hash.hiddenValue === "string") {
        return context.hash.hiddenValue.split(',');
    }
    else {
        return [];
    }

});;Handlebars.registerHelper('standardTextFormat', function(context, options){
	if (typeof context === "string") {
    	
    	var replaceMultiSpace = true;
        var newString = context;

        var data = options.data.root;

        // Detect if this is an element that should preserve spaces as is
        if(data && data.type && data.type == "textarea"){
        	replaceMultiSpace = false;
        }

        newString = newString.trim().replace(/\n/g, '<br>').trim();        

        if(replaceMultiSpace){
        	var multispaceCheck = /[^\s]([ ]{2,})[^\s]/g

        	// Detect if there are any occurances of two or more spaces
	        var spaceCaptureGroup = context.match(multispaceCheck);

	        if (spaceCaptureGroup) {
	        	//Replace the all paired spaces
	            newString = newString.replace(/\s\s/g, '&nbsp&nbsp');

	            //Replace trailing single spaces if they exist.
	            newString = newString.replace(/&nbsp\s/g, '&nbsp&nbsp');
	        }	
        }

        return newString;

    } else {

        return context;
    }

});
;Handlebars.registerHelper('tableAllSeclected', function(context, options){

    if (context.rows && context.rows.length) {

        for (var i = 0, len = context.rows.length; i < len; i++) {

            if (!context.rows[i].selection) {

                return false;
            }
            else if (context.rows[i].selection && !context.rows[i].selection.checked) {

                return false;
            }

        }

    }
    else {

        return false;
    }

    return options.fn(this);

});
;Handlebars.registerHelper('tableButtons', function(context, options){

    var tableHead = context.head.rows;

    // Loop through all of the rows
    for (var i = 0, len = tableHead.length; i < len; i++) {

        var tableRow = tableHead[i].columns;

        // Loop through all of the columns
        for (var j = 0, jLen = tableRow.length; j < jLen; j++) {

            var tableColumn = tableRow[j];

            if (tableColumn.hasOwnProperty("attributes")) {

                if (tableColumn.attributes.hasOwnProperty('data-type')) {

                    if (tableColumn.attributes['data-type'] === "button") {
                        return true;
                    }

                    if (tableColumn.attributes['data-type'] === "buttonMenu") {
                        return true;
                    }

                    if (tableColumn.attributes['data-type'] === "primaryButton") {
                        return true;
                    }

                    if (tableColumn.attributes['data-type'] === "link") {
                        return true;
                    }

                }

            }

        }

    }

    // Add the icon class prefix and return
    return false;

});
;Handlebars.registerHelper('tableClientSideControls', function(attributes){

    var buttons = "";

    // Change Return
    if (attributes.hasOwnProperty('data-changereturn') && attributes['data-changereturn'] === "true") {
        buttons += '<button type="button" title="Selection Return" class="emp-icon-select-return" id="' + attributes.id + '_changeReturn">Selection Return</button>'
    }

    // Responsive Columns Control
    if ((!attributes.hasOwnProperty('data-responsive') || attributes['data-responsive'] === "true") || (attributes['data-type'] && (attributes['data-type'] === "breakout" || attributes['data-type'] === "breakout-priority"))) {

        // Check if breakout was defined an place that button in instead
        if (attributes['data-type']  && (attributes['data-type'] === "breakout" || attributes['data-type'] === "breakout-priority")) {

            buttons += '<button type="button" class="emp-table-breakout-control cui-button-primary">Show All Columns</button>';
        }
        else {

            if (!attributes.hasOwnProperty('data-responsive-columns') || attributes['data-responsive-columns'] === "true") {
                buttons += '<button type="button" title="Column Selection" class="emp-table-responsive-column-control" id="' + attributes.id + '_columns">Columns</button>'
            }
        }
    }

    // if (attributes['data-type'] && (attributes['data-type'] === "breakout" || attributes['data-type'] === "breakout-priority")) {
    //     buttons += '<button type="button" title="View all columns regardless of device width" class="emp-icon-table-breakout"></button>';
    // }

    // Filter Control
    if (!attributes.hasOwnProperty('data-filter') || attributes['data-filter'] === "true") {
        buttons += '<button type="button" title="Open Filter Row" class="emp-icon-table-filter-toggle" id="' + attributes.id + '_filter">Filter Table</button>'
    }

    // Resize Control
    if (!attributes.hasOwnProperty('data-resize') || attributes['data-resize'] === "true") {
        buttons += '<button type="button" title="Resize Table" class="emp-icon-table-resizer" id="' + attributes.id + '_resize">Resize Table</button>'
    }

    return new Handlebars.SafeString(buttons);

});
;Handlebars.registerHelper('tableColumnCount', function(context, options) {

	var totalColumns = 0;
	var tableData = options.hash.tableData;
	var headerRows = context;

	for (var row in context) {

		var columns = context[row].columns;

        // Loop each column
        for (var c = 0 , len = columns.length; c < len; c++) {

            // Only count the column if the column does not have a visibility setting or if the visibility setting is not set to hidden
            if (!columns[c].hasOwnProperty('visibility')) {
                totalColumns++;
            } else if (columns[c].visibility !== "hidden") {
                totalColumns++;
            }

        }

	}

	if (tableData.hasOwnProperty('selectable') && tableData.selectable) {
		totalColumns += 1;
	}

    // Return count
    return totalColumns;

});;Handlebars.registerHelper('tableHiddenInputs', function(context, options) {

  var tableDS = context;

  var colMap = {};
  var values = false;
  var checkedKeys = [];
  var selectedKeys = [];

  var finalOutput = "";

  var tableId = tableDS.attributes.id.substring(0, 1).toLowerCase() + tableDS.attributes.id.substring(1).replace(/\s+/g, '');

    // First verify that we have a table head to work with.
    if (tableDS.head && tableDS.body && tableDS.body.rows.length) {

        var head = tableDS.head.rows[0].columns.slice();

        var defaultValues = [];

        // Loop the header and generate the colMaps
        for (var i = 0, len = head.length; i < len; i++) {

            if (head[i].attributes && head[i].attributes['data-colmap']) {

                var mapName = head[i].attributes['data-colmap'];

                mapName = mapName.substring(0, 1).toLowerCase() + mapName.substring(1).replace(/\s+/g, '');

                colMap[mapName] = i;
            }

            if (head[i] && head[i].defaultValue) {

                defaultValues.push(head[i].defaultValue);
            }
            else {

                defaultValues.push(head[i].defaultValue);
            }

        }

        // Loop through the body
        for (var k = 0, kLen = tableDS.body.rows.length; k < kLen; k++) {

            var row = tableDS.body.rows[k];

            // Check to see if selection is even in place
            if (row.selection) {

                if (row.selection.checked) {
                    checkedKeys.push(row.key);

                    if (tableDS.selectionType === "single") {
                        values = row.columns.slice();
                    }
                }
            }

            if (row.highlight) {

                selectedKeys.push(row.key);

                values = row.columns.slice();
            }
        }

        if (values.length && Object.keys(colMap).length) {

            for (var col in colMap) {

                var valColObj = values[colMap[col]];
                var colValue = "";

                if (valColObj && (valColObj.text || (valColObj.contents && valColObj.contents.length))) {

                    if (valColObj.text) {

                        colValue = valColObj.text;
                    }
                    else {

                        var totalContents = "";

                        for (var c = 0, cLen = valColObj.contents.length; c < cLen; c++) {

                            var content = valColObj.contents[c];

                            switch (content.template) {

                                case 'field':

                                    if (content.type !== "select") {

                                        if (content.input && content.input.attributes && content.input.attributes.value) {
                                            totalContents += " " + content.input.attributes.value;
                                        }

                                    }
                                    else {

                                        if (content.input && content.input.value) {
                                            totalContents = " " + content.input.value;
                                        }

                                    }

                                    break;

                                case 'link':
                                case 'notifier':

                                    if (content.text) {
                                        totalContents = " " + content.text;
                                    }

                                    break;
                            }
                        }

                        colValue = totalContents.trim();
                    }

                }
                else if (colValue === "" && defaultValues[colMap[col]] !== "" && defaultValues[colMap[col]] !== undefined) {

                    colValue = defaultValues[colMap[col]];

                }

                // Create initial hidden field
                finalOutput += '<input type="hidden" name="' + col + '" id="' + col + '" value="' + colValue + '"/>';

                // Create temp/backup hidden field
                finalOutput += '<input type="hidden" name="' + col + '_temp" id="' + col + '_temp" value=""/>';

            }

        }
        else if (Object.keys(colMap).length) {

            for (var col in colMap) {

                var noSelectColValue = "";

                if (defaultValues.length && defaultValues[colMap[col]] !== "" && defaultValues[colMap[col]] !== undefined) {
                    noSelectColValue = defaultValues[colMap[col]];
                }

                // Create initial hidden field
                finalOutput += '<input type="hidden" name="' + col + '" id="' + col + '" value="' + noSelectColValue + '"/>';

                // Create temp/backup hidden field
                finalOutput += '<input type="hidden" name="' + col + '_temp" id="' + col + '_temp" value=""/>';

            }
        }

    }

    var checkedDelimiated = (checkedKeys.length) ? checkedKeys.join(',') : "";
    var selectedDelimiated = (selectedKeys.length) ? selectedKeys.join(',') : "";

    // Current values!
    finalOutput += '<input type="hidden" name="' + tableId + '_checked_index" id="' + tableId + '_checked_index" value="' + checkedDelimiated + '"/>';

    finalOutput += '<input type="hidden" name="' + tableId + '_selected_index" id="' + tableId + '_selected_index" value="' + selectedDelimiated + '"/>';

    // Previous value
    finalOutput += '<input type="hidden" name="' + tableId + '_checked_index_previous" id="' + tableId + '_checked_index_previous" value=""/>';

    finalOutput += '<input type="hidden" name="' + tableId + '_selected_index_previous" id="' + tableId + '_selected_index_previous" value=""/>';

    //page view limit/size
    finalOutput += '<input type="hidden" name="' + tableId + '_paging_view_limit" id="' + tableId + '_page_view_limit" value=""/>';

    return new Handlebars.SafeString(finalOutput);

});
;Handlebars.registerHelper('tableIter', function(context, options) {

  var ret = "";

  var hash = options.hash

  var limit = ((hash.limit) ? hash.limit : 50) - 1;

  var start = (hash.start) ? hash.start : 0;

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  var rendered = 0;

  for(var i=start, j=context.length; i<j; i++) {

    // Index of the row we are on
    data.index = i;

    // Reference to the limit provided
    data.limit = limit;

    data.rendered = rendered;

    // Check to see if this is a usable column.
    if (!context[i].skip || context[i].skip === false) {

      // Render this row
      ret = ret + options.fn(context[i], { data: data });

      // Increment render
      rendered++;

    }

  }

  return ret;
});
;Handlebars.registerHelper('tableCheckHighlight', function(options) {

    var current = options.hash.current;
    var array = options.hash.array;

    if (array !== undefined) {

        if (array.indexOf(current) !== -1) {
            return true;
        }

    }

    // Add the icon class prefix and return
    return false;

});
;Handlebars.registerHelper('tableSelect', function(context, options){

    if (context === "single") {
        return "radio"
    }

    if (context === "multiple") {
        return "checkbox"
    }
});
;var curColumn = 0;
var curRow = 1;

Handlebars.registerHelper('tabsetGridPlacement', function(options) {

    if (options.hash.pin) {

        curColumn = 5;
    }
    else {

        curColumn += 1;

        if (curColumn === 5) {
            curColumn = 1;
            curRow += 1;
        }
    }

    return "-ms-grid-column:" + curColumn + ";grid-column:" + curColumn + ";" + "-ms-grid-row:" + curRow + ";grid-row:" + curRow + ";"

});
;Handlebars.registerHelper('viewerContents', function(context, options){

    var contentsArray = context.hash.contents

    var results = {
        contents: contentsArray[context.hash.index],
        controls: context.hash.controls,
        index: context.hash.index,
        total: contentsArray.length,
        current: context.hash.index + 1
    };

    return results;

});

});
define('processTemplates',['dataStore', 'handlebars', 'handlebars-templates', 'handlebars-partials', 'handlebars-helpers'], function(ds, handlebars, templates, partials) {

	var _priv = {};
	var _dataShivs = false;
	var _templateShivs = false;
    var _eventShivs = false;
    var _external = false;

    // Make a some template avaliable as a partial as well.
    for (temp in this['JST']) {

        // Make sure its not already a partial template
        if (temp.indexOf('_') !== 0) {

            var partialName = '_' + temp;

            // Check to make sure the partial name is not already reserved
            if (!this['JST'].hasOwnProperty(partialName)) {

                handlebars.registerPartial(partialName, this['JST'][temp], templates.field);
            }

        }
    };

    _priv.generic = function _generic_render(data, parentList, external, cb) {

    	var dataStoreElms = ['field', 'composite'];

	    function innerHTML(string) {
	        var doc = document.createElement("html");
	        doc.innerHTML = string.replace(/\s\s+/g, ' ');
	        return doc;
	    };

        if (!ds.hasStore("globalHeader")) {
            // For the global header only create a data stor object, append nothing!
            ds.createStore(data, 'globalHeader');
        }

        if (dataStoreElms.indexOf(data.template) !== -1) {

            if (data.template === "composite" || (data.template === "field" && data.type !== "button")) {

                var dsID = ds.createStore(data);

                if (!data.attributes) {
                    data.attributes = {};
                }

                data.attributes['data-store-id'] = dsID;
            }

        }

        // Start by rendering the handlebars template
        if (templates[data.template]) {

            var render = templates[data.template](data);

            var parsed = innerHTML(render).querySelector('body');

            if (parsed.childNodes.length) {

                var docFragement = document.createDocumentFragment();

                (function nextChild(childrenNodes) {

                    var node = childrenNodes.shift();

                    if (node && node.nodeType && node.nodeType === 1) {
                        docFragement.appendChild(node);
                    }

                    if (childrenNodes.length) {

                        nextChild(childrenNodes);
                    }
                    else {

                        cb(docFragement);
                    }

                })(Array.prototype.slice.call(parsed.childNodes))

            }
            else {

                cb(false);
            }
        }
        else {

            console.error("Invalid templated requested:", data.template);

            cb(false);
        }

    };

    _priv.process = function _render(data, root, parentList, cb) {

        var docFragement = document.createDocumentFragment();
        var lastReference = docFragement;

        if (typeof data === "object") {

            var processFunction = false;
            var dataShivName = false;

            if (data.template || data.type) {

                if (!data.template) {
                    data.template = "universal";

                    dataShivName = data.type;
                }
                else {

                    dataShivName = data.template;
                }

                if (_dataShivs[dataShivName]) {

                    data = _dataShivs[dataShivName](data, parentList);
                }

                if (_templateShivs[data.template]) {

                    processFunction = _templateShivs[data.template];
                }
                else {

                    processFunction = _priv.generic;
                }

                processFunction(data, parentList, _external, function(rendered) {

                    if (rendered !== false) {

                        docFragement.appendChild(rendered);
                        lastReference = docFragement.lastChild;
                    }

                    if (data.template !== 'universal') {

                        parentList += (parentList.length) ? (" > " +  data.template) :  data.template;
                    }
                    else {

                        parentList += (parentList.length) ? (" > " +  data.type) :  data.type;
                    }

                    if (data.type === "section" && data.federal) {

                        var federalMsg = {
                            "type": "row",
                            "attributes": {
                                "className": "emp-federal-print-message"
                            },
                            "template": "grid",
                            "contents": [
                                {
                                    "template": "federal-group-message",
                                }
                            ]
                        };

                        if (data.contents && data.contents.length) {

                            if (data.contents[0].template === "group") {

                                data.contents.splice(1, 0, federalMsg);
                            }
                            else {

                                data.contents.unshift(federalMsg);
                            }

                        }
                        else {

                            data.contents.push(federalMsg);

                        }

                    }

                    if (data.contents && data.contents.length) {

                        var inlineSections = [];
                        var insertSections = [];

                        if (!data.skipCheck) {

                            // Loop through all of the children
                            for (var c = 0, cLen = data.contents.length; c < cLen; c++) {

                                // Check for inline section
                                if (data.contents[c] && data.contents[c].type === "section" && data.contents[c].style && data.contents[c].style.indexOf('inline-group') !== -1) {

                                    if (!inlineSections.length) {

                                        inlineSections.push(c);

                                    }
                                    // Verify the last item was also a section
                                    else if (inlineSections.indexOf(c - 1) !== -1) {

                                        inlineSections.push(c);

                                        // Check again for next child
                                        if (data.contents[c + 1] && data.contents[c + 1].type === "section" && data.contents[c + 1].style && data.contents[c + 1].style.indexOf('inline-group') !== -1) {

                                            continue;
                                        }
                                        else {

                                            // Start a wrapper
                                            var newWrapper = {
                                                "type": "div",
                                                "attributes": {
                                                    "className": "emp-inline-sections"
                                                },
                                                "contents": [],
                                                "skipCheck": true
                                            };

                                            // Loop through and place children in wrapper div
                                            for (var ilg = 0, ilgLen = inlineSections.length; ilg < ilgLen; ilg++) {

                                                newWrapper.contents.push( $.extend(true, {}, data.contents[inlineSections[ilg]]) );
                                            }

                                            insertSections.push({
                                                startIndex: inlineSections[0],
                                                newChild: newWrapper,
                                                removeIndexs: [].concat(inlineSections)
                                            });

                                        }

                                    }
                                    else if (inlineSections.length === 1) {

                                        inlineSections = [];
                                    }
                                }

                            }

                            if (insertSections.length) {

                                for (var iw = 0, iwLen = insertSections.length; iw < iwLen; iw++) {

                                    data.contents.splice(insertSections[iw].startIndex, insertSections[iw].removeIndexs.length, insertSections[iw].newChild);
                                }

                            }

                        }

                        (function nextChild(contents) {

                            var content = contents.shift();

                            _priv.process(content, false, parentList, function (subRendered) {

                                if (subRendered !== false) {

                                    lastReference.appendChild(subRendered);
                                }

                                if (contents.length) {

                                    nextChild(contents);
                                }
                                else {

                                    cb(docFragement)
                                }
                            });

                        })(data.contents.concat());

                    }
                    else {

                        cb(docFragement);
                    }

                });

            }
            else {

                if (data.contents && data.contents.length) {

                    (function nextChild(contents) {

                        var content = contents.shift();

                        _priv.process(content, false, "", function _render_sub_child(subRendered) {

                            if (subRendered !== false) {

                                lastReference.appendChild(subRendered);
                            }

                            if (contents.length) {

                                nextChild(contents);
                            }
                            else {

                                cb(docFragement)
                            }
                        });

                    })(data.contents.concat());

                }
                else {

                    cb(docFragement);
                }

            }

        }
        else {

            cb(false);
        }
    };

    var render = function _render(data, root, cb) {

    	if (typeof root === "function") {
    		cb = root;
    		root = false;
    	}

    	_priv.process(data, root, '', function(docFrag) {

            if (docFrag !== false && docFrag !== null) {

                cb(docFrag);
            }
            else {

                cb(false);
            }
    	});
    };

	var setup = function _setup(dataShivs, templateShivs, eventShivs, external, cb) {

		_dataShivs = dataShivs;
		_templateShivs = templateShivs;
        _eventShivs = eventShivs;

        if (external) {
            _external = true;
        }

		if (typeof cb === "function") {

			cb(this);
		}
	};

	return {
		setup: setup,
		render: render,
        isNodeList: _priv.isNodeList
	};

});

define('tableShiv',['dataStore', 'processTemplates', 'handlebars', 'handlebars-templates', 'handlebars-partials','handlebars-helpers'], function(ds, procTemplates, Handlebars, templates, partial) {

	var _priv = {};

	_priv.skipColumns = [];

	_priv.fixData = function _fix_data(data, external) {

        // Ensure a type attribute is set on the table
        if (data.type) {
            if (!data.attributes) {
                data.attributes = {};
            }

            data.attributes['data-type'] = data.type;
        }
        else if (!data.type && data.attributes && data.attributes['data-type']) {
            data.type = data.attributes['data-type'];
        }
        else {

            data.type = "pivot";

            if (!data.attributes) {
            	data.attributes = {};
            }

            data.attributes['data-type'] = 'pivot';

        }

        // Now explode out the style attributes
        if (data.style && data.style.length >= 1) {

            if (data.style.indexOf('noFilter') !== -1) {

                if (data.attributes && !data.attributes['data-filter']) {
                    data.attributes['data-filter'] = false;
                }
            }

            if (data.style.indexOf('noResize') !== -1) {

                if (data.attributes && !data.attributes['data-resize']) {
                    data.attributes['data-resize'] = false;
                }
            }

            if (data.style.indexOf('noColumns') !== -1) {

                if (data.attributes && !data.attributes['data-responsive']) {
                    data.attributes['data-responsive'] = false;
                }
            }

            if (data.style.indexOf('changeReturn') !== -1) {

                if (data.attributes && !data.attributes['data-changereturn']) {
                    data.attributes['data-changereturn'] = true;
                }
            }

            if (data.style.indexOf('noSticky') !== -1) {

                if (data.attributes && !data.attributes['data-sticky']) {

                    data.attributes['data-sticky'] = false;
                }
            }

        }
        else {

            // if (data.attributes && !data.attributes['data-filter']) {
            //     data.attributes['data-filter'] = false;
            // }

            // if (data.attributes && !data.attributes['data-resize']) {
            //     data.attributes['data-resize'] = false;
            // }

            // if (data.attributes && !data.attributes['data-responsive']) {
            //     data.attributes['data-responsive'] = false;
            // }

            // if (data.attributes && !data.attributes['data-changereturn']) {
            //     data.attributes['data-changereturn'] = true;
            // }

            // if (data.attributes && !data.attributes['data-sticky']) {

            //     data.attributes['data-sticky'] = false;
            // }
        }

        var buttonMenuIndex = false;
        var orderButtonIndex = false;

        // Fix function to add button menus to non update tables
        var fixButtonMenu = function _fix_button_menu(data, buttonIndex, primaryButtonIndex) {

            // Default header object
            var BUTTON_MENU_HEADER = {
                "attributes": {
                    "data-type": "buttonMenu",
                    "data-columnType": "button",
                    "data-columnEditable": false,
                    "title": "Button Menu"
                },
                "sort": false,
                "type": "header",
                "text": "Button Menu",
                "style": "min-width",
                "hideLabel": true
            };

            // Button Menu body cell with button
            var BUTTON_MENU_BODY = {
                "type": "data",
                "style": "min-width",
                "contents": [
                    {
                        "type": "button",
                        "template": "field",
                        "input": {
                            "attributes": {
                                "type": "button",
                                "title": "Button Menu"
                            },
                            "text": "Button Menu",
                            "icon": "responsive-table-menu"
                        },
                        "options": []
                    }
                ]
            };

            // Button Menu footer cell
            var BUTTON_MENU_FOOTER = {
                "type": "data",
                "text": ""
            };

            // Empty Button Menu cll
            var BUTTON_MENU_EMPTY = {
                "type": "data",
                "style": "min-width",
                "contents": []
            };

            // Make a message to the page stating that upgrades need to occur
            journal.log({type: 'warning', owner: 'DEV', module: 'render', submodule: 'tableShiv'}, 'Table ' + data.attributes.id + ' was detected as one that requires additional rendering to support the old table buttonMenu functionality. Please look to upgrading your tables button menus to support the new E2:TableButtonMenu.');

            var header = data.head.rows[0].column;

            // Determine the proper index to place the button menu
            var insertIndex = (primaryButtonIndex) ? primaryButtonIndex : data.head.rows[0].columns.length + 1;

            buttonMenuIndex = insertIndex;

            // Loop through and remove all of the header columns for the random table buttons.
            for (var h = 0, hLen = buttonIndex.length; h < hLen; h++) {

                data.head.rows[0].columns[buttonIndex[h]].skip = true;
            }

            // Add the button menu header
            data.head.rows[0].columns.splice(insertIndex, 0, BUTTON_MENU_HEADER);

            // If we have a table body, then we need to update it as well
            if (data.body && data.body.rows.length >= 1) {

                tableBodyRow:
                for (var b = 0, bLen = data.body.rows.length; b < bLen; b++) {

                    var buttonContents = [];

                    buttonIndex:
                    for(var bi = 0, biLen = buttonIndex.length; bi < biLen; bi++) {

                        if (data.body.rows[b].columns[buttonIndex[bi]].contents && Array.isArray(data.body.rows[b].columns[buttonIndex[bi]].contents) && data.body.rows[b].columns[buttonIndex[bi]].contents.length > 0) {

                            var buttonContent = data.body.rows[b].columns[buttonIndex[bi]].contents[0];

                            if (buttonContent.template === "field") {

                                if (buttonContent.input.text && buttonContent.input.text.indexOf('_BTN') !== -1) {

                                    if (buttonContent.input.attributes && buttonContent.input.attributes.title) {

                                        var title = buttonContent.input.attributes.title.replace('Go to', '').replace('Popup', '');

                                        title = title.trim();

                                        buttonContent.input.text = title;
                                    }

                                }

                                buttonContents.push(buttonContent);

                            }
                            else {

                                buttonContents.push(buttonContent);
                            }
                        }

                        data.body.rows[b].columns[buttonIndex[bi]].skip = true;
                    }

                    var newBodyMenu;

                    // Check to see if the button menu needs to exist or if a blank should be based in instead.
                    if (buttonContents.length > 0) {

                        newBodyMenu = $.extend(true, {}, BUTTON_MENU_BODY);

                        newBodyMenu.contents[0]['options'] = buttonContents;

                    }
                    else {

                        newBodyMenu = BUTTON_MENU_EMPTY;
                    }

                    // Update the body row to include the new column
                    data.body.rows[b].columns.splice(insertIndex, 0, newBodyMenu);
                }

            }

            // Loop through and fix the footer if it exists
            if (data.footer && data.footer.rows.length > 0) {

                for (var i = 0, len = data.footer.rows.length; i < len; i++) {

                    for (var j = 0, jLen = buttonIndex.length; j < jLen; j++) {

                        if (buttonIndex[j] !== primaryButtonIndex) {

                            data.footer.rows[i].columns[buttonIndex[j]].skip = true;
                        }

                    }

                    data.footer.rows[i].columns.splice(insertIndex, 0, BUTTON_MENU_FOOTER);

                }
            }

            return data;
        };

        if (!data.hasOwnProperty('optimize')) {
            data.optimize = true;
        }

        data.head.columnType = {};

        var buttonColIndex = [];
        var pimaryButtonIndex = false;

        if (!data.hasOwnProperty('enabledButtonMenu')) {
            data.enabledButtonMenu = true;
        }

        // Only bother to check if there is at least 1 header row
        if (data.head && data.head.rows.length === 1) {

            var renderTable = true;

            // Loop through all of the header columns to search for button indexs
            for (var i = 0, len = data.head.rows[0].columns.length; i < len; i++) {

                // Only care about columns that actually have attributes
                if (data.head.rows[0].columns[i].attributes) {

                    var dataType = data.head.rows[0].columns[i].attributes['data-type'] || false;
                    var responsive = data.head.rows[0].columns[i].responsive || false;

                    if (dataType) {

                        if (data.head.columnType[dataType]) {

                            data.head.columnType[dataType] += 1;
                        }
                        else {

                            data.head.columnType[dataType] = 1;
                        }

                        if (dataType === "button") {

                            if (data.head.rows[0].columns[i].attributes['data-columntype'] === "primaryButton") {

                                pimaryButtonIndex = i;

                                data.head.columnType["button"] -= 1;
                            }
                            else {

                                // Hook for older mockups!
                                if (data.head.rows[0].columns[i].attributes.hasOwnProperty["data-table-primary-button"]) {

                                    pimaryButtonIndex = i;

                                    data.head.columnType["button"] -= 1;

                                    data.head.rows[0].columns[i].attributes['data-type'] = "primaryButton";
                                }
                                else {
                                    buttonColIndex.push(i);
                                }

                            }
                        }
                        else if (dataType === "primaryButton") {

                            pimaryButtonIndex = i;
                        }
                        else if (dataType === "buttonMenu") {
                            buttonMenuIndex = i;
                        }

                        if (responsive && responsive.primaryButton) {

                            pimaryButtonIndex = i;
                        }
                    }

                }

                // Check for hidden columns
                if (data.head.rows[0].columns[i].visibility && data.head.rows[0].columns[i].visibility === "hidden") {

                    if (!data.head.columnType.hidden) {

                        data.head.columnType.hidden = 1;
                    }
                    else {

                        data.head.columnType.hidden += 1;
                    }

                }
            }

            if (buttonColIndex.indexOf(pimaryButtonIndex) !== -1) {

                buttonColIndex.splice( buttonColIndex.indexOf(pimaryButtonIndex), 1);

                data.head.columnType['button'] -= 1;
            }

            if ((!data.head.columnType['buttonMenu'] && data.head.columnType['button'] >= 1) && data.enabledButtonMenu) {

                data = fixButtonMenu(data, buttonColIndex, pimaryButtonIndex);

                data.metadata = {};

                data.metadata.renderButtonMenu = true;
            }

            if (emp.pageScripts && emp.pageScripts.preRenderHook) {
                data = emp.pageScripts.preRenderHook(data);
            }
        }

        if (!data.body || (data.body && (!data.body.rows || data.body.rows.length === 0)) ) {
            data.emptyTable = true;
        }
        else {

            data.emptyTable = false;

            data.body.rowStart = 0;

            if (data.optimize) {

                if (data.body.rows.length > 25) {
                    data.body.loadMore = true;
                }
                else {
                    data.body.loadMore = false
                }
            }
        }

        // Fix for external app tables
        if (external && data.type && data.type === "pivot") {

            if (!data.attributes) {
                data.attributes = {};
            }

            // Diable normal empire functionality!
            data.attributes['data-responsive'] = false;
            data.attributes['data-filter'] = false;
            data.attributes['data-resize'] = false;
            data.attributes['data-sticky'] = false;
            data.attributes['data-mobile'] = true;

            if (data.style) {
                data.style = data.style + ",mobile-responsive";
            }
            else {
                data.style = "mobile-responsive";
            }

            // Now find all of the responsive columns
            var primaryColumns = [];
            var secondayColumns = [];

            for (var hCol = 0, hColLen = data.head.rows[0].columns.length; hCol < hColLen; hCol++) {

                var headerCol = data.head.rows[0].columns[hCol];

                if (headerCol.responsive && headerCol.responsive.type) {

                    if (headerCol.responsive.type === "primary") {

                        primaryColumns.push(hCol);
                    }

                    if (headerCol.responsive.type === "secondary") {

                        secondayColumns.push(hCol);
                    }

                }
            }

            // Force fallback to first column no matter what!
            if (!primaryColumns.length) {
                primaryColumns.push(0);
            }

            if (!data.emptyTable) {

                var allColumns = primaryColumns.concat(secondayColumns);
                var PrimaryLength = primaryColumns.length;

                // Loop through each of the row
                for (var b = 0, bLen =  data.body.rows.length; b < bLen; b++) {

                    var bodyRowColumns = data.body.rows[b].columns;

                    var PrimaryValue = "";
                    var SecondaryValue = "";

                    var currentNewValue = ""
                    var inSecondary = false;

                    // Loop the defined primary and secondary values
                    for (var c = 0, cLen = allColumns.length; c < cLen; c++) {

                        var columnObj = bodyRowColumns[allColumns[c]];
                        var tempNewValue = "";

                        if (columnObj.text && columnObj.text.length) {
                            tempNewValue += columnObj.text.trim() + " ";
                        }

                        if (columnObj.contents && columnObj.contents.length) {

                            for (var cc = 0, ccLen = columnObj.contents.length; cc < ccLen; cc++) {

                                var columnContents = columnObj.contents[cc];

                                if (columnContents.template) {

                                    switch (columnContents.template) {

                                        case "link":

                                            if (columnContents.text && columnContents.text.length) {
                                                tempNewValue += columnContents.text.trim() + " ";
                                            }
                                            break;

                                        case "field":

                                            switch (columnContents.type) {

                                                case "button":

                                                    if (columnContents.input && columnContents.input.text && columnContents.input.text.length) {
                                                        tempNewValue += columnContents.input.text.trim() + " ";
                                                    }
                                                    break;

                                            }

                                            break;

                                    }

                                }

                            }

                        }

                        if (c < PrimaryLength) {

                            currentNewValue += tempNewValue;
                        }
                        else {

                            if (!inSecondary) {

                                PrimaryValue = currentNewValue;
                                currentNewValue = "";

                                inSecondary = true;

                                currentNewValue = tempNewValue;
                            }
                            else {

                                currentNewValue += tempNewValue;
                            }

                        }

                    }

                    if (currentNewValue.length) {

                        if (inSecondary) {
                            SecondaryValue = currentNewValue.trim();
                        }
                        else {
                            PrimaryValue = currentNewValue.trim();
                        }

                    }

                    // Set the Expand object
                    data.body.rows[b].columns.unshift({
                        "type": "header",
                        "attributes": {
                            "class": "emp-responsive-row-header"
                        },
                        "contents": [
                            {
                                "template": "responsiveTableToggleControl",
                                "primaryText": PrimaryValue,
                                "secondaryText": SecondaryValue
                            }
                        ]
                    });

                };

                data.head.rows[0].columns.unshift({
                    skip: true,
                    attributes: {
                        'data-type': 'hidden'
                    }
                });

            }

        }

        if (external && data.type && data.type === "breakout") {
            data.attributes['data-filter'] = false;
            data.attributes['data-resize'] = false;
            data.attributes['data-sticky'] = false;
        }

        // Do not remove, this may still be needed, but can be disabled for naw - JAH - 08222019
        // if (external && data.type && data.type === "css") {

        //     //console.log("CSS Table!");

        //     data.attributes['data-responsive'] = false;
        //     data.attributes['data-filter'] = false;
        //     data.attributes['data-resize'] = false;
        //     data.attributes['data-sticky'] = false;

        //     for (var bRow = 0, bRowLen = data.body.rows.length; bRow < bRowLen; bRow++) {

        //         //console.log(data.body.rows[bRow]);

        //         for (var bCol = 0, bColLen = data.body.rows[bRow].columns.length; bCol < bColLen; bCol++) {

        //             var col = data.body.rows[bRow].columns[bCol];

        //             if (!col.attributes) {
        //                 col.attributes = {};
        //             }

        //             col.attributes['data-title'] = data.head.rows[0].columns[bCol].text;

        //         }

        //     }
        // }

        data.fixData = true;

        return data;
	};

    // These are shivs specific for contents inside of tables
    _priv.dataShivs = {
        "notifier": function _notifiers(data) {

            if (data.text && data.template !== "raw"){

                data = _priv.attributes(data, 'className', 'emp-indicator-' + data.text.length);
            }
            else {

                journal.log({type: 'error', owner: 'DEV|FW', module: 'render', submodule: 'tableShiv'}, 'Table notifier existed but did not contain a text property. Skipping!');
            }
        }
    };

    _priv.tableID = false;

	_priv.attributes = function(data, key, value) {

		if (!data.attributes) {

			data.attributes = {};
		}

		if (!data.attributes[key]) {

			data.attributes[key] = value;
		}
		else {

			data.attributes[key] += " " + value;
		}
	};

	_priv.mergeAttributes = function (elm, data) {

		for (var attr in data.attributes) {

            var dAttr = false;

            switch (attr) {

                case "colspan":
                case "colSpan":
                case "rowspan":
                case "rowSpan":

                    elm.setAttribute('colspan', data.attributes[attr], 0);

                    break;

                default:

                    dAttr = document.createAttribute(attr);

                    break;
            }

            if (dAttr) {

    			dAttr.value = data.attributes[attr];

    			elm.setAttributeNode(dAttr);
            }

		}
	};

	_priv.styles = function _styles(data) {

		if (!data.attributes) {

			data.attributes = {};
		}

        if (data.style) {

            var styles = data.style.split(',');

            for (var i = 0, len = styles.length; i < len; i++) {

                switch (styles[i]) {

                    case 'min-width':
                        _priv.attributes(data, 'class', 'emp-min-width');
                        break;

                    case 'no-wrap':
                        _priv.attributes(data, 'class', 'cui-no-wrap');
                        break;

                    case 'bold':
                        _priv.attributes(data, 'class', 'emp-bold');
                        break;

                    case 'negative-number':
                        _priv.attributes(data, 'class', 'emp-negative-number');
                        break;

                    case 'currency':
                        _priv.attributes(data, 'class', 'cui-currency');
                        break;

                    case 'align-right':
                        _priv.attributes(data, 'class', 'cui-align-right');
                        break;

                    case 'align-center':
                        _priv.attributes(data, 'class', 'cui-align-center');
                        break;

                    case 'manual-stripping':
                        _priv.attributes(data, 'class', 'cui-no-stripes');
                        break;

                    case 'mobile-row':
                        _priv.attributes(data, 'class', 'emp-external-mobile-row');
                        break;

                    case 'button-menu-column':
                        _priv.attributes(data, 'class', 'emp-button-menu-column');
                        break;

                    case 'uppercase':
                        _priv.attributes(data, 'class', 'emp-force-uppercase');
                        break;
                    case 'help-header':
                        _priv.attributes(data, 'class', 'emp-help-column');
                        break;
                }
            }
        }

	};

    _priv.innerHTML = function _inner_html(string) {
        var doc = document.createElement("html");
        doc.innerHTML = string;
        return doc;
    };

    _priv.checkSelectAll = function _check_select_all(tableData) {

        if (tableData.body && tableData.body.rows && tableData.body.rows.length) {

            for (var r = 0, rLen = tableData.body.rows.length; r < rLen; r++) {

                if (!tableData.body.rows[r].selection || (tableData.body.rows[r].selection && !tableData.body.rows[r].selection.checked)) {

                    return false;
                }

            }

            return true;

        }
        else {

            return false;
        }
    };

    // Create the different table sections
    _priv.createSection = function _create_section(section, sectionAttr, data, tableData, tableElm, rowLimit, rowStart) {

        if (rowStart === undefined) {
            rowStart = 0;
        }

        if (rowLimit) {

            rowLimit -= 1;
        }

    	tableElm.appendChild(document.createElement(section));

    	var sectionElm = tableElm.querySelector('table ' + section);

        var rowCounter = 0;

    	// Loop through the section
    	for (var i = rowStart, len = data.rows.length; i < len; i++) {

    		// Check if this row needs to be skipped
    		if (data.rows[i].skip) {
    			continue;
    		}

    		var row = data.rows[i];
            var rowElm = document.createElement('tr');
            var expandRowElm = false;

            var rowKeyValue = (row.key) ? row.key : i ;
            var rowIndexValue = i;

    		// Classes that need to be applied to the row
    		var rowClasses = "";

    		if (section === "tbody") {

    			var rowKey = document.createAttribute('data-key');
    			var rowIndex = document.createAttribute('data-row-index');

    			rowKey.value = rowKeyValue;
    			rowIndex.value = rowIndexValue;

    			rowElm.setAttributeNode(rowKey);
                rowElm.setAttributeNode(rowIndex);

                if (row.selection && row.selection.checked) {
                    rowClasses += ' emp-checked-row';
                }

    			if (row.highlight) {
    				rowClasses += ' emp-highlight-row';
    			}
            }

            // Create selection is its a selectable table that is not empty
            if (tableData.selectable && !tableData.emptyTable && !tableData.largeTable) {

                selectionCellElm = document.createElement((section === "thead") ? 'th' : 'td');

                var selectColumnClass = document.createAttribute('class');
                selectColumnClass.value = "table-control-col emp-min-width";

                selectionCellElm.setAttributeNode(selectColumnClass);

                if (section !== "tfoot") {

                    if (section === "thead") {

                        if (tableData.selectionType === "single" || !tableData.selectAll) {

                            var headerText = (tableData.selectionType === "single") ? "Select Row" : "Select Rows";

                            var blankSelectionHeader = document.createElement('span');
                            var blankSelectionHeaderText = document.createTextNode(headerText);

                            selectionCellElm.appendChild(blankSelectionHeader);

                        }
                        else {

                            var selectionControl = document.createElement('input');
                            var selectionLabel = document.createElement('label');

                            var selectionControlAttr = {
                                "attributes": {}
                            };

                            var selectionControlLabelAttr = {
                                "attributes": {
                                    "class": 'cui-hide-from-screen'
                                }
                            };

                            var inputID = _priv.tableID + "_all";

                            var labelText = "Select All Rows";

                            var selectionLabelText = document.createTextNode(labelText);

                            selectionControlLabelAttr.attributes.for = inputID;

                            selectionControlAttr.attributes.id = inputID;
                            selectionControlAttr.attributes.name = _priv.tableID + "_all";

                            selectionControl.setAttribute('type', 'checkbox');

                            if (_priv.checkSelectAll(tableData)) {
                                selectionControlAttr.attributes.checked = "checked";
                            }

                            selectionControlAttr.attributes.value = (row.key) ? row.key : i;

                            // Add Label Text to Label
                            selectionLabel.appendChild(selectionLabelText);

                            _priv.mergeAttributes(selectionControl, selectionControlAttr);
                            _priv.mergeAttributes(selectionLabel, selectionControlLabelAttr);

                            // Add the selection control
                            selectionCellElm.appendChild(selectionLabel);
                            selectionCellElm.appendChild(selectionControl);
                        }

                    }
                    else {

                        if (!row.selection || (row.selection && !row.selection.empty)) {

                            if (!row.selection || (row.selection && !row.selection.readOnly)) {

                                var selectionBodyControl = document.createElement('input');
                                var selectionBodyLabel = document.createElement('label');

                                var selectionBodyControlAttr = {
                                    "attributes": {}
                                };

                                var selectionBodyControlLabelAttr = {
                                    "attributes": {
                                        "class": 'cui-hide-from-screen'
                                    }
                                };

                                var inputID = _priv.tableID + "_" + i;

                                var labelText = "Select Row " + i;

                                var selectionLabelText = document.createTextNode(labelText);

                                selectionBodyControlAttr.attributes.id = inputID;
                                selectionBodyControlLabelAttr.attributes.for = inputID;

                                if (tableData.selectionType === "single") {

                                    selectionBodyControl.setAttribute('type', 'radio');
                                    selectionBodyControlAttr.attributes.name = _priv.tableID;
                                }
                                else {

                                    selectionBodyControl.setAttribute('type', 'checkbox');
                                    selectionBodyControlAttr.attributes.name = _priv.tableID + "_" + i;
                                }

                                if (row.selection && row.selection.checked) {
                                    selectionBodyControlAttr.attributes.checked = "checked";
                                }

                                selectionBodyControlAttr.attributes.value = (row.key) ? row.key : i;

                                // Add Label Text to Label
                                selectionBodyLabel.appendChild(selectionLabelText);

                                _priv.mergeAttributes(selectionBodyControl, selectionBodyControlAttr);
                                _priv.mergeAttributes(selectionBodyLabel, selectionBodyControlLabelAttr);

                                // Add the selection control
                                selectionCellElm.appendChild(selectionBodyLabel);
                                selectionCellElm.appendChild(selectionBodyControl);

                            }
                            else if (row.selection && row.selection.readOnly) {

                                var readOnlyCheck = document.createElement('span');

                                var readOnlyCheckAttributes = {
                                    'attributes': {}
                                };

                                if (row.selection.checked) {

                                    readOnlyCheckAttributes.attributes.class = 'emp-table-select-true';
                                }

                                _priv.mergeAttributes(readOnlyCheck, readOnlyCheckAttributes);

                                selectionCellElm.appendChild(readOnlyCheck);
                            }

                        }

                    }
                }

                rowElm.appendChild(selectionCellElm);
            }

    		// Cells
    		for (var c = 0, cLen = row.columns.length; c < cLen; c++) {

    			var cell = row.columns[c];
                var cellElm = false;

                // Skip all columns with skipRender attribute
                if (cell.skip) {

                    continue;
                }

                if (!cell.attributes) {

                    cell.attributes = {};
                }

                if (section === "thead") {
                    cell.attributes.tabindex = 0;
                }

                // // Added tabindex of 0 for keyboard accessibility
                // if (!cell.attributes.tabindex) {
                //     cell.attributes.tabindex = 0;
                // }

                var headerColumn = tableData.head.rows[0].columns[c];
                var headerColumnText = false;
                var headerColumnHelp = false;

                if (!headerColumn.skip) {

                    if (headerColumn.text && headerColumn.text.length) {
                        headerColumnText = headerColumn.text;
                    }
                    else if (headerColumn.attributes && headerColumn.attributes.title && headerColumn.attributes.title.length) {
                        headerColumnText = headerColumn.attributes.title.length;
                    }
                    else {
                        headerColumnText = "Header Column " + c + " Title not set!";
                    }

                    if(headerColumn.help){
                        var helpContents = headerColumn.help;
                        helpContents.template = "_itag";
                        procTemplates.render(helpContents, 'table', function(cellContents) {
                            if (cellContents !== false) {
                                headerColumnHelp = cellContents;
                            }
                        });
                    }
                }

                var newCell = JSON.parse(JSON.stringify(cell));

    			if (newCell.type && newCell.type === "header") {

    				cellElm = document.createElement('th');

                    _priv.attributes(newCell, 'data-col-index', c);

    				if (newCell.sortable) {

                        _priv.attributes(newCell, 'class', 'emp-sortable');
    				}

                    if (!newCell.attributes['data-type']) {
                        newCell.attributes['data-type'] = 'alpha';
                    }
    			}
    			else {

    				cellElm = document.createElement('td');
    			}

                if (newCell.visibility === "hidden") {
                    _priv.attributes(newCell, 'class', 'cui-hidden');
                }

                if (tableData.type && tableData.type === "pivot" &&section === "tbody" && headerColumnText) {
                    var cellResponsiveColumnHeader = document.createElement('span');
                    cellResponsiveColumnHeader.appendChild(document.createTextNode(headerColumnText));
                    cellResponsiveColumnHeader.classList.add('emp-responsive-cell-header');

                    if(headerColumnHelp){
                        cellResponsiveColumnHeader.appendChild(headerColumnHelp);
                    }

                    cellElm.appendChild(cellResponsiveColumnHeader);
                }

	    		if (newCell.text && (!newCell.contents || newCell.contents.length === 0)) {

	    			var cellTextWrapper = false;

	    			if (newCell.hideLabel) {

	    				cellTextWrapper = document.createElement('span');
	    				cellTextWrapperClass = document.createAttribute('class');
	    				cellTextWrapperClass.value = 'cui-hide-from-screen';

	    				cellTextWrapper.setAttributeNode(cellTextWrapperClass);

	    				if (!newCell.attributes || (newCell.attributes && !newCell.attributes.title)) {

	    					_priv.attributes(newCell, 'title', newCell.text);
	    				}

	    			}

                    var cellText = newCell.text.replace(/(^\s+|\s+$)/, '');

                    if (section === "tfoot") {

                        if (cellText && cellText.length) {

                            var footerTooltip = "Total " + tableData.head.rows[0].columns[c].text + ": " + newCell.text;

                            cellTextWrapper = document.createElement('span');

                            var cellFooterAttr = {
                                "attributes": {
                                    "title": footerTooltip
                                }
                            }

                            _priv.mergeAttributes(cellTextWrapper, cellFooterAttr);
                        }

                    }

                    if (cellText && cellText.length > 0) {

                        if (cellText.indexOf('\n') === -1) {

        	    			var text = document.createTextNode(newCell.text);

        	    			// Check and wrap the columns
        	    			if (cellTextWrapper) {

        	    				cellTextWrapper.appendChild(text);
        	    				cellElm.appendChild(cellTextWrapper);
        	    			}
        	    			else {

        	    				cellElm.appendChild(text);
        	    			}
                        }
                        else {

                            var splitText = cellText.split('\n');

                            for (var s = 0, sLen = splitText.length; s < sLen; s++) {

                                var sText = document.createTextNode(splitText[s]);

                                if (cellTextWrapper) {

                                    cellTextWrapper.appendChild(sText);
                                }
                                else {

                                    cellElm.appendChild(sText);
                                }

                                if ((s + 1) < sLen) {

                                    var newBreak = document.createElement('br');

                                    if (cellTextWrapper) {

                                        cellTextWrapper.appendChild(newBreak);
                                    }
                                    else {

                                        cellElm.appendChild(newBreak);
                                    }
                                }

                            }

                            if (cellTextWrapper) {
                                cellElm.appendChild(cellTextWrapper);
                            }

                        }

                    }

	    		}
	    		else if (newCell.contents) {

                    for (var ce = 0, ceLen = newCell.contents.length; ce < ceLen; ce++) {

                        if (_priv.dataShivs[newCell.contents[ce].template]) {

                            _priv.dataShivs[newCell.contents[ce].template](newCell.contents[ce]);
                        }

                        if (newCell.contents[ce].template === "raw") {

                            let tempDiv = document.createElement('div');

                            tempDiv.innerHTML = newCell.contents[ce].raw;

                            while (tempDiv.hasChildNodes) {

                                try {

                                    var node = tempDiv.removeChild(tempDiv.firstChild);

                                    if (node && node.nodeType) {

                                        cellElm.appendChild(node);
                                    }
                                }
                                catch(error) {

                                    break;
                                }

                            }

                        }
                        else if (newCell.contents[ce].template !== "field") {

                            procTemplates.render(newCell.contents[ce], 'table', function(cellContents) {

                                if (cellContents !== false) {

                                    cellElm.appendChild(cellContents);
                                }

                            });
                        }
                        else {

                            // Pull out buttons.
                            if (newCell.contents[ce].type === "button") {

                                if (newCell.contents[ce].input && (newCell.contents[ce].input.text === "Button Menu" || newCell.contents[ce].input.text === "Actions" )) {

                                    if (!newCell.style) {
                                        newCell.style = "button-menu-column";
                                    }
                                    else {
                                        newCell.style += ",button-menu-column";
                                    }

                                    // Check to see if a menu style is applied at the table level and push that style onto the button menu
                                    if (tableData && tableData.attributes && (tableData.attributes['data-menuStyle'] || tableData.attributes['data-menustyle']) ) {
                                        //console.log(newCell.contents[ce]);

                                        var menuStyle = false;

                                        if (tableData.attributes['data-menuStyle']) {
                                            menuStyle = tableData.attributes['data-menuStyle'];
                                        }

                                        if (tableData.attributes['data-menustyle']) {
                                            menuStyle = tableData.attributes['data-menustyle'];
                                        }

                                        newCell.contents[ce].input.style = menuStyle;
                                    }

                                    if (newCell.contents[ce].options && newCell.contents[ce].options.length) {

                                        procTemplates.render(newCell.contents[ce], 'table', function(cellContents) {

                                            if (cellContents !== false) {

                                                cellElm.appendChild(cellContents);
                                            }

                                        });
                                    }
                                    else {

                                        journal.log({type: 'warning', owner: 'DEV', module: 'render', submodule: 'tableShiv'}, 'Table ' + tableData.attributes.id + ' row ' + i + ' contained a button menu, but there were no menu options so rendering was skipped');

                                    }
                                }
                                else {

                                    procTemplates.render(newCell.contents[ce], 'table', function(cellContents) {

                                        if (cellContents !== false) {

                                            cellElm.appendChild(cellContents);
                                        }

                                    });

                                }

                            }
                            else {
                                procTemplates.render(newCell.contents[ce], 'table', function(cellContents) {

                                    if (cellContents !== false) {

                                        cellElm.appendChild(cellContents);
                                    }

                                });
                            }
                        }

                    }
	    		}
                else {

                    if (section === "tfoot") {
                        _priv.attributes(newCell, 'class', 'emp-no-cell-footer-borders');
                    }

                }




                if(newCell.help){
                    if(newCell.type && newCell.type === "header"){


                        var helpContents = newCell.help;
                        helpContents.template = "_itag";

                        procTemplates.render(helpContents, 'table', function(cellContents) {
                            if (cellContents !== false) {
                                cellElm.appendChild(cellContents);
                            }

                            if(newCell.style){
                                newCell.style += ",help-header";
                            }
                            else{
                                newCell.style = "help-header";
                            }

                        });
                    }
                }

                if (newCell.style && (!newCell.visibility || newCell.visibility !== "hidden")) {

                    _priv.styles(newCell);
                }


	    		// Merge attribute into cell element
	    		_priv.mergeAttributes(cellElm, newCell);

    			rowElm.appendChild(cellElm);
    		}

            if (!row.attributes) {
                row.attributes = {};
            }

    		if (rowClasses.length) {

                row.attributes.class = rowClasses.trim();

            }

            _priv.styles(row);

            // Merge attribute into cell element
            _priv.mergeAttributes(rowElm, row);

            if (row.expand) {
                sectionElm.appendChild(expandRowElm);
            }

    		sectionElm.appendChild(rowElm);

            if (rowLimit) {

                if (rowCounter < rowLimit) {
                    rowCounter += 1;
                }
                else {
                    break;
                }
            }

    	}

        if (sectionAttr) {
            _priv.mergeAttributes(sectionElm, sectionAttr);
        }

    	tableElm.appendChild(sectionElm);
    };

	var render = function _render_table_shiv(data, parentList, external, cb) {

        if (!external && document.querySelector('html').classList.contains('external-app')) {
            external = true;
        }

        if (data.attributes && data.attributes['data-menuStyle']) {
            actionsMenu = true;
        }

        // Create docFragments
        var docFragement = document.createDocumentFragment();
        var lastReference = docFragement;

        if (!data.fixData) {
            data = _priv.fixData(data, external);
        }

        var fakeData = false;

        _priv.tableID = data.attributes.id.substring(0, 1).toLowerCase() + data.attributes.id.substring(1);

		if (!data.attributes) {
			data.attributes = {};
		}

		data.attributes['data-store-id'] = ds.createStore(data);

		var initialContainer = templates['table'](data).replace(/\s\s+/g, ' ');

        // Parse all of the returned handblebars string into actual DOM elements
        var parsed = _priv.innerHTML(initialContainer).querySelector('body');

        var children = parsed.childNodes;

        if (children.length !== 0) {

            // Loop through and filter out none html elements
            for (var i = 0, len = children.length; i < len; i++) {

                if (children[i] !== undefined && children[i].nodeType === 1) {

                    // Add the produced fragment
                    docFragement.appendChild(children[i]);
                }

            }

            // Update the last reference to the last child incase there are children
            lastReference = docFragement.lastChild;
        }

        var tableElm = docFragement.querySelector('div.emp-table table');

        // Now we need to build out the different table sections
        if (data.head && data.head.rows.length) {

        	_priv.createSection('thead', false, data.head, data, tableElm);
        }

        if (data.footer && data.footer.rows.length) {

        	_priv.createSection('tfoot', false, data.footer, data, tableElm);
        }

        if (data.emptyTable) {

            // Loop through the table header and get a row count (skipping hidden columns)
            var count = 0;

            for (var h = 0, hLen = data.head.rows[0].columns.length; h < hLen; h++) {

                var column = data.head.rows[0].columns[h];

                if (!column.skip && (!column.visibility || column.visibility !== "hidden")) {

                    count += 1;
                }
            }

            fakeData = {
                "rows": [
                    {
                        "columns": [
                            {
                                "attributes": {
                                    'colSpan': count,
                                    'class': 'cui-align-center emp-empty-table-message'
                                },
                                "text": "There is no data to display."
                            }
                        ]
                    }
                ]
            };

            var emptyAttr = {
                "attributes": {
                    'class': 'emp-empty-table',
                    'data-empty': 'true'
                }
            };

            _priv.createSection('tbody', false, fakeData, data, tableElm);

        }
        else {

            var tableColumnLength = data.head.rows[0].columns.length;

            if (!data.limit) {
                data.limit = 15;
            }

            // Check table limit
            if ((tableColumnLength <= data.limit)) {

                // Check for optimize flag
                if (data.optimize) {

                    if (!data.rowLimit) {
                        data.rowLimit = 25;
                    }

                    var rowStart = (data.body.rowStart) ? data.body.rowStart : 0;

                    _priv.createSection('tbody', false, data.body, data, tableElm, data.rowLimit, rowStart);
                }
                else {

                    _priv.createSection('tbody', false, data.body, data, tableElm);
                }
            }
            else {

                // Loop through the table header and get a row count (skipping hidden columns)
                var count = 0;

                var nonToggableType = ['buttonMenu', 'primaryButton', 'notifier', 'button'];

                for (var h = 0, hLen = data.head.rows[0].columns.length; h < hLen; h++) {

                    var column = data.head.rows[0].columns[h];

                    if (column.attributes.hasOwnProperty('data-type')) {

                        if ((nonToggableType.indexOf(column.attributes['data-type'])) === -1) {


                            if (!column.skip && (!column.visibility || column.visibility !== "hidden")) {

                                count += 1;
                            }
                        }

                    }
                    else {

                        if (!column.skip && (!column.visibility || column.visibility !== "hidden")) {

                            count += 1;
                        }
                    }
                }

                if (count <= data.limit) {

                    // Check for optimize flag
                    if (data.optimize) {

                        if (!data.rowLimit) {
                            data.rowLimit = 25;
                        }

                        var rowStart = (data.body.rowStart) ? data.body.rowStart : 0;

                        _priv.createSection('tbody', false, data.body, data, tableElm, data.rowLimit, rowStart);
                    }
                    else {

                        _priv.createSection('tbody', false, data.body, data, tableElm);
                    }

                }
                else {

                    data.largeTable = true;

                    // Disable selectable
                    if (data.selectable) {
                        data.selection = false;
                    }

                    fakeData = {
                        "rows": [
                            {
                                "columns": [
                                    {
                                        "attributes": {
                                            'colspan': count,
                                            'class': 'cui-align-center'
                                        },
                                        "text": "There are too many to render this table!"
                                    }
                                ]
                            }
                        ]
                    }

                    var tooManyColumns = {
                        "attributes": {
                            'class': 'emp-large-table',
                            'data-large-table': 'true'
                        }
                    }

                    _priv.createSection('tbody', tooManyColumns, fakeData, data, tableElm);
                }
            }
        }

        cb(docFragement);
	};

	return {
		render: render
	};

});

define('sectionShiv',['dataStore', 'processTemplates', 'handlebars', 'handlebars-templates', 'handlebars-partials','handlebars-helpers'], function(ds, procTemplates, Handlebars, templates, partial) {

    var _priv = {};

    var data = function _section_data_shiv(data, parentList) {

        // console.log("group shiv");
        // console.log(data, parentList);

        var isCollapsed = false;

        if (data.collapse) {
            isCollapsed = true;
        }

        if (data.contents && data.contents.length) {

            var firstChild = data.contents[0];

            if (firstChild.template && firstChild.template === "group") {

                data.contents[0].isCollapsed = isCollapsed;
            }

        }

        if (parentList.indexOf('section') !== -1) {

            var newData = {
                "template": "groupWrap",
                "contents": [ data ]
            };

            return newData;
        }

        return data;
    };


    return {
        'data': data
    };

});

define('groupShiv',['dataStore', 'processTemplates', 'handlebars', 'handlebars-templates', 'handlebars-partials','handlebars-helpers'], function(ds, procTemplates, Handlebars, templates, partial) {

    var _priv = {};

    var data = function _section_data_shiv(data, parentList) {

        // // console.log("group shiv");
        // // console.log(data, parentList);

        // if (data && data.contents && data.contents.length) {

        //     console.log("We have stuff to check!");
            
        //     console.log(data.contents);

        //     var aIGroupIndexs = [];

        //     // Loop through each data content item looking for groups
        //     for (var d = 0, dLen = data.contents.length; d < dLen; d++) {

        //         if (data.contents[d].template === "group") {

        //             // Check to see if the group needs to be inlined
        //             if (data.contents[d].style && data.contents[d].style.indexOf("inline-group") !== -1) {

        //                 aIGroupIndexs.push(d);
        //             }

        //         }

        //     }

        //     console.log("aIGroupIndexs:" + aIGroupIndexs.length);

        //     if (aIGroupIndexs.length >= 2) {

        //         aIGroupIndexs = aIGroupIndexs.reverse();

        //         var iEndIndex = null;
        //         var iStartIndex = null;

        //         var iTotalLength = aIGroupIndexs.length;

        //         for (var a = 0, aLen = iTotalLength; a < aLen; a++) {

        //             if (iEndIndex === null) {
        //                 iEndIndex = aIGroupIndexs[a];
        //             }

        //             console.log((a + 1) + " <= " + iTotalLength);

        //             if ((a + 1) <= iTotalLength) {

        //                 if (iStartIndex === null) {

        //                     if ((iEndIndex - 1) === aIGroupIndexs[a + 1]) {

        //                         iStartIndex = aIGroupIndexs[a + 1];
        //                     }
        //                     else {

        //                         // Just null out end index, this group is a solo
        //                         iEndIndex = null;
        //                     }

        //                 }
        //                 else {

        //                     if ((iStartIndex - 1) === aIGroupIndexs[a + 1]) {

        //                         // Need to update the start index, the group contains more inline
        //                         iStartIndex = aIGroupIndexs[a + 1];
        //                     }
        //                     else {

        //                     }

        //                 }

        //             }
        //             else {

        //                 console.log("We are on the last index");
        //             }

        //         }


        //     }

        // }


        return data;
    };


    return {
        'data': data
    };

});

define('agencyHeaderShiv',['dataStore', 'processTemplates', 'handlebars', 'handlebars-templates', 'handlebars-partials', 'handlebars-helpers'], function(ds, procTemplates, Handlebars, templates, partial) {

	var _priv = {};

	var data = function _agency_header_data_shiv(data, parentList) {

        if (!fwData.menus || (fwData.menus && !fwData.menus.global) || (fwData.menus && fwData.menus.global && Object.keys(fwData.menus.global).length === 0)) {
            data.showMenu = false;
        }
        else {
            data.showMenu = true;
        }

        if (fwData && fwData.menus && (fwData.menus.userAccount || fwData.menus.system) ) {
            data.showUserAcct = true;
        }
        else if (fwData.header && fwData.header.contents && fwData.header.contents.length) {

            var oAgencyHeader = false;

            for (var a = 0, aLen = fwData.header.contents.length; a < aLen; a++) {

                var oHeader = fwData.header.contents[a];

                if (oHeader && oHeader.template && oHeader.template === "agency-header") {

                    oAgencyHeader = oHeader;

                }

            }

            if (oAgencyHeader) {

                if (oAgencyHeader.userAcct) {
                    if (oAgencyHeader.userAcct.popover) {
                        data.showUserAcct = true;
                        data.inlineUserAcctMenu = true;
                    }
                }

            }

        }
        else {
            data.showUserAcct = false;
        }

        if (fwData && fwData.menus && (fwData.menus.appHelp || fwData.menus.supportContact) ) {
            data.showSupportMenu = true;
        }
        else {
            data.showSupportMenu = false;
        }

		return data;
	};


	return {
		'data': data
	};

});

define('fieldEvent',['dataStore'], function(ds) {

    var _priv = {};

    // Standard input types
    _priv.updateDS = function _key_up(evt, dsID) {

        var store = ds.getStore(dsID);

        var value = evt.target.value;

        store.input.attributes.value = value;
    };

    _priv.updateSelectDS = function _key_up(evt, dsID) {

        var store = ds.getStore(dsID);

        var value = evt.target.value;

        store.input.value = value;
    };

    var bind = function _bind(data, elm) {

        if (!data.input.readOnly && data.type !== "button" && data.attributes && data.attributes['data-store-id']) {

            switch (data.type) {

                case 'select':

                    var input = elm.querySelector('select');

                    elm.addEventListener("change", function(evt) {

                        var dsID = data.attributes['data-store-id'];

                        _priv.updateSelectDS(evt, dsID);

                    }, false);

                    break;

                case 'hidden':

                    break;

                default:

                    if (data.type !== "checkbox" && data.type !== "radio" && data.type !== "hidden") {

                        var input = elm.querySelector('input');

                        elm.addEventListener("keyup", function(evt) {

                            var dsID = data.attributes['data-store-id'];

                            _priv.updateDS(evt, dsID);

                        }, false);
                    }

                    break;

            }
        }

    };

	return {
		'bind': bind
	};

});

define('compositeEvent',['dataStore'], function(ds) {

    var _priv = {};

    // Standard input types
    _priv.updateRatingDS = function _key_up(evt, dsID) {

        var store = ds.getStore(dsID);

        var currentElm = evt.target;

        if (currentElm.nodeName !== "A") {

            while (currentElm.nodeName !== "A") {
                currentElm = currentElm.parentNode;
            }
        }

        // Get the value from the clicked star
        var value = currentElm.getAttribute('data-starindex');

        store.parts.hidden.input.attributes.value = value;
    };

    var bind = function _bind(data, elm) {

        if (data.template === "composite") {

            switch (data.type) {

                case 'rating':

                    var stars = elm.querySelectorAll('.emp-rating-star');

                    for (var s = 0, sLen = stars.length; s < sLen; s++) {

                        stars[s].addEventListener("click", function(evt) {

                            var dsID = data.attributes['data-store-id'];

                            _priv.updateRatingDS(evt, dsID);

                        }, false);
                    }

                    break;

                default:

                    break;

            }
        }

    };

    return {
        'bind': bind
    };

});

define('render',['processTemplates', 'tableShiv', 'sectionShiv', 'groupShiv', 'agencyHeaderShiv', 'fieldEvent', 'compositeEvent'], function(procTemplates, tableShiv, sectionShiv, groupShiv, agencyHeaderShiv, fieldEvent, compositeEvent) {

    var _priv = {
        setup: false
    };

    var dataShivs = {
        "section": sectionShiv.data,
        "group": groupShiv.data,
        "agency-header": agencyHeaderShiv.data
    };

    var templateShivs = {
        "table": tableShiv.render
    };

    var eventShivs = {
        "composite": compositeEvent.bind,
        "field": fieldEvent.bind
    };

    var external = (document.querySelector('html.external-app')) ? true : false;

    // This is the specific function that should only be used to generate the initial page.
    var page = function _page(target, data, cb) {

         //Tempory method to hide itags on page.
        if(data.page && data.page.style && data.page.style.indexOf('remove-itag') > -1){

            // Add global style to page
            document.documentElement.classList.add('emp-remove-itag');

            // Disable legend icon. If present should be first object of page contents array.
            if(data.page.contents && data.page.contents.length > 1){
                if(data.page.contents[0].pageLegend){
                    data.page.contents[0].pageLegend.helpText = false;
                }
            }

            journal.log({ type: 'info', owner: 'UI', module: 'render', func: 'page' }, 'Itags are being hidden by page style.');
        }

        // Check to see if we have an older rendering page
        if (!target.header) {

            target = target.page;
            data = data.page;

            if (typeof data === "object") {

                if (!_priv.setup) {

                    _priv.setup = true;

                    procTemplates.setup(dataShivs, templateShivs, eventShivs);
                }

                // Request the process template module and have the callback return the rendered page.
                procTemplates.render(data, true, function(html) {

                    if (html) {
                        target.appendChild(html);

                        cb();
                    }
                    else {

                        cb();
                    }

                });

            }
            else {

                console.error("UI [render]: fwData.page is not an object");
            }
        }
        else {

            if (!_priv.setup) {

                _priv.setup = true;

                procTemplates.setup(dataShivs, templateShivs, eventShivs);

            }

            // Render the header
            procTemplates.render(data.header, true, function (headerHTML) {

                target.header.appendChild(headerHTML);

                // Check to see if we have a footer
                if (data.footer && target.footer) {

                    // Render the footer
                    procTemplates.render(data.footer, true, function (footerHTML) {

                        target.footer.appendChild(footerHTML);

                        if (data.page && target.page) {

                            // Render the page
                            procTemplates.render(data.page, true, function (bodyHTML) {

                                target.page.appendChild(bodyHTML);

                                if (typeof cb === "function") {
                                    cb();
                                }

                            });

                        }
                        else {

                            if (typeof cb === "function") {
                                cb();
                            }

                        }

                    });

                }
                else {

                    // Render the page
                    procTemplates.render(data.page, true, function (html) {

                        target.page.appendChild(html);

                        if (typeof cb === "function") {
                            cb();
                        }

                    });
                }

            });

        }

    };

    // The section function should be used for on the fly/run-time building of sections.
    var section = function _section(target, data, method, cb) {

        if (!_priv.setup) {

            _priv.setup = true;

            procTemplates.setup(dataShivs, templateShivs, eventShivs, external);
        }

        // Check to see if method is function as that means the method was purposely omitted.
        if (typeof method === "function") {
            cb = method;
            method = undefined;
        }

        if (typeof data === "object") {

            procTemplates.render(data, false, function(html) {

                if (html && html !== null) {

                    if (method === undefined || method === "return") {

                        cb(html, data);
                    }
                    else if (method === "replace") {

                        if (typeof target === "string") {

                            target = document.getElementById(target);

                        }

                        var container = target.parentNode;

                        container.removeChild(target);

                        var contents = html.childNodes;

                        for (var c = 0, cLen = contents.length; c < cLen; c++) {

                            if (contents[c] && contents[c].nodeType && contents[c].nodeType === 1) {

                                container.appendChild(contents[c]);
                            }

                        }

                    }
                    else if (method === "append") {

                        var contents = html.childNodes;

                        for (var c = 0, cLen = contents.length; c < cLen; c++) {

                            if (contents[c] && contents[c].nodeType && contents[c].nodeType === 1) {

                                target.appendChild(contents[c]);
                            }

                        }

                        if (typeof cb === "function") {
                            cb(html);
                        }
                    }
                    else {

                        console.log("Uknown render function passed: " + method);
                    }
                }
                else {

                    console.log("Render returned nothing!");
                }

            });

        }
        else {

            console.error("UI [render]: Invalid data object not provided.")
        }
    };

    return {
        page: page,
        section: section
    };

});


// http://spin.js.org/#v2.3.2
!function(a,b){"object"==typeof module&&module.exports?module.exports=b():"function"==typeof define&&define.amd?define('spin',b):a.Spinner=b()}(this,function(){"use strict";function a(a,b){var c,d=document.createElement(a||"div");for(c in b)d[c]=b[c];return d}function b(a){for(var b=1,c=arguments.length;c>b;b++)a.appendChild(arguments[b]);return a}function c(a,b,c,d){var e=["opacity",b,~~(100*a),c,d].join("-"),f=.01+c/d*100,g=Math.max(1-(1-a)/b*(100-f),a),h=j.substring(0,j.indexOf("Animation")).toLowerCase(),i=h&&"-"+h+"-"||"";return m[e]||(k.insertRule("@"+i+"keyframes "+e+"{0%{opacity:"+g+"}"+f+"%{opacity:"+a+"}"+(f+.01)+"%{opacity:1}"+(f+b)%100+"%{opacity:"+a+"}100%{opacity:"+g+"}}",k.cssRules.length),m[e]=1),e}function d(a,b){var c,d,e=a.style;if(b=b.charAt(0).toUpperCase()+b.slice(1),void 0!==e[b])return b;for(d=0;d<l.length;d++)if(c=l[d]+b,void 0!==e[c])return c}function e(a,b){for(var c in b)a.style[d(a,c)||c]=b[c];return a}function f(a){for(var b=1;b<arguments.length;b++){var c=arguments[b];for(var d in c)void 0===a[d]&&(a[d]=c[d])}return a}function g(a,b){return"string"==typeof a?a:a[b%a.length]}function h(a){this.opts=f(a||{},h.defaults,n)}function i(){function c(b,c){return a("<"+b+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',c)}k.addRule(".spin-vml","behavior:url(#default#VML)"),h.prototype.lines=function(a,d){function f(){return e(c("group",{coordsize:k+" "+k,coordorigin:-j+" "+-j}),{width:k,height:k})}function h(a,h,i){b(m,b(e(f(),{rotation:360/d.lines*a+"deg",left:~~h}),b(e(c("roundrect",{arcsize:d.corners}),{width:j,height:d.scale*d.width,left:d.scale*d.radius,top:-d.scale*d.width>>1,filter:i}),c("fill",{color:g(d.color,a),opacity:d.opacity}),c("stroke",{opacity:0}))))}var i,j=d.scale*(d.length+d.width),k=2*d.scale*j,l=-(d.width+d.length)*d.scale*2+"px",m=e(f(),{position:"absolute",top:l,left:l});if(d.shadow)for(i=1;i<=d.lines;i++)h(i,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(i=1;i<=d.lines;i++)h(i);return b(a,m)},h.prototype.opacity=function(a,b,c,d){var e=a.firstChild;d=d.shadow&&d.lines||0,e&&b+d<e.childNodes.length&&(e=e.childNodes[b+d],e=e&&e.firstChild,e=e&&e.firstChild,e&&(e.opacity=c))}}var j,k,l=["webkit","Moz","ms","O"],m={},n={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(h.defaults={},f(h.prototype,{spin:function(b){this.stop();var c=this,d=c.opts,f=c.el=a(null,{className:d.className});if(e(f,{position:d.position,width:0,zIndex:d.zIndex,left:d.left,top:d.top}),b&&b.insertBefore(f,b.firstChild||null),f.setAttribute("role","progressbar"),c.lines(f,c.opts),!j){var g,h=0,i=(d.lines-1)*(1-d.direction)/2,k=d.fps,l=k/d.speed,m=(1-d.opacity)/(l*d.trail/100),n=l/d.lines;!function o(){h++;for(var a=0;a<d.lines;a++)g=Math.max(1-(h+(d.lines-a)*n)%l*m,d.opacity),c.opacity(f,a*d.direction+i,g,d);c.timeout=c.el&&setTimeout(o,~~(1e3/k))}()}return c},stop:function(){var a=this.el;return a&&(clearTimeout(this.timeout),a.parentNode&&a.parentNode.removeChild(a),this.el=void 0),this},lines:function(d,f){function h(b,c){return e(a(),{position:"absolute",width:f.scale*(f.length+f.width)+"px",height:f.scale*f.width+"px",background:b,boxShadow:c,transformOrigin:"left",transform:"rotate("+~~(360/f.lines*k+f.rotate)+"deg) translate("+f.scale*f.radius+"px,0)",borderRadius:(f.corners*f.scale*f.width>>1)+"px"})}for(var i,k=0,l=(f.lines-1)*(1-f.direction)/2;k<f.lines;k++)i=e(a(),{position:"absolute",top:1+~(f.scale*f.width/2)+"px",transform:f.hwaccel?"translate3d(0,0,0)":"",opacity:f.opacity,animation:j&&c(f.opacity,f.trail,l+k*f.direction,f.lines)+" "+1/f.speed+"s linear infinite"}),f.shadow&&b(i,e(h("#000","0 0 4px #000"),{top:"2px"})),b(d,b(i,h(g(f.color,k),"0 0 1px rgba(0,0,0,.1)")));return d},opacity:function(a,b,c){b<a.childNodes.length&&(a.childNodes[b].style.opacity=c)}}),"undefined"!=typeof document){k=function(){var c=a("style",{type:"text/css"});return b(document.getElementsByTagName("head")[0],c),c.sheet||c.styleSheet}();var o=e(a("group"),{behavior:"url(#default#VML)"});!d(o,"transform")&&o.adj?i():j=d(o,"animation")}return h});

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('deepmerge',factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.deepmerge = factory();
    }
}(this, function () {

return function deepmerge(target, src) {
    var array = Array.isArray(src);
    var dst = array && [] || {};

    if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach(function(e, i) {
            if (typeof dst[i] === 'undefined') {
                dst[i] = e;
            } else if (typeof e === 'object') {
                dst[i] = deepmerge(target[i], e);
            } else {
                if (target.indexOf(e) === -1) {
                    dst.push(e);
                }
            }
        });
    } else {
        if (target && typeof target === 'object') {
            Object.keys(target).forEach(function (key) {
                dst[key] = target[key];
            })
        }
        Object.keys(src).forEach(function (key) {
            if (typeof src[key] !== 'object' || !src[key]) {
                dst[key] = src[key];
            }
            else {
                if (!target[key]) {
                    dst[key] = src[key];
                } else {
                    dst[key] = deepmerge(target[key], src[key]);
                }
            }
        });
    }

    return dst;
}

}));
define('stylesheet',['deepmerge'], function(deepmerge) {

    var _priv = {};

    // Object to keep track of all the style sheets.
    var _sheetStore = {};

    // Function creates a new
    _priv.newStyleSheet = function _new_style_sheet(name, media) {
        var sheet = (function() {
            // Create the <style> tag
            var style = document.createElement('style');

            // Add a media (and/or media query) here if provided or just force to screen
            if (!media) {
                style.setAttribute('media', 'screen');
            }
            else if (typeof media === 'string') {
                style.setAttribute('media', media);
            }
            else {
                style.setAttribute('media', 'screen');

                console.warn('[UI - Stylesheet] Stylesheet has been set to screen only because the request included unexpected media data-type: ', media);
            }

            // Use the provided name to set the stylsheet name
            style.setAttribute('id', name);

            // WebKit hack :(
            style.appendChild(document.createTextNode(''));

            // Add the <style> element to the page
            document.head.appendChild(style);

            // Add it tor sheet stor eincase we need to look it up by name.
            _sheetStore[name] = style.sheet;

            return style.sheet;
        }());

        return sheet;
    };

    _priv.addRule = function _add_rule (sheet, selector, rules, index) {
        if ('insertRule' in sheet) {
            // A valid index must be provided to `.insertRule()` per the spec, plus it will show warnings in Chrome's console
            if (typeof index !== 'number') {
                // Put it at the end of the current style sheet so it will cascade over any existing rules for the same selector
                index = sheet.cssRules.length;
            }

            sheet.insertRule(selector + '{' + rules + '}', index);
        }
        else if('addRule' in sheet) {
            sheet.addRule(selector, rules, index);
        }
    };

    _priv.deleteRule = function _delete_rule (sheet, selector) {

        var recheck = [];

        if (sheet.cssRules.length !== 0) {
            if (Array.isArray(selector)) {
                //TODO: Add Array support
            }
            else {

                for (var i = 0, len = sheet.cssRules.length; i < len; i++) {
                    var styleRule = sheet.cssRules[i];

                    if (styleRule !== undefined) {

                        if (styleRule.selectorText !== undefined && styleRule.selectorText === selector) {
                            sheet.deleteRule(i);

                            recheck.push({i: i, selector: selector});
                        }

                        if (selector.indexOf('*') !== -1) {
                            var tempSelector = selector.replace('*', '');

                            if (styleRule.selectorText !== undefined && styleRule.selectorText === tempSelector) {
                                sheet.deleteRule(i);

                                recheck.push({i: i, selector: selector});
                            }
                        }
                    }
                }
            }
        }
        else {
            console.warn('No style rules to delete');
            return true;
        }
    };

    _priv.updateRule = function _update_rule (sheet, rules) {

        var selector;
        var currentRules;
        var styleRule;
        var i;
        var len;

        function generateSelectorRules (rules) {
            var fullStyleList = '';

            for (var style in rules) {
                if (rules.hasOwnProperty(style)) {
                    fullStyleList += style + ':' + rules[style] + ';';
                }
            }

            return fullStyleList;
        }

        function convertCSStext (text, selector) {
            var ruleArray =  text.replace(selector, '').replace(/[\{\}]+/g,'').trim().split(';');
            var ruleObject = {};

            for (var i = 0, len = ruleArray.length; i < len; i++) {
                var styleRule = ruleArray[i].split(':');
                var style = styleRule[0].trim();

                // Filter our nameless rules
                if (style !== '') {
                    ruleObject[style] = styleRule[1];
                }
            }

            return ruleObject;
        }

        for (selector in rules) {

            if (rules.hasOwnProperty(selector)) {

                // Check to see if the selector already has this rule.
                if (sheet.cssRules.length !== 0) {

                    currentRules = null;
                    var ruleRemovedIndex = null;
                    var removedText = null;

                    for (i = 0, len = sheet.cssRules.length; i < len; i++) {
                        styleRule = sheet.cssRules[i];

                        if (styleRule && styleRule.selectorText === selector) {

                            _priv.deleteRule(sheet, selector);
                        }
                    }

                    if (styleRule) {

                        currentRules = convertCSStext(styleRule.cssText, selector);
                        currentRules = deepmerge(currentRules, rules[selector]);

                        // Now add the rule
                        _priv.addRule(sheet, selector, generateSelectorRules(currentRules) );
                    }
                }
                else {
                    _priv.addRule(sheet, selector, generateSelectorRules(rules[selector]) );
                }
            }
            else {

                console.log("no selector in rules");
            }
        }
    };

    // Function to create/register a new stylesheet
    var newStyleSheet = function _new_style_sheet (name, media, rules) {
        // Move the rules over to be in the right spot so media can be optional if needed.
        if (typeof media === 'object' && rules === undefined) {
            rules = media;
            media = undefined;
        }

        // Check to see if we can safely create this stylesheet
        if (!_sheetStore.hasOwnProperty(name)) {
            // Create the stylesheet
            var sheet = _priv.newStyleSheet(name, media);

            updateStyleRule(sheet, rules);

            // Add the style sheet to the store.
            _sheetStore[name] = sheet;

            // Return the stylesheet instance to the caller.
            return sheet;
        }
        else {
            console.error('[UI - Stylesheet] Attempt to create a stylesheet with a similar name: "' + name + '" named stylesheet returned');

            return _sheetStore[name];
        }
    };

    var deleteStyleSheet = function _delete_style_sheet(name) {

        if (_sheetStore.hasOwnProperty(name)) {

            delete _sheetStore[name];

            $('#' + name).remove();
        }

    };

    var deleteStyleRule = function _delete_style_rule (sheet, rules) {
        if (typeof sheet === 'object' && sheet.cssRules) {
            // Check to make sure this is a real stylesheet object
            if (!sheet.cssRules) {
                console.error('[UI - Stylesheet] Passed in object is not a stylesheet object');

                return false;
            }
        }
        else if (typeof sheet === 'string') {
            sheet = _sheetStore[sheet];
        }
        else {
            console.error('[UI - Stylesheet] Unable to locate stylesheet being referenced: ', sheet);

            return false;
        }

        // Call the update function
        _priv.deleteRule(sheet, rules);
    };

    var updateStyleRule = function _update_style_rule (sheet, rules) {

        if (typeof sheet === 'object' && sheet && sheet.cssRules) {
            // Check to make sure this is a real stylesheet object
            if (!sheet.cssRules) {
                console.error('[UI - Stylesheet] Unable to locate stylesheet being referenced: ', sheet);

                return false;
            }
        }
        else if (typeof sheet === 'string') {
            sheet = _sheetStore[sheet];
        }
        else {
            console.error('[UI - Stylesheet] Unable to locate stylesheet being referenced: ', sheet);

            return false;
        }

        // Call the update function
        _priv.updateRule(sheet, rules);
    };

    return {
        newSheet: newStyleSheet,
        deleteSheet: deleteStyleSheet,
        updateRule: updateStyleRule,
        deleteRule: deleteStyleRule
    };
});

define('tableBase',['render', 'spin'], function (render, spin) {

    var _priv = {};
    var _inits = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        setup: {
            resize: true,
            sticky: true,
        },
        plugins: {
            resize: {
                heights: [3, 10, 50],
                position: false,
                next: 0,
                control: false,
                noControl: false, // Used to hide the control but run the plugin.
                threshold: 10,
                rowOffset: 0,
                manualHeight: false,
                minimumFilteredRows: 11,
            },
            sticky: {
                mouseWheelLock: false,
                mouseWheelLockTimer: null,
                lastScrollPos: 0,   // used for scroll events to track sticky header
                lastScrollbarPos: 0,
                scrollCall: 0,
                maxScroll: false,
                skipEvent: false,
                rowHeight: 0,
            },
            lazyRecords: {
                timer: 0,
                lastPos: 0, // used for loading additional records
            }
        },
    };

    var CLASSES = {
        paging: 'table-paging-control-row'
    };

    // =================
    // Private Functions
    // =================

    // Function executes other functions the different functions that should happen ever time the table is resized because of browser window changes size
    _priv.reflow = function _reflow(evt, table, source, changeHeight) {

        // Check of only table is being returned
        if ( !(evt instanceof Event) && evt !== undefined ) {

            changeHeight = source;
            source = table;
            table = evt;
            evt = null;
        }

        if (typeof source === "string") {

            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'base', func: 'reflow'}, 'Table ' + table.id + ' reflow called by ' + source);
        }

        // Fix the max height as it will now be different.
        table.config.plugins.sticky.maxScroll = table.obj.$viewWrapper[0].scrollHeight - table.obj.$viewWrapper[0].clientHeight;

        // Fix the table height so it lines up correctly
        if (changeHeight !== false) {
            _priv.resetHeight(table);
        }

        fastdom.measure(function() {

            if(table.config.sticky){
                // Fix the style headers
                _priv.stickyHeaderHeight(table);
            }

            fastdom.mutate(function() {

                table.$self.trigger('reflow.table');

            });

        });

    };

    // This function resizes the table per specified height or predetermined amount
    _priv.resize = function _resize (table, height, self, init) {

        function applyHeight (height) {

            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'base', func: 'resize => applyHeight'}, 'Table ' + table.id +  'being resized to have a height of: "', (height !== "") ? height : "natural element height" , '"');

            fastdom.measure(function () {
                if (height) {
                    fastdom.mutate(function () {
                        var tableViewWrapper = table.obj.$viewWrapper[0];

                        tableViewWrapper.style.height = height + 'px';
                    });
                }
                else {
                    fastdom.mutate(function () {
                        // 100% should be the scrollHeight of the table
                        table.obj.$viewWrapper[0].style.height = '';

                    });
                }
            });

            // Only trigger events on user clicks
            if (!self) {
                table.$self.trigger('resize.table');
            }
        }

        function getTotalHeight (rows, rowCount) {

            //if filter is being applied set total height minimum to the minimum filtered rows variable
            if(filterApplied && percentageHeight && rowCount < table.config.plugins.resize.minimumFilteredRows){
                rowCount = table.config.plugins.resize.minimumFilteredRows;
            }

            if (rows.length >= rowCount) {
                fastdom.measure(function (){
                    var totalHeight = 0;

                    rows.each(function(i) {

                        if (i < rowCount) {

                            var $row = $(this);

                            totalHeight += $row.height();

                        }

                    });

                    // Add the table header height
                    totalHeight += table.obj.$thead[0].offsetHeight + 1;

                    fastdom.mutate(function () {
                        applyHeight(totalHeight);
                    });
                });
            }
            else {
                fastdom.mutate(function () {
                    applyHeight();
                });
            }
        }

        function isFloat(n){

            return Number(n) === n && n % 1 !== 0;
        }

        function determineHeight(height) {

            if (height === "full") {

                applyHeight();
            }
            else {

                if (typeof height !== "string") {

                    if (isFloat(height)) {
                        percentageHeight = true;
                        // Figure out the count based on the current height position
                        rowCount = Math.round((rowCount - uiRowCount) * table.config.plugins.resize.heights[table.config.plugins.resize.position]);

                        // Double check, 0 should never be a valid row count size
                        if (rowCount === 0) {
                            rowCount = $rows.length;
                        }

                        if (table.config.plugins.resize.rowOffset !== 0) {

                            rowCount += table.config.plugins.resize.rowOffset;
                        }

                        getTotalHeight($rows, rowCount);
                    }
                    else {

                        if (table.config.plugins.resize.rowOffset !== 0) {

                            height += table.config.plugins.resize.rowOffset;
                        }

                        getTotalHeight($rows, height);
                    }

                }

            }
        }

        function updatePosition() {

            if (table.config.plugins.resize.position === false) {

                table.config.plugins.resize.position = 0;
            }
            else {

                table.config.plugins.resize.position = table.config.plugins.resize.next;
            }

            // Update next position to be the next position
            if (table.config.plugins.resize.position < table.config.plugins.resize.heights.length - 1) {
                table.config.plugins.resize.next = table.config.plugins.resize.position + 1;
            }
            else {
                table.config.plugins.resize.next = 0;
            }

            // Check to see if the position selected will be full height
            if (table.config.plugins.resize.heights[table.config.plugins.resize.position] === "full" && (table.obj.$tbody.children('tr').length < table.dataStore.body.rows.length )) {

                // We are assuming we have unloadded rows
                updatePosition();
            }
        }

        // Pull this extensions configs closer
        var $rows = table.obj.$tbody.children('tr');
        var rowCount = $rows.length;
        var uiRowCount = $rows.filter('.cui-ui-only').length;

        $rows = table.obj.$tbody.children('tr:not(.cui-ui-only)');

        //Determine if a filter is being applied to the table, if so set filterApplied variable to true. This is used in the getTotalHeight function to set the minimum number of displayed rows.
        var filterApplied = false;
        var percentageHeight = false;

        //Check if filter rows are defined
        if(table.config && table.config.plugins && table.config.plugins.filter && table.config.plugins.filter.filterRow){

            //For each filter row determine if a filter is being applied
            for(var i = 0; i < table.config.plugins.filter.filterRow.length; i++){

                // Check if a filter is being applied by looking at the comparison value
                if(table.config.plugins.filter.filterRow[i].compareValue !== ""){

                    filterApplied = true;
                }
            }
        }

        // Start by looking for a defined height.
        if (height === undefined) {

            table.config.plugins.resize.manualHeight = false;

            // Check if init, if so then we need to check the table hieght by default
            if (init) {

                // Hook to determine if the table has enough rows to even do an initial height reset.
                if ($rows.length >= table.config.plugins.resize.threshold) {

                    //determineHeight(table.config.plugins.resize.heights[table.config.plugins.resize.position]);
                    determineHeight(10);

                }
                else{

                    table.config.plugins.resize.heights.unshift(10);
                }
            }
            else {

                if (self) {

                    var currentLoop = 0;

                    var foundValue = false;

                    var lastSize = (table.config.plugins.resize.heights[table.config.plugins.resize.position]) ? table.config.plugins.resize.heights[table.config.plugins.resize.position] : table.config.plugins.resize.heights[0];

                    do {

                        currentLoop += 1;

                        updatePosition();

                        if (table.config.plugins.resize.heights[table.config.plugins.resize.position] <= rowCount) {

                            foundValue = true;
                        }
                        else if ((table.config.plugins.resize.heights[table.config.plugins.resize.position] > rowCount) && (lastSize < rowCount)) {

                            foundValue = true;
                        }

                    }
                    while (!foundValue && currentLoop <= table.config.plugins.resize.heights.length);


                    if (foundValue) {

                        determineHeight(table.config.plugins.resize.heights[table.config.plugins.resize.position]);
                    }

                    //console.log(table.config.plugins.resize.heights[table.config.plugins.resize.position]);

                }
                else {

                    //console.log("nothing defined and not self");

                }

                // Bomb out.... this should have been defined!
                return false;
            }
        }
        else {

            table.config.plugins.resize.manualHeight = true;

            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'base', func: 'resize'}, 'Manual height being requested: "', height, '" for ' + table.id);

            if (typeof height === "string" && height.indexOf('px') !== -1) {

            }
            else {

                var rowNumber;

                // Check if the height is a string and convert it.
                if (typeof height === "string" && height === "full") {

                    // Just apply height.
                    applyHeight();
                }
                else {

                    // Assume height is number of rows
                    determineHeight(height);

                }
            }
        }
    };

    // Function is used to recalculate the proper table height based on resize value.
    _priv.resetHeight = function _reset_height(table) {

        // Use the current position to determine if this is an inital state request
        if (table.config.plugins.resize.position) {

            _priv.resize(table, table.config.plugins.resize.heights[table.config.plugins.resize.position], false, true);
        }
        else {

            _priv.resize(table, table.config.plugins.resize.heights[table.config.plugins.resize.position], false, false);
        }
    };

    // Function setups the table sticky header
    _priv.sticky = function _sticky (table, init) {

        // Function is used to search header classes to determine if it should attempt to modifie a sepcific header or not.
        function classSearch (haystack, needles) {
            // Loop through the differnt haystack special callses
            for (var i = 0, len = haystack.length; i < len; i++) {
                // Check if this class is in the heade classes (needles), return true if so.
                if (needles.indexOf(haystack[i]) !== -1) {
                    return false;
                }
            }

            return true;
        }

        // Define the default padding
        var TOP_BOTTOM_PADDING = 10;
        var LEFT_RIGHT_PADDING = 6;

        // These are columns that have special meaning or contents
        var SPECIAL_HEADER_CLASSES = [
            'cui-hidden', // Hidden colum
            'table-control-col', // Selectable column
        ];

        // New header we will be replacing with
        var $newHeader = $('<thead/>');

        // New header row.
        var $newRow = $('<tr/>');

        // Get all of the header cells from the first row (normal Empire table should only have 1 header row)
        var $headers = table.obj.$thead.children('tr').eq(0).children('th');

        // Loop through all of the headers
        for (var i = 0, len = $headers.length; i < len; i++) {

            var $newHeaderCell = false; // Flag to determine if we need to create a new header cell
            var headerAttributes = {}; // Object to hold any possible th attributes
            var headerText = false;

            // Get a copy of the header from the loop.
            var $headerCell = $($headers[i]);

            // Save off the text
            headerText = $headerCell.text().trim();

            var $spanCheck = $headerCell.children('span');
            var spanText = ($spanCheck.length === 1) ? $spanCheck.text() : "";

            // Get all the attributes off of the current header cell
            var attributeMap = $headerCell[0].attributes;

            // Loop through all of the header
            for (var j = 0, jLen = attributeMap.length; j < jLen; j++) {
                var attr = attributeMap[j];
                headerAttributes[attr.name] = attr.value;
            }

            if (!headerAttributes.class) {
                headerAttributes.class = '';
            }

            // Check for keywords for special headers
            if (headerAttributes.class && classSearch(SPECIAL_HEADER_CLASSES, headerAttributes.class)) {

                // Add the special table-structure-cell class that removes the normal base padding.
                headerAttributes.class += ' table-structure-cell';

                $newHeaderCell = $('<th/>', headerAttributes);

                if (headerAttributes.class.indexOf('emp-min-width') !== -1) {

                    $('<div/>', {
                            'class': 'sticky-cell',
                            'title': headerText,
                            'style': 'padding: ' + TOP_BOTTOM_PADDING + 'px ' + LEFT_RIGHT_PADDING + 'px;',
                        })
                        .append(
                            $('<span/>', {
                                'class': 'cui-hide-from-screen',
                            })
                            .text(headerText)
                        )
                        .appendTo($newHeaderCell);
                }
                else {

                    if ($spanCheck.length === 0) {

                        $('<div/>', {
                                'class': 'sticky-cell',
                                'style': 'padding: ' + TOP_BOTTOM_PADDING + 'px ' + LEFT_RIGHT_PADDING + 'px;'
                            })
                            .append(
                                $('<span/>', {
                                    'title': headerText
                                })
                                .text(headerText)
                            )
                            .appendTo($newHeaderCell);
                    }
                    else {

                        // This is your most common table header handler
                        $headerCell.wrapInner($('<div/>', {
                                'class': 'sticky-cell',
                                'title': headerText,
                                'style': 'padding: ' + TOP_BOTTOM_PADDING + 'px ' + LEFT_RIGHT_PADDING + 'px;'
                            })
                        ).children('div').eq(0).appendTo($newHeaderCell);
                    }

                }
            }
            // This is a special column, just wrap it for now.
            else {

                if ($spanCheck.length === 0) {

                    $headerCell.wrapInner('<span/>');
                }

                if (spanText !== "") {

                    $headerCell.wrapInner($('<div/>', {
                            'class': 'sticky-cell',
                            'title': spanText,
                            'style': 'padding: ' + TOP_BOTTOM_PADDING + 'px ' + LEFT_RIGHT_PADDING + 'px;'
                        })
                    );
                }
                else {

                    $headerCell.wrapInner($('<div/>', {
                            'class': 'sticky-cell',
                            'style': 'padding: ' + TOP_BOTTOM_PADDING + 'px ' + LEFT_RIGHT_PADDING + 'px;'
                        })
                    );
                }


                $newHeaderCell = $headerCell.addClass('table-structure-cell');
            }

            if ($newHeaderCell) {
                $newHeaderCell.appendTo($newRow);
            }
        }

        // Add in the new row
        $newRow.appendTo($newHeader);

        fastdom.mutate(function () {
            // Add the sticky class to the table to cause proper reflowing
            table.$self.addClass('sticky');

            // Replace the header
            table.obj.$thead.replaceWith($newHeader);

            fastdom.measure(function () {

                // Call the function that sets the headers height
                _priv.stickyHeaderHeight(table, true);
            });
        });

        // Replace the header
        table.obj.$thead.replaceWith($newHeader);
    };

    // Function cleans up and redefined table header row hieght
    _priv.stickyHeaderHeight = function _sticky_header_height(table, init) {

        if (table.config.setup.sticky) {

            // Start by getting the width of all the table cells by looking at the div.stickyCell > span.
            fastdom.measure(function () {
                var headerCellHeights = [];

                var empTableParentElem = table.obj.$tableContainer.parent();

                for (var i = 0, len = table.obj.$stickyCells.length; i < len; i++) {
                    var $header = $(table.obj.$stickyCells[i]).children('span');

                    var height = ($header[0].offsetHeight) ? $header[0].offsetHeight : $header[0].clientHeight;
                        headerCellHeights.push(height + 20);
                }

                // Save of this measurement
                table.config.plugins.sticky.newHeight = Math.max.apply(null, headerCellHeights) + 'px';

                // Check to see if we need to mutate the DOM
                fastdom.mutate(function () {

                    // If the new height does not match the old on, update
                    if (table.config.plugins.sticky.rowHeight !== table.config.plugins.sticky.newHeight) {
                        // Update the header row height
                        table.obj.$thead.children('tr')[0].style.height = table.config.plugins.sticky.newHeight;
                        // Update the config
                        table.config.plugins.sticky.rowHeight = table.config.plugins.sticky.newHeight;
                    }

                });
            });
        }
    };

    _priv.setScrollInfo = function(table) {
        var scrollHeight = table.obj.$viewWrapper[0].scrollHeight;
        var clientHeight = table.obj.$viewWrapper[0].clientHeight;

        // Get the tables current totals
        table.config.plugins.sticky.maxScroll = scrollHeight - clientHeight;
        table.config.plugins.sticky.scrollHeight = scrollHeight;
        table.config.plugins.sticky.clientHeight = clientHeight;
    };

    _priv.getTableKeys = function(table) {

        var $tr = table.obj.$tbody.find('tr');

        var keys = [];

        for (var r = 0, rLen = $tr.length; r <rLen; r++) {

            keys.push($tr[r].getAttribute('data-key'));
        }

        return keys;
    };

    // ================
    // Events Functions
    // ================

    // Function used to call the default implmentation/action that should be taken when the user clicks the resize control
    _events.resizeButton = function _resize_button_click(evt, table) {

        _priv.resize(table, undefined, true);
    };

    _events.scroll = function _table_scroll(evt, table, mousewheel) {

        var scrollTop = 0;
        var newPos = 0;
        var i = false;

        if (!table.dataStore.emptyTable && !table.dataStore.largeTable) {

            if (!table.config.plugins.sticky.maxScroll) {
                _priv.setScrollInfo(table);
            }

            if (mousewheel) {
                table.config.plugins.sticky.mouseWheelLock = true;

                clearTimeout(table.config.plugins.sticky.mouseWheelLockTimer);

                table.config.plugins.sticky.mouseWheelLockTimer = setTimeout(function() {

                    table.config.plugins.sticky.mouseWheelLock = false;
                    table.config.plugins.sticky.mouseWheelLockTimer = null;

                }, 500);

                var delta = (evt.originalEvent.deltaY) ? evt.originalEvent.deltaY : evt.originalEvent.wheelDelta;

                // IE (negative is down, and positive is up)
                // Chrome (positive is down and negative is up) [EDGE FLIPS TO CHROME SPEC?!?!?! WTF]
                if (emp.isIE) {

                    // Swap back to the good browser standard if its edge.
                    if (emp.isEdge) {
                        scrollTop = (delta < 0) ? -20 : 20;
                    }
                    else {
                        scrollTop = (delta < 0) ? 20 : -20;
                    }

                }
                else {

                    scrollTop = (delta < 0) ? -20 : 20;
                }

                newPos = table.config.plugins.sticky.lastScrollPos + scrollTop;

                if (newPos < 0) {
                    newPos = 0;
                }
                else if (newPos > table.config.plugins.sticky.maxScroll) {
                    newPos = table.config.plugins.sticky.maxScroll;
                }

                table.config.plugins.sticky.lastScrollPos = newPos;

                for (i = 0, len = table.obj.$stickyCells.length; i < len; i++) {

                    table.obj.$stickyCells[i].style.transform = 'translate3d(0px, ' + newPos + 'px,0px)';
                }

                // Hardset the view container
                table.obj.$viewWrapper[0].scrollTop = newPos;
            }
            else {

                // Check to see if the mouse wheel locker is not in place
                if (!table.config.plugins.sticky.mouseWheelLock) {

                    scrollTop = evt.target.scrollTop;

                    for (i = 0, len = table.obj.$stickyCells.length; i < len; i++) {

                        table.obj.$stickyCells[i].style.transform = 'translate3d(0px, ' + scrollTop + 'px,0px)';
                    }

                    // Update the last scroll for mousewheel
                    table.config.plugins.sticky.lastScrollPos = scrollTop;
                }
            }

            if ((!table.dataStore.hasOwnProperty('optimize') || table.dataStore.optimize) && !table.dataStore.emptyTable && table.dataStore.body.loadMore) {

                clearTimeout(table.config.plugins.lazyRecords.timer);

                table.config.plugins.lazyRecords.timer = setTimeout(function() {

                    var pos = (table.obj.$viewWrapper[0].scrollTop + table.obj.$viewWrapper[0].clientHeight);

                    if ((pos + 300) >= table.obj.$viewWrapper[0].scrollHeight) {
                        table.requestMoreRecords();
                    }

                }, 500);
            }

        }
    };

    _events.moveRow = function _move_row(evt, table, direction) {

        var $targetButton = $(evt.target);
        var $targetRow = $targetButton.parents('tr').eq(0);

        if (direction === "up") {

            var $previousRow = $targetRow.prev();

            if ($previousRow.length) {
                $targetRow.remove();
                $targetRow.insertBefore($previousRow);
            }

        }
        else {

            var $nextRow = $targetRow.next();

            if ($nextRow.length) {
                $targetRow.remove();
                $targetRow.insertAfter($nextRow);
            }
        }

        // Now we need to update the order-hidden input
        var keyValues = _priv.getTableKeys(table);

        table.config.hiddenInputs.$orderIndex.val(keyValues.join(','));
    };

    // ====================
    // Prototypes Functions
    // ====================

    // Exposes a public method for changing the table height
    _prototype.resize = function _resize_public(height, cb) {

        _priv.resize(this, height, true);

        if (typeof cb === "function") {

            cb();
        }
    };

    // Exposes the base reflow function for other modules or developers to call
    _prototype.reflow = function _reflow(table, source, changeHeight, cb) {

        if (table === undefined) {
            table = this;
        }
        else if (typeof table === "string") {

            cb = changeHeight;
            changeHeight = source;
            source = table;
            table = this;

        }
        else if (typeof table === "function") {

            cb = changeHeight;
            changeHeight = source;
            source = "Undefined reflow";
            table = this;
        }

        if (typeof table === "object" && typeof source === "function") {

            cb = changeHeight;
            changeHeight = source;
            source = "Undefined reflow";
            table = this;
        }

        _priv.reflow(table, source, changeHeight);

        if (typeof cb === "function") {

            cb(table);
        }
    };

    // Expose a method to change the number of rows that gets returns
    _prototype.resizeOffset = function _resize_offset(offset) {

        // Only attempt to set the value if resize is enabled.
        if (this.config.setup.resize && !isNaN(offset)) {

            this.config.plugins.resize.rowOffset = offset;
        }
    };

    // Function is exposed to other plugins which will re-render the table body upon request.
    _prototype.renderBody = function _render_body() {

        table = this;

        // Check to see if there is a start number associated with the table, and reset it on re-renders
        table.dataStore.body.start = 0;
        table.config.lastScrollPos = 0;
        table.dataStore.body.loadMore = true;

        // Rerender the table
        render.section(null, table.dataStore, 'return', function (html) {

            if (html && html !== undefined && html !== null) {

                // Get reference to the new body
                var newBody = html.querySelector('tbody');

                // Remove all the currrent children in the table
                table.obj.$tbody.find('tr:not(.cui-ui-only)').remove();

                // Add the rows for newBody
                while (newBody.firstChild) {

                    // Get a copy of the row
                    var row = newBody.firstChild;

                    // Remove the row just in case
                    newBody.removeChild(newBody.firstChild);

                    // Add the copy of the row to the table
                    $(row).appendTo(table.obj.$tbody);

                    table.obj.$tbody = table.$self.find('tbody');

                }

                table.$self.trigger('table.rebuilt');

            }
            else {

                console.error('New version of filtered table failed to return.');
                return false;
            }

        });
    };

    _prototype.requestMoreRecords = function _request_more_records () {

        var table = this;
        var recordDelay;

        if (table.dataStore.body.loadMore) {

            // Check to see if we really need to do something
            fastdom.measure(function () {

                var $bodyRows = table.obj.$tbody.children('tr:not(.cui-ui-only)');
                var bodyRowCount = $bodyRows.length;
                var $lastCreatedRow = $($bodyRows[bodyRowCount - 1]);
                var lastRowIndex = parseInt($lastCreatedRow.attr('data-row-index'));
                var totalKnownRows = table.dataStore.body.rows.length;

                // Check to see if the last known rendered index is less then the total number of rows we know exist.
                if (lastRowIndex + 1 < totalKnownRows) {

                    fastdom.mutate(function () {

                        // This time start with the last known index
                        table.dataStore.body.rowStart = lastRowIndex + 1;

                        // Go render the next set of data
                        render.section(null, table.dataStore, 'return', function (html) {
                            if (html !== undefined) {
                                // Get reference to the new body
                                var newBody = html.childNodes[0].querySelector('tbody');
                                var rowCount = html.childNodes[0].querySelectorAll('tbody > tr').length;

                                if (rowCount < 25) {
                                    table.dataStore.body.loadMore = false;
                                }

                                // // Add the rows for newBody
                                fastdom.mutate(function () {
                                    while (newBody.firstChild) {
                                        // Get a copy of the row
                                        var row = newBody.firstChild;

                                        // Remove the row just in case
                                        newBody.removeChild(newBody.firstChild);

                                        // Add the copy of the row to the table
                                        $(row).appendTo(table.obj.$tbody);
                                    }

                                    fastdom.measure(function() {

                                        _priv.setScrollInfo(table);

                                        table.responseiveReflow();

                                        //_priv.reflow(table, 'scroll', false);
                                    });

                                });
                            }
                            else {
                                clearTimeout(recordDelay);

                                console.error('New version of filtered table failed to return.');
                                return false;
                            }
                        });
                    });
                }
            });
        }
    };

    _prototype.setScrollInfo = function _set_scroll_info () {

        var table = this;

        _priv.setScrollInfo(table);
    };

    _prototype.resetLoadRecord = function _reset_load_record() {

        var table = this;

        if (table.dataStore.optimize && table.dataStore.body.loadMore) {

            table.dataStore.body.rowStart = 0;
            table.dataStore.body.loadMore = true;

        }
    };

    _prototype.removeHeight = function _remove_height() {

        var table = this;

        table.obj.$viewWrapper[0].style.height = "";
    };

    // ===============
    // Setup Functions
    // ===============

    // For the base table requires of Empire (sticky headers or the resizer) to work additional wrapper layers are needed as well as a place to put client side controls.
    _setup.base = function _base (table, next) {

        // Add a default scroll position to hold onto incase we have data that loads on scroll.
        table.config.lastScrollPos = 0;

        // First check to see the table has the required structure. First get the parent
        var $parent = table.$self.parent();

        // First look for view wrapper, if misisng adde it and reset the parent;
        if (!$parent.hasClass('view-wrapper')) {
            table.$self.wrap($('<div/>', {'class':'view-wrapper'}));

            $parent = table.$self.parent();
        }

        // Save off the scrolling wrapper.
        table.obj.$viewWrapper = $parent;

        $parent = table.obj.$viewWrapper.parent();

        // Check to see if the outer wrapper exists
        if (!$parent.hasClass('emp-table-wrapper')) {

            table.obj.$viewWrapper.wrap($('<div/>', {'class':'emp-table-wrapper'}));

            $parent = table.obj.$viewWrapper.parent();
        }

        table.obj.$tableWrapper = $parent;

        // Check to see if the table-control row is already beeing added.
        var $controlRowPrev = table.obj.$viewWrapper.prev();

        if (!$controlRowPrev.hasClass('table-control-row')) {

            $('<div/>', {'class': 'table-control-row'}).insertBefore(table.obj.$viewWrapper);

            $controlRowPrev = table.obj.$viewWrapper.prev();
        }

        table.obj.$controlRow = $controlRowPrev;

        if (table.dataStore.paging) {

            $('<div/>', {'class': CLASSES.paging}).insertAfter(table.obj.$viewWrapper);

            table.obj.$footerControlRow = table.obj.$viewWrapper.next();
        }


        table.config.controls = {
            order: [],
            elems: {},
        };

        var stickyOption = table.$self.attr('data-sticky');

        if (stickyOption === "false") {

            table.config.setup.sticky = false;
        }

        // Now setup the actual sticky headers.
        if (table.config.setup.sticky) {

            // Setup the sticky header
            _priv.sticky(table);

            // Update the table header reference
            table.obj.$thead = table.$self.children('thead');

            // Add new object reference for sticky cells
            table.obj.$stickyCells = table.obj.$thead.find('.sticky-cell');

            // Lastly setup reflow that should occure on window resize
            $(window).on('resize', null, {table: table}, function (evt) {
                var table = evt.data.table;
                var resizeTimer;

                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function (e) {
                    _priv.reflow(e, table, false);
                }, 60);
            });

            // Setup hook to reflow table when font-size changes via preferences.
            $(window).on('font-change-slider', null, { table: table }, function (evt) {
                var table = evt.data.table;
                var resizeTimer;

                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function (e) {
                    _priv.reflow(e, table, false);
                }, 60);
            });

            table.obj.$viewWrapper.on('scroll', function(evt) {

                _events.scroll(evt, table, false);
            });

            table.obj.$viewWrapper.on('mousewheel', function(evt) {

                _events.scroll(evt, table, true);

                //Check if the table is scrollable, if not pass the event to the browser for page scrolling.
                if(table.obj.$viewWrapper[0].scrollHeight === table.obj.$viewWrapper[0].clientHeight){
                    return true;
                }
                else{
                    return false;
                }
            });

            table.obj.$viewWrapper.on('mouseenter', function(evt) {

                _priv.setScrollInfo(table);
            });
        }

        if (!table.config.empty && table.dataStore.body && table.dataStore.body.rows) {

            var resizeOption = table.$self.attr('data-resize');

            if (resizeOption === "false") {

                table.config.setup.resize = false;
            }

        }
        else {

            table.config.setup.resize = false;
        }

        // Next check and setup resize function
        if (table.config.setup.resize) {

            table.obj.$resizeControl = table.obj.$tableWrapper.find('.emp-icon-table-resizer');

            table.obj.$resizeControl.on('click', function() {
                _priv.resize(table, undefined, true, false);
            });

            // Check for resize option
            var resizeHeight = table.$self.attr('data-resizer-height');

            if (resizeHeight !== undefined) {

                // Check to make sure the resize high is a number
                if (!isNaN(resizeHeight)) {

                    // Append the new default height
                    table.config.plugins.resize.heights.unshift(parseFloat(resizeHeight));
                }
            }

            // Check for the resize option
            var resizeThreshold = table.$self.attr('data-resizer-threshold');

            if (resizeThreshold !== undefined) {

                // Check to make sure the resize high is a number
                if (!isNaN(resizeThreshold)) {

                    // Append the new default height
                    table.config.plugins.resize.threshold = parseInt(resizeHeight);
                }
            }

            if (!table.config.optimize) {

                if (table.dataStore.body.rows.length > 10) {

                    _priv.resize(table, undefined, true, true);
                }

            }
            else {

                if (!table.config.plugins.resize.manualHeight) {

                    // Resize the inital table to defaults
                    if (table.dataStore.body.rows.length > 10) {

                        _priv.resize(table, undefined, true, true);
                    }
                }
            }
        }

        if (table.elem.classList.contains('emp-order-table')) {

            table.config.type = "order";

            table.obj.$tbody.on('click', '.emp-icon-order-table-move-up', function (evt) {
                _events.moveRow(evt, table, "up");
            });

            table.obj.$tbody.on('click', '.emp-icon-order-table-move-down', function (evt) {
                _events.moveRow(evt, table, "down");
            });

            table.obj.$tbody.on('click', '.emp-icon-delete', function (evt) {

                emp.confirm(evt, "Are you sure you want to delete this record?", function() {

                    $row = $(evt.target).parents('tr').eq(0);

                    $row.remove();

                    var keyValues = _priv.getTableKeys(table);

                    table.config.hiddenInputs.$orderIndex.val(keyValues.join(','));

                });

            });

        }

        next();
    };

    return {
        _priv: _priv,
        _inits: _inits,
        _setup: _setup,
        _events: _events,
        _defaults: _defaults,
        _prototype: _prototype
    };
});

define('tableSort',['render'], function (render) {

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        'setup': {
            'sort': true
        },
        'plugins': {
            'sort': {}
        }
    };

    // =================
    // Private Functions
    // =================

    // Function that will preform an alpha based sort
    _priv.alphaSort = function _alpha_sort(table, num, dir) {

        function compare(a, b) {
            // Pull the col values out and make sure we have the purest values possible.
            var colA = a.columns[num];
            var colB = b.columns[num];
            var textA = '';
            var textB = '';

            // Find the text value of each column, starting with the `.contents` property before falling back to `.text`
            if (colA.contents && colA.contents.length !== 0) {
                // Concat the texts for all contents
                colA.contents.forEach(function (content) {
                    if (content.text) {
                        textA += content.text;
                    }
                    else if (content.template === "field") {

                        if (content.type !== "textarea") {

                            textA += content.input.attributes.value;
                        }
                        else {

                            textA += content.input.text;
                        }
                    }
                });
            }
            else if (colA.text) {

                textA = colA.text;
            }

            if (colB.contents && colB.contents.length !== 0) {
                // Concat the texts for all contents
                colB.contents.forEach(function (content) {
                    if (content.text) {
                        textB += content.text;
                    }
                    else if (content.template === "field") {

                        if (content.type !== "textarea") {

                            textB += content.input.attributes.value;
                        }
                        else {

                            textB += content.input.text;
                        }
                    }
                });
            }
            else if (colB.text) {

                textB = colB.text;
            }

            // Compare the two texts
            textA = textA.trim().toLowerCase();
            textB = textB.trim().toLowerCase();

            if (dir === 'ASC') {
                if (textA < textB) {
                    return -1;
                }
                else if (textA > textB) {
                    return 1;
                }
            }
            else {
                if (textA < textB) {
                    return 1;
                }
                else if (textA > textB) {
                    return -1;
                }
            }

            return 0;
        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    // Function that will preform an date based sort
    _priv.dateSort = function _date_sort(table, num, dir) {
        function compare(a, b) {
            var colA = a.columns[num];
            var colB = b.columns[num];
            var dateA = null;
            var dateB = null;

            if (colA.contents && colA.contents.length !== 0) {
                // Concat the texts for all contents
                colA.contents.forEach(function (content) {
                    if (content.text) {
                        dateA += content.text;
                    }
                });
            }
            else if (colA.text) {
                dateA = colA.text;
            }

            if (colB.contents && colB.contents.length !== 0) {
                // Concat the texts for all contents
                colB.contents.forEach(function (content) {
                    if (content.text) {
                        dateB += content.text;
                    }
                });
            }
            else if (colB.text) {
                dateB = colB.text;
            }

            // Convert col A
            try {
                if (dateA === '') {
                    colA = new Date(-8640000000000000);
                }
                else if (dateA.indexOf('-') !== -1) {
                    // Pull the starting (first period date) out of the range
                    colA = dateA.split('-')[0].trim();

                    colA = new Date(colA);
                }
                //TODO: if the column does not have a `.text` property but does have `.contents`, we should look through the `contents` array and concat those values to create the text. Use case: a link whose text is a date. Be sure to repeat this below for `colB`.
                else {
                    colA = new Date(dateA);
                }
            }
            catch (e) {
                colA = new Date(-8640000000000000);
            }

            // Convert col B
            try {
                if (dateB === '') {
                    colB = new Date(-8640000000000000);
                }
                else if (dateB.indexOf('-') !== -1) {
                    // Pull the starting (first period date) out of the range
                    colB = dateB.split('-')[0].trim();
                    colB = new Date(colB);
                }
                else {
                    colB = new Date(dateB);
                }
            }
            catch (e) {
                colB = new Date(-8640000000000000);
            }

            if (dir === 'ASC') {
                if (colA > colB) {
                    return (1);
                }

                if (colA < colB) {
                    return (-1);
                }

            }
            else {
                if (colA > colB) {
                    return (-1);
                }

                if (colA < colB) {
                    return (1);
                }
            }

            return 0;
        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    // Function that will sort numeric values
    _priv.numericSort = function _numeric_sort(table, num, dir) {

        function compare(a, b) {
            // Pull the col values out and make sure we have the purest values possible.
            var colA = a.columns[num];
            var colB = b.columns[num];
            var numA = '';
            var numB = '';

            if (colA.contents && colA.contents.length !== 0) {
                // Concat the texts for all contents
                colA.contents.forEach(function (content) {
                    if (content.template === 'field') {

                        if (content.input.attributes.value) {
                            numA += content.input.attributes.value.replace(/[^0-9.-]/g, '');
                        }
                    }
                    else if (content.text) {
                        numA += content.text.replace(/[^0-9.-]/g, '');
                    }
                });
            }
            else if (colA.text) {
                numA = colA.text.replace(/[^0-9.-]/g, '');
            }

            if (colB.contents && colB.contents.length) {
                // Concat the texts for all contents
                colB.contents.forEach(function (content) {
                    if (content.template === 'field') {

                        if (content.input.attributes.value) {
                            numB += content.input.attributes.value.replace(/[^0-9.-]/g, '');
                        }
                    }
                    else if (content.text) {
                        numB += content.text.replace(/[^0-9.-]/g, '');
                    }
                });
            }
            else if (colB.text) {
                numB = colB.text.replace(/[^0-9.-]/g, '');
            }

            if ((numA !== undefined) && (numA !== '') && (numB !== undefined) && (numB !== '')) {
                if (!isNaN(parseFloat(numA)) && !isNaN(parseFloat(numB))) {
                    numA = parseFloat(numA);
                    numB = parseFloat(numB);

                    if (dir === 'ASC') {
                        return numA - numB;
                    }
                    else {
                        return numB - numA;
                    }
                }
                else if (isNaN(parseFloat(numA)) && isNaN(parseFloat(numB))) {
                    if (dir === 'ASC') {
                        if (numA > numB) {
                            return 1;
                        }

                        if (numA === numB) {
                            return 0;
                        }
                    }
                    else {
                        if (numA > numB) {
                            return 0;
                        }

                        if (numA === numB) {
                            return 1;
                        }
                    }
                }
                else if (isNaN(parseFloat(numB))) {
                    if (dir === 'ASC') {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }

                if (dir === 'ASC') {
                    return -1;
                }
                else {
                    return 1;
                }
            }
            else {
                if (dir === 'ASC') {
                    if (numA < numB) { return -1; }
                    if (numA > numB) { return 1; }
                }
                else {
                    if (numA < numB) { return 1; }
                    if (numA > numB) { return -1; }
                }

                return 0;
            }
        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    _priv.iconSort = function _icon_sort(table, num, dir) {

        function compare(a, b) {

            var colA = a.columns[num];
            var colB = b.columns[num];

            if (colA.contents && colA.contents.length > 0) {

                colA = colA.contents[0];

                if (colA.template && colA.template === "icon") {

                    if (colA.sortvalue) {

                        colA = colA.sortvalue;

                    }
                    else if (colA.attributes['data-sortvalue']) {

                        colA = (!isNaN(colA.attributes['data-sortvalue'])) ? parseInt(colA.attributes['data-sortvalue']) : colA.attributes['data-sortvalue'];
                    }
                    else {

                        journal.log({ type: 'warn', owner: 'UI', module: 'table', submodule: 'sort', func: 'iconSort-compare' }, 'Icon does not have the data-sortvalue attribute. Defaulting to -1');

                        colA = -1;
                    }
                }
                else {

                    colA = -1;
                }

            }
            else {

                colA = -1;
            }

            if (colB.contents && colB.contents.length > 0) {

                colB = colB.contents[0];

                if (colB.template && colB.template === "icon") {

                    if (colB.sortvalue) {

                        colB = colB.sortvalue;

                    }
                    else if (colB.attributes['data-sortvalue']) {

                        colB = (!isNaN(colB.attributes['data-sortvalue'])) ? parseInt(colB.attributes['data-sortvalue']) : colB.attributes['data-sortvalue'];
                    }
                    else {

                        journal.log({ type: 'warn', owner: 'UI', module: 'table', submodule: 'sort', func: 'iconSort-compare' }, 'Icon does not have the data-sortvalue attribute. Defaulting to -1');

                        colB = -1;
                    }
                }
                else {

                    colB = -1;
                }

            }
            else {

                colB = -1;
            }


            var numA = colA;
            var numB = colB;

            if (dir === 'ASC') {
                return numA - numB;
            }
            else {
                return numB - numA;
            }

        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    // Function that will sort the score component values
    _priv.scoreSort = function _score_sort(table, num, dir) {
        function compare(a, b) {
            var colA = a.columns[num];
            var colB = b.columns[num];
            var numA = '';
            var numB = '';

            if (colA.contents) {
                if (colA.contents[0].percentage) {
                    numA = colA.contents[0].percentage;
                }
                else if (colA.contents[0].percentage !== undefined) {
                    numA = colA.contents[0].percentage;
                }
            }

            if (colB.contents) {
                if (colB.contents[0].percentage) {
                    numB = colB.contents[0].percentage;
                }
                else if (colB.contents[0].percentage !== undefined) {
                    numB = colB.contents[0].percentage;
                }
            }

            if ((numA !== undefined) && (numA !== '') && (numB !== undefined) && (numB !== '')) {
                if (!isNaN(parseFloat(numA)) && !isNaN(parseFloat(numB))) {
                    numA = parseFloat(numA);
                    numB = parseFloat(numB);

                    if (dir === 'ASC') {
                        return numA - numB;
                    }
                    else {
                        return numB - numA;
                    }
                }
                else if (isNaN(parseFloat(numA)) && isNaN(parseFloat(numB))) {

                    if (dir === 'ASC') {
                        if (numA > numB) {
                            return 1;
                        }

                        if (numA === numB) {
                            return 0;
                        }
                    }
                    else {
                        if (numA > numB) {
                            return 0;
                        }

                        if (numA === numB) {
                            return 1;
                        }
                    }
                }
                else if (isNaN(parseFloat(numA))) {
                    if (dir === 'ASC') {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (isNaN(parseFloat(numB))) {
                    if (dir === 'ASC') {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }

                if (dir === 'ASC') {
                    return -1;
                }
                else {
                    return 1;
                }
            }
            else {

                if (dir === 'ASC') {
                    if (numA < numB) { return -1; }
                    if (numA > numB) { return 1; }

                    if (isNaN(parseFloat(numA))) { return -1; }
                    if (isNaN(parseFloat(numB))) { return 1; }

                }
                else {
                    if (numA < numB) { return 1; }
                    if (numA > numB) { return -1; }

                    if (isNaN(parseFloat(numA))) { return 1; }
                    if (isNaN(parseFloat(numB))) { return -1; }
                }

                return 0;
            }
        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    // Function that will sort control values
    _priv.controlSort = function _control_sort(table, num, dir) {
        var booleanSort = false;

        function compare(a, b) {
            var colA = a.columns[num];
            var colB = b.columns[num];
            var controlA = '';
            var controlB = '';

            // Column A
            if (colA.contents) {
                // Check to see if the input is a checkbox
                if (colA.contents[0].type === 'checkbox' || colA.contents[0].type === 'radio') {
                    // Set this to true if bools are found
                    booleanSort = true;

                    if (colA.contents[0].input.attributes.hasOwnProperty('checked')) {

                        if (colA.contents[0].input.attributes.value === "true" || colA.contents[0].input.attributes.value === "false") {

                            if (colA.contents[0].input.attributes.value === "true") {

                                controlA = true;
                            }
                            else {
                                controlA = false;
                            }

                        }
                        else {

                            if (typeof colA.contents[0].input.attributes.checked === "boolean") {

                                if (colA.contents[0].input.attributes.checked) {

                                    controlA = true;
                                }
                                else if (!colA.contents[0].input.attributes.checked) {

                                    controlA = false;
                                }
                                else {

                                    controlA = null;
                                }

                            }
                            else if (colA.contents[0].input.attributes.checked === "true") {

                                controlA = true;
                            }
                            else if (colA.contents[0].input.attributes.checked === "false") {

                                controlA = false;
                            }
                            else {

                                controlA = null;
                            }
                        }

                    }
                    else {

                        controlA = false;
                    }
                }
                else {

                    if (colA.contents[0].input.attributes.value) {

                        controlA = colA.contents[0].input.attributes.value;
                    }
                    else {
                        controlA = '';
                    }
                }
            }
            else if (colA.text) {

                controlA = '';
            }

            if (colB.contents) {
                // Check to see if the input is a checkbox
                if (colB.contents[0].type === 'checkbox' || colB.contents[0].type === 'radio') {
                    // Set this to true if bools are found
                    booleanSort = true;

                    if (colB.contents[0].input.attributes.hasOwnProperty('checked')) {

                        if (colB.contents[0].input.attributes.value === "true" || colB.contents[0].input.attributes.value === "false") {

                            if (colB.contents[0].input.attributes.value === "true") {

                                controlB = true;
                            }
                            else {
                                controlB = false;
                            }

                        }
                        else {

                            if (typeof colB.contents[0].input.attributes.checked === "boolean") {

                                if (colB.contents[0].input.attributes.checked) {

                                    controlB = true;
                                }
                                else if (!colB.contents[0].input.attributes.checked) {

                                    controlB = false;
                                }
                                else {

                                    controlB = null;
                                }

                            }
                            else if (colB.contents[0].input.attributes.checked === "true") {

                                controlB = true;
                            }
                            else if (colB.contents[0].input.attributes.checked === "false") {

                                controlB = false;
                            }
                            else {

                                controlB = null;
                            }
                        }

                    }
                    else {

                        controlB = false;
                    }
                }
                else {
                    if (colB.contents[0].input.attributes.value) {

                        controlB = colB.contents[0].input.attributes.value;
                    }
                    else {
                        controlB = '';
                    }
                }
            }
            else if (colB.text) {
                controlB = '';
            }

            // Sort the columns
            if (dir === 'ASC') {
                if (booleanSort) {

                    if (typeof controlA !== "boolean") {
                        controlA = null;
                    }

                    if (typeof controlB !== "boolean") {
                        controlB = null;
                    }

                    // return (controlA === controlB) ? 0 : controlA ? -1 : 1;

                    if ((controlA === null) && (controlB === null))
                        return 0;
                    else if (controlA === null)
                        return 1;
                    else if (controlB === null)
                        return -1;

                    return (controlA === controlB) ? 0 : controlA ? -1 : 1;

                }
                else {

                    if (controlA < controlB) {
                        return -1;
                    }
                    else if (controlA > controlB) {
                        return 1;
                    }

                    return 0;
                }
            }
            else {
                if (booleanSort) {

                    if (typeof controlA !== "boolean") {
                        controlA = null;
                    }

                    if (typeof controlB !== "boolean") {
                        controlB = null;
                    }

                    // return (controlA === controlB) ? -1 : controlA ? 1 : 0;

                    if ((controlA === null) && (controlB === null))
                        return 0;
                    else if (controlA === null)
                        return -1;
                    else if (controlB === null)
                        return 1;

                    return (controlA === controlB) ? 0 : controlA ? 1 : -1;

                }
                else {

                    if (controlA < controlB) {
                        return 1;
                    }
                    else if (controlA > controlB) {
                        return -1;
                    }

                    return 0;
                }
            }
        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    _priv.ratingSort = function _rating_sort(table, num, dir) {

        function compare(a, b) {

            // Pull the col values out and make sure we have the purest values possible.
            var colA = a.columns[num];
            var colB = b.columns[num];
            var numA = '';
            var numB = '';

            if (colA.contents && colA.contents[0].type === "rating") {

                colA = colA.contents[0].parts.hidden.input.attributes.value;

                if (colA !== undefined) {

                    numA = colA.replace(/[^0-9.-]/g, '');

                    if (numA === "") {

                        numA = 0;
                    }
                }
                else {

                    numA = 0;
                }
            }

            if (colB.contents && colB.contents[0].type === "rating") {

                colB = colB.contents[0].parts.hidden.input.attributes.value;

                if (colB !== undefined) {

                    numB = colB.replace(/[^0-9.-]/g, '');

                    if (numB === "") {

                        numB = 0;
                    }
                }
                else {

                    numB = 0;
                }

            }

            if ((numA !== undefined) && (numA !== '') && (numB !== undefined) && (numB !== '')) {
                if (!isNaN(parseFloat(numA)) && !isNaN(parseFloat(numB))) {
                    numA = parseFloat(numA);
                    numB = parseFloat(numB);

                    if (dir === 'ASC') {
                        return numA - numB;
                    }
                    else {
                        return numB - numA;
                    }
                }
                else if (isNaN(parseFloat(numA)) && isNaN(parseFloat(numB))) {
                    if (dir === 'ASC') {
                        if (numA > numB) {
                            return 1;
                        }

                        if (numA === numB) {
                            return 0;
                        }
                    }
                    else {
                        if (numA > numB) {
                            return 0;
                        }

                        if (numA === numB) {
                            return 1;
                        }
                    }
                }
                else if (isNaN(parseFloat(numB))) {
                    if (dir === 'ASC') {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }

                if (dir === 'ASC') {
                    return -1;
                }
                else {
                    return 1;
                }
            }
            else {
                if (dir === 'ASC') {
                    if (numA < numB) { return -1; }
                    if (numA > numB) { return 1; }
                }
                else {
                    if (numA < numB) { return 1; }
                    if (numA > numB) { return -1; }
                }

                return 0;
            }
        }

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    _priv.timeSort = function _time_sort(table, num, dir) {

        function compare(a, b) {

            // Pull the col values out and make sure we have the purest values possible.
            var timeA = _priv.getValue(a.columns[num]);
            var origA = _priv.getValue(a.columns[num]);
            var timeB = _priv.getValue(b.columns[num]);
            var origB = _priv.getValue(b.columns[num]);

            if (timeA && timeA.length) {
                timeA = _priv.timeCleanup(timeA);
            }
            else {

                // timeA = new Date();
                // timeA.setYear('1970');
                // timeA.setMonth('0');
                // timeA.setDate('1');

                timeA = new Date(-8640000000000000);
            }

            timeA = timeA.getTime() / 1000;

            if (timeB && timeB.length) {
                timeB = _priv.timeCleanup(timeB);
            }
            else {
                // timeB = new Date();
                // timeB.setYear('1970');
                // timeB.setMonth('0');
                // timeB.setDate('1');
                timeB = new Date(-8640000000000000);
            }

            timeB = timeB.getTime() / 1000;

            if (dir === 'ASC') {
                if (timeA > timeB) {
                    return (1);
                }

                if (timeA < timeB) {
                    return (-1);
                }

            }
            else {
                if (timeA > timeB) {
                    return (-1);
                }

                if (timeA < timeB) {
                    return (1);
                }
            }

            return 0;
        }

        var testDate = new Date(-8640000000000000);

        var results = table.dataStore.body.rows.sort(compare);

        // Create a new request object
        var newObj = $.extend(true, {}, table.dataStore);

        // Append the sorted rows
        newObj.body.rows = results;

        return newObj;
    };

    _priv.timeCleanup = function _time_cleanup(value) {

        value = value.trim();

        var date = new Date();
        date.setYear('1970');
        date.setMonth('0');
        date.setDate('1');

        if (value && value.length) {

            // check for AM/PM
            var timeDesg = value.split(' ');
            var hasTimeDesg = false;

            date.setYear('1970');
            date.setMonth('0');
            date.setDate('1');

            var isDay = true;

            // Check to see if the time designation exists
            if (timeDesg.length === 2) {

                hasTimeDesg = true;

                if (timeDesg[1] === "PM") {
                    isDay = false;
                }
            }

            // Split the time
            var time = timeDesg[0].split(':');

            var origH = time[0];

            if (hasTimeDesg && !isDay) {

                origH = parseInt(origH);

                origH += 12;

                origH = origH.toString();
            }

            date.setHours(origH);

            var origM = time[1];

            date.setMinutes(origM);

            var origS = (time[2] && time[2].length >= 1) ? time[2] : "00";

            date.setSeconds(origS);

            var origMS = (time[3] && time[3].length >= 1) ? time[3] : "000";

            date.setMilliseconds(origMS);

            return date;
        }
        else {
            date = new Date(-8640000000000000);
        }

        return date;
    };

    _priv.getValue = function _get_value(colObj) {

        // Check for just a text value
        if (colObj.text && (!colObj.contents || colObj.contents.length === 0)) {

            return colObj.text;
        }
        else {

        }

    };

    // ===============
    // Event Functions
    // ===============

    _events.sortColumn = function _sort_column(evt, table, $column) {

        if (table.dataStore.body && table.dataStore.body.rows && table.dataStore.body.rows.length) {

            table.resetLoadRecord();

            // Check to see if an event is present.
            if ($column === undefined) {
                $column = table;
                table = evt;
                evt = undefined;
            }

            // Get the type of sort that needs to be preformed, or default to alpha
            var columnDataType = ($column.attr('data-sort') !== undefined) ? $column.attr('data-sort') : $column.attr('data-type');
            var columnType = $column.attr('data-columntype');

            var num = false;

            if ($column.attr('data-col-index')) {
                num = parseInt($column.attr('data-col-index'));
            }
            else {
                num = (table.dataStore.selectable) ? $column.index() - 1 : $column.index();
            }

            var sortType = table.dataStore.head.rows[0].columns[num].sortable;

            if (typeof sortType === "boolean" && sortType) {

                // Go out and find all the currently sorted columns
                var alreadySorted = table.obj.$thead.find('[data-sortdir]');

                // Loop through and remove all already handled sort attributes
                alreadySorted.each(function (i) {
                    var $col = $(this);

                    var asNum = false;

                    if ($col.attr('data-col-index')) {
                        asNum = parseInt($col.attr('data-col-index'));
                    }
                    else {
                        asNum = (table.dataStore.selectable) ? $col.index() - 1 : $col.index();
                    }

                    // Remove the already sorted attribute
                    if (asNum !== num) {
                        $col.removeAttr('data-sortdir');
                    }
                });

                var dir = $column.attr('data-sortdir');

                // If the sort direction column type is not a string, or it is but not the value of ASC ore DESC, init like its the first time
                if (typeof dir !== 'string' || (dir !== 'ASC' && dir !== 'DESC')) {
                    $column.attr('data-sortdir', 'ASC');
                    dir = 'ASC';
                }
                else if (dir === 'ASC') {
                    $column.attr('data-sortdir', 'DESC');
                    dir = 'DESC';
                }
                else {
                    $column.attr('data-sortdir', 'ASC');
                    dir = 'ASC';
                }

                var sortedTable = false;

                switch (columnDataType) {

                    case 'alpha':
                    case 'alphaNumeric':
                    case 'link':
                    case 'notifier':

                        // Hook for imporper tag detection because of framework changes
                        if (columnType === "score") {

                            table.dataStore = _priv.scoreSort(table, num, dir);
                        }
                        else if (columnType === "rating") {

                            table.dataStore = _priv.ratingSort(table, num, dir);
                        }
                        else if (columnType === "icon") {

                            table.dataStore = _priv.iconSort(table, num, dir);
                        }
                        else if (columnType === "control") {

                            table.dataStore = _priv.controlSort(table, num, dir);
                        }
                        else {

                            table.dataStore = _priv.alphaSort(table, num, dir);
                        }

                        sortedTable = true;

                        break;

                    case 'date':
                    case 'dateTime':
                    case 'datetime':
                        table.dataStore = _priv.dateSort(table, num, dir);
                        sortedTable = true;

                        break;

                    case 'time':

                        table.dataStore = _priv.timeSort(table, num, dir);
                        sortedTable = true;

                        break;

                    case 'numeric':
                    case 'currency':

                        // Hook for score tag
                        if (columnType === "score") {

                            table.dataStore = _priv.scoreSort(table, num, dir);
                        }
                        else if (columnType === "rating") {

                            table.dataStore = _priv.ratingSort(table, num, dir);
                        }
                        else {

                            table.dataStore = _priv.numericSort(table, num, dir);
                        }

                        sortedTable = true;

                        break;

                    case 'icon':
                        table.dataStore = _priv.iconSort(table, num, dir);
                        sortedTable = true;

                        break;

                    case 'rating':
                        table.dataStore = _priv.ratingSort(table, num, dir);
                        sortedTable = true;
                        break;

                    case 'score':
                        table.dataStore = _priv.scoreSort(table, num, dir);
                        sortedTable = true;

                        break;

                    case 'icon':
                        table.dataStore = _priv.iconSort(table, num, dir);
                        sortedTable = true;

                        break;

                    case 'control':
                        table.dataStore = _priv.controlSort(table, num, dir);
                        sortedTable = true;

                        break;

                    default:
                        console.error('Unkwown sort type requested.');
                        break;
                }

                // Check to see if a sort object was returned.
                if (sortedTable !== false) {

                    // Mark the column as sorted
                    $column.attr('data-sortdir', dir);

                    // Re-render the table body
                    table.renderBody();

                    table.obj.$viewWrapper.scrollTop(0);

                    table.$self.trigger('sort.table');
                }
            }
            else if (typeof sortType === "string") {

                console.log("We have a server side sort.");

            }
            else {

                console.log("not a sortable column");
            }

        }
        else {

            journal.log({ type: 'info', owner: 'UI', module: 'table', submodule: 'sort', func: 'sortColumn' }, 'Sorting function blocked because table does not have a sortable body.');
        }

    };

    // ===============
    // Setup Functions
    // ===============

    _setup.sort = function _sort_setup(table, next) {

        if (!table.config.empty) {

            // Check for sort HTML option
            var sortCheck = table.$self.attr('data-sort');

            if (sortCheck === "false") {
                table.config.setup.sort = false;
            }

            if (table.config.setup.sort) {

                var sortColumns = table.obj.$thead.children('tr').eq(0).children('th.emp-sortable');

                if (sortColumns.length !== 0) {
                    sortColumns.on('click', function (evt) {
                        var $column = $(this);


                        // Verify we are on the th element
                        if ($column[0].nodeName !== 'TH') {
                            $column = $column.parents('th').eq(0);
                        }

                        _events.sortColumn(evt, table, $column);
                    });
                }
            }
        }

        next();
    };

    return {
        _priv: _priv,
        _setup: _setup,
        _defaults: _defaults,
    };
});

define('tableSelection',[], function () {

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        setup: {
            selection: true,
        },
        plugins: {
            selection: {},
        },
    };

    var CLASSES = {
        highlight: 'emp-highlight-row',
        checked: 'emp-checked-row',
        allCheckRadio: '.table-control-col input[type="checkbox"], .table-control-col input[type="radio"]'
    };

    // =================
    // Private Functions
    // =================

    // Get Functions
    // =============

    // Function gathers a list of checked indexes from the dataStore and returns an array
    _priv.getCheckedIndex = function _get_checked_index(table) {

        var checkedIndex = [];

        if (table.dataStore.selectable) {

            for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

                if (table.dataStore.body.rows[i].selection && table.dataStore.body.rows[i].selection.checked) {

                    checkedIndex.push(table.dataStore.body.rows[i].key);

                    if (table.dataStore.selectionType === "single") {

                        break;
                    }
                }

            }

            return checkedIndex;
        }
        else {

            journal.log({type: 'warn', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.getCheckedIndex'}, 'Table: ' + table.id + ' is not selectable and will never have checked indexes');

            return false;
        }
    };

    _priv.getCheckedRow = function _get_checked_row(table) {

        var rowIndex = [];

        if (table.dataStore.selectable) {

            for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

                if (table.dataStore.body.rows[i].selection && table.dataStore.body.rows[i].selection.checked) {

                    rowIndex.push(i);

                    if (table.dataStore.selectionType === "single") {

                        break;
                    }
                }

            }

            return rowIndex;
        }
        else {

            journal.log({type: 'warn', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.getCheckedIndex'}, 'Table: ' + table.id + ' is not selectable and will never have checked indexes');

            return false;
        }

    };

    _priv.getCheckedColumnValues = function _get_checked_column_values(table) {

        var row = _priv.getCheckedRow(table);

        if (row) {

            var rowDef = table.dataStore.body.rows[row];

            var valueMap = {};

            for (var c = 0, cLen = rowDef.columns.length; c < cLen; c++) {

                if (rowDef.columns[c].contents && rowDef.columns[c].contents.length) {

                    var compiledValue = "";

                    for (var cc = 0, ccLen = rowDef.columns[c].contents.length; cc < ccLen; cc++) {

                        var content = rowDef.columns[c].contents[cc];

                        if (content.template === "field") {

                            if (content.type === "select") {

                                if (content.input && content.input.value) {
                                    compiledValue += content.input.value;
                                }

                            }
                            else if (content.type === "checkbox" || content.type === "radio") {

                                if ((content.input && content.input.attributes && content.input.attributes.checked) && (content.input && content.input.attributes && content.input.attributes.value)) {
                                    compiledValue += content.input.attributes.value;
                                }

                            }
                            // For textarea and normal inputs
                            else {

                                if (content.input && content.input.attributes && content.input.attributes.value) {
                                    compiledValue += content.input.attributes.value;
                                }

                            }

                        }
                        else {
                            if (content.text) {
                                compiledValue += content.text;
                            }
                        }

                    }

                    valueMap[c] = compiledValue;

                }
                else if (rowDef.columns[c].text) {

                    valueMap[c] = rowDef.columns[c].text;
                }
                else {

                    valueMap[c] = "";
                }

            }

            return valueMap;
        }

        return false;
    };

    _priv.getHiddenInputValues = function _get_hidden_input_values(table) {

        var returnObj = {};

        var name = false;
        var value = false;

        for (var i = 0, len = table.config.hiddenInputs.$columns.length; i < len; i++) {

            if (table.config.hiddenInputs.$columns[i]) {

                // Get the current focused column value
                name = table.config.hiddenInputs.$columns[i].attr('name');
                value = table.config.hiddenInputs.$columns[i].val();

                returnObj[name] = value;

                // Get the previous focused column value
                name = table.config.hiddenInputs.$columnsTemp[i].attr('name');
                value = table.config.hiddenInputs.$columnsTemp[i].val();

                returnObj[name] = value;
            }
        }

        if (table.config.hiddenInputs.$checked) {

            name = table.config.hiddenInputs.$checked.attr('name');
            value = table.config.hiddenInputs.$checked.val();

            returnObj[name] = value;
        }

        if (table.config.hiddenInputs.$selected) {

            name = table.config.hiddenInputs.$selected.attr('name');
            value = table.config.hiddenInputs.$selected.val();

            returnObj[name] = value;
        }

        return returnObj;
    };

    // Set Functions
    // =============

    // Function updated the dataStore so all selection.checked properties match the passed state
    _priv.setAllCheckedStatesStore = function _set_all_checked_state_store(table, state) {

        for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

            // Add the selection object if its missing
            if (!table.dataStore.body.rows[i].selection) {

                table.dataStore.body.rows[i].selection = {};
            }

            // Double check to make sure the current row is not set to empty or readOnly
            if (table.dataStore.body.rows[i].selection && (!table.dataStore.body.rows[i].selection.empty && !table.dataStore.body.rows[i].selection.readOnly)) {

                if (!table.dataStore.body.rows[i].skip) {
                    table.dataStore.body.rows[i].selection.checked = state;
                }
            }

        }

        if (table.dataStore.selectionType === "single") {

            _priv.extactColumnValues(table, false);
        }

        _priv.updateCheckedIndex(table);
    };

    // Function marks or unmarks all checkboxes render on the table
    _priv.setAllCheckedStateScreen = function _set_all_checked_state_screen(table, state, $inputs) {

        fastdom.mutate(function () {

            $inputs.each(function() {

                $(this).prop('checked', state);

                $row = $(this).parents('tr').eq(0);

                if (state) {
                    $row.addClass(CLASSES.checked);
                }
                else {
                    $row.removeClass(CLASSES.checked);
                }

            });
        });
    };

    // Function marks a specific row in the dataStore as checked and then call screen based on need
    _priv.setRowSelection = function _set_row_selection(table, key, index, state, screen) {

        if (typeof index === "string" && !isNaN(index)) {
            index = parseInt(index);
        }

        var row = table.dataStore.body.rows[index];

        if (row) {

            if (!row.selection) {

                row.selection = {};
            }

            row.selection.checked = state;

            // Check if we need to flush the other checked index because it a radio
            if (table.dataStore.selectionType === "single") {

                for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

                    if (table.dataStore.body.rows[i].selection && table.dataStore.body.rows[i].selection.checked && table.dataStore.body.rows[i].key !== key) {

                        var keyType = typeof table.dataStore.body.rows[i].key;
                        var providedKeyType = typeof key;

                        if (keyType !== providedKeyType) {

                            if (keyType === "number") {
                                key = parseInt(key);
                            }
                            else if (keyType === "string") {

                                key = key.toString();
                            }
                        }

                        if (table.dataStore.body.rows[i].key !== key) {
                            table.dataStore.body.rows[i].selection.checked = false;

                            var $row = table.obj.$tbody.find('tr[data-key="' + table.dataStore.body.rows[i].key + '"]');

                            $row.removeClass(CLASSES.checked);

                        }

                    }

                    if (i === index) {
                        continue;
                    }

                }

                if (state === true) {

                    // Update the hidden input references only if its a single selection
                    _priv.extactColumnValues(table, row);
                }
                else {

                    _priv.ClearCurrentColumnValues(table);
                }

            }

            // Update the checked index
            _priv.updateCheckedIndex(table);

            if (screen) {
                _priv.setRowSelectionScreen(table, key, index, state);
            }

            if (table.dataStore.selectAll) {
                _priv.verifySelectAllState(table);
            }

        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.setRowSelection'}, 'Invalid row was found or not returned.');
        }
    };

    // Function updates the checked state of a visual row if it can find it.
    _priv.setRowSelectionScreen = function(table, key, index, state) {

        var $row = table.$self.find('tr[data-key="' + key + '"]');

        if ($row.length === 1) {

            var $input = $row.find(CLASSES.allCheckRadio);

            if ($input.length){

                $input.prop('checked', state);

                if (state) {

                    $row.addClass(CLASSES.checked);
                }
                else {

                    $row.removeClass(CLASSES.checked);
                }
            }

        }
    };

    // Function to set the focus (highlighted) row
    _priv.setRowHighlight = function _set_row_highlight(table, key, index) {

        var $row = table.obj.$tbody.find('tr[data-key="' + key + '"]');
        var row = table.dataStore.body.rows[index];

        if (row.key === key) {

            if (!row.highlight) {

                row.highlight = true;

                if ($row.length) {

                    $row.addClass(CLASSES.highlight);
                }

                // Loop through and un-highlight all the rest
                for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

                    if (table.dataStore.body.rows[i].highlight && table.dataStore.body.rows[i].key !== key) {

                        $row = table.obj.$tbody.find('tr[data-key="' + table.dataStore.body.rows[i].key + '"]');

                        if ($row.length) {

                            $row.removeClass(CLASSES.highlight);
                        }

                        table.dataStore.body.rows[i].highlight = false;
                    }
                }

                _priv.extactColumnValues(table, row);

                _priv.updateSelectedIndex(table);
            }
            else {

                journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.setRowHighlight'}, 'Block attempt to set focus to already focused row.');
            }
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.setRowHighlight'}, 'Invalid row was found or not returned.');
        }
    };

    _priv.removeHightlight = function(table) {

        // Loop through and un-highlight all the rest
        for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

            // Find all the highlighted rows
            if (table.dataStore.body.rows[i].highlight) {

                var $row = table.obj.$tbody.find('tr[data-key="' + table.dataStore.body.rows[i].key + '"]');

                if ($row.length) {

                    $row.removeClass(CLASSES.highlight);
                }

                table.dataStore.body.rows[i].highlight = false;
            }
        }
    };

    // Update Functions
    // ================

    // Function updates the checked_index hidden field after pulling keys from the dataStore.
    _priv.updateCheckedIndex = function _update_checked_index(table) {

        var checkedIndex = [];

        if (table.config.hiddenInputs && table.config.hiddenInputs.$checked) {

            for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

                if (table.dataStore.body.rows[i].selection && table.dataStore.body.rows[i].selection.checked) {

                    checkedIndex.push(table.dataStore.body.rows[i].key);
                }
            }

            table.config.hiddenInputs.$checked.val(checkedIndex.join(','));
        }
        else {

            journal.log({type: 'warn', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.updateCheckedIndex'}, 'Skipping checked_index update for table: ' + table.id);
        }
    };

    _priv.updateSelectedIndex = function _update_selected_index(table) {

        var selectedIndex = false;

        for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

            if (table.dataStore.body.rows[i].highlight) {

                selectedIndex = table.dataStore.body.rows[i].key;

                break;
            }
        }

        if (selectedIndex) {

             table.config.hiddenInputs.$selected.val(selectedIndex);
        }
        else {

            table.config.hiddenInputs.$selected.val("");
        }
    };

    // Function update hidden inputs
    _priv.updateHiddenInputs = function _update_hidden_inputs(table, map) {

        if (map) {
        }
        else {

            // Handle the column and temp column inputs
            for (var i = 0, len = table.config.hiddenInputs.$columns.length; i < len; i++) {

                if (table.config.hiddenInputs.$columns[i]) {

                    table.config.hiddenInputs.$columns[i].val("");
                }

            }

            // Handle the column and temp column inputs
            for (var t = 0, tLen = table.config.hiddenInputs.$columnsTemp.length; t < tLen; t++) {

                if (table.config.hiddenInputs.$columnsTemp[i]) {

                    table.config.hiddenInputs.$columnsTemp[i].val("");
                }

            }

            table.config.hiddenInputs.$checked.val("");
            table.config.hiddenInputs.$selected.val("");

            journal.log({type: 'warning', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.updateHiddenInputs'}, 'No map provided to update hidden inputs, flushing the values');
        }
    };

    // Other Functions
    // ===============

    // Function builds out table config based on avaliable hidden table inputs
    _priv.setupHiddenInputs = function _setup_hidden_inputs(table, id) {

        var colmap = {};
        var hiddenInputs = {
            $columns: [],
            $columnsTemp: [],
            $checked: false,
            $checkedPrevious: false,
            $selected: false,
            $selectedPrevious: false
        };

        if (table.dataStore.head && table.dataStore.head.rows && table.dataStore.head.rows.length >= 1) {

            for (var i = 0, len = table.dataStore.head.rows[0].columns.length; i < len; i++) {

                var column = table.dataStore.head.rows[0].columns[i];

                if (column.attributes && column.attributes['data-colmap']) {

                    var name = column.attributes['data-colmap'];

                    name = name.substring(0, 1).toLowerCase() + name.substring(1).replace(/\s+/g, '');

                    // Try and fine the input
                    $input = table.obj.$tableContainer.find('#' + name);
                    $inputTemp = table.obj.$tableContainer.find('#' + name + '_temp');

                    colmap[i] = name;

                    if ($input) {

                        hiddenInputs.$columns.push($input);

                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.setupHiddenInputs'}, 'Failed to find hidden input for: ' + name + ' for table: ' + table.id);
                    }

                    if($inputTemp) {

                        hiddenInputs.$columnsTemp.push($inputTemp);
                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.setupHiddenInputs'}, 'Failed to find hidden input for: ' + name + '_temp for table: ' + table.id);
                    }

                }
                else {
                    // Push false value in place of bad columns
                    hiddenInputs.$columns.push(false);
                    hiddenInputs.$columnsTemp.push(false);
                }

            }

            // Look for checking index hidden field
            var $checkedIndex = table.obj.$tableContainer.find('#' + id + '_checked_index');

            if ($checkedIndex) {
                hiddenInputs.$checked = $checkedIndex;
            }

            var $checkedIndexPrevious = table.obj.$tableContainer.find('#' + id + '_checked_index_previous');

            if ($checkedIndexPrevious) {
                hiddenInputs.$checkedPrevious = $checkedIndexPrevious;
            }

            var $selectedIndex = table.obj.$tableContainer.find('#' + id + '_selected_index');

            if ($selectedIndex) {
                hiddenInputs.$selected = $selectedIndex;
            }

            var $selectedIndexPrevious = table.obj.$tableContainer.find('#' + id + '_selected_index_previous');

            if ($selectedIndexPrevious) {
                hiddenInputs.$selectedPrevious = $selectedIndexPrevious;
            }

            if (table.config.type === "order") {

                var $orderHiddenInput = table.obj.$viewWrapper.find('input#' + table.id + '_indexOrder');

                hiddenInputs.$orderIndex = $orderHiddenInput;

                // Get all the keys now!
                var rowKeys = _priv.getTableKeys(table);

                hiddenInputs.$orderIndex.val(rowKeys.join(','));

            }

            table.config.colmap = $.extend(true, {}, colmap);
            table.config.hiddenInputs = $.extend(true, {}, hiddenInputs);
        }
        else {

            table.config.colmap = false;
            table.config.hiddenInputs = false;

            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.setupHiddenInputs'}, 'Table: ' + table.id + ' has no header so colmap and hidden inputs shouldnt exist.');
        }
    };

    _priv.findRow = function _find_row(table, ref) {

        var foundKey = [];
        var foundIndex = [];

        var key = _priv.evalRowReference(ref);

        var otherFormatKey = false;

        if (typeof key === "string" && !isNaN(key)) {
            otherFormatKey = parseInt(key);
        }
        else if (typeof key === "number") {
            otherFormatKey = key.toString();
        }

        // Do a full search in one loop!
        for (var i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

            if (table.dataStore.body.rows[i].key === key) {
                foundKey.push({ 'dataStore': table.dataStore.body.rows[i], 'index': i});
            }
            else if (table.dataStore.body.rows[i].key === otherFormatKey) {
                foundKey.push({ 'dataStore': table.dataStore.body.rows[i], 'index': i});
            }

            if (i === key) {
                foundIndex.push({ 'dataStore': table.dataStore.body.rows[i], 'index': i});
            }

        }

        if (foundKey.length && foundIndex.length) {

            // Detect same row
            if (foundKey[0].key === foundIndex[0].key) {

                return foundKey[0];
            }

        }
        else {


            if (foundKey.length > 1 || foundIndex > 1) {

                journal.log({type: 'error', owner: 'Developer', module: 'table', submodule: 'selection', func: '_priv.findRow'}, 'The row key for the row selected is found in the table datastore is not unique. Row id\'s must be unique, either manually set key or allow for default index.');
            }
            else {

                // Check to see if it was just the key
                if (foundKey.length === 1) {

                    return foundKey[0];
                }

                if (foundIndex.length === 1) {

                    return foundIndex[0];
                }

                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.findRow'}, 'Insufficiant context provided to find a key. It is better if you pass in a row element, a jQuery reference or a unique row key.');
            }

        }

        return false;
    };

    _priv.evalRowReference = function _eval_row_reference(ref) {

        var controlsArray = ['INPUT', 'BUTTON'];

        if (ref !== undefined) {

            if (ref instanceof jQuery) {

                return ref.attr('data-key') || false;
            }
            else if (ref.nodeType && ref.nodeType === 1 && ref.nodeName === "TR") {

                return ref.getAttribute('data-key') || false;
            }
            else if (ref.nodeType && ref.nodeType === 1 && controlsArray.indexOf(ref.nodeName) !== -1 ) {

                var $ref = $(ref.target);

                var $parentRow = $ref.parents('tr').eq(0);

                if ($parentRow.length) {

                    return $parentRow.attr('data-key') || false;
                }
                else {

                    return false;
                }

            }
            else if (typeof ref === "string" || typeof ref === "number") {

                journal.log({type: 'warning', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.rowSelection'}, 'Looking up row by key (this is not the recommended approach)!');

                return ref;
            }
            else {

                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.rowSelection'}, 'Cannot find row in table: ' + this.id + 'invalid references, must be jQuery selection, HTML Element reference, or row render row index or row key.');

                return false;
            }
        }
    };

    _priv.extactColumnValues = function _extract_column_values(table, row) {

        _priv.ClearCurrentColumnValues(table);

        if (row) {

            for (var c = 0, cLen = row.columns.length; c < cLen; c++) {

                var value = "";

                if (table.config.hiddenInputs.$columns[c]) {

                    if (row.columns[c].text && (!row.columns[c].contents || row.columns[c].contents.length === 0)) {

                        value = row.columns[c].text;
                    }
                    else if (row.columns[c].contents && row.columns[c].contents.length) {

                        var runningValue = "";

                        for (var ce = 0, ceLen = row.columns[c].contents.length; ce < ceLen; ce++) {

                            switch (row.columns[c].contents[ce].template) {

                                case 'field':

                                    if (row.columns[c].contents[ce] === "select") {

                                        if (row.columns[c].contents[ce].input && row.columns[c].contents[ce].input.value) {

                                            runningValue += " " + row.columns[c].contents[ce].input.value;
                                        }
                                    }
                                    else {

                                        if (row.columns[c].contents[ce] === "checkbox" || row.columns[c].contents[ce] === "radio") {

                                            // Verify all of the value path and checked status
                                            if (row.columns[c].contents[ce].input && row.columns[c].contents[ce].input.attributes && row.columns[c].contents[ce].input.attributes.checked && row.columns[c].contents[ce].input.attributes.value) {

                                                runningValue += " " + row.columns[c].contents[ce].input.attributes.value;
                                            }
                                        }
                                        else {

                                            if (row.columns[c].contents[ce].input && row.columns[c].contents[ce].input.attributes && row.columns[c].contents[ce].input.attributes.value) {

                                                runningValue += " " + row.columns[c].contents[ce].input.attributes.value;
                                            }
                                        }
                                    }

                                    break;

                                case 'composite':

                                    switch(row.columns[c].contents[ce].type) {

                                        case 'search':

                                            if (row.columns[c].contents[ce].parts.text.input && row.columns[c].contents[ce].parts.text.input.attributes && row.columns[c].contents[ce].parts.text.attributes.value) {

                                                runningValue += " " + row.columns[c].contents[ce].parts.text.attributes.value;
                                            }

                                            break;

                                        case 'rating':

                                            if (row.columns[c].contents[ce].parts.hidden.input && row.columns[c].contents[ce].parts.hidden.input.attributes && row.columns[c].contents[ce].parts.hidden.attributes.value) {

                                                runningValue += " " + row.columns[c].contents[ce].parts.hidden.input.attributes.value;
                                            }

                                            break;

                                        default:

                                            break;
                                    }

                                    break;

                                case 'score':
                                    runningValue += " " + row.columns[c].contents[ce].score;
                                    break;

                                case 'icon':
                                case 'link':
                                case 'notifier':

                                    runningValue += " " + row.columns[c].contents[ce].text;
                                    break;

                                case undefined:

                                    journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.extactColumnValues'}, 'Table: ' + table.id + ' Extract column values is set to undefined: ' + row.columns[c].contents[ce]);

                                    break;
                            }

                        }

                        value = runningValue.trim();
                    }
                    else if (!row.columns[c].text && ( !row.columns[c].contents || (row.columns[c].contents && row.columns[c].contents.length === 0))) {

                        journal.log({type: 'warning', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.extactColumnValues'}, 'Column:', c, 'Containes no text or contents. Sending empty string');
                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.extactColumnValues'}, 'Could not find valid contents for row column:', c, row, row.columns[c]);
                    }

                    journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.extactColumnValues'}, 'Table hidden field: ' + table.config.hiddenInputs.$columns[c].attr('name') + " set to => " + ((value) ? value : ':empty-string:'));

                    table.config.hiddenInputs.$columns[c].val(value);
                }
            }

            // Check if we have checked and selected hidden fields
            if (table.config.hiddenInputs.$checked && table.config.hiddenInputs.$checkedPrevious) {

                table.config.hiddenInputs.$checkedPrevious.val(table.config.hiddenInputs.$checked.val());
            }

            if (table.config.hiddenInputs.$selected && table.config.hiddenInputs.$selectedPrevious) {

                table.config.hiddenInputs.$selectedPrevious.val(table.config.hiddenInputs.$selected.val());
            }
        }
    };

    // Function will move all temp hidden field values back to 
    _priv.reverseColumnValues = function _reverse_column_values(table) {

    };

    _priv.ClearCurrentColumnValues = function _clear_current_column_values(table, row, skipTemp) {

        for (var h = 0, hLen = table.config.hiddenInputs.$columns.length; h < hLen; h++) {

            if (table.config.hiddenInputs.$columns[h]) {

                var curValue = table.config.hiddenInputs.$columns[h].val();

                journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.extactColumnValues'}, 'Table hidden field: ' + table.config.hiddenInputs.$columnsTemp[h].attr('name') + ' set to => ' + ((curValue) ? curValue : ':empty-string:'));

                table.config.hiddenInputs.$columnsTemp[h].val(curValue);

                if (!row) {
                    table.config.hiddenInputs.$columns[h].val('');
                }
            }
        }
    };

    _priv.reverseFocus = function _remove_focus(table) {

        if (table && table.config) {

            for (var t = 0, tLen = table.config.hiddenInputs.$columnsTemp.length; t < tLen; t++) {

                var tempValue = table.config.hiddenInputs.$columnsTemp[t].val();

                // temp -> current
                table.config.hiddenInputs.$columns[t].val();

                // Clear temp field
                table.config.hiddenInputs.$columnsTemp[t].val('');

            }

        }

        if (table.config.hiddenInputs.$checked && table.config.hiddenInputs.$checkedIndexPrevious) {
            table.config.hiddenInputs.$checked.val(table.config.hiddenInputs.$checkedIndexPrevious.val());
        }

        if (table.config.hiddenInputs.$selected && table.config.hiddenInputs.$selectedPrevious) {
            table.config.hiddenInputs.$selected.val(table.config.hiddenInputs.$selectedPrevious.val());
        }

        journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_priv.reverseFocus'}, 'Reversing table inputs and setting temp values back to current.');

    };

    // Function reviews the dataStore and verifys if all rows are checked or not and properly updates it.
    _priv.verifySelectAllState = function _verify_select_all_state(table) {

        // current state
        var selectAllState = (table.config.$headerCheckbox.is(':checked')) ? true : false;

        var allTrue = true;

        for (var r = 0, rLen = table.dataStore.body.rows.length; r < rLen; r++) {

            // Check for a check false value
            if (!table.dataStore.body.rows[r].selection || (table.dataStore.body.rows[r].selection && !table.dataStore.body.rows[r].selection.checked)) {

                if (selectAllState) {

                    table.config.$headerCheckbox.prop('checked', false);
                    break;
                }

                allTrue = false;
            }

        }

        if (!selectAllState && allTrue) {

            table.config.$headerCheckbox.prop('checked', true);
        }
    };

    _priv.getTableKeys = function (table) {

        var $tr = table.obj.$tbody.find('tr');

        var keys = [];

        for (var r = 0, rLen = $tr.length; r < rLen; r++) {

            keys.push($tr[r].getAttribute('data-key'));
        }

        return keys;

    };

    // =================
    // Events Functions
    // =================

    // Event handler for when some manual clicks on the check all control
    _events.headerCheckbox = function _header_checkbox(evt, table, $input) {

        var checkedState = $input.is(':checked');

        // Update the dataStore
        _priv.setAllCheckedStatesStore(table, checkedState);

        // Check for body inputs
        $bodyInputs = table.obj.$tbody.find('td.table-control-col > input[type="checkbox"]');

        if ($bodyInputs.length) {

            _priv.setAllCheckedStateScreen(table, checkedState, $bodyInputs);
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_events.headerCheckbox'}, 'Unable to find body checkbox columns and inputs in table: ' + table.id);
        }

        journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: '_events.headerCheckbox'}, 'All checkboxes in table: ' + table.id + ' have been ' + ((checkedState) ? 'checked' : 'unchecked') + ' by the header control');
    };

    // Event handler for when someone manually clicks on a body selection contorl (left most checkbox or radio)
    _events.setRowSelection = function _set_row_selection(evt, table, $input) {

        // Get the row
        var $row = $input.parents('tr').eq(0);

        // Get the demographics
        var key = $row.attr('data-key');
        var index = $row.attr('data-row-index');
        var state = $input.is(':checked');

        _priv.setRowSelection(table, key, index, state);

        if (state) {
            $row.addClass(CLASSES.checked);
        }
        else {
            $row.removeClass(CLASSES.checked);
        }

    };

    // ================
    // Public Functions
    // ================

    // Function returns an array of checked index row keys
    _prototype.getCheckedIndex = function _get_checked_index() {

        var result = _priv.getCheckedIndex(this);

        if (result.length) {

            if (result.length > 1) {

                return result;
            }

            return result[0];
        }

        return false;
    };

    // Function returns an array of checked row indexs
    _prototype.getCheckedRow = function _get_checked_row() {

        return _priv.getCheckedRow(this);
    };

    _prototype.getCheckedColumnValues = function _get_checked_column_values() {

        if (this.dataStore.selectable && this.dataStore.selectionType === "single") {

            return _priv.getCheckedColumnValues(this);
        }

        return false;
    };

    _prototype.getHiddenInputValues = function _get_hidden_input_values() {

        return _priv.getHiddenInputValues(this);
    };

    // Function used to clear all checkboxes in the table.
    _prototype.setAllSelection = function _set_all_selection(state, table) {

        if (state === undefined || (state !== true || state !== false)) {

            if (table === undefined) {
                table = this;
            }

            // Clears out the dataStore checked states
            _priv.setAllCheckedStatesStore(table, state);

            $inputs = table.$self.find(CLASSES.allCheckRadio);

            _priv.setAllCheckedStateScreen(table, state, $inputs);
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setAllSelection'}, 'Cannot set or clear row selections in table: ' + table.id + ' state must be provided `true|false`');
        }
    };

        // Shortcut functions for clearing and marking all items as selected
        _prototype.clearAllSelection = function _clear_all_selection() {

            _prototype.setAllSelection(false, this);
        };

        _prototype.markAllSelection = function _clear_all_selection() {

            _prototype.setAllSelection(true, this);
        };

    // Function used to set or clear a specific check state by row key
    _prototype.setRowSelection = function _row_selection(ref, state, table) {

        if (ref !== undefined && (state === true || state === false)) {

            if (table === undefined) {
                table = this;
            }

            var rowObj = _priv.findRow(table, ref);

            if (rowObj) {

                _priv.setRowSelection(table, rowObj.dataStore.key, rowObj.index, state, true);
            }
            else {

                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setRowSelection'}, 'Cannot find row in table: ' + table.id + ' with provided reference: ' + ref);
            }
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setRowSelection'}, 'Cannot set row selection in table: ' + table.id + ' must provided a row reference and bool state `true|false`');
        }
    };

        // Shortcut functions for clearing and marking one specific row items as selected
        _prototype.checkRow = function(ref) {

            _prototype.setRowSelection(ref, true, this);
        };

        _prototype.uncheckRow = function(ref) {

            _prototype.setRowSelection(ref, false, this);
        };

    _prototype.clearHiddenInputs = function _clear_hidden_inputs() {

        _priv.updateHiddenInputs(this);
    };

    _prototype.setFocus = function _set_focus(evt, keyIndex) {

        if (arguments.length) {

            var table = this;
            var rowObj = false;

            if (evt instanceof Event || evt instanceof jQuery) {

                var $source = false;

                if (evt instanceof jQuery) {

                    $source = evt;
                }
                else {

                    $source = $(evt.target);
                }

                console.log("Table focused control:", $source);

                $row = $source.parents('tr').eq(0);

                if ($row.length === 1) {

                    rowObj = _priv.findRow(table, $row);

                    _priv.setRowHighlight(table, rowObj.dataStore.key, rowObj.index);
                }
                else {

                    var $tableCheck = $source.parents('table');

                    if (!$tableCheck.length) {

                        if (keyIndex !== undefined) {

                            rowObj = _priv.findRow(table, keyIndex);

                            _priv.setRowHighlight(table, rowObj.dataStore.key, rowObj.index);
                        }
                        else {

                            var $buttonMenu = $source.parents('.emp-table-responsive-button-menu-pane').eq(0);

                            if ($buttonMenu.length === 1) {

                                var index = $buttonMenu.attr('data-row-index');
                                var key = $buttonMenu.attr('data-key');

                                rowObj = _priv.findRow(table, key);

                                _priv.setRowHighlight(table, rowObj.dataStore.key, rowObj.index);

                            }
                            else {

                                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setFocus'}, 'When setting focuse from outside of table, key or index is required.');
                            }

                        }

                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setFocus'}, 'Invalid internal table reference to set focus');
                    }

                }

            }
            else if ((keyIndex === undefined && (typeof evt === "string" || typeof evt === "number")) || (typeof keyIndex === "string" || typeof keyIndex === "number")) {

                keyIndex = evt;
                evt = false;

                rowObj = _priv.findRow(table, keyIndex);

                _priv.setRowHighlight(table, rowObj.dataStore.key, rowObj.index);

            }

        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setFocus'}, 'Unable to determine proper row from no arguments');
        }
    };

    _prototype.setTempFocus = function _set_temp_focus(evt, keyIndex) {

        if (arguments.length) {

            var table = this;
            var rowObj = false;

            if (evt instanceof Event || evt instanceof jQuery) {

                var $source = false;

                if (evt instanceof jQuery) {

                    $source = evt;
                }
                else {

                    $source = $(evt.target);
                }

                console.log("Table focused control:", $source);

                $row = $source.parents('tr').eq(0);

                if ($row.length === 1) {

                    rowObj = _priv.findRow(table, $row);

                }
                else {

                    var $tableCheck = $source.parents('table');

                    if (!$tableCheck.length) {

                        if (keyIndex !== undefined) {

                            rowObj = _priv.findRow(table, keyIndex);
                        }
                        else {

                            var $buttonMenu = $source.parents('.emp-table-responsive-button-menu-pane').eq(0);

                            if ($buttonMenu.length === 1) {

                                var index = $buttonMenu.attr('data-row-index');
                                var key = $buttonMenu.attr('data-key');

                                rowObj = _priv.findRow(table, key);

                            }
                            else {

                                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setFocus'}, 'When setting focuse from outside of table, key or index is required.');
                            }

                        }

                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setFocus'}, 'Invalid internal table reference to set focus');
                    }

                }

            }
            else if ((keyIndex === undefined && (typeof evt === "string" || typeof evt === "number")) || (typeof keyIndex === "string" || typeof keyIndex === "number")) {

                keyIndex = evt;
                evt = false;

                rowObj = _priv.findRow(table, keyIndex);

            }

            if (rowObj) {

                // Now place our current unfocused row values into the hidden field mapping
                _priv.extactColumnValues(this, rowObj.dataStore);
            }

        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: '_prototype.setFocus'}, 'Unable to determine proper row from no arguments');
        }

    };

    _prototype.removeFocus = function _remove_focus(evt) {

        var table = this;

        _priv.removeFocus(table);
    };

    _prototype.reverseFocus = function _reverse_focus(evt) {

        _priv.reverseFocus(this);
    };

    // ===============
    // Setup Functions
    // ===============

    // For the base table requires of Empire (sticky headers or the resizer) to work additional wrapper layers are needed as well as a place to put client side controls.
    _setup.selection = function _selection(table, next) {

        var lowerFirstCharacter = function _lower_first_character(string) {

            return string.substring(0, 1).toLowerCase() + string.slice(1);
        };

        if (!table.config.empty) {

            _priv.setupHiddenInputs(table, lowerFirstCharacter(table.id));

            // Setup Event Bindings!
            // ========================

            // Check to see if we have a select all box;
            var $headerCheckbox = table.obj.$thead.find('.table-control-col input[type="checkbox"]');

            if ($headerCheckbox.length) {

                table.obj.$thead.on('click', $headerCheckbox, function (evt) {

                    evt.stopPropagation();

                    // Get the current selection information
                    var $input = $(evt.target);

                    if ($input[0].nodeName === 'TH' || $input[0].nodeName === 'DIV' || $input[0].nodeName === 'SPAN') {

                        $input = $input.find('input').eq(0);

                        if ($input.length) {

                            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: 'setup => headerClickHandler'}, 'Routing header cell click to control');

                            if ($input.is(':checked')) {

                                _prototype.setRowSelection(ref, false, this);
                            }
                            else {

                                _prototype.setRowSelection(ref, true, this);
                            }
                        }

                    }
                    else {

                        // Called only when we have a real input tag.
                        _events.headerCheckbox(evt, table, $input);
                    }
                });

                table.config.$headerCheckbox = $headerCheckbox;

            }
            else {

                table.config.$headerCheckbox = false;
            }

            // Setup the body checkmarks and radio
            if (table.dataStore.selectable) {

                table.obj.$tbody.on('click', 'td.table-control-col, th.table-control-col', function(evt) {

                    evt.stopPropagation();

                    // Get the current selection information
                    var $input = $(evt.target);

                    if ($input.length && ($input[0].nodeName === 'TH' || $input[0].nodeName === 'TD')) {

                        $input = $input.find('input');

                        if ($input.length) {

                            if ($input.length > 1) {

                                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'selection', func: 'setup => bodyClickHandler'}, 'More than 1 selection column cell control found');
                            }
                            else {

                                journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'selection', func: 'setup => headerClickHandler'}, 'Routing body cell click to control');

                                var $row = $input.parents('tr').eq(0);

                                var checked = $input.is(':checked');

                                if (table.dataStore.selectionType === "single") {

                                    if (!checked) {
                                        _prototype.setRowSelection($row, true, table);
                                    }
                                }
                                else {

                                    if ($input.is(':checked')) {

                                        _prototype.setRowSelection($row, false, table);
                                    }
                                    else {

                                        _prototype.setRowSelection($row, true, table);
                                    }
                                }


                            }

                        }
                        else {

                            // There is nothing, so do nothing
                            return false;
                        }

                    }
                    else if ($input.length && $input[0].nodeName !== 'BUTTON') {

                        if ($input[0].nodeName === "INPUT") {

                           _events.setRowSelection(evt, table, $input);
                        }
                    }

                });
            }

        }

        next();
    };

    return {
    	_priv: _priv,
        _setup: _setup,
        _prototype: _prototype
    };
});

/*jshint loopfunc: true */
define('tableResponsive',['stylesheet', 'render'], function (stylesheet, render) {
    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        setup: {
            responsive: true,
        },
        plugins: {
            responsive: {
                automatic: true,
                windowSize: {
                    previous: window.innerWidth,
                    current: window.innerWidth,
                },
                maxPriority: 1,
                menuColumn: false,
                primaryColumn: false,
                primaryButton: false,
                colState: {
                    hidden: [],
                    visible: [],
                    always: {
                        hidden: [],
                        visible: [],
                    },
                },
                columns: [],
                savedConfig: false,
                changedConfig: false,
                menuConfig: {
                    hidden: [],
                    visible: []
                }
            },
        },
    };

    var HAS_HIDDEN_COLUMNS_CLASS = 'emp-table-responsive-has-hidden-columns';

    var DEFAULT_COLUMN_DEF = {
        type: 'data',               // simple description of what the column has inside of it
        dataStoreIndex: undefined,  // the posiiton in the dataStore which the column can be found starting at 0
        renderIndex: undefined,     // render index is th visual index of the column starting at 1
        priority: 0,                // controls if the column can be hidden or not.
        visibility: true,           // indicates current visibility (ture is visible, false is hidden)
        togglable: true,            // indicates if a column can change visibility states
        dataType: false,            // Data type for the defined columns contents
        columnType: false,          // Defined column type for the column
    };

    var DYNAMIC_STYLES = {
        displayNone: {
            display: 'none',
        },
        displayTableCell: {
            display: 'table-cell',
        },
    };

    var TOLERANCE = 15;

    // =================
    // Private Functions
    // =================

    _priv.createColumnDefinitions = function _create_column_defintions(table) {
        var columnStore;

        // Get the rendered count directly from the rendered table
        var $columns = table.obj.$thead.children('tr').eq(0).children('th:not(".table-control-col")');

        // Figure out the max priority count from the table
        var maxPriority = [];
        var usedPriority = [];
        var totalLength = $columns.length;

        for (var k = 0, klen = $columns.length; k < klen; k++) {

            maxPriority.push(k + 1);

            var colData = table.dataStore.head.rows[0].columns[k];

            if (colData && colData.responsive && colData.responsive.priority) {
                usedPriority.push(colData.responsive.priority);
            }

        }

        var priority = maxPriority.filter(function(val) {
          return usedPriority.indexOf(val) == -1;
        });

        // Loop through all of the column that have been rendered
        for (var i = 0, len = $columns.length; i < len; i++) {

            // Create default set of column properties
            var colDef = $.extend(true, {}, DEFAULT_COLUMN_DEF);

            if (table.dataStore.selectable && !table.dataStore.emptyTable) {
                var index = i + 1;
            }

            var $renderedCell = $($columns[i]);

            var definedIndex = $renderedCell.attr('data-col-index');

            columnStore = table.dataStore.head.rows[0].columns[definedIndex];

            // Save off an link to the header
            colDef.$cell = $renderedCell;

            // Save off the original position on load
            colDef.originalPos = i;

            // Save off the indexs and other useful demographis
            colDef.dataStoreIndex = i;

            if (table.dataStore.selectable) {

                if (table.dataStore.emptyTable) {

                    colDef.renderIndex = i + 1;
                }
                else {

                    colDef.renderIndex = i + 2;
                }

            }
            else {
                colDef.renderIndex = i + 1;
            }

            colDef.text = $renderedCell.text().trim();

            if (columnStore.attributes) {
                colDef.dataType = columnStore.attributes['data-type'];
                colDef.columnType = columnStore.attributes['data-columnType'];
            }

            // Process the columns primaryly based on there defined datatype.
            switch (colDef.dataType) {
                case 'button':
                    colDef.priority = 0;
                    // When a button column is still present dont allow it to ever be hidden hide.
                    colDef.togglable = false;

                    // Remember button columns should always be hidden, unless they are the primary button.
                    if (columnStore.responsive && !columnStore.responsive.primaryButton) {

                        // Register this column as always visible
                        table.config.plugins.responsive.colState.always.hidden.push(i);
                    }

                    break;

                case 'primaryButton':
                    colDef.priority = 0;
                    colDef.togglable = false;

                    // Register this column as always visible
                    table.config.plugins.responsive.colState.always.visible.push(i);

                    break;

                case 'buttonMenu':
                    colDef.priority = 0;
                    colDef.togglable = false;

                    // Register this column as the menu column
                    table.config.plugins.responsive.menuColumnDS = definedIndex;
                    table.config.plugins.responsive.menuColumn = colDef.renderIndex;

                    // Register this column as always visible
                    table.config.plugins.responsive.colState.always.visible.push(i);

                    break;

                case 'notifier':
                    colDef.priority = 0;

                    colDef.togglable = false;

                    // Register this column as always visible
                    table.config.plugins.responsive.colState.always.visible.push(i);

                    break;

                case 'alpha':
                case 'numeric':
                case 'date':
                case 'icon':
                case 'score':
                case 'dateTime':
                case 'rating':
                case 'control':
                case 'currency':
                case 'alphaNumeric':

                    // Catch all for incorret datatype columns
                    if ($renderedCell.hasClass('cui-hidden')) {
                        colDef.type = 'hidden';
                        colDef.togglable = false;
                        colDef.visibility = false;
                    }
                    else {

                        // Check to see if there is a responsive object with the dataStore definition for the column
                        if (columnStore.responsive) {

                            // Check for priority
                            if (columnStore.responsive.priority) {
                                if (!isNaN(columnStore.responsive.priority)) {
                                    if (typeof columnStore.responsive.priority === 'string') {
                                        columnStore.responsive.priority = parseInt(columnStore.responsive.priority);
                                    }

                                    colDef.priority = columnStore.responsive.priority;
                                }
                                else {

                                    // Set the priority to be the max for right now
                                    if (priority.length >= 1) {

                                        colDef.priority = priority.shift();
                                    }
                                    else {

                                        colDef.priority = totalLength;
                                    }
                                }
                            }
                            else {

                                // Set the priority to be the max for right now
                                if (priority.length >= 1) {

                                    colDef.priority = priority.shift();
                                }
                                else {

                                    colDef.priority = totalLength;
                                }
                            }

                            // Check for min-width
                            if (columnStore.responsive.minWidth) {
                                if (!isNaN(columnStore.responsive.minWidth)) {
                                    if (typeof columnStore.responsive.minWidth === 'string') {
                                        columnStore.responsive.minWidth = parseInt(columnStore.responsive.minWidth);
                                    }

                                    colDef.minWidth = columnStore.responsive.minWidth;

                                    if (!colDef.$self) {

                                        colDef.$cell[0].style.minWidth = colDef.minWidth + 'px';
                                    }
                                    else {

                                        colDef.$self[0].style.minWidth = colDef.minWidth + 'px';
                                    }

                                }
                            }
                        }
                        else {

                            // Set the priority to be the max for right now
                            if (priority.length >= 1) {

                                colDef.priority = priority.shift();
                            }
                            else {

                                colDef.priority = totalLength;
                            }
                        }
                    }

                    break;

                // All the other odds and ends we might have to deal with for columns
                default:

                    if (columnStore.responsive && columnStore.responsive.priority) {

                        colDef.priority = columnStore.responsive.priority;

                    } else if (priority.length >= 1) {

                        colDef.priority = priority.shift();
                    }
                    else {

                        colDef.priority = totalLength;
                    }

                    // Detect hidden columns
                    if ($renderedCell.hasClass('cui-hidden')) {
                        colDef.type = 'hidden';
                        colDef.togglable = false;
                        colDef.visibility = false;

                        // Dont add anything for these columns because they will never be showable. These are developer columns
                    }
                    // Detects selectable control columns
                    else if ($renderedCell.hasClass('table-control-col')) {

                        colDef.type = 'control';
                        colDef.togglable = false;

                        table.config.plugins.responsive.colState.always.visible.push(i);
                    }
                    else {

                    }

                    break;
            }


            if (columnStore !== undefined && columnStore.attributes) {
                // Notifier check till we can do something better.
                if ((columnStore.attributes['data-type'] === 'notifiers') || (columnStore.hideLabel && columnStore.style && columnStore.style === 'min-width' && columnStore.attributes && columnStore.attributes['data-type'] === 'alpha')) {

                    colDef.priority = 0;

                    colDef.togglable = false;

                    // Register this column as always visible
                    table.config.plugins.responsive.colState.always.visible.push(i);
                }
            }


            if ((!colDef.minWidth) || (colDef.minWidth < table.config.plugins.responsive.columnMins[i])) {
                colDef.minWidth = table.config.plugins.responsive.columnMins[i];
            }

            if (table.config.plugins.responsive.colState.always.visible.indexOf(i) === -1 && table.config.plugins.responsive.colState.always.hidden.indexOf(i) === -1 && colDef.priority !== 0) {
                // Add this column to the visible column array
                table.config.plugins.responsive.colState.visible.push(i);
            }

            // Save the column data off in the plugin
            table.config.plugins.responsive.columns.push(colDef);
        }
    };

    // Function is sued to create the css selector that will be used to hide or show a column
    _priv.columnStyleSelector = function _column_style_selector (id, columnNum) {
        var elements = ['td', 'th'];
        var selector = '';

        // Prefix the id
        id = '#' + id;

        // Loop through the elements to create the column selectors.
        elements.forEach(function (value, index) {
            if (index === elements.length - 1) {
                selector += id + ' tr ' + value + ':nth-child(' + columnNum + ')';
            }
            else {
                selector += id + ' tr ' + value + ':nth-child(' + columnNum + '), ';
            }
        });

        return selector;
    };

    // Function generates the different priority orders for the columns
    _priv.priorityOrder = function _priority_order(table) {

        // Make a copy of the column def object. We want to make sure we dont change the originals.
        var columns = table.config.plugins.responsive.columns.concat();

        function compare (a, b) {

            // `a` has a higher prority and should be hidden before `b`
            if (a.priority < b.priority) {
                return -1;
            }
            // `b` has a higher prority and should be hidden before `a`
            else if (a.priority > b.priority) {
                return 1;
            }
            // Both have the same priority
            else {
                // Tie-breaker 1: the wider of the columns is sorted first
                if (a.minWidth > b.minWidth) {
                    return 1;
                }
                else if (a.minWidth < b.minWidth) {
                    return -1;
                }
                // Tie-breaker 2: right-most column is sorted first
                else if (a.renderedIndex > b.renderedIndex) {
                    return 1;
                }
                else if (a.renderedIndex < b.renderedIndex) {
                    return -1;
                }
                // Otherwise they're truly equal, which should never happen...
                else {
                    return 1;
                }
            }
        }


        // Do a initial sort
        var order = columns.sort(compare);

        var columnOrderIndex = [];

        //Now remove any priority 0 columns
        for (var i = 0, len = order.length; i < len; i++) {
            var colDef = order[i];

            if (colDef.priority !== 0 && colDef.togglable === true) {

                // Push up the index based on the original position from onload;
                columnOrderIndex.push(colDef.originalPos);
            }
            else {

            }
        }

        table.config.plugins.responsive.order = columnOrderIndex.reverse();
    };

    // Function is used to update the table stylesheet to hide a column
    _priv.hideColumn = function _hide_column(table, columns, cb) {

        // Check to make sure a column or array of columns has been provided
        if (columns !== undefined) {

            // Turn into an array
            if (!Array.isArray(columns)) {
                columns = [columns];
            }

            // Place to hold updated styles
            var styles = {};

            // Loop through and build all of the column hide selectors all at once.
            for (var i = 0, len = columns.length; i < len; i++) {

                var originalCol = columns[i];

                var colDef = false;

                for (var oc = 0, ocLen = table.config.plugins.responsive.columns.length; oc < ocLen; oc++) {

                    if (table.config.plugins.responsive.columns[oc].originalPos === originalCol) {
                        colDef = table.config.plugins.responsive.columns[oc];
                        break;
                    }

                }

                //var colDef = table.config.plugins.responsive.columns[columns[i]];
                //var colPos = colDef.originalPos

                // Set the visibility of this column to false
                colDef.visibility = false;

                // Add the column to the hidden array if its not in the always hidden array
                if (table.config.plugins.responsive.colState.always.hidden.indexOf(originalCol) === -1) {
                    table.config.plugins.responsive.colState.hidden.push(originalCol);
                }

                // Remove this column from the visible array
                if (table.config.plugins.responsive.colState.visible.indexOf(originalCol) !== -1) {
                    var index = table.config.plugins.responsive.colState.visible.indexOf(originalCol);

                    table.config.plugins.responsive.colState.visible.splice(index, 1);
                }

                if (!colDef.CSSSelector) {
                    colDef.CSSSelector = _priv.columnStyleSelector(table.id, colDef.renderIndex);
                }

                var CSSSelector = colDef.CSSSelector;

                styles[CSSSelector] = DYNAMIC_STYLES.displayNone;

                // Check to see if there is a rendered menu that need to be updated as well
                if (table.config.plugins.responsive.$columnMenu) {

                    table.config.plugins.responsive.$columnMenu.find('li[data-col-index="' + originalCol + '"]').children('button').removeClass('emp-selected');
                }
            }


            // check to see if we have a responsive control
            if (table.obj.$responsiveControl) {
                // Check to see if we need to update the colum control color
                if (table.config.plugins.responsive.colState.hidden.length) {
                    table.obj.$responsiveControl.addClass(HAS_HIDDEN_COLUMNS_CLASS);
                }
                else {
                    table.obj.$responsiveControl.removeClass(HAS_HIDDEN_COLUMNS_CLASS);
                }
            }

            // Now update both the stylesheets

            // Regular Stylesheet
            if (table.config.plugins.responsive.stylesheet !== undefined && table.config.plugins.responsive.stylesheet !== null) {
                stylesheet.updateRule(table.config.plugins.responsive.stylesheet, styles);
            }

            // Print Stylesheet
            if (table.config.plugins.responsive.printStyleSheet !== undefined && table.config.plugins.responsive.printStyleSheet !== null) {
                stylesheet.updateRule(table.config.plugins.responsive.printStyleSheet, styles);
            }

            _priv.recheckVisibility(table, columns, false);

            if (typeof cb === "function") {
                cb();
            }

        }
    };

    _priv.showColumn = function _show_column (table, columns, cb) {

        // Check to make sure a column or array of columns has been provided
        if (columns !== undefined) {

            // Turn into an array
            if (!Array.isArray(columns)) {
                columns = [columns];
            }

            // Place to hold updated styles
            var styles = {};

            // Loop through and build all of the column hide selectors all at once.
            for (var i = 0, len = columns.length; i < len; i++) {

                var originalCol = columns[i];

                var colDef = false;

                for (var oc = 0, ocLen = table.config.plugins.responsive.columns.length; oc < ocLen; oc++) {

                    if (table.config.plugins.responsive.columns[oc].originalPos === originalCol) {
                        colDef = table.config.plugins.responsive.columns[oc];
                        break;
                    }

                }

                // Set the visibility of this column to false
                colDef.visibility = true;

                // Add the column to the visible array if its not in the always visivle array
                if (table.config.plugins.responsive.colState.always.visible.indexOf(originalCol) === -1) {
                    table.config.plugins.responsive.colState.visible.push(originalCol);
                }

                // Remove this column from the hidden array
                if (table.config.plugins.responsive.colState.hidden.indexOf(originalCol) !== -1) {
                    var index = table.config.plugins.responsive.colState.hidden.indexOf(originalCol);

                    table.config.plugins.responsive.colState.hidden.splice(index, 1);
                }

                if (!colDef.CSSSelector) {
                    colDef.CSSSelector = _priv.columnStyleSelector(table.id, colDef.renderIndex);
                }

                var CSSSelector = colDef.CSSSelector;

                styles[CSSSelector] = DYNAMIC_STYLES.displayTableCell;

                // Check to see if there is a rendered menu that need to be updated as well
                if (table.config.plugins.responsive.$columnMenu) {

                    table.config.plugins.responsive.$columnMenu.find('li[data-col-index="' + originalCol + '"]').children('button').addClass('emp-selected');
                }
            }


            // check to see if we have a responsive control
            if (table.obj.$responsiveControl) {
                // Check to see if we need to update the colum control color
                if (table.config.plugins.responsive.colState.hidden.length) {
                    table.obj.$responsiveControl.addClass(HAS_HIDDEN_COLUMNS_CLASS);
                }
                else {
                    table.obj.$responsiveControl.removeClass(HAS_HIDDEN_COLUMNS_CLASS);
                }
            }

            // Regular Stylesheet
            if (table.config.plugins.responsive.stylesheet !== undefined || table.config.plugins.responsive.stylesheet !== null) {
                stylesheet.updateRule(table.config.plugins.responsive.stylesheet, styles);
            }

            // Print Stylesheet
            if (table.config.plugins.responsive.printStyleSheet !== undefined || table.config.plugins.responsive.printStyleSheet !== null) {
                stylesheet.updateRule(table.config.plugins.responsive.printStyleSheet, styles);
            }

            _priv.recheckVisibility(table, columns, true);

            if (typeof cb === "function") {
                cb();
            }

        }
    };

    _priv.recheckVisibility = function _recheck_visibility (table, columns, state, cb) {

        var styleUpdates = {};

        // Recheck hidden
        for (var i = 0, len = columns.length; i < len; i++) {
            var colDef = table.config.plugins.responsive.columns[columns[i]];

            if (colDef.$cell.is(':visible') !== state) {

                styleUpdates[colDef.CSSSelector] = (state) ? DYNAMIC_STYLES.displayTableCell : DYNAMIC_STYLES.displayNone;
            }
        }

        if (Object.keys(styleUpdates).length) {

            if (table.config.plugins.responsive.stylesheet !== undefined || table.config.plugins.responsive.stylesheet !== null) {
                stylesheet.updateRule(table.config.plugins.responsive.stylesheet, styleUpdates);
            }

            // Print Stylesheet
            if (table.config.plugins.responsive.printStyleSheet !== undefined || table.config.plugins.responsive.printStyleSheet !== null) {
                stylesheet.updateRule(table.config.plugins.responsive.printStyleSheet, styleUpdates);
            }
        }

        if (table.dataStore.emptyTable || table.dataStore.largeTable) {
            _priv.fixEmptyTable(table);
        }
    };

    _priv.getSectionSize = function _get_section_size(table, knowSection) {

        if (knowSection) {

            // Check to see if the table is in a section
            var $parentSection = table.$self.parents('section').eq(0);

            if ($parentSection.length === 1) {

                return $parentSection.outerWidth();
            }
        }

        // Default to window outer width
        return emp.$window.outerWidth();
    };

    _priv.reflow = function _reflow(table, revert, setup, source) {

        // Check to see if this script should do anything
        if (table.config.plugins.responsive.automatic) {

            fastdom.measure(function () {
                var i;
                var len;
                var colNumber;
                var colDef;
                var difference;

                // Get the current window width
                table.config.plugins.responsive.currentSize = _priv.getSectionSize(table);

                // If revert equal out the previous width because we want to do hides.
                if (revert) {
                    table.config.plugins.responsive.previousSize = _priv.getSectionSize(table);
                }

                // Filter out horizontal change
                if ((table.config.plugins.responsive.currentSize <= table.config.plugins.responsive.previousSize) || setup) {

                    var clientWidth = table.obj.$viewWrapper[0].clientWidth;
                    var scrollWidth = table.obj.$viewWrapper[0].scrollWidth;

                    var $tableSection = table.$self.parents('section');

                    var containerWidth;

                    if ($tableSection.length > 0) {

                        // We need to find the visibile width
                        var sectionWidth = _priv.getSectionSize(table);
                        var sectionOffsetLeft = $tableSection[0].offsetLeft;
                        var windowWidth = emp.$window.outerWidth();

                        if ((sectionOffsetLeft + sectionWidth) > windowWidth) {

                            containerWidth = windowWidth - sectionOffsetLeft - TOLERANCE;
                        }
                        else {

                            containerWidth = sectionWidth;
                        }

                    }
                    else {

                       containerWidth = _priv.getSectionSize(table, false);
                    }

                    // Check to see if the table is scrolling but within a threshold.
                    if ((clientWidth < scrollWidth && (scrollWidth - clientWidth >= 5)) || clientWidth > containerWidth) {

                        // Figure out the amount of space we need to reclaim by removing columns.
                        difference = table.obj.$viewWrapper[0].scrollWidth - table.obj.$viewWrapper[0].clientWidth;

                        if (difference === 0) {
                            difference = clientWidth - containerWidth;
                        }

                        var columnsToHide = [];

                        // Loop through and find the next column that is visible
                        for (i = 0, len = table.config.plugins.responsive.order.length; i < len; i++) {

                            // Get this columns information
                            colNumber = table.config.plugins.responsive.order[i];
                            colDef = table.config.plugins.responsive.columns[colNumber];

                            // Check to see if this is a visible column
                            if (colDef && colDef.visibility) {

                                // Get the current rendered width
                                var colWidth = colDef.$cell.outerWidth();

                                // Check to see if the minWidth plus the tolerance is less than the rendered current width
                                if (colDef.minWidth + TOLERANCE <= colWidth) {

                                    // We will assume the min width is all the space we will get back
                                    difference -= colDef.minWidth;

                                }
                                else {

                                    // We will use the render width
                                    difference -= colWidth;

                                }

                                // Add column to the to be hidden array.
                                columnsToHide.push(colNumber);

                                // Only if the difference is more than the tolerance level keep looking for more columns to hide
                                if (difference > TOLERANCE) {

                                    continue;
                                }

                                // Stop looping and move forward
                                break;
                            }
                            else {
                                continue;
                            }
                        }

                        // Update the previous position now that it has been processed.
                        table.config.plugins.responsive.previousSize = table.config.plugins.responsive.currentSize;

                        if (columnsToHide.length > 0) {

                            fastdom.mutate(function () {

                                // Hide the columns that need to be hidden
                                _priv.hideColumn(table, columnsToHide, function() {

                                    fastdom.measure(function() {

                                        // Check one last time just in case to see if we still need to hide anything
                                        if (table.obj.$viewWrapper[0].clientWidth < table.obj.$viewWrapper[0].scrollWidth) {

                                            _priv.reflow(table, revert, setup);
                                        }
                                        else {

                                            table.reflow(table, "Responsive reflow", false);
                                        }

                                    });

                                });
                            });
                        }
                    }
                    else {

                        // There is nothing to change, just update the position
                        table.config.plugins.responsive.previousSize = table.config.plugins.responsive.currentSize;
                    }
                }
                else {

                    //table.config.plugins.responsive.previousSize = table.config.plugins.responsive.currentSize;

                    // Only execute this if there is something to show
                    if (table.config.plugins.responsive.colState.hidden.length > 0) {
                        difference = table.config.plugins.responsive.currentSize - table.config.plugins.responsive.previousSize;
                        var columnsToShow = [];
                        var tableMinWidth = 0;

                        // Now we need to get a total size of the currently visible columns
                        for (i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {
                            colDef = table.config.plugins.responsive.columns[i];

                            if (colDef && colDef.visibility) {
                                tableMinWidth += colDef.minWidth;
                            }
                        }

                        // Minumum required min-width
                        //difference = table.config.plugins.responsive.currentSize - tableMinWidth;

                        // Loop through all of the columns backwards
                        for (i = table.config.plugins.responsive.order.length - 1; i >= 0; --i) {
                            colNumber = table.config.plugins.responsive.order[i];
                            colDef = table.config.plugins.responsive.columns[colNumber];

                            if (colDef && !colDef.visibility) {
                                var colMinWidth = colDef.minWidth + TOLERANCE;

                                if (colMinWidth < difference) {
                                    difference -= colMinWidth;
                                    columnsToShow.push(colNumber);

                                    continue;
                                }

                                // Stop looping and move forward
                                break;

                            }
                            else {
                                continue;
                            }
                        }

                        if (columnsToShow.length > 0) {
                            fastdom.mutate(function () {
                                // Show the hidden columns
                                _priv.showColumn(table, columnsToShow);

                                // Reflow the table to fix the header
                                table.reflow(table, "Responsive reflow", false);
                            });
                        }
                    }
                    else {
                        // There is nothing to change, just update the position
                        table.config.plugins.responsive.previousSize = table.config.plugins.responsive.currentSize;

                        // Reflow the table to fix the header
                        table.reflow(table, "Responsive reflow", false);
                    }
                }
            });
        }

        fastdom.measure(function() {

            if (table.obj.$tbody.hasClass('emp-empty-table')) {

                fastdom.mutate(function() {

                    _priv.fixEmptyTable(table);
                });
            }
        });
    };

    _priv.fixEmptyTable = function _fix_empty_table (table, setup) {

        var colSpan = 0;

        for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {

            if (table.config.plugins.responsive.columns[i].visibility) {

                colSpan += 1;
            }
        }

        table.$self.find('tbody tr td').attr('colspan', colSpan);

    };

    _priv.testMenuObject = function _test_menu_object (current, pending) {

        function arraysEqual(arr1, arr2) {
            if(arr1.length !== arr2.length)
                return false;
            for(var i = arr1.length; i--;) {
                if(arr1[i] !== arr2[i])
                    return false;
            }

            return true;
        }

        var hidden = arraysEqual(current.hidden, pending.hidden);
        var visible = arraysEqual(current.visible, pending.visible);

        if (hidden && visible) {

            return false;
        }
        else {

            return true;
        }
    };

    // ===============
    // Event Functions
    // ===============

    // Event function will generate the menu on the first click, after that it will only position and
    // expose the unorder list container
    _events.columnMenu = function _column_menu (evt, table) {

        // Check to see if the column menu exists
        if (!table.config.plugins.responsive.$columnMenu) {

            // Create the column menu for the first time
            var $menuRoot = $('<ul/>', {
                'id': table.id + '_column_menu',
                'class': 'emp-table-responsive-column-menu'
            });

            // Now loop through all of the columns and add those that can be toggled
            for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {

                var colDef = table.config.plugins.responsive.columns[i];

                // Check to see if the column is togg
                if (colDef.togglable) {
                    var selected = (colDef.visibility) ? 'emp-selected' : '';

                    var $menuItem = $('<li/>', {
                                        'data-col-index': colDef.originalPos
                                    })
                                    .append(
                                        $('<button/>', {
                                            'class': selected,
                                            'id': table.id + "_" + (colDef.text.replace(/\s/g, '_')).replace(/[`~!@#$%^&*()|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, '') + "_column"
                                        })
                                        .text(colDef.text)
                                        .on('click', {'table': table, 'colDef':colDef}, function (evt) {
                                            _events.columnMenuButton(evt, evt.data.table, evt.data.colDef);
                                        })
                                    );

                    $menuItem.appendTo($menuRoot);

                }

            }

            $divider = $('<li>', {
                            'class': 'menu-divider-container'
                        })
                        .append(
                            $('<span/>', {
                                'class': 'menu-divider'
                            })
                        );

            if (!table.dataStore.isExternal) {

                // Save Control
                $saveControl = $('<li>',{
                                'class': 'emp-table-static-save-link'
                            })
                            .append(
                                $('<a/>', {
                                    'role': 'button',
                                    'id': table.id + "_save_control"
                                })
                                .text('Save')
                                .on('click', {'table': table}, _events.saveColumnConfig)
                            );

                // Now add controls
                $revertUndoControl = $('<li/>', {
                                        "class": "emp-table-static-undo-revert-link cui-hidden"
                                    })
                                    .append(
                                        $('<a/>', {
                                            'href': '#',
                                            'id': table.id + "_undo_control"
                                        })
                                        .text('Undo')
                                        .on('click', {'table': table}, _events.tableRevertUndo)
                                    );

                $revertControl = $('<li/>', {
                                        "class": "emp-table-static-revert-link"
                                    })
                                    .append(
                                        $('<a/>', {
                                            'href': '#',
                                            'id': table.id + "_revert_control"
                                        })
                                        .text('Revert')
                                        .on('click', {'table': table}, _events.tableRevert)
                                    );
            }


            $close = $('<li/>')
                        .append(
                            $('<a/>', {
                                'href': '#',
                                'id': table.id + "_close_control"
                            })
                            .text('Close')
                            .on('click', function (evt) {
                                evt.preventDefault();

                                $close = $(evt.target);
                                $close.parents('.emp-table-responsive-column-menu').eq(0).removeClass('emp-selected');
                            })
                        );

            $divider.appendTo($menuRoot);

            if (!table.dataStore.isExternal) {
                $saveControl.appendTo($menuRoot);
                $revertControl.appendTo($menuRoot);
                $revertUndoControl.appendTo($menuRoot);
            }
            $close.appendTo($menuRoot);

            // Save off the menu
            table.config.plugins.responsive.$columnMenu = $menuRoot;

            // Save off the save control
            table.config.plugins.responsive.columnMenuControls = {};

            if (!table.dataStore.isExternal) {
                table.config.plugins.responsive.columnMenuControls.$saveControl = $saveControl;
                table.config.plugins.responsive.columnMenuControls.$revertControl = $revertControl;
                table.config.plugins.responsive.columnMenuControls.$revertUndoControl = $revertUndoControl;
            }

            fastdom.mutate(function () {
                emp.$body.append($menuRoot);
            });
        }

        // check to see if the menu is already positions
        if (table.config.plugins.responsive.$columnMenu.hasClass('emp-selected')) {
            fastdom.mutate(function () {
                // Remove the selected class to hide the menu
                table.config.plugins.responsive.$columnMenu.removeClass('emp-selected');
            });
        }
        else {
            var $columnButton = table.obj.$responsiveControl;
            var columnButtonOffset = $columnButton.offset();

            fastdom.mutate(function () {
                table.config.plugins.responsive.$columnMenu
                    .css({
                        top: (columnButtonOffset.top + $columnButton.outerHeight() + 5),
                        right: (emp.$window.width() - columnButtonOffset.left - $columnButton.outerWidth())
                    })
                    .addClass('emp-selected');

                //FIXME: Is this event being turned off anywhere?
                emp.$body.on('click', function (evt) {
                    if ($(evt.target).closest('.emp-table-responsive-column-menu').length === 0) {
                        _events.closeColumnMenu();
                    }
                });
            });
        }
    };

    // Main resize control event.
    _events.resize = function _resize (evt) {

        var table = evt.data.table;
        var resized;

        // close any open menus
        //_events.buttonMenuClose();

        clearTimeout(resized);

        resized = setTimeout(
            function () {
                _priv.reflow(table);

                table.$self.trigger('resize.table');
            },
            200
        );
    };

    // Event function that will reset the table back to defaults... kinda of
    _events.tableRevert = function _table_revert(evt) {

        evt.preventDefault();

        var table = evt.data.table;

        // Start by finding all columns that are togglable and set them back to true
        var columnsToShow = [];

        // Save the restored columns back in localStorage
        var tableArgument = 'tables.' + table.id + '.columns';

        // Turn automatic reflowing back on.
        table.config.plugins.responsive.automatic = true;

        // Check to see if there are any saved table preference. If not generate a in session set for now.
        if (!table.config.plugins.responsive.localPrefs) {

            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'responsive', func: 'saveColumnConfig'}, 'Table: ' + table.id + ' did not have any saved configs at time of revert.');

            var columns =  {
                visible: [],
                hidden: []
            };

            for (var c = 0, cLen = table.config.plugins.responsive.columns.length; c < cLen; c++) {

                var column = table.config.plugins.responsive.columns[c];

                if (column.visibility && column.togglable) {

                    columns.visible.push(column.originalPos);
                }
                else if (!column.visibility && column.togglable) {

                    columns.hidden.push(column.originalPos);
                }

            }

            table.config.plugins.responsive.lastLocalPref = $.extend(true, {}, columns);
        }
        else {

            // Save off the old config
            table.config.plugins.responsive.lastLocalPref = $.extend(true, {}, table.config.plugins.responsive.localPrefs);
        }


        for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {

            var colDef = table.config.plugins.responsive.columns[i];

            // Filter out all of the columns that are hidden but can be showen
            if (!colDef.visibility && colDef.togglable) {

                columnsToShow.push(colDef.originalPos);
            }

        }

        if (columnsToShow.length > 0) {

            fastdom.mutate(function() {

                _priv.showColumn(table, columnsToShow, function() {

                    _priv.reflow(table);

                    table.reflow();

                    fastdom.measure(function() {

                        emp.prefs.setPage(tableArgument, false);

                        var set = emp.prefs.setPage(tableArgument, columns);

                    });

                });

            });

        }
        else {

            _priv.reflow(table);

            table.reflow();
        }

        if (table.config.plugins.responsive && table.config.plugins.responsive.columnMenuControls) {

            // Remove both save an saved text because its forced to nothing
            table.config.plugins.responsive.columnMenuControls.$saveControl.removeClass('cui-hidden');

            // Toggle Revert to now have revert undo
            table.config.plugins.responsive.columnMenuControls.$revertControl.addClass('cui-hidden');

            if (table.config.plugins.responsive.lastLocalPref && typeof table.config.plugins.responsive.lastLocalPref === "object") {
                table.config.plugins.responsive.columnMenuControls.$revertUndoControl.removeClass('cui-hidden');
            }

            table.config.plugins.responsive.lastMenuAction = "revert";
        }

    };

    _events.tableRevertUndo = function _table_revert_undo(evt) {

        evt.preventDefault();

        var table = evt.data.table;

        var hideColumns = table.config.plugins.responsive.lastLocalPref.hidden || [];
        var showColumns = table.config.plugins.responsive.lastLocalPref.visable || [];

        if (hideColumns.length) {
            _priv.hideColumn(table, hideColumns);
        }

        if (showColumns.length) {
            _priv.showColumn(table, showColumns);
        }

        table.config.plugins.responsive.columnMenuControls.$revertControl.removeClass('cui-hidden');
        table.config.plugins.responsive.columnMenuControls.$revertUndoControl.addClass('cui-hidden');

        // Make a copy back to local Preferences
        table.config.plugins.responsive.localPrefs = $.extend(true, {}, table.config.plugins.responsive.lastLocalPref);

        // Save the restored columns back in localStorage
        var tableArgument = 'tables.' + table.id + '.columns';

        // Flush out the configs
        emp.prefs.setPage(tableArgument, table.config.plugins.responsive.localPrefs);

        table.config.plugins.responsive.lastMenuAction = "revert-undo";
    };

    // Event function that will call the appropriate show or hide function based on column current state
    _events.columnMenuButton = function _column_menu_button(evt, table, colDef) {

        // Turn off automatic reflow (show/hide of columns) when the user starts picking them.
        table.config.plugins.responsive.automatic = false;

        fastdom.measure(function() {

            if (colDef.visibility) {

                _priv.hideColumn(table, colDef.originalPos);
            }
            else {

                _priv.showColumn(table, colDef.originalPos);
            }

            var currentMenuConfig = {
                hidden: [],
                visible: []
            };

            // Get all of the visuble columns
            for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {


                var column = table.config.plugins.responsive.columns[i];

                if (column.visibility && column.togglable) {

                    currentMenuConfig.visible.push(column.originalPos);

                }
                else if (!column.visibility && column.togglable) {

                    currentMenuConfig.hidden.push(column.originalPos);
                }
            }

            var saveableMenu = _priv.testMenuObject(table.config.plugins.responsive.menuConfig, currentMenuConfig);

            fastdom.mutate(function() {

                table.reflow();

                // if (saveableMenu) {

                //     if (table.config.plugins.responsive.columnMenuControls.$saveText.hasClass('cui-hidden')) {

                //         table.config.plugins.responsive.columnMenuControls.$saveControl.removeClass('cui-hidden');
                //     }
                // }
                // else {



                //     if (!table.config.plugins.responsive.columnMenuControls.$saveControl.hasClass('cui-hidden')) {

                //         table.config.plugins.responsive.columnMenuControls.$saveControl.addClass('cui-hidden');
                //     }
                // }

            });

        });

        // Fix the empty table colspan because we removed the column
        if (table.dataStore.emptyTable || table.dataStore.largeTable) {

            _priv.fixEmptyTable(table);
        }
    };

    _events.closeColumnMenu = function _close_column_menu(evt, table) {

        var $menu = $('.emp-table-responsive-column-menu.emp-selected');

        if ($menu.length) {

            $menu.removeClass('emp-selected');
        }
    };

    _events.saveColumnConfig = function _save_column_config(evt) {

        var table = evt.data.table;

        var columns = {
            hidden: [],
            visible: []
        };

        var verifyFirst = (typeof table.config.plugins.responsive.localPrefs === "object") ? true : false;

        var tableArgument = 'tables.' + table.id + '.columns';

        // Get all of the visuble columns
        for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {

            var column = table.config.plugins.responsive.columns[i];

            if (column.visibility && column.togglable) {

                columns.visible.push(column.originalPos);
            }
            else if (!column.visibility && column.togglable) {

                columns.hidden.push(column.originalPos);
            }
        }

        // Hook to prevent users from being evil
        if (verifyFirst) {

            var hasChanged = _priv.testMenuObject(columns, table.config.plugins.responsive.localPrefs);

            if (!hasChanged) {
                journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'responsive', func: 'saveColumnConfig'}, 'Save action blocked as there is nothing different to save.');

                return false;
            }

        }

        emp.prefs.setPage(tableArgument, false);

        // Update the localPrefs to contain what was just added
        table.config.plugins.responsive.localPrefs = columns;

        if (emp.prefs && typeof emp.prefs.setPage === "function") {

            var set = emp.prefs.setPage(tableArgument, columns);

            if (set) {

                table.config.plugins.responsive.menuConfig = columns;

            }
            else {

                journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'responsive', func: 'saveColumnConfig'}, 'Failed to save table column preferences.');
            }
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'responsive', func: 'saveColumnConfig'}, 'Could not save table column config as preferences setPage is not a function.');
        }

        table.config.plugins.responsive.lastMenuAction = "save";

        // Set revert back to the default just in case undo is still the default value
        var $menu = $('.emp-table-responsive-column-menu.emp-selected');

        if ($menu.length) {

            $menu.removeClass('emp-selected');
        }
    };

    // ===================
    // Prototype Functions
    // ===================

    _prototype.deleteStyleSheets = function _delete_style_sheets() {

        var table = this;

        stylesheet.deleteSheet(table.id + "-screen");
        stylesheet.deleteSheet(table.id + '-print');
    };

    _prototype.responseiveReflow = function _responsive_reflow(source) {

        var table = this;

        _priv.reflow(table, false, false, source);
    };

    _prototype.showAllColumns = function _responsive_show_all_columns(columnsToShow) {

        var table = this;

        fastdom.mutate(function() {

            _priv.showColumn(table, columnsToShow, function() {

                _priv.reflow(table);

                table.reflow();

            });

        });
    };

    _prototype.revertResponsiveView = function _revert_responsive_view(evt) {

        _events.tableRevert(evt);

    };

    // ===============
    // Setup Functions
    // ===============

    _setup.responsive = function _responsive (table, next) {

        // start by defining some style sheets These we will keep for the long haul
        table.config.plugins.responsive.stylesheet = stylesheet.newSheet(table.id + "-screen");
        table.config.plugins.responsive.printStyleSheet = stylesheet.newSheet(table.id + '-print', 'print');

        if (table.dataStore && table.dataStore.attributes['data-type'] && table.dataStore.attributes['data-type'] === "pivot") {
            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'responsive', func: 'setup'}, 'Bypassing plugin because table is listed as pivot. For' + ' table: ' + table.id);
            next();
        }

        var responsiveOption = table.$self.attr('data-responsive');

        if (responsiveOption && responsiveOption === "false") {

            table.config.setup.responsive = false;
        }

        // Check to make sure that responsive should be setup on this table
        if (table.config.setup.responsive) {

            table.obj.$responsiveControl = table.obj.$tableWrapper.find('.emp-table-responsive-column-control');

            table.obj.$responsiveControl.on('click', function(evt) {
                _events.columnMenu(evt, table);
            });

            // Make a clone of the table
            var $tableClone = table.obj.$viewWrapper.clone().wrap('<div class="emp-table">').parent();

            if (table.dataStore.body && table.dataStore.body.rows.length > 100) {
                $tableClone.find('table tbody tr:gt(100)').remove();
            }

            // Before adding it, add the class needed to kep the column hidden
            $tableClone.addClass('table-responsive-copy');
        }

        var tableMinWidths = [];

        // We need to make some quick dom updates
        fastdom.mutate(function () {

            if (table.config.setup.responsive) {

                // Add it to the page
                emp.$body.append($tableClone);

            }

            fastdom.measure(function () {

                var currentTableSize = emp.$window.outerWidth();

                // Save off the current window sizes
                table.config.plugins.responsive.previousSize = currentTableSize;
                table.config.plugins.responsive.currentSize = currentTableSize;

                if (table.config.setup.responsive) {

                    var $headers = $tableClone.find('table thead tr').eq(0).children('th');

                    for (var i = 0, len = $headers.length; i < len; i++) {

                        var minWidth = $($headers[i]).outerWidth();

                        // Override to ensure a specific minimum width
                        if (minWidth < 32) {
                            minWidth = 32;
                        }

                        tableMinWidths.push(minWidth);
                    }
                }

                fastdom.mutate(function () {

                    if ($tableClone) {

                        // Remove the copy as we no longer need it.
                        $tableClone.remove();
                    }

                    // Save off the minimum column lengths found
                    table.config.plugins.responsive.columnMins = tableMinWidths;

                    // Call the column definition creation function
                    _priv.createColumnDefinitions(table);

                    // Now that the column definitions have been created create the show/hide order
                    _priv.priorityOrder(table);

                    fastdom.measure(function() {

                        if (table.config.plugins.responsive.order.length >= 1 && table.config.setup.responsive) {

                            // Expose a way that settings can be pasted in to hide user hidden columns
                            var columnsToHide = table.config.plugins.responsive.colState.always.hidden.concat(table.config.plugins.responsive.colState.hidden);

                            if (typeof userTablePreferences === "object" && userTablePreferences.hidden && userTablePreferences.visible) {

                                // Check for indexs that should be hidden
                                if (Array.isArray(userTablePreferences.hidden) && userTablePreferences.hidden.length > 0) {

                                    for (var h = 0, hLen = userTablePreferences.hidden.length; h < hLen; h++) {

                                        // Check to make sure the index is in the to be hidden array
                                        if (columnsToHide.indexOf(userTablePreferences.hidden[h]) === -1) {

                                            columnsToHide.push(userTablePreferences.hidden[h]);
                                        }
                                    }

                                }

                                // Check for indexs that should be visible
                                if (Array.isArray(userTablePreferences.visible) && userTablePreferences.visible.length > 0) {

                                    for (var v = 0, vLen = userTablePreferences.visible.length; v < vLen; v++) {

                                        // Check to make sure the index is not the to be columns to hide array
                                        if (columnsToHide.indexOf(userTablePreferences.visible[v]) !== -1) {

                                            var visPos = columnsToHide.indexOf(userTablePreferences.visible[v]);

                                            // Remove column from to hide array as it should be shown.
                                            columnsToHide.splice(visPos, 1);
                                        }
                                    }

                                }

                                // Turn automatic reflowing of as a specific table arrangement was requested.
                                table.config.plugins.responsive.automatic = false;

                            }


                            // Check to see if any columns have been marked as hidden always or hidden initially
                            if (columnsToHide.length) {

                                // Call the hide column private function
                                _priv.hideColumn(table, columnsToHide);
                            }

                            // Setup window reflow event
                            emp.$window.on('resize', {table: table}, _events.resize);


                            // Reflow the table.
                            _priv.reflow(table, false, true);
                        }

                        // Fix the empty table colspan because we removed the column
                        if (table.dataStore.emptyTable || table.dataStore.largeTable) {

                            _priv.fixEmptyTable(table, true);
                        }

                    });
                });
            });
        });


        // Items to do when the debind table function is called.
        table.$self.on('debind', function () {

            emp.$window.off('resize', _events.resize);

        });

        next();
    };

    return {
        _setup: _setup,
        _defaults: _defaults,
        _prototype: _prototype
    };

});

// $ json-server audit.json
// http://localhost:8888/dist/tests/table/selection-popup.html

define('tableFilter',[], function () {
    ///////////////
    // Constants //
    ///////////////

    var CLASSES = {
        // Global classes used and defined outside of this plugin
        hidden: 'cui-hidden',
        uiOnly: 'cui-ui-only',
        hideSpinner: 'cui-hide-spinner',
        hideFromScreen: 'cui-hide-from-screen',
        rowFlex: 'cui-flex-row',
        colSmall: 'cui-col-small',
        colFlexSmall: 'cui-flex-col-small',
        colFixedSmall100: 'cui-fixed-col-small-100px',
        colFixedSmall20: 'cui-fixed-col-small-20px',
        datePicker: 'cui-c-datepicker',
        icon: 'cui-icon',

        // Table component classes
        controlRow: 'emp-icon-table-filter-toggle',

        // Plugin-specific classes that are only used here
        filterRow: 'emp-filter-row emp-tablefilter-wrapper',
        filterCell: 'emp-tablefilter-cell',
        filterInput: 'emp-tablefilter-input',
        filterNone: 'emp-tablefilter-none',
        filterPane: 'emp-tablefilter-optionpane',
        filterSelectedParam: 'emp-tablefilter-optionpane-selected-option',
        optionPaneRadioOption: 'emp-tablefilter-optionpane-radio-option',
        optionPaneClose: 'emp-tablefilter-optionpane-close',
        datePaneSection: 'emp-tablefilter-optionpane-date-section',
        datePaneSelection: 'emp-tablefilter-optionpane-date-selection',
        datePaneControls: 'emp-tablefilter-optionpane-date-controls',
        datePaneRangeRuleCheckbox: 'emp-tablefilter-range-checkbox',
        dataPaneLabel: 'emp-tablefilter-optionpane-date-label',
        datePaneStateRange: 'emp-tablefilter-optionpane-startRange',
        datePaneEndRange: 'emp-tablefilter-optionpane-endRange',
        datePaneRangeInput: 'emp-tablefilter-optionpane-date-input-begin',
        datePaneRangeCheckbox: 'emp-tablefilter-optionpane-date-check-begin',
        datePaneMatchingMonth: 'emp-tablefilter-optionpane-date-month',
        datePaneMatchingDay: 'emp-tablefilter-optionpane-date-day',
        datePaneMatchingYear: 'emp-tablefilter-optionpane-date-year',
    };

    // Miscellaneous values that are referenced by multiple functions
    var VALUES = {
            dateRegex: /(\d{1,2})\/(\d{1,2})\/(\d{4})/,
            dateButtonDefaultText: '&nbsp;',
            inputTimer: 350,
            attributes: {
                dataFilterIndex: 'data-filter-index',
                dataColIndex: 'data-col-index',
            },
            ignoreFocusEventAttr: 'data-ignore-next-focus',
    };

    var DATE_SETTINGS = {
        isSet: false, // Whether any values have been applied at all. If `false`, then this rule should be ignored
        range: {
            enabled: false,
            begin: '',
            end: '',
        },
        matching: {
            enabled: false,
            day: 0,
            month: 0,
            year: 0,
        },
        lastSearch: ''
    };

    // Private globals

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _rules = {};
    var _prototype = {};
    var _defaults = {
        setup: {
            filter: true,
        },
        plugins: {
            filter: {
            },
        },
    };
    var _typingTimer;

    // Elements used in the date option pane
    var $dateRangeCheckbox;
    var $dateRangeBeginCheckbox;
    var $dateRangeBeginInput;
    var $dateRangeEndCheckbox;
    var $dateRangeEndInput;
    var $dateMatchCheckbox;
    var $dateMatchInputMonth;
    var $dateMatchInputDay;
    var $dateMatchInputYear;
    var $dateMatchInputHidden;
    var $includeBlankCheckbox;

    //////////////////
    // Rule methods //
    //////////////////

    // These methods evaluate a given cell against a filter rule. They are called by `_priv.executeFilters()` as needed. There is one function for each rule type.

    _rules.alpha = function _rulesAlpha (colRule, dataStore /*, table*/) {
        var compareValue = colRule.compareValue.toLowerCase().trim();

        // Check to make sure the value exists
        if (typeof compareValue !== 'undefined' && compareValue !== '') {
            // We have a comparison so get the actual cell value from the dataStore.
            var cellValue = _priv.getColumnValue(dataStore).toLowerCase().trim();

            // First check to see if the cell is empty
            if (cellValue === '') {
                return false;
            }
            // alpha check is simply to verify the index exists
            else if (cellValue.indexOf(compareValue) === -1) {
                // Index not found; skip
                return false;
            }
        }

        // All is fine fallback
        return true;
    };

    _rules.alphaNumeric = function _rulesAlphaNumeric (colRule, dataStore) {

        var compareValue = colRule.compareValue.toLowerCase().trim();

        // Check to make sure the value exists
        if (typeof compareValue !== 'undefined' && compareValue !== '') {
            // We have a comparison so get the actual cell value from the dataStore.
            var cellValue = _priv.getColumnValue(dataStore).toLowerCase().trim();

            // First check to see if the cell is empty
            if (cellValue === '') {
                return false;
            }
            // alpha check is simply to verify the index exists
            else if (cellValue.indexOf(compareValue) === -1) {
                // Index not found; skip
                return false;
            }
        }

        // All is fine fallback
        return true;
    };

    _rules.numeric = function _rulesNumeric (colRule, dataStore /*, table*/) {

        var compareValue = colRule.compareValue.toLowerCase().trim();

        // Check to make sure the value exists
        if (typeof compareValue !== 'undefined' && compareValue !== '') {
            // We have a comparison so get the actual cell value from the dataStore.
            var cellValue = _priv.getColumnValue(dataStore).toLowerCase().trim();

            // Strip commas from the value because `parseFloat` can't handle them (e.g. it thinks `3,000` is `3`)
            cellValue = cellValue.replace(/,/g, '');

            if (!colRule.filterParams) {
                colRule.filterParams = 'gte';
            }

            // Parse the values
            compareValue = (isNaN(parseFloat(compareValue))) ? 0: parseFloat(compareValue);
            cellValue =    ( isNaN( parseFloat(cellValue) ) ) ? 0 : parseFloat(cellValue);

            switch (colRule.filterParams) {
                case 'gt':
                    if (cellValue > compareValue) {
                        return true;
                    }

                    break;

                case 'gte':

                    if (cellValue >= compareValue) {
                        return true;
                    }

                    break;

                case 'eq':

                    if (cellValue === compareValue) {

                        return true;
                    }

                    break;

                case 'lt':
                    if (cellValue < compareValue) {
                        return true;
                    }

                    break;

                case 'lte':
                    if (cellValue <= compareValue) {
                        return true;
                    }

                    break;

                case 'co':
                    if (cellValue.toString().indexOf(compareValue.toString()) !== -1) {
                        return true;
                    }

                    break;

                default:
                    // Fallback to skipping the row
                    return false;
            }
        }

        // Fallback to skipping the row
        return false;
    };

    _rules.score = function _rulesScore (colRule, dataStore /*, table*/) {
        var compareValue = colRule.compareValue.toLowerCase().trim();

        // Check to make sure aa
        if (compareValue !== null && compareValue !== undefined && compareValue !== '') {
            // We have a comparison so get the actual cell value from the dataStore.
            var cellValue = _priv.getColumnValue(dataStore).toLowerCase().trim();

            if (colRule.filterParams === undefined) {
                colRule.filterParams = 'gte';
            }

            // Parse the values
            compareValue = (isNaN(parseFloat(compareValue))) ? 0: parseFloat(compareValue);
            cellValue =    ( isNaN( parseFloat(cellValue) ) ) ? 0 : parseFloat(cellValue);

            switch (colRule.filterParams) {
                case 'gt':
                    if (cellValue > compareValue) {
                        return true;
                    }

                    break;

                case 'gte':

                    if (cellValue >= compareValue) {
                        return true;
                    }

                    break;

                case 'eq':

                    if (cellValue === compareValue) {

                        return true;
                    }

                    break;

                case 'lt':
                    if (cellValue < compareValue) {
                        return true;
                    }

                    break;

                case 'lte':
                    if (cellValue <= compareValue) {
                        return true;
                    }

                    break;

                case 'co':
                    if (cellValue.toString().indexOf(compareValue.toString()) !== -1) {
                        return true;
                    }

                    break;

                default:
                    // Fallback to skipping the row
                    return false;
            }
        }

        // Fallback to skipping the row
        return false;
    };

    _rules.notifier = function _rulesNotifier (colRule, dataStore /*, table*/) {
        var cellValue = _priv.getColumnValue(dataStore);

        switch (colRule.compareValue) {
            // Special values:

            // Rows with no notifiers
            case ':none':
                if (cellValue === '' || cellValue === undefined) {
                    return true;
                }
                else {
                    return false;
                }

                break;

            // Rows with some notifier(s)
            case ':any':
                if (cellValue !== '') {
                    return true;
                }
                else {
                    return false;
                }

                break;

            // Rows with the specified notifier
            default:
                if (cellValue === undefined) {
                    cellValue = '';
                }
                else {
                    cellValue = cellValue.toLowerCase();
                }

                // Check and match for a compare
                if (colRule.compareValue === cellValue) {
                    return true;
                }
                else {
                    return false;
                }

                break;
        }
    };

    _rules.date = function _rulesDate (colRule, dataStore /*, table*/) {
        var cellValue = _priv.getColumnValue(dataStore);
        var settings = colRule.dateSettings;
        var failsToSatisfyCondition = false;
        var cellValuePieces;

        // "Matching" option
        if (settings.matching.enabled) {
            if (VALUES.dateRegex.test(cellValue)) {
                // Break the column value into pieces
                cellValuePieces = VALUES.dateRegex.exec(cellValue).splice(1);

                // Check against each piece as long as the user has provided a value (i.e. ignore if the rule value is not > 0)

                // Exact match for the month
                if (settings.matching.month && settings.matching.month !== parseInt(cellValuePieces[0], 10)) {
                    failsToSatisfyCondition = true;
                }
                // Exact match for the day
                else if (settings.matching.day && settings.matching.day !== parseInt(cellValuePieces[1], 10)) {
                    failsToSatisfyCondition = true;
                }
                // Allow partial match for the year
                else if (settings.matching.year && cellValuePieces[2].indexOf(settings.matching.year) === -1) {
                    failsToSatisfyCondition = true;
                }
            }
            else if(settings.matching.month || settings.matching.day || settings.matching.year){
                failsToSatisfyCondition = true;
            }
        }

        // "Range" option
        if (settings.range.enabled) {
            // Check the row's validity:
            if(VALUES.dateRegex.test(cellValue)){

                // Convert the cell's value to a Date object
                cellValue = new Date(cellValue);

                // Test against begin date only
                if (settings.range.begin && !settings.range.end) {
                    // `cellValue` must be newer than the begin date (inclusive)
                    if (cellValue - new Date(settings.range.begin) < 0) {
                        failsToSatisfyCondition = true;
                    }
                }
                // Test against end date only
                else if (!settings.range.begin && settings.range.end) {
                    // `cellValue` must be older than the end date (inclusive)
                    if (new Date(settings.range.end) - cellValue < 0) {
                        failsToSatisfyCondition = true;
                    }
                }
                // Test against both begin and end dates
                else if (settings.range.begin && settings.range.end) {
                    // `cellValue` must be older than the end date (inclusive) or newer than the begin date (inclusive)
                    if ((new Date(settings.range.end) - cellValue < 0) || (cellValue - new Date(settings.range.begin) < 0)) {
                        failsToSatisfyCondition = true;
                    }
                }
            }
            else if(settings.range.begin || settings.range.end){
                failsToSatisfyCondition = true;
            }
        }
        // Else, neither range nor matching was enabled, so the rule is satisfied by default

        return !failsToSatisfyCondition;
    };

    _rules.rating = function _ruleRating (colRule, dataStore) {

        var compareValue = colRule.compareValue;

        if (compareValue !== "") {

            var ratingCompare = parseFloat(colRule.compareValue);

            var cellValue = dataStore.contents[0];

            if (typeof cellValue === "object" && cellValue.type === "rating") {

                cellValue = cellValue.parts.hidden.input.attributes.value;

                if (cellValue !== undefined && parseFloat(cellValue) === parseFloat(compareValue)) {

                    return true;
                }
                else {

                    return false;
                }

            }
            else {

                return false;
            }


        }

        return true;
    };

    _rules.link = function _ruleLink (colRule, dataStore) {
        var compareValue = colRule.compareValue.toLowerCase().trim();

        // Check to make sure the value exists
        if (typeof compareValue !== 'undefined' && compareValue !== '') {
            // We have a comparison so get the actual cell value from the dataStore.
            var cellValue = _priv.getColumnValue(dataStore).toLowerCase().trim();

            // First check to see if the cell is empty
            if (cellValue === '') {
                return false;
            }
            // alpha check is simply to verify the index exists
            else if (cellValue.indexOf(compareValue) === -1) {
                // Index not found; skip
                return false;
            }
        }

        // All is fine fallback
        return true;
    };

    ///////////////////////////
    // Data store management //
    ///////////////////////////

    _priv.getColumnValue = function _getColumnValue (dataStore) {
        // First check for contents array
        if (dataStore.contents && dataStore.contents.length > 0) {
            // we have contents, so look through all of the contents and find values
            var cellContents = '';

            for (var i = 0, len = dataStore.contents.length; i < len; i++) {

                // Handle inputs
                if (dataStore.contents[i].template && dataStore.contents[i].template === 'field') {
                    if (dataStore.contents[i].input.attributes && dataStore.contents[i].input.attributes.value) {
                        cellContents += dataStore.contents[i].input.attributes.value;
                    }
                }
                // Handle score component
                else if (dataStore.contents[i].template && dataStore.contents[i].template === 'score') {
                    if (dataStore.contents[i].percentage) {
                        cellContents += dataStore.contents[i].percentage;
                    }
                }
                else {
                    cellContents += dataStore.contents[i].text;
                }
            }

            return cellContents;
        }
        else {
            return (dataStore.text === undefined) ? '' : dataStore.text;
        }
    };

    /**
     * Iterates through the rules and applies them to the table rows
     *
     * This is the main function that actually applies the filters to the table's data store and causes its view to be refreshed
     *
     * @param   {Object}  table  Table instance
     */
    _priv.executeFilters = function _executeFilters (table) {

        var filterColRules = [];
        var i;
        var len;
        var j;
        var jLen;
        var colRule;
        var ruleType;
        var dateColRules = []; // Holds the parameters that need to be passed to `_priv.positionPane()` for open date panes

        // Start by looking for the headers that are causing the table columns that need to be filtered.
        for (i = 0, len = table.config.plugins.filter.filterRow.length; i < len; i++) {
            if (table.config.plugins.filter.filterRow[i].compareValue !== '' || (table.config.plugins.filter.filterRow[i].hasOwnProperty('dateSettings') && table.config.plugins.filter.filterRow[i].dateSettings.isSet)) {
                filterColRules.push(table.config.plugins.filter.filterRow[i]);
            }
        }

        table.resetLoadRecord();

        var filteredSelected = false;

        // Only continue if we found that a column is requesting to be filtered.
        if (filterColRules.length > 0) {

            // Now we need to loop through each row and apply said filters
            bodyRows:
            for (i = 0, len = table.dataStore.body.rows.length; i < len; i++) {

                // Unset the initial skip value back to false
                table.dataStore.body.rows[i].skip = false;

                // Loop throught the different header items
                filterDefs:
                for (j = 0, jLen = filterColRules.length; j < jLen; j++) {
                    colRule = filterColRules[j];
                    ruleType = colRule.filter;

                    // Override to route to correct filter function
                    switch(ruleType) {

                        case 'currency':
                        case 'score':
                            ruleType = 'numeric';
                            break;
                    }

                    // Only continue with this filter check it there is a known filter rule related to it
                    if (typeof _rules[ruleType] === 'function') {
                        var colDataStore = table.dataStore.body.rows[i].columns[colRule.dataStoreIndex];
                        var result = _rules[ruleType](colRule, colDataStore, table);

                        // Check if this is a date rule with an open option pane
                        if (ruleType === 'date') {
                            // Make sure we haven't already stored this column's info (the loop will run for every row in the table and we want to avoid duplicates)
                            if (dateColRules.indexOf(colRule) === -1) {

                                // Add the parameter that we'll need to later when we call `_priv.positionPane()`
                                dateColRules.push(colRule);
                            }
                        }

                        if (!result) {
                            // mark the table as skipable
                            table.dataStore.body.rows[i].skip = true;

                            // include rows with blank data
                            if(ruleType === 'date') {

                                if($includeBlankCheckbox[0].checked){

                                    if (!colDataStore.text || colDataStore.text === '') {
                                        table.dataStore.body.rows[i].skip = false;
                                    }
                                }
                            }

                            if (table.dataStore.body.rows[i].selected) {
                                filteredSelected = true;
                            }

                            continue bodyRows;
                        }
                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'table', submodule: 'filters', func: 'executeFilters'}, 'Could not find valid ruleType:' + ruleType);
                    }
                }
            }
        }
        else {

            journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'filters', func: 'executeFilters'}, 'Could not identify the row attempting to be filtered.');

            for (i = 0, len = table.dataStore.body.rows.length; i < len; i++) {
                // Unset the initial skip value back to false
                table.dataStore.body.rows[i].skip = false;
            }
        }

        // Re-render the table
        table.renderBody();

        // There may be date option panes that need to be repositioned if the width of the button or table columns changed
        if (dateColRules.length) {
            dateColRules.forEach(function _executeFilters_dateLoop (dateColRule) {
                if (colRule.$options && dateColRule.optionsVisibile) {

                    // Use a timer to allow the table to reflow first
                    setTimeout(function _executeFilters_dateLoop_timeout () {

                        _priv.positionPane(dateColRule.$filterControl, dateColRule, table, true);
                    }, 100);
                }

                _priv.setButtonText(dateColRule);
            });
        }

        if (table.dataStore.selectable) {

            // var $firstCell = table.config.plugins.filter.$filterRow.find('td').eq(0);
            // var $firstCellContents = $firstCell.children();

            // if (filteredSelected && $firstCellContents.length === 0) {

            //     $('<span>', {
            //         class: 'emp-icon-warning',
            //         title: "Current filter is hidding selected rows"
            //     }).appendTo($firstCell);
            // }
            // else if (!filteredSelected && $firstCellContents.length) {

            //     $firstCell.empty();
            // }

            // Clear all selections on filter.
            table.setAllSelection(false, table);
        }

        table.$self.trigger('table.filter');
    };

    _priv.setButtonText = function _setButtonText (colRule) {
        var buttonText = '';
        var settings = colRule.dateSettings;
        var isMatchingRuleInvalid = false;
        var isRangeRuleInvalid = false;

        // "Matching" option
        if (settings.matching.enabled) {
            // Month
            if (settings.matching.month) {
                if (settings.matching.month < 10) {
                    buttonText += '0'; // Leading zero
                }

                buttonText += settings.matching.month; // Actual value
            }
            else {
                buttonText += '__';
            }

            // Separator
            buttonText += '/';

            // Day
            if (settings.matching.day) {
                if (settings.matching.day < 10) {
                    buttonText += '0';
                }

                buttonText += settings.matching.day;
            }
            else {
                buttonText += '__';
            }

            // Separator
            buttonText += '/';

            // Year
            if (settings.matching.year) {
                buttonText += '' + settings.matching.year; // Convert to string so leading zeros are not dropped
            }
            else {
                buttonText += '____';
            }

            // No values were actually entered. This happens when the box is checked but no valid values were typed.
            if (buttonText === '__/__/____') {
                buttonText = '';
                isMatchingRuleInvalid = true;
            }
        }

        // "Range" option
        if (settings.range.enabled) {
            // Only the Begin date was set
            if (settings.range.begin && !settings.range.end) {
                buttonText = 'Begin ' + settings.range.begin;
            }
            // Only the End date was set
            else if (!settings.range.begin && settings.range.end) {
                buttonText = 'End ' + settings.range.end;
            }
            // Both begin and end dates were set
            else if (settings.range.begin && settings.range.end) {
                buttonText = settings.range.begin + ' - ' + settings.range.end;
            }
            // Neither one is properly set
            else {
                isRangeRuleInvalid = true;
            }
        }
        // Else, neither range nor matching was enabled, so the rule is satisfied by default

        // Validate the button text:

        // Both types of filters were applied
        if (!isRangeRuleInvalid && !isMatchingRuleInvalid && settings.matching.enabled && settings.range.enabled) {
            // This is too complex to describe in the small amount of space occupied by the button, so just display a generic message
            buttonText = '<em>(Multiple)</em>';
        }
        // Fall back to the default text if nothing was set
        else if (buttonText.length === 0) {
            buttonText = VALUES.dateButtonDefaultText;
        }

        // Update the button element
        colRule.$filterControl.html(buttonText);
    };

    /**
     * Interprets the state of the date range UI and updates the filter accordingly
     *
     * The `_updateDateRangeSettings` argument is useful for performance reasons, e.g. if you will be performing a series of changes and do not want to update the table until all changes are finished
     *
     * @param   {Object}   table                Table instance
     * @param   {Object}   colRule              Column rule object
     * @param   {Boolean}  doNotExecuteFilters  Do not update the table view by calling `_priv.executeFilters()`. Optional.
     */
    _priv.updateDateRangeSettings = function _updateDateRangeSettings (table, colRule, doNotExecuteFilters) {

        // Validate the user's entry and normalize the date value as mm/dd/yyyy
        var __getDateValue = function __getDateValue (value) {

            var parts; // Pieces of the date (month, day, and year)

            // Only proceed if the value is a valid date
            if (VALUES.dateRegex.test(value)) {
                // Make sure the month and day are zero-padded so it exactly fits the MM/DD/YYYY format
                parts = VALUES.dateRegex.exec(value);

                // Reset the value to an empty string which will will build back up with the matching pieces from the regex
                value = '';

                // Month
                if (parts[1].length === 1) {
                    value += '0';
                }

                value += parts[1] + '/';

                // Day
                if (parts[2].length === 1) {
                    value += '0';
                }

                value += parts[2] + '/';

                // Year
                value += parts[3];

                return value;
            }
            else {
                return '';
            }
        };

        var lastSearch = colRule.dateSettings.lastSearch;

        // Begin date

        // Update the actual date value that goes with this check box in our rule object
        if ($dateRangeBeginCheckbox.is(':checked')) {
            // Update the rule
            colRule.dateSettings.range.begin = __getDateValue($dateRangeBeginInput.val().trim());
        }
        else {
            // Clear the entry in the rule object if the box is unchecked so that the value will not apply. The user's typed-in value will remain in the check box, we just don't want it to affect the filtering of the table.
            colRule.dateSettings.range.begin = '';
        }

        // End date

        if ($dateRangeEndCheckbox.is(':checked')) {
            colRule.dateSettings.range.end = __getDateValue($dateRangeEndInput.val().trim());
        }
        else {
            colRule.dateSettings.range.end = '';
        }

        // Re-evaluate the table based on the updated rules, unless the caller requested not to do so
        if (!doNotExecuteFilters) {

            var nextSearch = colRule.dateSettings.range.begin + "|" + colRule.dateSettings.range.end;

            if (nextSearch !== lastSearch) {


                if (lastSearch === "" && nextSearch === "|") {

                    colRule.dateSettings.lastSearch = nextSearch;
                }
                else {

                    colRule.dateSettings.lastSearch = nextSearch;

                    _priv.executeFilters(table);
                }

            }

        }

        return colRule;
    };

    ////////////////////////
    // UI and DOM methods //
    ////////////////////////

    /**
     * Creates the UI of the filter row and its inputs
     *
     * @param   {Event}  evt  [description]
     * @return  {[type]}       [description]
     */
    _priv.generateFilterRow = function _generateFilterRow (evt, tableRef) {

        fastdom.measure(function _generateFilterRow_a () {

            var $row = $('<tr/>');
            var table = false;
            var $firstRow = false;
            if (evt) {
                table = evt.data.table;
                $firstRow = table.obj.$thead.children('tr').eq(0).children('th');
            }
            else {
                table = tableRef;
                $firstRow = tableRef.obj.$thead.children('tr').eq(0).children('th');
            }
            var i;
            var len;
            var j;
            var jLen;

            // Create the storage object
            var row = [];

            // Setup `<tr>`
            $row
                .addClass(CLASSES.filterRow)
                .addClass(CLASSES.uiOnly);

            // Loop through the header
            for (i = 0, len = $firstRow.length; i < len; i++) {
                // Create the header cell
                var $filterCell = $('<td/>',
                                        {
                                            'class': CLASSES.filterCell,
                                        })
                                        .attr(VALUES.attributes.dataFilterIndex, i);

                var colRule = {
                        filter: false,
                        $options: false,
                        width: 'auto',
                        compareValue: '',
                        filterParams: false,
                        dataStoreIndex: false
                    };

                // Get the header cell for reference
                var $headerCell = $($firstRow[i]);

                // Lookup the column
                var colStore = table.dataStore.head.rows[0].columns[$headerCell.attr(VALUES.attributes.dataColIndex)];

                // Save off the header cell reference
                colRule.$headerCell = $headerCell;

                // Check to see if this column is either hidden or one of our support column
                if (colStore === undefined || colStore.visibility === 'hidden' ||
                    $headerCell.hasClass('table-control-col') || (colStore.attribute && colState.attribute['data-type'] === 'button') ||
                        (colStore.attribute && colState.attribute['data-type'] === 'buttonMenu') ) {

                    // For the hidden table cells do nothing!
                    if (colStore !== undefined && colStore.visibility && colStore.visibility === 'hidden') {
                        // create now jQuery element for this cell
                        colRule.$filterCell = $filterCell.addClass(CLASSES.hidden);
                    }
                    else {
                        colRule.$filterCell = $filterCell.addClass(CLASSES.filterNone);
                    }
                }
                // Let's assume that this is a filterable column
                else {
                    // Save off the dataStore index
                    colRule.dataStoreIndex = $headerCell.attr(VALUES.attributes.dataColIndex);

                    // Pull out the data-type bill
                    colRule.filter = (colStore.attributes && colStore.attributes['data-type']) ? colStore.attributes['data-type'] : 'alpha';

                    if (colRule.filter === 'alpha' && colStore.style && colStore.style.indexOf('min-width') !== -1) {
                        colRule.filter = 'notifier';
                    }

                    // Create a filter control based on the column's type
                    switch (colRule.filter) {
                        case 'alpha':
                        case 'alphaNumeric':
                        case 'link':
                            colRule.$filterControl = $('<input/>',
                                                        {
                                                            'id': table.id + '_input_filter_' + i,
                                                            'class': CLASSES.filterInput,
                                                            'data-text': "text",
                                                            'type': 'text',
                                                        })
                                                        .attr('size', '1') // This attribute must be present to control its size with CSS; the value doesn't matter
                                                        .on('keyup', {table: table}, _events.onInitialInputKeyup)
                                                        .on('mouseup', {table: table}, _events.onInputMouseUp);

                            $filterCell.append(colRule.$filterControl);

                            break;

                        case 'date':
                            colRule.$filterControl = $('<button/>',
                                                        {
                                                            'id': table.id + '_button_filter_' + i,
                                                            'class': CLASSES.filterInput,
                                                            'data-text': "date",
                                                            'type': 'button',
                                                            //'size': '1',
                                                        })
                                                        .attr('size', '1')
                                                        .on('click', {table: table}, _events.onDateFilterButtonClick)
                                                        .on('keyup',   {table: table}, _events.onDateFilterButtonFocus)
                                                        .html('&nbsp;');

                            $filterCell.append(colRule.$filterControl);

                            // Add the standard date settings object
                            colRule.dateSettings = $.extend(true, {}, DATE_SETTINGS);

                            break;

                        case 'numeric':
                        case 'currency':
                        case 'score':
                            colRule.$filterControl = $('<input/>',
                                                        {
                                                            'id': table.id + '_input_filter_' + i,
                                                            'class': CLASSES.filterInput,
                                                            'type': 'text',
                                                            'data-text': "numbers",
                                                            //'size': '1',
                                                        })
                                                        .attr('size', '1')
                                                        .on('keyup',   {table: table}, _events.onInitialInputKeyup)
                                                        .on('keypress', {table: table}, _events.onInputNumberKeyPress)
                                                        .on('keydown', {table: table}, _events.onInputKeyDown)
                                                        .on('focus',   {table: table}, _events.onInputFocus)
                                                        .on('mouseup', {table: table}, _events.onInputMouseUp);

                            $filterCell.append(colRule.$filterControl);

                            break;

                        case 'notifier':

                            var notifierOptions = [];

                            for (j = 0, jLen = table.dataStore.body.rows.length; j < jLen; j++) {
                                var column = table.dataStore.body.rows[j].columns[$headerCell.attr(VALUES.attributes.dataColIndex)];
                                var columnValue = _priv.getColumnValue(column);

                                if (notifierOptions.indexOf(columnValue) === -1 && columnValue !== '' && columnValue !== undefined) {
                                    notifierOptions.push(columnValue);
                                }
                            }

                            // Only provide a filter if notifiers were found
                            if (notifierOptions.length > 0) {
                                // Sort the notifiers into order.
                                notifierOptions = notifierOptions.sort();

                                // Create select and append default blank element
                                colRule.$filterControl = $('<select/>',
                                                            {
                                                                'id': table.id + '_input_filter_' + i,
                                                                'class': CLASSES.filterInput,
                                                            })
                                                            .attr('size', '1')
                                                            .append(
                                                                $('<option/>')
                                                                    .val('')
                                                            )
                                                            .on('change', {table: table}, _events.onChange);


                                for (j = 0, jLen = notifierOptions.length; j < jLen; j++) {
                                    colRule.$filterControl
                                        .append(
                                            $('<option/>',
                                                {
                                                    value: notifierOptions[j],
                                                })
                                                .text(notifierOptions[j])
                                        );
                                }

                                // Special none value
                                colRule.$filterControl
                                    .append(
                                        $('<option/>',
                                            {
                                                value: ':none',
                                            })
                                            .text('(None)')
                                    );

                                // Special any value
                                colRule.$filterControl
                                    .append(
                                        $('<option/>',
                                            {
                                                value: ':any',
                                            })
                                            .text('(Any)')
                                    );

                                $filterCell.append(colRule.$filterControl);
                            }

                            break;

                        case 'rating':

                            var ratingOptions = [0, 1, 2, 3, 4, 5];

                            // Create select and append default blank element
                            colRule.$filterControl = $('<select/>',
                                                        {
                                                            'id': table.id + '_input_filter_' + i,
                                                            'class': CLASSES.filterInput,
                                                        })
                                                        .attr('size', '1')
                                                        .append(
                                                            $('<option/>')
                                                                .val('')
                                                        )
                                                        .on('input', {table: table}, _events.onChange);

                            for (j = 0, jLen = ratingOptions.length; j < jLen; j++) {
                                colRule.$filterControl
                                    .append(
                                        $('<option/>',
                                            {
                                                value: ratingOptions[j],
                                            })
                                            .text(ratingOptions[j])
                                    );
                            }

                            $filterCell.append(colRule.$filterControl);

                            break;
                    }

                    // Save off the header cell
                    colRule.$filterCell = $filterCell;
                }

                $row.append($filterCell);

                // Save the column rule definition
                row.push(colRule);
            }

            table.config.plugins.filter.$filterRow = $row;
            table.config.plugins.filter.filterRow = row;

            fastdom.mutate(function _generateFilterRow_a () {
                table.obj.$tbody.prepend($row);

                fastdom.measure(function _generateFilterRow_b () {
                    // Check to see if we have a table footer and hide it if we do.
                    if (table.obj.$tfoot) {
                        table.obj.$tfoot.addClass(CLASSES.hidden);
                    }

                    table.reflow();
                });
            });

            // Watch for the filter row to be closed
            table.$self.on('table.hideFilterRow', {table: table}, _events.onFilterRowHide);
        });
    };

    /**
     * Creates a numeric options pane
     *
     * @param   {jQuery}  $input   Input field for the column
     * @param   {String}  id       ID of the option pane
     * @param   {Object}  colRule  Column rule object
     * @param   {Object}  table    Table instance
     */
    _priv.generateNumericPane = function _generateNumericPane ($input, id, colRule, table) {
        var $optionPane;
        var $optionsListContainer;
        var $optionsListItem;

        // Outer-pane
        $optionPane = $('<div/>',
                            {
                                'id': id,
                                'class': CLASSES.filterPane,
                                'data-source': table.id,
                            });

        // List of options
        $optionsListContainer = $('<ul/>');

        // Generic list item that will be cloned for each entry in the list
        $optionsListItem = $('<li/>',
                                {
                                    'class': CLASSES.optionPaneRadioOption,
                                });

        $optionsListContainer
            // Greater than
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<button/>',
                            {
                                'value': 'gt',
                                'type': 'button',
                            })
                            .text('Greater than')
                            .on('click', {colRule: colRule, table: table}, _events.onNumericOptionButtonClick)
                    )
            )

            // Greater than or equal to
            .append(
                $optionsListItem.clone()
                    .addClass(CLASSES.filterSelectedParam)
                    .append(
                        $('<button/>',
                            {
                                'value': 'gte',
                                'type': 'button',
                            })
                            .text('Greater than or equal to')
                            .on('click', {colRule: colRule, table: table}, _events.onNumericOptionButtonClick)
                    )
            )

            // Equal to
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<button/>',
                            {
                                'value': 'eq',
                                'type': 'button',
                            })
                            .text('Equal to')
                            .on('click', {colRule: colRule, table: table}, _events.onNumericOptionButtonClick)
                    )
            )

            // Less than or equal to
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<button/>',
                            {
                                'value': 'lte',
                                'type': 'button',
                            })
                            .text('Less than or equal to')
                            .on('click', {colRule: colRule, table: table}, _events.onNumericOptionButtonClick)
                    )
            )

            // Less than
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<button/>',
                            {
                                'value': 'lt',
                                'type': 'button',
                            })
                            .text('Less than')
                            .on('click', {colRule: colRule, table: table}, _events.onNumericOptionButtonClick)
                    )
            )

            // Contains
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<button/>',
                            {
                                'value': 'co',
                                'type': 'button',
                            })
                            .text('Contains')
                            .on('click', {colRule: colRule, table: table}, _events.onNumericOptionButtonClick)
                    )
            )

            // Close button
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<a/>',
                            {
                                'class': CLASSES.optionPaneClose,
                                'role': 'button',
                                'tabindex': '0',
                            })
                            .text('Close')
                            .on('click keydown', {colRule: colRule}, _events.onOptionPaneCloseClick)
                    )
            );

        // Add list to pane
        $optionPane.append($optionsListContainer);

        _priv.optionPaneList.push(colRule);

        return $optionPane;
    };

    _priv.generateDatePane = function _generateDatePane ($input, id, colRule, table) {
        var $optionPane;
        var $optionsListContainer;
        var $optionsListItem;
        var $dateSelection;
        var $dateControl;
        var $rangeWrapper;
        var $rangeSelection;
        var $rangeControl;
        var $startingRange;
        var $endingRange;
        var $match;
        var $matchSelection;
        var $matchControl;

        $optionPane = $('<div/>',
                            {
                                'class': CLASSES.filterPane,
                                'id': id,
                                'data-source': table.id,
                            });

        $optionsListContainer = $('<ul/>');

        $optionsListItem = $('<li/>',
                                {
                                    'class': CLASSES.datePaneSection,
                                });

        $dateSelection = $('<div/>',
                            {
                                'class': CLASSES.datePaneSelection,
                            });

        $dateControl = $('<div/>',
                            {
                                'class': CLASSES.datePaneControls,
                            });

        // Range Section
        $rangeWrapper = $optionsListItem.clone();

        $dateRangeCheckbox = $('<input/>',
                                {
                                    'id': id + '_range_selection',
                                    'class': CLASSES.datePaneRangeRuleCheckbox,
                                    'type': 'checkbox',
                                    'value': 'range',
                                })
                                .on('change keyup', {table: table, colRule: colRule, type: 'range'}, _events.onDateTypeChange);

        $rangeSelection = $dateSelection.clone()
                            .append(
                                $('<div/>',
                                    {
                                        'class': CLASSES.colSmall,
                                    })
                                    .append($dateRangeCheckbox)
                            )
                            .append(
                                $('<div/>',
                                    {
                                        'class': CLASSES.colSmall,
                                    })
                                    .append(
                                        $('<label/>')
                                            .attr('for', id + '_range_selection')
                                            .text('In Range')
                                    )
                            );

        $rangeControl = $dateControl.clone();

        // Starting Input
        // ============

        $startingRange = $('<div/>',
                            {
                                'class': CLASSES.datePaneStateRange,
                            });

        $dateRangeBeginCheckbox = $('<input/>',
                                    {
                                        'id': id + '_range_begin',
                                        'class': CLASSES.datePaneRangeCheckbox,
                                        'type': 'checkbox',
                                    })
                                    .on('change keyup', {table: table, colRule: colRule, part: 'begin'}, _events.onDateRangeChange);



        $dateRangeBeginInput = $('<input/>',
                                    {
                                        'id': id + '_range_begin_date',
                                        'class': CLASSES.datePaneRangeInput + ' emp-date',
                                        'type': 'text',
                                        'size': '10',
                                        'placeholder': 'MM/DD/YYYY',
                                    })
                                    // We need to watch `keyup` so we can update the UI live as the user types, and we also need to watch `change` because that's what the date picker will fire
                                    .on('change keyup', {table: table, colRule: colRule, part: 'begin'}, _events.onDateRangeChange);

        // Add Starting range checkbox
        $startingRange

            // Add Starting range checkbox label
            .append(
                $('<div/>', {})
                    .append($dateRangeBeginCheckbox)
                    .append(
                        $('<label/>',
                            {
                                'for': id + '_range_begin',
                                'class': CLASSES.dataPaneLabel
                            })
                            .text('Search Begin:')
                    )
            )

            // Add Date Input
            .append(
                $('<div/>', {})
                    .append(
                        $dateRangeBeginInput
                    )
                    .append(
                        $('<button/>',
                            {
                                'id': 'cal_' + id + '_range_begin_date',
                                'class': CLASSES.icon + ' ' + CLASSES.datePicker,
                                'type': 'button',
                                'title': 'Date Picker',
                            })
                            .text('Date Picker')
                    )
            );

        $rangeControl.append($startingRange);

        // Ending Input
        // ============

        $endingRange = $('<div/>', {
            'class': CLASSES.datePaneEndRange
        });

        $dateRangeEndCheckbox = $('<input/>',
                                    {
                                        'id': id + '_range_ending',
                                        'class': CLASSES.datePaneRangeCheckbox,
                                        'type': 'checkbox',
                                    })
                                    .on('change keyup', {table: table, colRule: colRule, part: 'end'}, _events.onDateRangeChange);

        $dateRangeEndInput = $('<input/>',
                                {
                                    'id': id + '_range_ending_date',
                                    'class': CLASSES.datePaneRangeInput + ' emp-date',
                                    'type': 'text',
                                    'size': '10',
                                    'placeholder': 'MM/DD/YYYY',
                                })
                                .on('change keyup', {table: table, colRule: colRule, part: 'end'}, _events.onDateRangeChange);

        // Add Ending range checkbox
        $endingRange
            .append(
                $('<div/>', {})
                    .append($dateRangeEndCheckbox)
                    .append(
                        $('<label/>',
                            {
                                'for': id + '_range_ending',
                                'class': CLASSES.dataPaneLabel
                            })
                            .text('Search End:')
                    )
            )

            // Add Date Input
            .append(
                $('<div/>', {})
                    .append($dateRangeEndInput)
                    .append(
                        $('<button/>',
                            {
                                'id': 'cal_' + id + '_range_ending_date',
                                'class': CLASSES.icon + ' ' + CLASSES.datePicker,
                                'type': 'button',
                                'title': 'Date Picker',
                            })
                            .text('Date Picker')
                    )
            );

        $rangeControl.append($endingRange);

        // Append range rows
        $rangeWrapper.append($rangeSelection);
        $rangeWrapper.append($rangeControl);

        // Add to the pane
        $optionsListContainer.append($rangeWrapper);

        // ======================================
        // Match Section
        // ======================================

        $match = $optionsListItem.clone();

        $dateMatchCheckbox = $('<input/>',
                                {
                                    'id': id + '_match_selection',
                                    'type': 'checkbox',
                                    'value': 'matching',
                                })
                                .on('change keyup', {table: table, colRule: colRule, type: 'matching'}, _events.onDateTypeChange);

        $matchSelection = $dateSelection.clone()
                            // Check box
                            .append(
                                $('<div/>',
                                    {
                                        'class': CLASSES.colSmall
                                    })
                                    .append($dateMatchCheckbox)
                            )
                            // Label
                            .append(
                                $('<div/>',
                                    {
                                        'class': CLASSES.colSmall,
                                    })
                                    .append(
                                        $('<label/>',
                                            {
                                                'for': id + '_match_selection',
                                            })
                                            .text('Matching')
                                    )
                            );

        $match.append($matchSelection);

        $matchControl = $dateControl.clone();

        $dateMatchInputMonth = $('<input/>',
                                    {
                                        'id': id + '_match_month',
                                        'class': CLASSES.datePaneMatchingMonth + ' ' + CLASSES.hideSpinner,
                                        'type': 'text',
                                        'placeholder': 'MM',
                                        'maxlength': '2',
                                        'size': '2'
                                    })
                                    .on('keyup', {table: table, colRule: colRule, part: 'month'}, _events.onDateMatchingChange);

        $dateMatchInputDay = $('<input/>',
                                {
                                    'id': id + '_match_day',
                                    'class': CLASSES.datePaneMatchingDay + ' ' + CLASSES.hideSpinner,
                                    'type': 'number',
                                    'placeholder': 'DD',
                                    'maxlength': '2',
                                    'size': '2'
                                })
                                .on('keyup', {table: table, colRule: colRule, part: 'day'}, _events.onDateMatchingChange);

        $dateMatchInputYear = $('<input/>',
                                {
                                    'id': id + '_match_year',
                                    'class': CLASSES.datePaneMatchingYear + ' ' + CLASSES.hideSpinner,
                                    'type': 'text',
                                    'placeholder': 'YYYY',
                                    'maxlength': '4',
                                    'size': '4'
                                })
                                .on('keyup', {table: table, colRule: colRule, part: 'year'}, _events.onDateMatchingChange);

        $dateMatchInputHidden = $('<input/>',
                                    {
                                        'id': id + '_match_hidden',
                                        'type': 'hidden',
                                    })
                                    .on('change', {table: table, colRule: colRule, part: 'hidden'}, _events.onDateMatchingChange);

        $matchControl
            // Month input
            .append($dateMatchInputMonth)
            .append(
                $('<label/>',
                    {
                        'for': id + '_match_month',
                        'class': CLASSES.hideFromScreen,
                    })
                    .text('Month')
            )
            .append(
                $('<span/>')
                    .text('/')
            )

            // Day input
            .append($dateMatchInputDay)
            .append(
                $('<label/>',
                    {
                        'for': id + '_match_day',
                        'class': CLASSES.hideFromScreen,
                    })
                    .text('Day')
            )
            .append(
                $('<span/>')
                    .text('/')
            )

            // Year input
            .append($dateMatchInputYear)
            .append(
                $('<label/>',
                    {
                        'for': id + '_match_year',
                        'class': CLASSES.hideFromScreen,
                    })
                    .text('Year')
            )
            .append($dateMatchInputHidden)

            .append(
                $('<button/>',
                    {
                        'id': 'cal_' + id + '_match_hidden',
                        'class': CLASSES.icon + ' ' + CLASSES.datePicker,
                        'type': 'button',
                        'title': 'Date Picker',
                    })
                    .text('Date Picker')
            );

        $match.append($matchControl);

        // Add to the pane
        $optionsListContainer.append($match);

        // ======================================
        // Include blank section
        // ======================================

        $includeBlank = $optionsListItem.clone();

        $includeBlankCheckbox = $('<input/>',
                                {
                                    'id': id + '_include_blank',
                                    'type': 'checkbox',
                                    'checked': 'checked',
                                    'value': 'include blank',
                                })
                                .on('change keyup',{table: table}, _events.onIncludeBlankChange);

        $includeBlankSelection = $dateSelection.clone()
                            //check box div
                            .append(
                                $('<div/>',
                                    {
                                        'class': CLASSES.colSmall
                                    })
                                    .append($includeBlankCheckbox)
                            )
                            //label div
                            .append(
                                $('<div/>',
                                    {
                                        'class': CLASSES.colSmall,
                                    })
                                    .append(
                                        $('<label/>',
                                            {
                                                'for': id + '_include_blank',
                                            })
                                            .text('Include Blank')
                                    )
                            );

        $includeBlank.append($includeBlankSelection);

        // Add to the pane
        $optionsListContainer.append($includeBlank);

        // ===========================================

        // Clear button
        $optionsListContainer
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<a/>',
                            {
                                'class': CLASSES.optionPaneClose,
                                'role': 'button',
                                'tabindex': '0',
                            })
                            .text('Clear')
                            .on('click', {table: table, colRule: colRule}, _events.onDateClearButtonClick)
                    )
            );

        // Close button
        $optionsListContainer
            .append(
                $optionsListItem.clone()
                    .append(
                        $('<a/>',
                            {
                                'class': CLASSES.optionPaneClose,
                                'role': 'button',
                                'tabindex': '0',
                            })
                            .text('Close')
                            .on('click', {colRule: colRule}, _events.onOptionPaneCloseClick)
                            .on('keyup', {colRule: colRule}, _events.onOptionPaneCloseKeydown)
                    )
            );

        // ==========================================

        // Add list to pane
        $optionPane.append($optionsListContainer);

        // Setup datepickers
        $startingRange.find('.' + CLASSES.datePicker).datepicker();
        $endingRange.find('.' + CLASSES.datePicker).datepicker();
        $matchControl.find('.' + CLASSES.datePicker).datepicker();

        _priv.optionPaneList.push(colRule);

        return $optionPane;
    };

    /**
     * Clears a date option pane and resets the column rule to the default settings
     *
     * @param   {Object}  colRule  Column rule
     *
     * @return  {Object}           Updated column rule
     */
    _priv.clearDatePane = function _clearDatePane (colRule) {

        // Replace all settings with a fresh, blank copy
        colRule.dateSettings = $.extend(true, {}, DATE_SETTINGS);

        // Clear the option pane's input fields
        if ($dateRangeCheckbox) {
            $dateRangeCheckbox.prop('checked', false);
        }

        if ($dateRangeBeginCheckbox) {
            $dateRangeBeginCheckbox.prop('checked', false);
        }

        if ($dateRangeBeginInput) {
            $dateRangeBeginInput.val('');
        }

        if ($dateRangeEndCheckbox) {
            $dateRangeEndCheckbox.prop('checked', false);
        }

        if ($dateRangeEndInput) {
            $dateRangeEndInput.val('');
        }

        if ($dateMatchCheckbox) {
            $dateMatchCheckbox.prop('checked', false);
        }

        if ($dateMatchInputMonth) {
            $dateMatchInputMonth.val('');
        }

        if ($dateMatchInputDay) {
            $dateMatchInputDay.val('');
        }

        if ($dateMatchInputYear) {
            $dateMatchInputYear.val('');
        }

        if ($dateMatchInputHidden) {
            $dateMatchInputHidden.val('');
        }

        // Reset the button text
        // Normally the text is set by `_rule.date()` but that function won't run how since `colRule.isSet` is `false`
        colRule.$filterControl.html(VALUES.dateButtonDefaultText);

        return colRule;
    };

    //////////////////
    // Option panes //
    //////////////////

    // Collection of all option panes' `colRule` objects so we know which option panes exist
    _priv.optionPaneList = [];

    /**
     * Opens a single option pane
     *
     * @param   {jQuery}  $input   Input element that goes with the option pane
     * @param   {Object}  colRule  Column rule object
     * @param   {Object}  table    Table instance
     */
    _priv.openPane = function _openPane ($input, colRule, table) {

        // Loop through all option panes to make sure no other ones are open
        _priv.optionPaneList.forEach(function (filterCol) {

            if (filterCol !== colRule) {

                _priv.closePane(filterCol, {noFocus: true});
            }
        });

        // Pane was not already visible, so setup the event listeners
        if (!colRule.optionsVisibile) {
            emp.$body.on('click',    {$input: $input, colRule: colRule, table: table}, _events.onBodyClick);
            emp.$window.on('resize', {$input: $input, colRule: colRule, table: table}, _events.onWindowResize);
        }

        // Hook to prevent just closed panes
        if (colRule.justClosed) {

            colRule.justClosed = false;
        }
        else {

            colRule.optionsVisibile = true;

            _priv.positionPane($input, colRule, table);

        }
    };

    /**
     * Closes a single option pane
     *
     * @param   {Object}   colRule            Column rule object
     * @param   {Boolean}  doNotRemoveEvents  If `true`, event handlers on the body and window will not be removed
     */
    _priv.closePane = function _closePane (colRule, options) {

        colRule.$options.css({'opacity': '0', 'left': '-1000px'});
        colRule.optionsVisibile = false;

        // Remove event listeners, unless asked not to (e.g. `_priv.closeAllPanes()` can do it just once to avoid redundancy)
        if (!options || !options.doNotRemoveEvents) {
            emp.$body.off('click', _events.onBodyClick);
            emp.$window.off('resize', _events.onWindowResize);
        }

        // Set focus back to the input
/*         if (colRule.$filterControl && (!options || !options.noFocus)) {

            // When we trigger the `focus` event, that event handler will in turn (re)open the very pane we just closed. To avoid this, we're setting an attribute on the element to tell it to ignore the `focus` and leave the pane closed. This is not an ideal way to communicate with the event handler, however `jQuery.trigger()` doesn't seem to pass along custom data like it's supposed to, so I don't know how else to send the message to `_events.onInputFocus()` that it shouldn't open the pane. (CP 4/19/2016)
            colRule.$filterControl.attr(VALUES.ignoreFocusEventAttr, 'true');

            colRule.$filterControl.trigger('focus');
        } */
    };

    /**
     * Closes all option panes
     *
     * @param   {Object}  colRule  Column rule object
     */
    _priv.closeAllPanes = function _closeAllPanes (colRule) {
        // Loop through all option panes to make sure none are open
        _priv.optionPaneList.forEach(function (filterCol) {
            _priv.closePane(filterCol, {doNotRemoveEvents: true});
        });

        emp.$body.off('click', _events.onBodyClick);
        emp.$window.off('resize', _events.onWindowResize);
    };

    /**
     * Positions an option pane with respect to its input
     *
     * @param   {jQuery}  $input   Input element that goes with the option pane
     * @param   {Object}  colRule  Column rule object
     * @param   {Object}  table    Table instance
     */
    _priv.positionPane = function _positionPane ($input, colRule, table, skipFocus) {

        var inputPos = $input.offset();
        var windowWidth = emp.$window.width();

        fastdom.mutate(function _positionPane_a () {
            // Append the pane to the body if it hasn't been done already
            if (colRule.$options.parent().length === 0) {
                colRule.$options.css({opacity: 0});
                emp.$body.append(colRule.$options);
            }

            fastdom.measure(function _positionPane_b () {
                var paneWidth = colRule.$options.outerWidth();
                var leftPos = inputPos.left + $input.outerWidth() + 5;

                if (leftPos + paneWidth >= windowWidth) {
                    leftPos = inputPos.left - paneWidth - 5;
                }

                fastdom.mutate(function _positionPane_c () {

                    colRule.$options.css({
                        top: inputPos.top,
                        left: leftPos,
                        opacity: 1,
                    });

                    fastdom.measure(function _positionPane_d () {

                        if (!skipFocus) {

                            switch (colRule.filter) {

                                case "date":

                                    colRule.$options.find('input.' + CLASSES.datePaneRangeRuleCheckbox).focus();
                                    break;

                            }

                        }

                    });
                });
            });
        });
    };

    /////////////////////
    // Event Functions //
    /////////////////////

    /**
     * Toggles the row of filter inputs
     *
     * @param   {Event}  evt  Click event on the filter icon
     */
    _events.filterRow = function _filterRow (evt) {
        var table = evt.data.table;

        // The row's DOM has not been generated yet
        if (!table.config.plugins.filter.$filterRow) {

            table.resizeOffset(1);

            // Call the private build function
            _priv.generateFilterRow(evt, table);

            table.$self.trigger('table.showFilterRow');
            table.$self.trigger('table.filterButtonClick');
        }
        // The row exists in the DOM
        else {
            var $firstRow = $(table.obj.$tbody.children('tr').eq(0));

            // Check to see if the first row is a flex row
            if ($firstRow.hasClass(CLASSES.filterRow) && !$firstRow.hasClass(CLASSES.hidden)) {
                fastdom.mutate(function _filterRow_a () {

                    table.resizeOffset(0);

                    // Hide the filter row
                    table.config.plugins.filter.$filterRow.addClass(CLASSES.hidden);

                    fastdom.measure(function _filterRow_b () {

                        // Check to see if we have a table footer and hide it if we do.
                        if (table.obj.$tfoot) {
                            table.obj.$tfoot.removeClass(CLASSES.hidden);
                        }

                        table.reflow(table);

                        table.$self.trigger('table.hideFilterRow');
                        table.$self.trigger('table.filterButtonClick');
                    });
                });
            }
            else {
                fastdom.mutate(function _filterRow_c () {

                    table.resizeOffset(1);

                    // Display the filter row
                    table.config.plugins.filter.$filterRow.removeClass(CLASSES.hidden);

                    fastdom.measure(function _filterRow_d () {
                        // Check to see if we have a table footer and hide it if we do.
                        if (table.obj.$tfoot) {
                            table.obj.$tfoot.addClass(CLASSES.hidden);
                        }

                        table.reflow(table);

                        table.$self.trigger('table.showFilterRow');
                        table.$self.trigger('table.filterButtonClick');
                    });
                });
            }
        }

        table.obj.$viewWrapper.scrollTop(0);
    };

    /**
     * Clears all filters and resets the table when the filter row is hidden
     *
     * @param   {Event}  evt  Click event on the filter toggle icon
     */
    _events.onFilterRowHide = function _onFilterRowHide (evt) {
        var table = evt.data.table;
        var needToReExecute = false;

        table.config.plugins.filter.filterRow.forEach(function (colRule) {
            // Clear the compare value
            if (colRule.compareValue) {
                // Track whether we're actually updating any columns so we can avoid re-evaluating the whole table if nothing has changed
                needToReExecute = true;

                // Clear the value
                colRule.compareValue = '';
            }

            // Date rule
            if (colRule.dateSettings) {
                // Clear the settings and UI
                colRule = _priv.clearDatePane(colRule);

                // This flag would not have been set above because dates don't have a `compareValue`
                needToReExecute = true;
            }
            // All other rule types
            else {
                // Clear the input field
                if (colRule.$filterControl && colRule.$filterControl.length) {
                    colRule.$filterControl.val('');
                }
            }
        });

        // Reevaluate the table
        if (needToReExecute) {
            _priv.executeFilters(table);
        }
    };

    /**
     * Handles clicks on numeric option pane operators
     *
     * @param   {Event}  evt  Click event on a `<button>`
     */
    _events.onNumericOptionButtonClick = function _onNumericOptionButtonClick (evt) {
        var colRule = evt.data.colRule;
        var table = evt.data.table;
        var $button = $(evt.target);

        colRule.filterParams = $button.val(); // $button.get(0).value;

        // Find the currently active button and remove the selection class
        colRule.$options
            .find('.' + CLASSES.filterSelectedParam)
                .removeClass(CLASSES.filterSelectedParam);

        $button
            .parent()
                .addClass(CLASSES.filterSelectedParam);

        if (colRule.compareValue !== '') {
            // Apply the new rules
            _priv.executeFilters(table);
        }

        // Set focus to the input
        colRule.$filterControl.focus();
    };

    /**
     * Closes a numeric option pane
     *
     * @param   {Event}  evt  Click event
     */
    _events.onOptionPaneCloseClick = function _onOptionPaneCloseClick (evt) {

        _priv.closePane(evt.data.colRule);
    };

    _events.onOptionPaneCloseKeydown = function _onOptionPaneCloseKeydown (evt) {

        // Enter key on close
        if (evt.which !== 9) {

            evt.data.colRule.justClosed = true;

            // Close the pane
            _priv.closePane(evt.data.colRule);
        }
    };

    /**
     * Handles having focus set on a filter input
     *
     * @param   {Event}    evt            Focus event
     *
     * @return  {Boolean}                 `false`
     */
    _events.onInputFocus = function _onInputFocus (evt) {
        var $input = $(evt.target);
        var table;
        var colRuleIndex;
        var colRule;
        var paneId;

        // Check if we were told not process this event any further (see `_priv.closePane()` for further explanation)
        if ($input.attr(VALUES.ignoreFocusEventAttr) === 'true') {
            // Remove the attribute so the next event is not ignored as well
            $input.removeAttr(VALUES.ignoreFocusEventAttr);

            return true;
        }

        table = evt.data.table;
        colRuleIndex = $input.parent().attr(VALUES.attributes.dataFilterIndex);
        colRule = table.config.plugins.filter.filterRow[colRuleIndex];

        switch (colRule.filter) {
            case 'numeric':
            case 'currency':
            case 'score':

                // Check for pane id
                if (!colRule.$options) {
                    // generate the id
                    paneId = table.id + '_filter_input_' + colRule.dataStoreIndex;

                    // Save off the pane
                    colRule.$options = _priv.generateNumericPane($input, paneId, colRule, table);
                }

                // Open the pane
                _priv.openPane($input, colRule, table);

                break;

            case 'date':

                break;
        }

        return false;
    };

    // Delays the keyup event until the user stops typing
    _events.onInitialInputKeyup = function _onInitialInputKeyup (evt) {

        // Clear any existing timer
        clearTimeout(_typingTimer);

        // Wait for the user to stop typing
        _typingTimer = setTimeout(function () {
            _events.onInputKeyup(evt);
            clearTimeout(_typingTimer);
        }, VALUES.inputTimer);
    };

    // Handles keystrokes after the timer has run its course
    _events.onInputKeyup = function _on_input_keyup (evt) {

        var table = evt.data.table;
        var $input = $(evt.target);
        var $filterCell = $input.parent();
        var filterIndex = $filterCell.attr(VALUES.attributes.dataFilterIndex);
        var colRule = table.config.plugins.filter.filterRow[filterIndex];


        //Handle all cases where the filter should be run or updated.
        // Escape key
        if (evt.which && evt.which === 27) {
            // Check to see if we have filter options
            if (colRule.$options) {
                if (colRule.optionsVisibile) {
                    _priv.closePane(colRule);
                }
                else {
                    // Escape will dump all the field contents
                    $input.val('');

                    // Apply the new rules
                    _priv.executeFilters(table);
                }
            }
        }
        else if ($input.attr('data-text') === "numbers") {

            var inputValue = $input.val();

            if (inputValue !== ".") {

                colRule.compareValue = evt.target.value.replace(/[, ;]/g, '').toLowerCase();

                _priv.executeFilters(table);
            }
            else {

                colRule.compareValue = "0.";

                _priv.executeFilters(table);
            }
        }
        // Standard text entry or dropdown change
        // Anything else except Tab (even Shift-Tab, unless it also has an option pane)
        else if (!evt.which || !(evt.which === 9 && !evt.shiftKey)) {
            // Normalize the input value for easier matching
            colRule.compareValue = evt.target.value.replace(/^\s*/g, '').toLowerCase();

            // Apply the new rules
            _priv.executeFilters(table);
        }


        //After filters have been applied prevent further event propigation if needed.
        // Enter
        if (evt.which && evt.which === 13) {
            // Check to see if we have filter options
            if (colRule.$options) {
                if (colRule.optionsVisibile) {
                    _priv.closePane(colRule);
                }
                else {

                    // Escape will dump all the field contents
                    $input.val('');

                    // Apply the new rules
                    _priv.executeFilters(table);
                }
            }
            else {

                // Override this so we random enter in filter inputs dont cause the page to submit
                evt.stopPropagation();
                evt.preventDefault();
            }
        }
        // Tab
        else if (evt.which === 9) {

        }
    };

    _events.onInputKeyDown = function _on_input_keydown (evt) {
        var table = evt.data.table;
        var $input = $(evt.target);
        var $filterCell = $input.parent();
        var filterIndex = $filterCell.attr(VALUES.attributes.dataFilterIndex);
        var colRule = table.config.plugins.filter.filterRow[filterIndex];
        var keyCode = (!evt.charCode) ? evt.which : evt.charCode;

        // Check for arrow keys
        if ($input.attr('data-text') === "numbers") {

            var inputValue = $input.val();

            if ((evt.which === 38 || evt.which === 40)) {

                evt.preventDefault();


                if (inputValue === "") {

                    $input.val("0");
                }
                else {

                    inputValue = parseInt(inputValue);

                    if (evt.which === 38) {

                        inputValue += 1;
                    }

                    if (evt.which === 40) {

                        inputValue -= 1;
                    }

                    $input.val(inputValue);

                }
            }

        }
        // Check for Tab key, but not shift-tab
        else if (evt.which === 9 && !evt.shiftKey && colRule.$options) {
        	// Check whether the option pane is open
            if (colRule.optionsVisibile) {
                // Set focus to the first choice in the list
                colRule.$options.find('[tabindex]').eq(0).focus();
                evt.preventDefault();
            }
        }
    };

    _events.onInputNumberKeyPress = function _on_input_number_keypress (evt) {

        var regex = new RegExp("^[,.0-9]+$");
        var keyCode = (!evt.charCode) ? evt.which : evt.charCode;
        var key = String.fromCharCode(keyCode);

        if (!regex.test(key)) {

            event.preventDefault();
            return false;
        }

    };

    _events.onInputMouseUp = function _on_input_mouse_up (evt) {

        var table = evt.data.table;
        var $input = $(evt.target);
        var $filterCell = $input.parent();
        var filterIndex = $filterCell.attr(VALUES.attributes.dataFilterIndex);
        var colRule = table.config.plugins.filter.filterRow[filterIndex];

        var before = $input.val();

        setTimeout(function() {

            var after = $input.val();

            // Check to see if the input was cleared.
            if (before !== "" && after === "") {

                journal.log({type: 'info', owner: 'UI', module: 'table', submodule: 'filters', func: 'onInputMouseUp'}, 'Filter cleared by using the IE "X" input clear control. Column: ' + filterIndex);

                // Set the compare value to nothing
                colRule.compareValue = "";

                // Execute the filter update
                _priv.executeFilters(table);
            }

        }, 50);
    };

    _events.onChange = function _onChange (evt) {
        var $dropdown = $(evt.target);
        var $filterCell = $dropdown.parent();
        var filterIndex = $filterCell.attr(VALUES.attributes.dataFilterIndex);
        var table = evt.data.table;
        var colRule = table.config.plugins.filter.filterRow[filterIndex];

        // Normalize the input value for easier matching
        colRule.compareValue = evt.target.value.replace(/^\s*/g, '').toLowerCase();

        _priv.executeFilters(table);
    };

    _events.onDateFilterButtonClick = function _onDateFilterButtonClick (evt) {

        var table = evt.data.table;
        var $button = $(evt.target);
        var colRule = $button.parent().attr(VALUES.attributes.dataFilterIndex);

        colRule = table.config.plugins.filter.filterRow[colRule];

        switch (colRule.filter) {

            case 'date':
                // Check for pane ID
                if (!colRule.$options) {
                    // generate the ID
                    var paneId = table.id + '_filter_button_' + colRule.dataStoreIndex;

                    // Save off the pane
                    colRule.$options = _priv.generateDatePane($button, paneId, colRule, table);
                }

                // Open the pane if it's not already open
                if (!colRule.optionsVisibile) {

                    _priv.openPane($button, colRule, table);
                }
                // Close the pane because it was already open
                else {

                    _priv.closePane(colRule, {justClosed: true});
                }

                break;
        }
    };

    _events.onDateFilterButtonFocus = function onDateFilterButtonFocus(evt) {

        // Only kick off focus when the keyup is tab, on the button
        if (evt.which === 9 || evt.which === 13) {

            // Pass this to the click event because the logic is the same
            _events.onDateFilterButtonClick(evt);

        }
    };

    // Handle user entry in the date range inputs
    // Event type will be `keyup` if the user is typing, or `change` if the date picker was used
    _events.onDateRangeChange = function _onDateRangeChange (evt) {
        var isBeginNotEmpty;
        var isEndNotEmpty;
        var colRule = evt.data.colRule;
        var $input = $(evt.target);
        var newDate;

        var __formatDate = function __formatDate (dateObj) {
            var newDateMonth;
            var newDateDay;

            // Month
            newDateMonth = dateObj.getMonth() + 1;

            // Zero-pad month
            if (newDateMonth < 10) {
                newDateMonth = '0' + newDateMonth;
            }

            // Date
            newDateDate = dateObj.getDate();

            // Zero-pad date
            if (newDateDate < 10) {
                newDateDate = '0' + newDateDate;
            }

            return newDateMonth + '/' + newDateDate + '/' + dateObj.getFullYear();
        };

        // Ignore modifier keys, Enter, Tab, and left/right arrow keys
        if (evt.shiftKey || evt.ctrlKey || evt.altKey || [9, 13, 16, 17, 18, 37, 39].indexOf(evt.keyCode) !== -1) {
            return true;
        }

        // Close the pane if the Escape key was pressed
        if (evt.keyCode === 27) {
            _priv.closePane(colRule);

            return true;
        }

        isBeginNotEmpty = ($dateRangeBeginInput.val().trim().length !== 0);
        isEndNotEmpty = ($dateRangeEndInput.val().trim().length !== 0);

        // Set the check boxes' states unless the user clicked on a checked box directly (if the latter happened, we don't want to undo their check just because the input is empty or will feel like the UI is broken or unresponsive)
        if (evt.target.type !== 'checkbox') {
            // Begin date
            $dateRangeBeginCheckbox.prop('checked', isBeginNotEmpty);

            // End date
            $dateRangeEndCheckbox.prop('checked', isEndNotEmpty);
        }

        // Check the radio button regardless, since the user is editing this section of the pane
        $dateRangeCheckbox.prop('checked', true);
        colRule.dateSettings.range.enabled = true;

        // Set the filter to be 'on' if at least one of the inputs is not empty and its checkbox is checked
        colRule.dateSettings.isSet = (isBeginNotEmpty || isEndNotEmpty);

        // Increment/decrement the value first, if the arrow keys were pressed

        if (evt.keyCode === 38 ||evt.keyCode === 40) {

            // Up arrow was pressed
            if (evt.keyCode === 38) {
                // Process and validate the currently entered date
                colRule = _priv.updateDateRangeSettings(evt.data.table, colRule, true);

                // If the date is valid, go to the next date
                newDate = new Date(colRule.dateSettings.range[evt.data.part]);

                // Increment date object
                newDate.setDate(newDate.getDate() + 1);

                $input.val(__formatDate(newDate));
            }
            // Down arrow was pressed
            else if (evt.keyCode === 40) {
                // Process and validate the currently entered date
                colRule = _priv.updateDateRangeSettings(evt.data.table, colRule, true);

                // If the date is valid, go to the previous date
                newDate = new Date(colRule.dateSettings.range[evt.data.part]);

                // Increment date object
                newDate.setDate(newDate.getDate() - 1);

                $input.val(__formatDate(newDate));
            }

        }
        else {

            // Pass the keyup to the emp function if it exiests
            if (emp.dateMasking) {

                if($input.attr('type') != "checkbox"){
                    emp.dateMasking(evt, $input);
                }
            }

            // if (VALUES.dateRegex.test($input.val())) {

            //     // Validate the values and update the table
            //     _priv.updateDateRangeSettings(evt.data.table, colRule, false);
            // }

            // Always update the date range settings. Allows for start/begin filters to be disabled/enabled again while filtering.
            _priv.updateDateRangeSettings(evt.data.table, colRule, false);
        }
    };

    /**
     * Handles changes to the main check boxes on the date pane that enable/disable the 'matching' and 'range' filters
     *
     * @param   {Event}  evt  Change event on a check box
     */
    _events.onDateTypeChange = function _onDateTypeChange (evt) {
        var colRule = evt.data.colRule;
        var newValue = $(this).is(':checked');

        // Mark this setting as enabled/disabled
        colRule.dateSettings[evt.data.type].enabled = newValue;

        _priv.executeFilters(evt.data.table);

        // Close the pane if the Escape key was pressed
        if (evt.keyCode === 27) {
            _priv.closePane(colRule);

            return true;
        }
    };

    /**
     * Handles changes on the Include Blank checkbox
     *
     * @param   {Event}  evt Change event on Include Blank checkbox
    **/
    _events.onIncludeBlankChange = function _onIncludeBlankChange(evt){

        _priv.executeFilters(evt.data.table);
    };

    /**
     * Handles clicks on a date pane's 'Clear' button
     *
     * @param   {Event}  evt  Click event
     */
    _events.onDateClearButtonClick = function _onDateClearButtonClick (evt) {
        var colRule = evt.data.colRule;

        // Clear the settings and UI
        colRule = _priv.clearDatePane(colRule);

        // Reevaluate the table
        _priv.executeFilters(evt.data.table);
    };

    /**
     * Handles keystrokes and changes to any "matches this date" input field
     *
     * @param   {Event}  evt  Keyup or change event in a text field
     */
    _events.onDateMatchingChange = function _onDateMatchingChange (evt) {
        var isNumberKey = false; // Used for reference when we're deciding whether to shift focus to another field
        var table;
        var colRule;
        var settings;
        var part; // Piece of the date (month, day, or year) that is being modified
        var originalValue; // Exact value of the input; needed for the hidden date picker field
        var value; // The value, converted to an integer

        /**
         * Updates the hidden datepicker input when one of the individual inputs has changed
         * This ensures the data picker opens to the correct date by default
         */
        var __updateHiddenInput = function __updateHiddenInput () {
            var month = settings.matching.month;
            var day = settings.matching.day;
            var year = settings.matching.year;
            var now = new Date();

            // If the rule object does not have a specificed value, fill in the current date
            if (!month) {
                month = now.getMonth() + 1;
            }

            if (!day) {
                day = now.getDate();
            }

            if (!year) {
                year = now.getFullYear();
            }

            // Set this even if there are no values so that the rule is applied (e.g. when the user clears out their entry)
            settings.isSet = true;

            $dateMatchInputHidden.val(month + '/' + day + '/' + year);
        };

        // Ignore modifier keys, Enter, Tab, backspace,  and left/right arrow keys
        if (evt.shiftKey || evt.ctrlKey || evt.altKey || [9, 13, 16, 17, 18, 37, 39].indexOf(evt.keyCode) !== -1) {
            return true;
        }

        // Close the pane if the Escape key was pressed
        if (evt.keyCode === 27) {

            _priv.closePane(evt.data.colRule, {justClosed: true});

            return true;
        }

        // Detect number key presses
        // We need to ensure `evt.keyCode` is defined before doing comparisons because this function is also triggered by `change` events which wouldn't populate that property
        if (evt.keyCode && ((evt.keyCode >= 48 && evt.keyCode <= 57) || (evt.keyCode >= 96 && evt.keyCode <= 105))) {

            isNumberKey = true;
        }
        else {

            // Remove any stray character keys from the match input
            evt.target.value = evt.target.value.replace(/[^0-9\.\/]/g,'');

            if (evt.keyCode && [8, 46].indexOf(evt.keyCode) === -1) {

                return true;
            }
        }

        // Ensure the corresponding radio button is selected
        // Do this before looking up the `colRule` object because this event will change its value (i.e. it enables the "matching" option)
        $dateMatchCheckbox
            .prop('checked', true)
            .trigger('change', evt.data);

        table = evt.data.table;
        part = evt.data.part; // Piece of the date (month, day, or year) that is being modified
        originalValue = this.value.trim();
        value = parseInt(originalValue, 10);
        colRule = evt.data.colRule;
        settings = colRule.dateSettings;

        // Validate the value and update the `colRule` object

        if (!value) {
            value = 0;
        }

        if (part === 'month') {
            if (value > 12) {
                settings.matching.month = 0;
            }

            // Update the value only if it's changed (e.g. ignore arrows and other keys that didn't actually change the value) so we can avoid needlessly re-filtering the table
            if (settings.matching.month !== value) {
                settings.matching.month = value;
            }

            // Update the hidden input
            __updateHiddenInput();

            // Set focus to the next field if the user is done here
            // For example, if the month is currently `1`, they may be about to type `10` or `12`, so don't shift the focus. But if they've typed `4` there's nothing else they could type that would be valid, so we might as well shift focus to the next input.
            // Also, ignore non-numeric presses because it means the user is still editing the field (e.g. incrementing the value, tabbing between them, etc)
            // if (isNumberKey && settings.matching.month > 1) {
            //     $dateMatchInputDay.focus();
            // }

            _priv.executeFilters(table);
        }
        else if (part === 'day') {
            if (value > 31) {
                settings.matching.day = 0;
            }

            if (settings.matching.day !== value) {
                settings.matching.day = value;
            }

            __updateHiddenInput();

            // Set focus to the next field
            // We're using 4 as the minimum value to indicate completion. If the user pressed 1, 2, or 3 they may be starting to type a two-digit date.
            // if (isNumberKey && settings.matching.day > 3) {
            //     $dateMatchInputYear.focus();
            // }

            _priv.executeFilters(table);
        }
        else if (part === 'year') {
            if (value > 2200 || value < 1800) { //FIXME: These limits are arbitrary. They should be synchronized with the date picker.
                settings.matching.year = 0;
            }

            if (settings.matching.year !== value) {
                settings.matching.year = value;
            }

            __updateHiddenInput();

            _priv.executeFilters(table);
        }
        // Date picker was used and the hidden input has been populated
        else if (part === 'hidden' && VALUES.dateRegex.test(originalValue)) {
            colRule.compareValue = originalValue;
            settings.matching.enabled = true;

            // Break the date into logical pieces
            value = VALUES.dateRegex.exec(originalValue);

            // Update the rule object and populate the input fields

            settings.matching.month = parseInt(value[1], 10);
            $dateMatchInputMonth.val(value[1]);

            settings.matching.day = parseInt(value[2], 10);
            $dateMatchInputDay.val(value[2]);

            settings.matching.year = parseInt(value[3], 10);
            $dateMatchInputYear.val(value[3]);

            settings.isSet = true;

            _priv.executeFilters(table);
        }
    };

    // Closes panes if the user clicks away from them
    _events.onBodyClick = function _on_body_click (evt) {

        // Look up the DOM to see if the user clicked within a pane
        if (evt.target !== evt.data.$input.get(0) && $(evt.target).closest('.' + CLASSES.filterPane).length === 0) {
            _priv.closeAllPanes();
        }
    };

    // Re-positions panes when the user resizes the window
    _events.onWindowResize = function _on_window_resize (evt) {

        _priv.positionPane(evt.data.$input, evt.data.colRule, evt.data.table);
    };

    /////////////////////
    // Setup Functions //
    /////////////////////

    _setup.filters = function _setup_filters (table, next) {

        if (!table.config.empty) {
            // Check for filter HTML option
            var filterCheck = table.$self.attr('data-filter');
            var openFilters = table.$self.attr('data-open-filters');

            if (filterCheck === "false") {
                table.config.setup.filter = false;
            }

            if (openFilters === true || openFilters === "true") {

                // Make sure there is something to filter before opening the filters
                if (table.dataStore && table.dataStore.body && table.dataStore.body.rows.length > 0) {
                    table.config.setup.preopen = true;
                }
                else {
                    table.config.setup.preopen = false;
                }

            }
            else {
                table.config.setup.preopen = false;
            }

            if (table.config.setup.filter) {

                if (table.dataStore && table.dataStore.body && table.dataStore.body.rows.length > 0) {

                    table.obj.$filterControl = table.obj.$tableWrapper.find('.' + CLASSES.controlRow);
                    table.obj.$filterControl.on('click', {table: table}, _events.filterRow);
                }

                if (table.config.setup.preopen) {

                    _priv.generateFilterRow(false, table);
                }
            }

            // Call a table reflow on filter as we want the sticky headers to fix there alignment
            table.$self.on('table.filter', function() {

                fastdom.mutate(function() {

                    table.reflow();
                });

            });

        }

        next();
    };

    return {
        _setup: _setup,
        _events: _events,
        _defaults: _defaults
    };
});

define('tableChangeReturn',[], function () {
    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        setup: {
            changeReturn: false,
        },
        plugins: {
            changeReturn: {
                pane: false,
                $pane: false
            },
        },
    };

    var CLASSES = {
        pane: 'emp-table-selectable-return-pane',
        control: 'emp-icon-select-return',
        selected: 'emp-selected',
    };

    // =================
    // Private Functions
    // =================

    _priv.generatePane = function _generate_pane (table) {
        var columns = [];
        var toggleableColumns = {};
        var mapNames = Object.keys(table.config.plugins.changeReturn.mapping);
        var name;

        for (name in table.config.plugins.changeReturn.mapping) {
            columns.push(table.config.plugins.changeReturn.mapping[name]);
        }

        // Loop through each of the defined columns in the mapping and find the none hidden columns
        for (var i = 0, len = columns.length; i < len; i++) {
            var toggableCol = {};
            var colIndex = columns[i];
            var colDef = table.dataStore.head.rows[0].columns[colIndex -1];

            // Filter our columns that are hidden, we can only hide
            if ((!colDef.visibility) || (colDef.visibility && colDef.visibility !== 'hidden')) {

                toggleableColumns[columns[i]] = {};

                toggleableColumns[columns[i]].name = mapNames[i];
                toggleableColumns[columns[i]].text = colDef.text;
                toggleableColumns[columns[i]].selected = true;

            }
        }

        if (Object.keys(toggleableColumns).length) {
            var $pane = $('<ul/>').addClass(CLASSES.pane);
            var mapIndex = 0;
            var col;

            for (col in toggleableColumns) {
                // Create a list item
                var $col = $('<li>').addClass('emp-selected');

                // Create a button control
                var $control = $('<button/>')
                                    .attr('type', 'button')
                                    .text(toggleableColumns[col].text)
                                    .on('click', {table: table, index: col, mapIndex: mapIndex}, _events.updateReturnMapping);

                toggleableColumns[col].$li = $col;
                toggleableColumns[col].$control = $control;

                // Append control to the list item
                $col.append($control);

                // Append list item to the list
                $pane.append($col);

                mapIndex += 1;
            }

            // Now add the close control
            var $close = $('<a/>')
                            .attr('role', 'button')
                            .text('Close')
                            .on('click', {pane: $pane}, _events.closeReturnPane);

            $pane.append($('<li/>').append($close));

            // Save off the pane
            table.config.plugins.changeReturn.$pane = $pane;

            // Save off the mapping options
            table.config.plugins.changeReturn.toggleMap = toggleableColumns;

            // Add the pane to the page
            fastdom.mutate(function () {
                emp.$body.append(table.config.plugins.changeReturn.$pane);
            });
        }
        else {
            journal.log({type: 'error', owner: 'UI', module: 'table', submodule: '', func: 'changeReturn'}, 'Change return button had not toggleable columns to make a list out of');
        }
    };

    // ===============
    // Event Functions
    // ===============

    _events.showReturnPane = function _show_return_pane (evt, table)  {
        // Dont let events to bubble up from here
        evt.stopPropagation();

        // Check to see if the pane was ever created
        if (!table.config.plugins.changeReturn.$pane) {

            // We need to generate the pane.
            _priv.generatePane(table);

        }

        var $control = table.config.controls.reference.$changeReturn;

        // Now determine if the pane need to be shown or hidden
        if (table.config.plugins.changeReturn.$pane.hasClass('emp-active')) {
            table.config.plugins.changeReturn.$pane.removeClass('emp-active');
        }
        else {
            var columnButtonOffset = table.config.controls.reference.$changeReturn.offset();

            table.config.plugins.changeReturn.$pane
                .css({
                    top: (columnButtonOffset.top + $control.outerHeight() + 5),
                    right: (emp.$window.width() - columnButtonOffset.left - $control.outerWidth())
                })
                .addClass('emp-active');

            emp.$body.on('click', {pane: table.config.plugins.changeReturn.$pane}, _events.closeReturnPane);
        }
    };

    _events.closeReturnPane = function _close_return_pane (evt) {
        evt.stopPropagation();

        // Remove the clock event
        emp.$body.off('click', _events.closeReturnPane);

        var $pane = evt.data.pane;

        $pane.removeClass('emp-active');
    };

    _events.updateReturnMapping = function _update_return_mapping(evt) {

        evt.stopPropagation();

        var index = evt.data.index;
        var mapIndex = evt.data.mapIndex;
        var table = evt.data.table;

        // Figure out the index position
        var keys = Object.keys(table.config.plugins.changeReturn.toggleMap);

        // Determine the position where the user changed the check toggle state
        var toggleIndex = keys.indexOf(index);

        // Determine the new toggle state
        var toggleState = (table.config.plugins.changeReturn.toggleMap[index].selected) ? false : true;
        // var toggle = table.config.plugins.changeReturn.toggleMap[togglePos];

        for (var i = 0, len = keys.length; i < len; i++) {
            if (toggleState) {
                if (i <= toggleIndex && !table.config.plugins.changeReturn.toggleMap[keys[i]].selected) {
                    table.config.plugins.changeReturn.toggleMap[keys[i]].selected = true;
                    table.config.plugins.changeReturn.toggleMap[keys[i]].$li.addClass('emp-selected');
                }
            }
            else {
                if (i >= toggleIndex && table.config.plugins.changeReturn.toggleMap[keys[i]].selected) {
                    table.config.plugins.changeReturn.toggleMap[keys[i]].selected = false;
                    table.config.plugins.changeReturn.toggleMap[keys[i]].$li.removeClass('emp-selected');
                }
            }
        }
    };

    // ===============
    // Setup Functions
    // ===============

    // For the base table requires of Empire (sticky headers or the resizer) to work additional wrapper layers are needed as well as a place to put client side controls.
    _setup.changeReturn = function _return(table, next) {

        if (!table.config.empty) {

            // Check for the data-change-return attribuet to manually toggle the feature on.
            var enableOption = table.$self.attr('data-change-return');

            if (enableOption === "true" || enableOption === true) {

                table.config.setup.changeReturn = true;

                //_priv.changeControl(table);
            }

        }

        next();
    };

    return {
    	_priv: _priv,
        _setup: _setup,
        _defaults: _defaults
    };
});

define('tableError',['guid'], function (guid) {

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};

    var ERROR_WRAP = $('<div/>', {
        'class': 'cui-messages'
    });

    var ERROR_MESSAGE = $('<div/>', {
        'class': 'cui-error'
    });

    // =================
    // Private Functions
    // =================

    _priv.addError = function _add_error(table, msg) {

        // Check to see if the table errors object exists
        if (table.config.errors === undefined) {

            table.config.errors = {};

            table.obj.$tableWrapper.prepend(ERROR_WRAP.clone());

            table.obj.$errorBlock = table.obj.$tableWrapper.find('.cui-messages');
        }

        var newMsg = ERROR_MESSAGE.clone();

        var guidID = guid();

        newMsg.text(msg).attr('data-errorid', guidID);

        // Add the error to the table
        table.obj.$errorBlock.append(newMsg);

        var $errors = table.obj.$errorBlock.children('div');

        // Safe off the guids
        table.config.errors[guidID] = $errors.eq($errors.length - 1);
    };

    _priv.removeError = function _remove_error(table, guid) {

        if (table.config.errors[guid]) {

            table.config.errors[guid].remove();

            delete table.config.errors[guid];
        }
    };

    _priv.removeAllErrors = function _remove_all_errors(table) {

        table.config.errors = {};

        if (table.obj.$errorBlock.children('div').length) {

            var tableError = table.obj.$errorBlock[0];

            while (tableError.firstChild) {
                tableError.removeChild(tableError.firstChild);
            }

        }
    };

    // ====================
    // Prototypes Functions
    // ====================

    // Exposes a public method for changing the table height
    _prototype.addError = function _resize_public(table, msg, cb) {

        if (typeof table === "string") {

            cb = msg;
            msg = table;
            table = this;
        }

        if (typeof msg === "string") {

            _priv.addError(table, msg);
        }
        else {

            // Error only support string messages
            return false;
        }
    };

    _prototype.removeError = function _resize_public(table, guid) {

        if (typeof table === "string") {
            guid = table;
            table = this;
        }

        _priv.removeError(table, guid);
    };

    _prototype.removeErrors = function _resize_public(table) {

        if (table === undefined) {
            table = this;
        }

        _priv.removeAllErrors(table);
    };

    return {
    	_priv: _priv,
        _prototype: _prototype
    };
});

define('tableMobile',[], function() {

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        'setup': {
            'sort': true
        },
        'plugins': {
            'sort': {}
        }
    };

    var parentRow = function _parent_row(source) {

        var currentParent = false;

        while (true) {

            if (!currentParent) {
                currentParent = source.parentNode;
            }
            else {
                currentParent = currentParent.parentNode;
            }

            if (currentParent.nodeName === 'BODY') {
                break;
            }
            else if (currentParent.nodeName === 'TR') {

                return currentParent;
            }

        }

        return false;

    };

    _setup.mobile = function _mobile_setup(table, next) {

        // Add class to remove overflow on pivot tabls
        if (table.dataStore.type === "pivot") {
            table.obj.$viewWrapper.addClass('emp-remove-overflow');
        }

        // Setup expandable click control
        table.$self[0].addEventListener('click', function(evt) {

            var evtTarget = evt.target;

            if (evtTarget.nodeName === "BUTTON" && evtTarget.classList.contains('emp-pivote-table-expand')) {

                var row = parentRow(evtTarget);

                if (row.classList.contains('emp-responsive-toggle-active')) {
                    row.classList.remove('emp-responsive-toggle-active');
                }
                else {
                    row.classList.add('emp-responsive-toggle-active');
                }
            }


        });

        next();
    };

    return {
        _priv: _priv,
        _setup: _setup,
        _defaults: _defaults
    };

});

/*jshint loopfunc: true */
define('tableMenuButton',['render'], function (render) {

    var CLASSES = {
        openButtonMenu: '.emp-table-responsive-button-menu-pane.emp-selected'
    };

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        setup: {
            menuButton: true,
        },
        plugins: {
            menuButton: {
            }
        },
    };

    // Event will generate a menu on the fly or redisplay a menu that has already been created
    _events.buttonMenu = function _button_menu(evt, table) {

        var createMenu = true;

        $target = $(evt.target);

        // Start by looking for other open menus
        var $openMenus = $(CLASSES.openButtonMenu);

        // Close these menus before we continue
        if ($openMenus.length) {

            var buttonMenuLink = $target.attr('data-menu');

            // Check if we have a link
            if (buttonMenuLink) {

                $openMenus.each(function () {

                    var $menu = $(this);

                    var menuID = $menu.attr('id');

                    if (buttonMenuLink !== menuID) {

                        $menu.remove();
                    }
                    else {

                        $menu.remove();
                        $target.removeAttr('data-menu');

                        createMenu = false;

                        emp.$body.on('click', _events.buttonMenuBodyClick);
                    }

                });

            }
            else {

                $openMenus.remove();

                emp.$body.off('click', _events.buttonMenuBodyClick);
            }

        }

        if (createMenu) {

            var $button = $(evt.target);
            var $row = $button.parents('tr').eq(0);
            var rowKey = $row.attr('data-key');
            var rowIndex = $row.attr('data-row-index');
            var rowObject = false;

            var menuButtonLink = table.id + '_' + rowKey + '_' + rowIndex;

            if (table.dataStore.body.rows[rowIndex]) {

                rowObject = table.dataStore.body.rows[rowIndex];
            }

            if (rowObject !== false) {

                var menuColumn = table.config.plugins.responsive.menuColumnDS;
                var menuButtons = rowObject.columns[menuColumn].contents[0].options;

                // create the initial container
                var $menu = $('<ul/>', {
                    'id': menuButtonLink,
                    'data-key': rowKey,
                    'data-row-index': rowIndex,
                    'class': 'emp-table-responsive-button-menu-pane emp-table-popup'
                });

                // Loop through and add the buttons to the menu
                for (var i = 0, len = menuButtons.length; i < len; i++) {
                    render.section(undefined, menuButtons[i], 'return', function (button) {
                        var $listItem = $('<li/>').append(button);

                        $menu.append($listItem);
                    });
                }

                // Create the close list item
                var $close = $('<li/>')
                    .append(
                        $('<a/>', {
                            'href': '#',
                            'id': menuButtonLink + "_closeButton"
                        })
                            .text('Close')
                            .on('click', _events.buttonMenuClose)
                    );

                $menu.append($close);

                var buttonOffset = $button.offset();

                fastdom.mutate(function () {
                    // Append the menu to the page body
                    emp.$body.append($menu);

                    // Add the menu key to the button
                    $button.attr('data-menu', menuButtonLink);

                    var windowsWidth = emp.$window.width();
                    var menuWidth = $menu.width();
                    var buttonWidth = $button.outerWidth();
                    var buttonHeight = $button.outerHeight();
                    var arrowPosition;
                    var menuPos = {
                        top: false,
                        left: false,
                        right: false,
                        bottom: false
                    };

                    // Try to the left of the button first
                    if (menuWidth < buttonOffset.left) {

                        // position the menu
                        menuPos.top = buttonOffset.top;
                        menuPos.right = (windowsWidth - buttonOffset.left + 5);
                    }
                    //Right
                    else if ((menuWidth + 5 + buttonOffset.left + buttonWidth) < (windowsWidth)) {

                        menuPos.top = buttonOffset.top;
                        menuPos.left = buttonOffset.left + buttonWidth + 5;
                        menuPos.right = "auto";
                        arrowPosition = "left";

                    }
                    //Bottom
                    else{
                        menuPos.top = buttonOffset.top + buttonHeight + 5;
                        menuPos.left = buttonOffset.left;
                        menuPos.right = "auto";
                        arrowPosition = "top";
                    }

                    if (menuPos.top && menuPos.right && (menuPos.right !== "auto")) {
                        // position the menu
                        $menu.css({
                            top: (menuPos.top),
                            right: (menuPos.right)
                        });
                    }
                    else if (menuPos.top && menuPos.left) {

                        if (menuPos.right) {
                            $menu.css({
                                top: (menuPos.top),
                                left: (menuPos.left),
                                right: (menuPos.right)
                            });
                        }
                        else {

                            // position the menu
                            $menu.css({
                                top: (menuPos.top),
                                left: (menuPos.left)
                            });
                        }
                    }


                    $menu.removeClass('emp-responsive-button-menu-arrow-left');
                    $menu.removeClass('emp-responsive-button-menu-arrow-top');
                    switch(arrowPosition){
                        case "left":
                            $menu.addClass('emp-responsive-button-menu-arrow-left');
                        break;

                        case "top":
                            $menu.addClass('emp-responsive-button-menu-arrow-top');
                        break;

                        default:                        
                    }


                    $menu.addClass('emp-selected');

                    emp.$body.on('click', _events.buttonMenuBodyClick);
                });
            }
            else {

                journal.log({ type: 'error', owner: 'UI', module: 'table', submodule: 'responsive', func: 'buttonMenu' }, 'Could not find the proper row index');
            }
        }
    };

    // Generic event function shared that is used to close the button menu
    _events.buttonMenuClose = function _close_column_menu_button(evt) {

        if (evt) {
            evt.preventDefault();
            evt.stopPropagation();
        }

        // Look for any open button menus
        fastdom.measure(function () {
            var $openButtonMenus = $('.emp-table-responsive-button-menu-pane');

            // Check to see if we have anything to do
            if ($openButtonMenus.length) {
                fastdom.mutate(function () {

                    $openButtonMenus.remove();

                    // Remove the body click event
                    emp.$body.off('click', _events.buttonMenuBodyClick);
                });
            }
        });
    };

    // Event for body clicks that is just a passthrough function
    _events.buttonMenuBodyClick = function _button_menu_body_click(evt) {

        var $evtTarget = $(evt.target);

        // Check to make sure the button click did not come from within the button menu pane
        if ($evtTarget.closest('.emp-table-responsive-button-menu-pane, .emp-icon-responsive-table-menu').length === 0) {

            if ($('.emp-table-responsive-button-menu-pane.emp-selected').length) {

                if (!$evtTarget.hasClass('emp-icon-responsive-table-menu')) {

                    _events.buttonMenuClose();

                    emp.$body.off('click', _events.buttonMenuBodyClick);
                }

            }
        }
    };

    _setup.menuButton = function _responsive(table, next) {

        if (table.config.setup.menuButton) {

            table.$self.on('resize.table', function () {

                _events.buttonMenuClose();
            });

            table.$self.on('sort.table', function () {

                _events.buttonMenuClose();
            });

            table.$self.on('table.filter', function () {

                _events.buttonMenuClose();
            });

            table.obj.$tbody.on('click', 'tr td button.emp-icon-responsive-table-menu, tr td button.emp-external-actions-menu', function (evt) {

                _events.buttonMenu(evt, table);

            });

        }

        next();
    };

    return {
        _setup: _setup,
        _defaults: _defaults,
        _prototype: _prototype
    };

});

define('tablePivot',[], function() {

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        'setup': {
            'pivot': true
        },
        'plugins': {
            'pivot': {}
        }
    };

    _priv.tolerance = 25;

    _priv.wrap = function _wrap(toWrap, wrapper) {

        var wrapperElem = wrapper || document.createElement('div');
        wrapperElem.appendChild(toWrap);

        return wrapperElem;

    };

    _priv.insertAfter = function _insertAfter(toInsert, referenceNode) {

        referenceNode.parentNode.insertBefore(toInsert, referenceNode.nextSibling);
    };

    _priv.removeDOMElem = function _removeDOMElem(elmToRemove) {

        var parent = elmToRemove.parentNode;

        parent.removeChild(elmToRemove);

    };

    _priv.pivot = function _pivot(table, manual) {

        var tableWrapper = table.elem.parentNode.parentNode.parentNode;

        var tableWidth = tableWrapper.offsetWidth + 20;

        if (tableWidth >= (table.config.plugins.pivot.toggleWidth + _priv.tolerance)) {

            if (!table.elem.classList.contains('unpivot')) {
                table.elem.classList.add('unpivot');
            }
        }
        else {

            if (table.elem.classList.contains('unpivot')) {
                table.elem.classList.remove('unpivot');
            }
        }

    };

    _events.resize = function _resize_pivot(evt) {

        var table = evt.data.table;
        var resized;

        if (table.config.setup.breakout)

        clearTimeout(resized);

        resized = setTimeout(
            function () {

                if (!table.config.plugins.breakout.fullView) {

                    _priv.pivot(table);
                }

            },
            200
        );

    };

    _prototype.pivot = function _pivot(evt, table) {

        if (table === undefined) {
            table = this;
        }

        _priv.pivot(table, true);
    };

    _setup.pivot = function _pivot(table, next) {

        if (table.dataStore && table.dataStore.attributes['data-type'] && table.dataStore.attributes['data-type'] === "pivot") {

            var tableWrapper = table.elem.parentNode.parentNode.parentNode;

            var tableClone = table.elem.cloneNode(true);

            var tableCloneBody = tableClone.querySelector('tbody');

            while(true) {

                if (tableCloneBody.children.length > 100) {
                    tableCloneBody.removeChild(tableCloneBody.lastChild);
                }
                else {
                    break;
                }

            }

            // Wrapper for transparity
            var tableCloneWrapper = _priv.wrap(tableClone);
            var tablePosWrapper = _priv.wrap(tableCloneWrapper);

            // Add and remove classes
            tableCloneWrapper.classList.add('emp-pivot-table-clone');
            tablePosWrapper.classList.add('emp-pivot-table-pos-wrap');
            tableClone.classList.add('unpivot');
            tableClone.style.display = "inline-block";

            fastdom.mutate(function () {

                _priv.insertAfter(tablePosWrapper, tableWrapper);

                fastdom.measure(function() {
                    var offWidth = tableClone.offsetWidth;
                    var scrollWidth = tableClone.scrollWidth;

                    var totalWidth = offWidth + scrollWidth;

                    table.config.plugins.pivot.toggleWidth = totalWidth;

                    fastdom.mutate(function() {

                        if (window.innerWidth > (table.config.plugins.pivot.toggleWidth + _priv.tolerance)) {

                           _priv.pivot(table);
                        }

                        _priv.removeDOMElem(tablePosWrapper);

                        emp.$window.on('resize', {table: table}, _events.resize);

                    });

                });

            });

        }

        next();
    };

    return {
        _priv: _priv,
        _setup: _setup,
        _prototype: _prototype,
        _defaults: _defaults
    };

});

define('tableBreakout',[], function() {

    var _priv = {};
    var _setup = {};
    var _events = {};
    var _prototype = {};
    var _defaults = {
        'setup': {
            'breakout': true
        },
        'plugins': {
            'breakout': {
                fullView: false,
                columnsHidden: false
            }
        }
    };

    _priv.checkColumnStatus = function(table) {

        for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {

            var colDef = table.config.plugins.responsive.columns[i];

            // Filter out all of the columns that are hidden but can be showen
            if (!colDef.visibility && colDef.togglable) {

                table.config.plugins.breakout.columnsHidden = true;
                return true;
            }

        }

        table.config.plugins.breakout.columnsHidden = false;

    };

    _priv.showHideWarning = function _show_hide_warning(table) {

        if (table.config.plugins.breakout.columnsHidden) {
            table.obj.$breakOutWarning[0].classList.remove('cui-hide-from-screen');
        }
        else {
            table.obj.$breakOutWarning[0].classList.add('cui-hide-from-screen');
        }

    };

    _priv.showHideBreakoutControl = function _show_hidw_breakout(table) {


        if (table.config.plugins.breakout.fullView) {

        }
        else {

            if (table.obj.$breakOutControl && table.config.plugins.breakout.columnsHidden) {
                table.obj.$breakOutControl[0].classList.remove('cui-hide-from-screen');
            }
            else if (table.obj.$breakOutControl && !table.config.plugins.breakout.columnsHidden) {
                table.obj.$breakOutControl[0].classList.add('cui-hide-from-screen');
            }

        }

    };

    _events.breakout = function _resize_pivot(evt, table) {

        if (table.config.plugins.breakout.fullView) {

            evt.data = {
                table: table
            };

            table.config.plugins.responsive.automatic = true;

            setTimeout(function() {

                if (table.config.setup.pivot) {

                    table.pivot(false, table);
                }

                table.revertResponsiveView(evt);

                table.obj.$breakOutControl.text("Show All Columns");
            }, 200);

        }
        else {

            var tableColumns = [];

            table.config.plugins.responsive.automatic = false;

            if (table.$self[0].classList.contains('emp-pivot-table')) {
                table.$self[0].classList.add('unpivot');
            }

            for (var i = 0, len = table.config.plugins.responsive.columns.length; i < len; i++) {

                var colDef = table.config.plugins.responsive.columns[i];

                // Filter out all of the columns that are hidden but can be showen
                if (!colDef.visibility && colDef.togglable) {

                    tableColumns.push(colDef.originalPos);
                }

            }

            if (table.config.setup.pivot) {
                table.obj.$viewWrapper[0].classList.remove('emp-remove-overflow');
            }

            table.showAllColumns(tableColumns);

            table.obj.$breakOutControl.text("Hide Columns");

        }

        table.config.plugins.breakout.fullView = !table.config.plugins.breakout.fullView;
    };

    _events.resize = function _resize_breakout(evt) {

        var table = evt.data.table;
        var resized;

        clearTimeout(resized);

        resized = setTimeout(
            function () {

                _priv.checkColumnStatus(table);

                _priv.showHideWarning(table);
                _priv.showHideBreakoutControl(table);
            },
            200
        );

    };

    _setup.breakout = function _breakout(table, next) {

        if ((table.dataStore && table.dataStore.attributes['data-type'] && (table.dataStore.attributes['data-type'] === "breakout" || table.dataStore.attributes['data-type'] === "breakout-priority")) || (table.dataStore.attributes['data-breakout'] === "true") ) {

            setTimeout(function() {

                table.obj.$breakOutControl = table.obj.$tableWrapper.find('.emp-table-breakout-control');
                table.obj.$tableLegend = table.obj.$tableWrapper.find('.emp-table-legend');

                table.obj.$MessageContainer = $('<div>', { class: 'cui-messages'});
                table.obj.$breakOutWarning = $('<p>', {class:'cui-warning cui-hide-from-screen'}).text('Table columns have been hidden due to the size of your display. To see all columns press the "Show All Columns" button.');

                table.obj.$MessageContainer.append(table.obj.$breakOutWarning);

                //display breakout message below table legend
                if(table.obj.$tableLegend[0] !== undefined){

                    table.obj.$tableWrapper.prepend(table.obj.$MessageContainer);
                }else{

                    table.obj.$controlRow.prepend(table.obj.$MessageContainer);
                }
                

                if (table.obj.$breakOutControl && table.obj.$breakOutControl.length) {

                    table.obj.$breakOutControl.on('click', function(evt) {

                        _events.breakout(evt, table);
                    });

                    // do an initial check
                    _priv.checkColumnStatus(table);

                    // Execute the first initial show hides
                    _priv.showHideWarning(table);
                    _priv.showHideBreakoutControl(table);

                    table.$self.on('reflow.table', { table: table }, _events.resize);
                }

                next();
            }, 500);


        }
        else {

            next();
        }

    };

    return {
        _priv: _priv,
        _setup: _setup,
        _defaults: _defaults
    };

});

define('table',['jquery', 'dataStore', 'tableBase', 'tableSort', 'tableSelection', 'tableResponsive', 'tableFilter', 'tableChangeReturn', 'tableError', 'tableMobile', 'tableMenuButton', 'tablePivot', 'tableBreakout'], function ($, ds, base, sort, selection, responsive, filter, changeReturn, error, mobile, menuButton, pivot, breakout) {

    // Storage locations for private functions
    var _priv = {};

    // Storage locations for setup only functions (only get executed on tables when inited)
    var _setup = {};

    // Storage location for init functions, this is where items should be executed to extend table configurations
    var _inits = {};

    // Storage location for differnt types of events
    var _events = {};

    var Table = function (elem, options) {
        // Store the element upon which the component was called
        this.elem = elem;

        // Create a jQuery version of the element
        this.$self = $(elem);

        // Save off the id
        this.id = $(elem).attr('id');

        this.options = options;
    };

    Table.prototype = {};

    Table.prototype.version = 3;

    Table.prototype.defaults = {
        setup: {},
        controls: {},
    };

    // ========================
    // Initialization Functions
    // ========================

    Table.prototype.init = function _init (cb) {

        var table = this;

        // Set the id so its easier to find
        table.id = table.$self.attr('id');

        if (table.$self.attr('style')) {
            fastdom.mutate(function () {
                table.$self.removeAttr('style');
            });
        }

        // Go out and dins the datastore id and make a reference to it, if it exists.
        var dataStore = table.$self.attr('data-store-id');

        if (dataStore !== undefined && dataStore !== null) {
            table.dataStore = ds.getStore(dataStore);
        }
        else {
            table.dataStore = false;
        }

        var data = table.$self.data();

        var options = $.extend(true, {}, this.options, data);

        table.config = $.extend(true, {}, this.defaults, options);

        // Add object space were _extensions can define additional controls
        table.config.controls = {
            order: [],
            elements: {},
        };

        // Build a default table object of all the standard object parts
        // - thead
        // - tbody
        // - tfoot
        // - caption
        table.obj = {};

        // Look for table header
        table.obj.$thead = table.$self.children('thead');

        if (table.obj.$thead.length === 0) {
            table.obj.$thead = false;
        }

        // Look for table body
        table.obj.$tbody = table.$self.children('tbody');

        if (table.obj.$tbody.length === 0) {
            table.obj.$tbody = false;
        }
        else {

            if (table.obj.$tbody.hasClass('emp-empty-table')) {
                table.config.empty = true;
            }

            if (table.obj.$tbody.hasClass('emp-large-table')) {
                table.config.largeTable = true;
            }
        }

        // Look for table footer
        table.obj.$tfoot = table.$self.children('tfoot');

        if (table.obj.$tfoot.length === 0) {
            table.obj.$tfoot = false;
        }

        // Look for table caption
        table.obj.$caption = table.$self.children('caption');

        if (table.obj.$caption.length === 0) {
            table.obj.$caption = false;
        }

        // Look for the root table container
        table.obj.$tableContainer = table.$self.parents('.emp-table').eq(0);

        if (table.obj.$tableContainer.length === 0) {
            table.obj.$tableContainer = false;
        }

        // Check to see if the table has a body before
        if (table.obj.$tbody) {

            var setupSteps = Object.keys(_setup);

            if (setupSteps.length > 0) {

                (function _setupSteps (steps) {

                    var step = steps.shift();

                    _setup[step](table, function next() {

                        if (steps.length !== 0) {

                            _setupSteps(steps);
                        }
                        else {

                            var initSteps = Object.keys(_inits);

                            if (initSteps.length > 0) {

                                (function _initSteps(iSteps) {

                                    var step = iSteps.shift();

                                    _inits[step](table);

                                    if (iSteps.length > 0) {

                                        _initSteps(iSteps);
                                    }
                                    else {

                                        cb(table);
                                    }

                                })(initSteps);

                            }
                            else {

                                cb(table);
                            }

                        }

                    });

                })(setupSteps);
            }
            else {

                cb(table);
            }
        }
    };

    // Emits a debind event used to tell the other table plugins to debind there functions.
    Table.prototype.debind = function _debind() {
        this.$self.trigger('debind');
    };

    // =================
    // Private Functions
    // =================

    // Function will take extension plugins and merge the their functionality with this root moduel
    _priv.extend = function _extend(extension, cb) {
        var i;
        var len;

        function extendSection (base, extension, data) {
            if (typeof extension === 'object') {
                if (data) {
                    base = $.extend(true, {}, base, extension);

                    return base;
                }
                else {
                    var funcs = Object.keys(extension);

                    for (var i = 0, len = funcs.length; i < len; i++) {
                        base[funcs[i]] = extension[funcs[i]];
                    }

                    return base;
                }
            }
        }

        // Check to see if an array of extension was passed.
        if (Array.isArray(extension)) {
            for (i = 0, len = extension.length; i < len; i++) {
                _priv.extend(extension[i], cb);
            }
        }
        else {
            if (typeof extension === 'object') {
                var props = Object.keys(extension);

                for (i = 0, len = props.length; i < len; i++) {
                    switch (props[i]) {
                        case '_priv':
                            _priv = extendSection(_priv, extension[props[i]], false);

                            break;

                        case '_inits':
                            _inits = extendSection(_inits, extension[props[i]], false);

                            break;

                        case '_setup':
                            _setup = extendSection(_setup, extension[props[i]], false);

                            break;

                        case '_prototype':
                            // Loop through a add the new public prototype
                            for (var protots in extension[props[i]]) {
                                Table.prototype[protots] = extension[props[i]][protots];
                            }

                            break;

                        case '_defaults':
                            Table.prototype.defaults = extendSection(Table.prototype.defaults, extension[props[i]], true);

                            break;
                    }
                }
            }
        }
    };

    var externalCheck = (document.querySelector('html.external-app')) ? true : false;

    // Extend the table base
    if (!externalCheck) {
        // Load all the standard empire 2 plugins
        _priv.extend([base, sort, filter, responsive, menuButton, selection, changeReturn, error]);
    }
    else {

        _priv.extend([base, sort, filter, responsive, menuButton, mobile, selection, error, pivot, breakout]);
    }

    // Define and Expose the table component to jQeury
    window.$.fn.table = function (options, callback) {

        if (typeof options === 'function') {
            callback = options;
            options = {};
        }

        // Loop through all of the discovered tables
        return this.each(function () {

            var id = $(this).attr('id');

            new Table(this, options).init(function(tableConfig) {

                if (window.emp) {
                    emp.reference.tables[tableConfig.id] = tableConfig;
                }

                // Indicate that the table if fully setup.
                tableConfig.$self.trigger('setup.table');

                if (typeof callback === "function") {

                    callback(tableConfig);
                }

            });

        });
    };
});


define('tabs',['guid'], function(guid) {

    var CLASSES = {
        activeTab: 'emp-active-tab',
        selected: 'emp-selected',
        hidden: "cui-hidden-for-tabs"
    };

    var _priv = {};

    _priv.defaults = {
        allowCloseAll: true
    };

    _priv.changeTab = function _change_tab_private(tabs, index) {

        var currentHeaderTab = false;
        var currentContainer = false;

        var newHeaderTab = false;
        var newContainer = false;

        if (tabs.currentActiveTab !== index) {

            fastdom.measure(function() {

                if (tabs.currentActiveTab !== false) {
                    currentHeaderTab = tabs.obj.$headerTabs.eq(tabs.currentActiveTab);
                }

                if (tabs.currentActiveTab !== false) {
                    currentContainer = tabs.obj.$containers.eq(tabs.currentActiveTab);

                }

                newHeaderTab = tabs.obj.$headerTabs.eq(index);
                newContainer = tabs.obj.$containers.eq(index);

                fastdom.mutate(function() {

                    // Remove old selected tab class
                    if (currentHeaderTab) {
                        currentHeaderTab.removeClass(CLASSES.selected);
                    }

                    if (currentContainer) {
                        currentContainer.removeClass(CLASSES.activeTab);
                        currentContainer.children(':eq(1)').addClass(CLASSES.hidden);
                    }

                    // Toggle the new active tab
                    newHeaderTab.addClass(CLASSES.selected);
                    newContainer.addClass(CLASSES.activeTab);

                    newContainer.children(':eq(1)').removeClass(CLASSES.hidden);

                    // Update the tab object state
                    tabs.currentActiveTab = index;
                    tabs.$currentActiveTab = newHeaderTab;
                });
            });

        }
        else {

            if (tabs.options.allowCloseAll) {

                currentHeaderTab = tabs.obj.$headerTabs.eq(tabs.currentActiveTab);
                currentContainer = tabs.obj.$containers.eq(tabs.currentActiveTab);

                fastdom.mutate(function() {

                    currentHeaderTab.removeClass(CLASSES.selected);
                    currentContainer.removeClass(CLASSES.activeTab);

                    // Update the tab object state
                    tabs.currentActiveTab = false;
                    tabs.$currentActiveTab = false;
                });

            }
            else {

                journal.log({type: 'warning', owner: 'UI', module: 'tabs', func: '_priv.changeTab'}, 'Tabs change tab request ignored because provided index matched current active tab.');
            }

        }

        //remove collapse class apply by Collapse All Sections button
        if(tabs.elem.classList.contains('emp-collapse')){

            tabs.elem.classList.remove('emp-collapse');
        }
    };

    var _events = {};

    _events.changeTab = function _change_tab(evt, tabs, index) {

        var $source = $(evt.target);

        if ($source[0].hasAttribute('data-tab-index')) {

            _priv.changeTab(tabs, parseInt($source.attr('data-tab-index')));
        }
        else {

            console.log("FAIL!");
        }
    };

    var Tabs = function(elem, options) {

        this.elem = elem;

        this.$self = $(elem);

        this.id = this.$self.attr('id');

        if (typeof this.id !== "string") {

            var id = guid();

            this.$self.attr('id', id);

            this.id = id;
        }

        this.options = $.extend(true, _priv.defaults, options || {});
    };

    Tabs.prototype = {};

    Tabs.prototype.init = function _tabs_init(cb) {

        var tabs = this;

        tabs.obj = {};

        tabs.obj.$desktopHeader = tabs.$self.find('header').eq(0);

        tabs.obj.$tabContainer = tabs.$self.find('.emp-tab-container').eq(0);

        tabs.obj.$headerTabs = tabs.obj.$desktopHeader.find('a.emp-header-tab');
        tabs.obj.$accordionTabs = tabs.obj.$tabContainer.find('a.emp-accordion-tab');

        tabs.obj.$containers = tabs.$self.find('.emp-tab');

        tabs.$currentActiveTab = tabs.obj.$headerTabs.filter('.emp-selected');
        tabs.currentActiveTab = tabs.$currentActiveTab.index();

        tabs.$self.on('click', '.emp-tab-control', function(evt) {

            _events.changeTab(evt, tabs);
        });

        cb(tabs);
    };

    Tabs.prototype.changeTab = function(index) {

        var tabs = this;

        _priv.changeTab(tabs, index);
    };

    window.$.fn.tabs = function (options, callback) {

        if (typeof options === 'function') {
            callback = options;
            options = {};
        }

        return this.each(function () {

            new Tabs(this, options).init(function(tabsConfig) {

                if (window.emp) {

                    if (!emp.reference.tabs) {
                        emp.reference.tabs = {};
                    }

                    emp.reference.tabs[tabsConfig.id] = tabsConfig;
                }

                tabsConfig.$self.trigger('setup.table');

                if (typeof callback === "function") {

                    callback(tableConfig);
                }

            });

        });
    };

});

define('datepicker',['jquery', 'cui'], function ($, cui) {
    var VERSION = {
            name: 'datepicker',
            version: '1.0.0',
            date: '20010101'
        };

    // Constants
    var MONTH_EN = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ];

    var MSHORT_EN = [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
        ];

    var DAYS_WK_EN = [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday',
        ];

    var DAYS_MON = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    var CULTURES = {
            USA: {
                mask: 'MM|DD|YYYY',
                delim: '/',
            },
            INT: {
                mask: 'DD|MM|YYYY',
                delim: '/',
            },
            SYS: {
                mask: 'YYYY|MM|DD',
                delim: '-',
            },
        };

    // CSS hooks
    var CLASSES = {
            hidden: 'cui-hidden',
            selected: 'selected',
            invalidDate: 'invalidDate',
        };

    var SELECTORS = {
            icon: '.cui-c-datepicker',
        };

    var ID_PREFIXES = {
            datePicker: 'datePicker_',
            calIcon: 'cal_',
            selectedMonth: 'selMon_',
            selectedYear: 'selYr_',
        };

    var ICON_TOOLTIP = {
            show: 'Open the calendar popup',
            hide: 'Close the calendar popup',
        };

    var OPTIONS_TOOLTIP = {
            show: 'Open options',
            hide: 'Close options',
        };

    // Common element caches
    var $body;
    var $window;

    // Private API
    var _priv = {};
    var _events = {};
    var _imgPath = '../../dist/images/';
    var _defaultSettings = {
            datePickers: [
                {
                    inputId: '',
                    culture: 'USA',
                    minDate: '01/01/1950',
                    maxDate: '12/31/2150',
                    display: {
                        theme: 0,
                        autoError: false,
                        enableBoundaryDetection: true,
                    },
                },
            ],
        };

    var _mySettings = {
            datePickers: [],
        };

    /////////////////
    // Constructor //
    /////////////////

    var DatePicker = function (elem, options) {
        this.elem = elem;
        this.$elem = $(elem);
        this.options = options;

        // This next line takes advantage of HTML5 data attributes
        // to support customization of the plugin on a per-element
        // basis. For example,
        // <div class='item' data-datepicker-options='{"message":"Goodbye World!"}'></div>
        this.metadata = this.$elem.data('datepicker-options');
    };

    //////////////////////
    // Plugin prototype //
    //////////////////////

    DatePicker.prototype = {};

    // Default user options
    DatePicker.prototype.defaults = {};

    /**
     * Initializes the plugin and date picker and adds a click event to the icon
     * May be called multiple times. If no date pickers are provided, some general setup will be performed.
     * @return {Object}   Instance of DatePicker
     */
    DatePicker.prototype.init = function () {
        var $icons = $(SELECTORS.icon);

        // Introduce defaults that can be extended either globally or using an object literal.
        this.config = $.extend({}, this.defaults, this.options, this.metadata);

        // Cache common elements
        $body = $('body');
        $window = $(window);

        // Add click event on calendar icons
        this.$elem.on('click', _events._iconClick);

        // Try to find all date icons
        $icons = $(SELECTORS.icon);

        // Add events to date inputs
        if ($icons.length) {
            $icons.each(function () {

                var iconSelector = '#' + (this.id.substring(this.id.indexOf(ID_PREFIXES.calIcon) + 4));

                //console.log('#' + (this.id.substring(this.id.indexOf(ID_PREFIXES.calIcon) + 4)));

                if (iconSelector !== "#" && iconSelector.length > 1) {

                    var $input = $('#' + (this.id.substring(this.id.indexOf(ID_PREFIXES.calIcon) + 4)));

                    if ($input.length) {
                        $input.on('blur', _events._inputBlur);
                        $input.on('keyup', _events._inputKeyup);
                    }

                    // Icon
                    $(this).attr('title', ICON_TOOLTIP.show);
                }

            });
        }
        // No icons found, so get the input manually by looking for a sibling
        //TODO: I think this condition is always met and the block above is leftover from iflow but does not apply to Empire 2 (CP 4/12/16)
        else {
            // Add events for its input
            this.$elem.prev('input').on('keyup', _events._inputKeyup);
        }

        return this;
    };

    ////////////////////
    // Public methods //
    ////////////////////

    var _setImagesPath = function _setImagesPath (url) {
            if (typeof url === 'string' && url && $.trim(url).length > 0) {
                _imgPath = url;
            }
        };

    var _customize = function _customize (settings) {
            var minDefaultDate = new Date(_defaultSettings.datePickers[0].minDate);
            var maxDefaultDate = new Date(_defaultSettings.datePickers[0].maxDate);
            var dp;
            var i;
            var j;
            var k;

            // check if any settings are passed
            if (settings && typeof settings === 'object') {
                i = settings.datePickers.length;

                while (j < i) {
                    dp = settings.datePickers[j];

                    if (dp && dp.inputId) {
                        if ($.trim(dp.inputId).length > 0) {
                            // check if display was passed, else add it
                            if (!dp.display) {
                                dp.display = {};
                            }

                            // if id exists, add to mySettings
                            _mySettings.datePickers[k] = {
                                inputId: dp.inputId,
                                culture: dp.culture || _defaultSettings.datePickers[0].culture,
                                minDate: dp.minDate || _priv.setDateToCulture({day: minDefaultDate.getDate(), month: (minDefaultDate.getMonth()+1), year: minDefaultDate.getFullYear()}, dp.inputId, CULTURES[dp.culture]),
                                maxDate: dp.maxDate || _priv.setDateToCulture({day: maxDefaultDate.getDate(), month: (maxDefaultDate.getMonth()+1), year: maxDefaultDate.getFullYear()}, dp.inputId, CULTURES[dp.culture]),
                                display: {
                                    theme: dp.display.theme || _defaultSettings.datePickers[0].display.theme,
                                    autoError: dp.display.autoError || _defaultSettings.datePickers[0].display.autoError,
                                    enableBoundaryDetection: dp.display.enableBoundaryDetection || _defaultSettings.datePickers[0].display.enableBoundaryDetection
                                }
                            };

                            k += 1;
                        }
                    }

                    j += 1;
                }
            }
        };

    var _hideAll = function _hideAll () {
            _priv.hideAllDatePickers();
        };

    /////////////////////
    // Private methods //
    /////////////////////

    _priv.generateID = function _generateID () {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };

    _priv.getSettings = function _getSettings (inputId) {
        var i = _mySettings.datePickers.length;

        // make sure custom settings were set, else return default
        if (i === 0) {
            return _defaultSettings.datePickers[0];
        }

        while ((i -= 1) >= 0) {
            // find custom settings and return those if match
            if (_mySettings.datePickers[i].inputId === inputId) {
                return _mySettings.datePickers[i];
            }
        }

        // return default settings
        return _defaultSettings.datePickers[0];
    };

    _priv.showHideDatePicker = function _showHideDatePicker (calIcon, cal, forceHide) {
        var inputId = calIcon.id.substring(calIcon.id.indexOf(ID_PREFIXES.calIcon) + 4);

        forceHide = forceHide || false;

        // Check if calendar already exists for this associated control
        if (cal) {

            // If it exists, show it or hide it
            if ($(cal).hasClass(CLASSES.hidden) && !forceHide) {
                // Refresh calendar
                cal = _priv.refreshDatePickerHtml(cal);

                // Position calendar
                _priv.setDatePickerPosition(cal);

                _priv.showDatePicker(cal);

                if (_priv.getSettings(inputId).display.enableBoundaryDetection) {
                    _priv.handleBoundaryDetection(cal);
                }

                $('#dpCalWrap_' + inputId).focus();
            }
            else {
                _priv.hideDatePicker(cal);

                $(calIcon).focus();
            }
        }
        else {

            cal = _priv.createDatePicker(calIcon);

            // Position calendar
            _priv.setDatePickerPosition(cal);


            if (_priv.getSettings(inputId).display.enableBoundaryDetection) {
                _priv.handleBoundaryDetection(cal);
            }

            _priv.showDatePicker(cal);

            $('#dpCalWrap_' + inputId).focus();

            calIcon.title = ICON_TOOLTIP.hide;

            // // Watch for body clicks and window resizing
            // $body.on('click', _events._bodyClick);
            // $window.on('resize', _events._windowResize);
        }
    };

    /**
     * Creates a new date picker for a given icon and adds it to the DOM
     * @param   {Element}  elem  Icon element
     * @return  {Element}        Date picker element
     */
    _priv.createDatePicker = function _createDatePicker (elem) {
        var inputId = elem.id.substring(elem.id.indexOf(ID_PREFIXES.calIcon) + 4);
        var $cal = $('<div/>');

        $cal
            .attr('id', ID_PREFIXES.datePicker + inputId)
            .attr('style', 'inline-block')
            .addClass('dp')
            .html(_priv.getDatePickerHtml(_priv.getDatePickerInitialDate(inputId), inputId));

        $body.append($cal);

        // Add click event to calendar and use delegation to handle clicks on it
        $cal
            .on('click', _events._calClick)
            .on('dblclick', _events._calClick)
            // Add keydown event to handle keystrokes like 'esc'
            .on('keydown',  _events._calKeydown);

        $cal
            .on('click', '.dp', _events._calClick)
            .on('dblclick', '.dp', _events._calClick)
            // Add keydown event to handle keystrokes like 'esc'
            .on('keydown', '.dp', _events._calKeydown);



        return $cal.get(0);
    };

    _priv.refreshDatePickerHtml = function _refreshDatePickerHtml (cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));

        cal.innerHTML = _priv.getDatePickerHtml(_priv.getDatePickerInitialDate(inputId), inputId);

        return cal;
    };

    _priv.getDatePickerHtml = function _getDatePickerHtml (dmyCal, inputId) {
        var html = '';
        var calDate = null;
        var weekday = -1;
        var lastDayMonth = 0;
        var lastDayPrevMonth = 0;
        var prevMon = 0;
        var prevYr = 0;
        var nextMon = 0;
        var nextYr = 0;
        var i = 0;
        var rows = 0;
        var daysCnt = 0;
        var titleDate = null;
        var today = new Date();
        var _getDayTitle = function _getDayTitle (date) {
                return DAYS_WK_EN[date.getDay()] +
                       ', ' +
                       MONTH_EN[date.getMonth()] +
                       ' ' +
                       date.getDate() +
                       ', ' +
                       date.getFullYear();
            };

        dmyCal = _priv.convertDMYToNumeric(dmyCal);

        // Calendar wrapper
        // ---------------------------
        html += '<div id="dpCalWrap_' + inputId + '" class="dpCalWrap" tabindex="0">' +
                    '<div class="dpCal">';

        // Calendar main
        // ---------------------------
        // Header
        html += _priv.getHeaderHtml(dmyCal, inputId);

        // Body
        // One-letter abbreviation for each single day
        html +=         '<div class="dpBody">' +
                            '<div class="dpDayDesc">' +
                                '<ul><li>S</li><li>M</li><li>T</li><li>W</li><li>T</li><li>F</li><li>S</li></ul>' +
                            '</div>' +
                            '<div class="dpWeekNbrDays">';

        // Days
        html +=                 '<div class="dpDays">' +
                                    '<ul>';

        // Calculate the day where the 1st of the month falls
        calDate = new Date(dmyCal.month.toString() + '/01/' + dmyCal.year.toString());
        weekday = calDate.getDay();

        // Calculate the last day of the month
        lastDayMonth = _priv.getLastDayOfMonth(calDate);

        // Get next and previous months/year
        nextMon = dmyCal.month + 1;
        nextYr = dmyCal.year;
        if (dmyCal.month === 1) {
            prevMon = 12;
            prevYr = dmyCal.year - 1;
        }
        else {
            prevMon = dmyCal.month - 1;
            prevYr = dmyCal.year;

            if (nextMon > 12) {
                nextMon = 1;
                nextYr += 1;
            }
        }

        // Calculate the last day of the previous month if applicable
        lastDayPrevMonth = _priv.getLastDayOfMonth(new Date(prevMon + '/01/' + prevYr));

        // Start with previous month days when applicable
        // If the first of the month falls on a Sunday, add one extra row with previous month's days
        if (weekday === 0) {
            weekday = 7;
        }

        while (weekday > 0) {
            // Counts the number of days used in row (1...7)
            daysCnt += 1;

            html += '<li class="prevMonthDay';

            if (i === 0) {
                html += ' newLine';
                rows += 1;
                i += 1;
            }

            // Validate date and show as clickable or read-only
            titleDate = new Date(prevMon + '/' + (lastDayPrevMonth - weekday + 1) + '/' + prevYr);

            if (_priv.validateMinMaxRange({day: (lastDayPrevMonth - weekday + 1), month: prevMon, year: prevYr}, inputId)) {
                html += '"><a href="#" role="button" title="' + _getDayTitle(titleDate) + '" tabindex="0">' + (lastDayPrevMonth - weekday + 1) + '</a></li>';
            }
            else {
                html += '"><span class="disabled">' + (lastDayPrevMonth - weekday + 1) + '</span></li>';
            }

            weekday -= 1;
        }
        i = 0;

        // Month's days
        while (i < lastDayMonth) {
            // Counts the number of days used in row (1...7)
            daysCnt += 1;

            html += '<li class="';

            if (daysCnt === 8) {
                html += 'newLine';
                rows += 1;
                daysCnt = 1;
            }

            // Check if today's date falls into this month
            if (today.getDate() === (i + 1) && today.getMonth() === (dmyCal.month - 1) && today.getFullYear() === dmyCal.year) {
                html += ' today';
            }

            // Check if there is a selected day
            dateParsed = _priv.processDate($.trim(document.getElementById(inputId).value), inputId);
            if (dateParsed.valid) {
                if (parseInt(dateParsed.dmy.day, 10) === (i + 1) && parseInt(dateParsed.dmy.month, 10) === dmyCal.month && parseInt(dateParsed.dmy.year, 10) === dmyCal.year) {
                    html += ' selectedDay';
                }
            }

            // Validate date and show as clickable or read-only
            titleDate = new Date(dmyCal.month.toString() + '/' + (i + 1) + '/' + dmyCal.year.toString());
            if (_priv.validateMinMaxRange({day: (i + 1), month: dmyCal.month, year: dmyCal.year}, inputId)) {
                html += '"><a href="#" role="button" title="' + _getDayTitle(titleDate) + '" tabindex="0">' + (i + 1) + '</a></li>';
            }
            else {
                html += '"><span class="disabled">' + (i + 1) + '</span></li>';
            }

            i += 1;
        }
        i = 0;

        // Next month's day when applicable
        if (daysCnt === 7) {
            daysCnt = 0;
        }
        while (daysCnt < 7) {
            html += '<li class="nextMonthDay';

            if (daysCnt === 0) {
                html += ' newLine';
                rows += 1;
            }

            // Validate date and show as clickable or read-only
            titleDate = new Date(nextMon + '/' + (i + 1) + '/' + nextYr);

            if (_priv.validateMinMaxRange({day: (i + 1), month: nextMon, year: nextYr}, inputId)) {
                html += '"><a href="#" role="button" title="' + _getDayTitle(titleDate) + '" tabindex="0">' + (i + 1) + '</a></li>';
            }
            else {
                html += '"><span class="disabled">' + (i + 1) + '</span></li>';
            }

            daysCnt += 1;
            i += 1;

            if (daysCnt === 7 && rows < 6) {
                // Add extra row to keep consistent 6-row calendar
                daysCnt = 0;
            }
        }
        i = 0;

        // Footer
        // html +=                     '</ul>' +
        //                         '</div>' +
        //                     '</div>' +
        //                     '<div class="dpFoot">' +
        //                         '<div class="dpFootLeft">' +
        //                             '<div class="dpPrevYear">' +
        //                                 '<button type="button" class="dpPrevYearJan1" >Jan 1</button>' +
        //                             '</div>' +
        //                         '</div>' +
        //                         '<div class="dpFootRight">' +
        //                             '<div class="dpPrevYear">' +
        //                                 '<button type="button" class="dpPrevYearDec31">Dec 31</button>' +
        //                             '</div>' +
        //                         '</div>' +
        //                     '</div>' +
        //                 '</div>' +
        //             '</div>';

        // End of calendar wrapper
        html += '</div>';

        // Options
        // ---------------------------
        html += '<div id="dpOptions_' + inputId + '" class="dpOptWrap ' + CLASSES.hidden + '" tabindex="0">';

        // Months
        html +=     '<div class="dpOpt">' +
                        '<div class="dpMon">' + _priv.setOptionsMonths(dmyCal, inputId) + '</div>';

        // Years
        html +=         '<div class="dpYr">' + _priv.setOptionsYears(dmyCal, inputId) + '</div>';

        // Other
        html +=         '<div id="dpOther_' + inputId + '" class="dpOther">' +
                            '<div class="dpOtherL">' +
                                '<a href="#" role="button" title="Today" tabindex="0">Today</a>' +
                            '</div>' +
                            '<div class="dpOtherR">' +
                                '<a href="#" role="button" id="dpOK_' + inputId + '" title="OK" tabindex="0">OK</a>' +
                                '<a href="#" role="button" title="Cancel" tabindex="0">Cancel</a>' +
                            '</div>' +
                        '</div>';

        // Options shadow
        html +=     '</div>' +
                '</div>';

        return html;
    };

    _priv.getHeaderHtml = function _getHeaderHtml (dmyCal, inputId) {
        var html = '';
        var settings = _priv.getSettings(inputId);
        var minDate = _priv.parseDateStringToDateObject(settings.minDate, inputId);
        var maxDate = _priv.parseDateStringToDateObject(settings.maxDate, inputId);

        html = '<div class="dpHead">';

        // Previous navigation items
        if (dmyCal.month === (minDate.getMonth() + 1) && dmyCal.year === minDate.getFullYear()) {
            html += '<ul class="lIcons"><li><span class="grayedOut"></span></li><li><span class="grayedOut"></span></li></ul>';
        }
        else {
            html += '<ul class="lIcons"><li><a href="#" class="fastNavPrevQtr" title="Previous quarter" tabindex="0"></a></li><li><a href="#" class="navPrevMon" title="Previous month" tabindex="0"></a></li></ul>';
        }

        // Month year
        html += '<div class="title"><a href="#" class="monthYear" title="' + OPTIONS_TOOLTIP.show + '" tabindex="0">' + MONTH_EN[dmyCal.month - 1] + ' ' + dmyCal.year.toString()  + '</a><input type="hidden" id="dpSel_' + inputId + '" value="' + dmyCal.month.toString() + '/' + dmyCal.year.toString() + '"></div>';

        // Next navigation items
        if (dmyCal.month === (maxDate.getMonth() + 1) && dmyCal.year === maxDate.getFullYear()) {
            html += '<ul class="rIcons"><li><span class="grayedOut"></span></li><li><span class="grayedOut"></span></li></ul>';
        }
        else {
            html += '<ul class="rIcons"><li><a href="#" class="navNextMon" title="Next month" tabindex="0"></a></li><li><a href="#" class="fastNavNextQtr" title="Next quarter" tabindex="0"></a></li></ul>';
        }

        html += '</div>';

        return html;
    };

    _priv.setDatePickerPosition = function _setDatePickerPosition (cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var input = document.getElementById(inputId);
        var inputParent = null;
        var coord = [];
        var offset;
        var borderTop = 0;
        var borderBottom = 0;

        if (input) {
            // Using the parent help us determine the (x,y) for calendar
            inputParent = input.parentNode;

            // Parent must be positioned at least relative
            inputParent.style.position = 'relative';

            // Get parent's coordinates
            offset = $(inputParent).offset();
            coord = [offset.left, offset.top];

            // Set 'x' value to calendar
            cal.style.left = coord[0] + 'px';

            // Calculate 'y' value
            borderTop = parseInt($(input).css('border-top-width'), 10);
            borderBottom = parseInt($(input).css('border-bottom-width'), 10);

            // Set 'y' value to calendar
            cal.style.top = (coord[1] + input.clientHeight + borderTop + borderBottom + input.offsetTop) + 'px';

            cal.style.width = '260px';
        }
    };

    _priv.showDatePicker = function _showDatePicker (cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.calIcon + '_') + (ID_PREFIXES.calIcon.length + 1));

        $(cal).removeClass('cui-hidden');

        $('#' + ID_PREFIXES.calIcon + inputId).attr('title', ICON_TOOLTIP.hide);

        // Watch for body clicks and window resizing
        $body.on('click', _events._bodyClick);
        $window.on('resize', _events._windowResize);
    };

    _priv.hideDatePicker = function _hideDatePicker (cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.calIcon + '_') + (ID_PREFIXES.calIcon.length + 1));

        $(cal).addClass(CLASSES.hidden);

        $('#' + ID_PREFIXES.calIcon + inputId).attr('title', ICON_TOOLTIP.show);
    };

    _priv.hideAllDatePickers = function _hideAllDatePickers (inputId) {
        if (!inputId || typeof inputId !== 'string') {
            inputId = '';
        }

        $('div.dp').each(function () {
            var $cal = $(this);
            var icon;

            if (this.id !== (ID_PREFIXES.datePicker + inputId)) {
                if (!$cal.hasClass(CLASSES.hidden)) {
                    $cal.addClass(CLASSES.hidden);

                    icon = document.getElementById(ID_PREFIXES.calIcon + this.id.substring(this.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1)));

                    if (icon) {
                        icon.title = ICON_TOOLTIP.show;
                    }
                }
            }
        });

        // Stop watching for body clicks and window resizing
        $body.off('click', _events._bodyClick);
        $window.off('resize', _events._windowResize);
    };

    _priv.showHideOptions = function _showHideOptions (elem, opts, forceHide) {

        var inputId = opts.id.substring(opts.id.indexOf('_') + 1);
        var $opts = $(opts);
        var cal = document.getElementById(ID_PREFIXES.datePicker + inputId);
        var monthYear = _priv.getMonthYearFromCalHeader(cal);

        forceHide = forceHide || false;

        if ($opts.hasClass(CLASSES.hidden) && !forceHide) {
            // get current month and year in calendar and set hidden in case they changed
            document.getElementById(ID_PREFIXES.selectedMonth + inputId).value = monthYear[0];
            document.getElementById(ID_PREFIXES.selectedYear + inputId).value = monthYear[1];

            // then refresh options to have selected month/year
            $opts.find('div.dpMon').html(_priv.setOptionsMonths(_priv.convertDMYToNumeric({day: 1, month: monthYear[0], year: monthYear[1]}), inputId));

            $opts.find('div.dpYr').html(_priv.setOptionsYears(_priv.convertDMYToNumeric({day: 1, month: monthYear[0], year: monthYear[1]}), inputId));

            _priv.positionOptions(elem, opts);

            elem.title = OPTIONS_TOOLTIP.hide;

            _priv.showOptions(opts);

            if (_priv.getSettings(inputId).display.enableBoundaryDetection) {
                _priv.handleBoundaryDetection(opts);
            }

            $opts.focus();
        }
        else {
            elem.title = OPTIONS_TOOLTIP.show;

            _priv.hideOptions(opts);

            $(elem).focus();
        }
    };

    _priv.setOptionsSelectedMonth = function _setOptionsSelectedMonth (elem, opts, cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var selMonth = document.getElementById(ID_PREFIXES.selectedMonth + inputId);

        // Unhighlight all months
        $(opts).find('a, span.disabled').each(function () {
            $(this).parent().removeClass(CLASSES.selected);
        });

        // Highlight selected month
        $(elem).parent().addClass(CLASSES.selected);

        selMonth.value = _priv.getMonthValFromShortStr(elem.innerHTML);
    };

    _priv.setOptionsSelectedYear = function _setOptionsSelectedYear (elem, opts, cal) {
        var yr = elem.innerHTML;
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var selMonth = document.getElementById(ID_PREFIXES.selectedMonth + inputId);
        var selYear = document.getElementById(ID_PREFIXES.selectedYear + inputId);
        var divMonths = $('#dpOptions_' + inputId + ' div.dpMon').get(0);

        // Unhighlight all years
        $(opts).find('a').each(function () {
            $(this).parent().removeClass(CLASSES.selected);
        });

        // Highlight selected year
        $(elem).parent().addClass(CLASSES.selected);

        selYear.value = yr;

        // Make sure only proper months are available for selected yr
        divMonths.innerHTML = _priv.setOptionsMonths(_priv.convertDMYToNumeric({day: 1, month: selMonth.value, year: yr}), inputId);
    };

    _priv.setOptionsYears = function _setOptionsYears (dmyCal, inputId) {
        var html = '';
        var i = 0;
        var selYear = document.getElementById(ID_PREFIXES.selectedYear + inputId);

        dmyCal.year = parseInt(dmyCal.year, 10);

        if (selYear) {
            selYear = parseInt(selYear.value, 10);
        }
        else {
            selYear = dmyCal.year;
        }

        html += '<ul>';

        while (i < 10) {
            html += '<li class="';
            if ((i % 2) === 0) {
                html += 'newLine';
            }

            if ((dmyCal.year - (5 - i)) === selYear) {
                html += ' selected';
            }

            // Validate date and show as clickable or read-only
            if (_priv.validateMinMaxRange({day: 0, month: 0, year: (dmyCal.year - (5 - i))}, inputId)) {
                html += '"><a href="#" title="' + (dmyCal.year - (5 - i)) + '" tabindex="0">' + (dmyCal.year - (5 - i)) + '</a>';
            }
            else {
                html += '"><span class="disabled">' + (dmyCal.year - (5 - i)) + '</span>';
            }

            // Set hidden for efficiency on navigation purposes
            if (i === 0) {
                html += '<input type="hidden" id="startOptYr_' + inputId + '" value="' + (dmyCal.year - (5 - i)) + '"></li>';
            }
            else if (i === 9) {
                html += '<input type="hidden" id="endOptYr_' + inputId + '" value="' + (dmyCal.year - (5 - i)) + '"></li>';
            }
            else {
                html += '</li>';
            }
            i += 1;
        }

        // Option"s actions
        if (_priv.validateMinMaxRange({day: 0, month: 0, year: (dmyCal.year - 6)}, inputId)) {
            html += '<li class="newLine"><a href="#" class="fastNavPrevYrs" title="Previous years" tabindex="0"></a></li>';
        }
        else {
            html += '<li class="newLine"><span class="grayedOut"></span></li>';
        }

        if (_priv.validateMinMaxRange({day: 0, month: 0, year: (dmyCal.year + 5)}, inputId)) {
            html += '<li><a href="#" class="fastNavNextYrs" title="Next years" tabindex="0"></a></li>';
        }
        else {
            html += '<li><span class="grayedOut"></span></li>';
        }

        html += '</ul><input type="hidden" id="selYr_' + inputId + '" value="' + selYear.toString() + '">';

        return html;
    };

    _priv.setOptionsMonths = function _setOptionsMonths (dmyCal, inputId) {
        var html ='';
        var i = 0;
        var selMonth = document.getElementById(ID_PREFIXES.selectedMonth + inputId);

        if (selMonth) {
            selMonth = parseInt(selMonth.value, 10);
        }
        else {
            selMonth = dmyCal.month;
        }

        html += '<ul>';

        // Add available months
        while (i < 12) {
            html += '<li class="';
            if ((i % 2) === 0) {
                html += 'newLine';
            }

            // If month is 0, ignore highlighting keep current one
            if ((i + 1) === selMonth) {
                html += ' selected';
            }

            // Validate date and show as clickable or read-only
            if (_priv.validateMinMaxRange({day: 1, month: (i + 1), year: dmyCal.year}, inputId) || _priv.validateMinMaxRange({day: _priv.getLastDayOfMonth(new Date((i + 1) + '/01/' + dmyCal.year)), month: (i + 1), year: dmyCal.year}, inputId)) {
                html += '"><a href="#" title="' + MONTH_EN[i] + '" tabindex="0">' + MSHORT_EN[i] + '</a></li>';
            }
            else {
                html += '"><span class="disabled">' + MSHORT_EN[i] + '</span></li>';
            }

            i += 1;
        }

        html += '</ul><input type="hidden" id="selMon_' + inputId + '" value="' + selMonth.toString() + '">';

        return html;
    };

    _priv.positionOptions = function _positionOptions (elem, option) {
        // Set 'x' and 'y' value to options
        option.style.left = parseInt(elem.offsetLeft + (elem.clientWidth / 2), 10) + 'px';
        option.style.top = elem.clientHeight + 'px';
    };

    _priv.showOptions = function _showOptions (opts) {
        $(opts).removeClass(CLASSES.hidden);
    };

    _priv.hideOptions = function _hideOptions (opts) {
        $(opts).addClass(CLASSES.hidden);
    };

    _priv.handleBoundaryDetection = function _handleBoundaryDetection (elem) {
        var bodyElem = document.body;
        var scrollLeft = bodyElem.scrollLeft;
        var scrollTop = bodyElem.scrollTop;
        var viewportHeight = window.innerHeight || document.body.parentElement.offsetHeight;

        // Get scrollbar positions
        if (scrollTop === 0) {
            if (bodyElem.parentElement.scrollTop !== 0) {
                scrollTop = bodyElem.parentElement.scrollTop;
            }
        }
        if (scrollLeft === 0) {
            if (bodyElem.parentElement.scrollLeft !== 0) {
                scrollLeft = bodyElem.parentElement.scrollLeft;
            }
        }

        // Vertical boundary top
        if ((viewportHeight - (elem.parentNode.offsetTop + 1) - (elem.offsetTop - scrollTop) - 20) < elem.clientHeight) {
            window.scrollBy(0, elem.clientHeight - (viewportHeight - (elem.parentNode.offsetTop + 1) - (elem.offsetTop - scrollTop) - 20));
        }

        // Horizontal boundary left
        if ((bodyElem.clientWidth - (elem.offsetLeft + elem.parentNode.offsetLeft) + scrollLeft - 5) < elem.clientWidth) {
            window.scrollBy(elem.clientWidth - (bodyElem.clientWidth - (elem.offsetLeft + elem.parentNode.offsetLeft) + scrollLeft) + 5, 0);
        }

        // Horizontal boundary right
        if (scrollLeft - elem.offsetLeft - elem.parentNode.offsetLeft + 5 > 0) {
            window.scrollBy(-1 * (scrollLeft - elem.offsetLeft - elem.parentNode.offsetLeft + 5), 0);
        }
    };

    _priv.getMonthValFromLongStr = function _getMonthValFromLongStr (monthStr) {
        var i = MONTH_EN.length;

        while ((i -= 1) >= 0) {
            if (monthStr === MONTH_EN[i]) {
                i += 1;
                break;
            }
        }

        return i;
    };

    _priv.getMonthValFromShortStr = function _getMonthValFromShortStr (monthStr) {
        var i = MSHORT_EN.length;

        while ((i -= 1) >= 0) {
            if (monthStr === MSHORT_EN[i]) {
                i += 1;
                break;
            }
        }

        return i;
    };

    _priv.getMonthYearFromCalHeader = function _getMonthYearFromCalHeader (cal) {
        var monthYear = $(cal).find('a.monthYear').get(0);
        var splitMonYr = monthYear.innerHTML.split(' ');
        var mon = _priv.getMonthValFromLongStr(splitMonYr[0]);
        var yr = splitMonYr[1];

        return [mon, yr];
    };

    _priv.getLastDayOfMonth = function _getLastDayOfMonth (date) {
        var mon = date.getMonth() + 1;
        var lastDayMonth = 0;
        var dateTest = null;

        lastDayMonth = DAYS_MON[mon - 1];
        // Check for leap year
        if (mon === 2) {
            dateTest = new Date('02/29/' + date.getFullYear());
            if ((dateTest.getMonth() + 1) === mon) {
                lastDayMonth += 1;
            }
        }

        return lastDayMonth;
    };

    _priv.getDatePickerInitialDate = function _getDatePickerInitialDate (inputId) {
        var input = document.getElementById(inputId);

        // Returns date as 'Month Year'
        var _buildCalDate = function _buildCalDate (dateParsed) {
                // local variables
                var date = null;

                if (!dateParsed.valid) {
                    date = new Date();
                }
                else {
                    date = new Date(dateParsed.dmy.month + '/' + dateParsed.dmy.day + '/' + dateParsed.dmy.year);
                }
                return {
                    day: date.getDate(),
                    month: date.getMonth() + 1,
                    year: date.getFullYear()
                };
            };

        if (input) {
            // Clean and validate date
            return _buildCalDate(_priv.processDate($.trim(input.value), inputId));
        }
    };

    _priv.getFormattedDate = function _getFormattedDate (dateStr, inputId) {
        var dateParsed = {};

        // Validate date
        dateParsed = _priv.processDate($.trim(dateStr), inputId);

        if (dateParsed.valid) {
            return dateParsed.stringValue;
        }

        return null;
    };

    _priv.processDate = function _processDate (dateStr, inputId) {
        var dateParsed = {
                valid: false,
                dmy: {},
                stringValue: ''
            };
        var splitDate = {};
        var dateTest = null;
        var settings = _priv.getSettings(inputId);

        dateParsed.stringValue = dateStr;

        // Get day, month and year separate
        splitDate = _priv.getDateFromCulture(dateStr, inputId);

        dateParsed.dmy = splitDate.dmy;
        dateParsed.stringValue = splitDate.ordered[0] + CULTURES[settings.culture].delim + splitDate.ordered[1] + CULTURES[settings.culture].delim + splitDate.ordered[2];

        // Normalized date string (0d/0m/yyyy)
        dateStr = dateParsed.stringValue;

        // Validate
        if (dateStr.length === CULTURES[settings.culture].mask.length) {
            dateTest = new Date(dateParsed.dmy.month + '/' + dateParsed.dmy.day + '/' + dateParsed.dmy.year);

            // Month has to match otherwise either day of month are invalid (checks for leap year)
            if (parseInt(dateParsed.dmy.month, 10) === (dateTest.getMonth() + 1)) {
                dateParsed.valid = _priv.validateMinMaxRange(_priv.convertDMYToNumeric(dateParsed.dmy), inputId);
            }
        }

        return dateParsed;
    };

    _priv.convertDMYToNumeric = function _convertDMYToNumeric (dmy) {
        return {
            day: parseInt(dmy.day, 10),
            month: parseInt(dmy.month, 10),
            year: parseInt(dmy.year, 10)
        };
    };

    _priv.validateMinMaxRange = function _validateMinMaxRange (dmyCal, inputId) {
        var settings = _priv.getSettings(inputId);
        var minDate = _priv.parseDateStringToDateObject(settings.minDate, inputId);
        var maxDate = _priv.parseDateStringToDateObject(settings.maxDate, inputId);
        var dateTest = null;

        if (dmyCal.day === 0 && dmyCal.month === 0) {
            // Validate year only
            if (dmyCal.year >= minDate.getFullYear() && dmyCal.year <= maxDate.getFullYear()) {
                return true;
            }
        }
        else {
            dateTest = new Date(dmyCal.month + '/' + dmyCal.day + '/' + dmyCal.year);

            if (dateTest >= minDate && dateTest <= maxDate) {
                return true;
            }
        }

        return false;
    };

    _priv.getDateFromCulture = function _getDateFromCulture (dateStr, inputId) {
        var dateParsed = {
                dmy: {
                    day: '',
                    month: '',
                    year: ''
                },
                ordered: []
            };
        var day = '';
        var mon = '';
        var yr = '';
        var settings = _priv.getSettings(inputId);
        var dateSplit = dateStr.split(CULTURES[settings.culture].delim);
        var maskSplit = CULTURES[settings.culture].mask.split('|');
        var i = dateSplit.length;
        var j = 0;

        // Date split and mask split must match in length
        if (i === maskSplit.length) {
            // Get day, month and year and add to [day, mon, yr] array
            while (j < i) {
                switch (maskSplit[j]) {
                    case 'DD':
                        day = parseInt(dateSplit[j], 10);
                        if (!isNaN(day)) {
                            if (day < 10) {
                                dateParsed.dmy.day = '0' + day;
                            }
                            else {
                                dateParsed.dmy.day = day.toString();
                            }
                            dateParsed.ordered[j] = dateParsed.dmy.day;
                        }

                        break;
                    case 'MM':
                        mon = parseInt(dateSplit[j], 10);
                        if (!isNaN(mon)) {
                            if (mon < 10) {
                                dateParsed.dmy.month = '0' + mon;
                            }
                            else {
                                dateParsed.dmy.month = mon.toString();
                            }
                            dateParsed.ordered[j] = dateParsed.dmy.month;
                        }
                        break;
                    case 'YYYY':
                        yr = parseInt(dateSplit[j], 10);
                        if (!isNaN(yr)) {
                            dateParsed.dmy.year = yr.toString();
                            dateParsed.ordered[j] = dateParsed.dmy.year;
                        }
                        break;
                    default:
                        break;
                }

                j += 1;
            }
        }

        return dateParsed;
    };

    _priv.parseDateStringToDateObject = function _parseDateStringToDateObject (dateStr, inputId) {
        var dateDMY = _priv.getDateFromCulture(dateStr, inputId);

        return new Date(dateDMY.dmy.month + '/' + dateDMY.dmy.day + '/' + dateDMY.dmy.year);
    };

    _priv.setDateToCulture = function _setDateToCulture (dmyCal, inputId, culture) {
        if (typeof culture === 'undefined') {
            return _priv.setDateToSelectedCulture(dmyCal, inputId, CULTURES[_priv.getSettings(inputId).culture]);
        }
        else {
            return _priv.setDateToSelectedCulture(dmyCal, inputId, culture);
        }
    };

    _priv.setDateToSelectedCulture = function _setDateToSelectedCulture (dmyCal, inputId, culture) {
        var maskSplit = culture.mask.split('|');
        var i = maskSplit.length;
        var j = 0;
        var dateStr = '';

        // Set day, month and year as a string date based on the culture's date
        while (j < i) {
            switch (maskSplit[j]) {
                case 'DD':
                    dateStr += dmyCal.day.toString() + culture.delim;
                    break;
                case 'MM':
                    dateStr += dmyCal.month.toString() + culture.delim;
                    break;
                case 'YYYY':
                    dateStr += dmyCal.year.toString() + culture.delim;
                    break;
                default:
                    break;
            }

            j += 1;
        }

        return dateStr.substring(0, dateStr.length - 1);
    };

    _priv.runOptionsActions = function _runOptionsActions (elem, opts, cal) {
        var actions = $(opts).find('a');
        var i = actions.length;
        var j = 0;

        while (j < i) {
            if (actions.get(j) === elem) {
                switch (j) {
                    case 0:
                        _priv.runOptionsToday(cal);
                        break;

                    case 1:
                        _priv.runOptionsOK(cal);
                        break;

                    case 2:
                        _priv.runOptionsClose(cal);
                        break;

                    default:
                        break;
                }

                break;
            }

            j += 1;
        }
    };

    _priv.runOptionsToday = function _runOptionsToday (cal) {
        _priv.setSelectedDate(null, cal);
    };

    _priv.runOptionsOK = function _runOptionsOK (cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var selMonth = document.getElementById(ID_PREFIXES.selectedMonth + inputId);
        var selYear = document.getElementById(ID_PREFIXES.selectedYear + inputId);
        var settings = _priv.getSettings(inputId);
        var minDate = _priv.parseDateStringToDateObject(settings.minDate, inputId);
        var maxDate = _priv.parseDateStringToDateObject(settings.maxDate, inputId);
        var dateTest = new Date(selMonth.value + '/01/' + selYear.value);

        // Check if month is available for year selected, else default to minDate/maxDate's month
        if (!_priv.validateMinMaxRange(_priv.convertDMYToNumeric({day: 1, month: selMonth.value, year: selYear.value}), inputId)) {
            if (dateTest < minDate) {
                selMonth.value = minDate.getMonth() + 1;
            }
            else if (dateTest > maxDate) {
                selMonth.value = maxDate.getMonth() + 1;
            }
        }

        cal.innerHTML = _priv.getDatePickerHtml(
                            _priv.convertDMYToNumeric(
                                {
                                    day: 1,
                                    month: selMonth.value,
                                    year: selYear.value
                                }
                            ), inputId);

        _priv.runOptionsClose(cal);
    };

    _priv.runOptionsClose = function _runOptionsClose (cal) {
        _priv.showHideOptions($(cal).find('a.monthYear').get(0), document.getElementById('dpOptions_' + cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1))), true);
    };

    _priv.getSelectedDate = function _getSelectedDate (elem, cal) {
        var dmyCal = {};
        var inputId = '';
        var hidden = null;
        var splitHdn = [];
        var $parent;
        var todaysDate = new Date();

        if (elem) {
            // Get date from calendar click
            inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
            hidden = document.getElementById('dpSel_' + inputId);
            splitHdn = hidden.value.split('/');
            dmyCal = {
                day: parseInt(elem.innerHTML, 10),
                month: parseInt(splitHdn[0], 10),
                year: parseInt(splitHdn[1], 10)
            };

            $parent = $(elem.parentNode);

            if ($parent.hasClass('prevMonthDay')) {
                dmyCal.month -= 1;

                if (dmyCal.month < 1) {
                    dmyCal.month = 12;
                    dmyCal.year -= 1;
                }
            }
            else if ($parent.hasClass('nextMonthDay')) {
                dmyCal.month += 1;

                if (dmyCal.month > 12) {
                    dmyCal.month = 1;
                    dmyCal.year += 1;
                }
            }
        }
        else {
            // Use today's date
            dmyCal = {day: todaysDate.getDate(), month: todaysDate.getMonth() + 1, year: todaysDate.getFullYear()};
        }

        return dmyCal;
    };

    /**
     * Set the date to the beginning or end of the previous year
     *
     * Note that this function is almost identical to `_priv.setSelectedDate` (which is called when the user clicks on a date) except that it alters the date before writing to the input
     *
     * @param   {Element}  elem       Button that was clicked (semi-optional; see `quickDate`)
     * @param   {Element}  cal        Datepicker (required)
     * @param   {Object}   alterDate  Defines how the date should be altered (optionl, but requires that `elem` is defined properly)
     */
    _priv.setSelectedDate = function _setSelectedDate (elem, cal, alterDate) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var input = document.getElementById(inputId);
        var dmyCal = _priv.getSelectedDate(elem, cal);
        var settings = _priv.getSettings(inputId);

        // Handle quick links that insert special dates
        if (elem && alterDate) {
            // Previous year
            if (alterDate.type === 'prevYear') {
                // Change date to the previous year
                dmyCal.year -= 1;

                // End of that year
                if (alterDate.value === 'dec31') {
                    dmyCal.day = 31;
                    dmyCal.month = 12;
                }
                // Beginning of that year
                else if (alterDate.value === 'jan1') {
                    dmyCal.day = 1;
                    dmyCal.month = 1;
                }
            }
        }

        // Set input's value with selected day
        input.value = _priv.getFormattedDate(_priv.setDateToCulture(dmyCal, inputId), inputId);

        // Inform event listeners that are attached to this input that its value has changed
        $(input).trigger('change');

        if (settings.display.autoError) {
            _priv.removeInlineError(input);
        }

        _priv.hideDatePicker(cal);

        $('#' + ID_PREFIXES.calIcon + inputId).focus();
    };

    _priv.handleCalHeaderNavigation = function _handleCalHeaderNavigation (elem, cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var monthYear = _priv.getMonthYearFromCalHeader(cal);
        var dmyCal = {
                day: 1,
                month: monthYear[0],
                year: monthYear[1]
            };
        var settings = _priv.getSettings(inputId);
        var minDate = _priv.parseDateStringToDateObject(settings.minDate, inputId);
        var maxDate = _priv.parseDateStringToDateObject(settings.maxDate, inputId);
        var minDateMonth = minDate.getMonth() + 1;
        var maxDateMonth = maxDate.getMonth() + 1;
        var minDateYear = minDate.getFullYear();
        var maxDateYear = maxDate.getFullYear();
        var className = '';

        if (typeof elem === 'string') {
            className = elem;
        }
        else {
            className = elem.className;
        }

        switch (className) {
            case 'fastNavPrevQtr':
                // Make sure we only navigate when it is possible
                if (!(dmyCal.month === minDateMonth && dmyCal.year === minDateYear)) {
                    dmyCal.day = _priv.getLastDayOfMonth(new Date('01/' + monthYear[0] + '/' + monthYear[1]));
                    dmyCal = _priv.previousQuarter(_priv.convertDMYToNumeric(dmyCal));

                    if (_priv.validateMinMaxRange(dmyCal, inputId)) {
                        cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);

                        if (cal.innerHTML.indexOf(elem.className) > -1) {
                            $(cal).find('a.' + elem.className).focus();
                        }
                        else {
                            $(cal).find('a.monthYear').focus();
                        }
                    }
                    else {
                        // Move to the earliest month as I can go allowed by minDate
                        if (dmyCal.month < minDateMonth || dmyCal.year < minDateYear) {
                            dmyCal.month = minDateMonth;
                            dmyCal.year = minDateYear;
                            cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);

                            if (cal.innerHTML.indexOf(elem.className) > -1) {
                                $(cal).find('a.' + elem.className).focus();
                            }
                            else {
                                $(cal).find('a.monthYear').focus();
                            }
                        }
                    }
                }
                break;

            case 'navPrevMon':
                // Make sure we only navigate when it is possible
                if (!(dmyCal.month === minDateMonth && dmyCal.year === minDateYear)) {
                    dmyCal.day = _priv.getLastDayOfMonth(new Date('01/' + monthYear[0] + '/' + monthYear[1]));
                    dmyCal = _priv.previousMonth(_priv.convertDMYToNumeric(dmyCal));

                    if (_priv.validateMinMaxRange(dmyCal, inputId)) {
                        cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);

                        if (cal.innerHTML.indexOf(elem.className) > -1) {
                            $(cal).find('a.' + elem.className).focus();
                        }
                        else {
                            $(cal).find('a.monthYear').focus();
                        }
                    }
                }
                break;

            case 'navNextMon':
                // Make sure we only navigate when it is possible
                if (!(dmyCal.month === maxDateMonth && dmyCal.year === maxDateYear)) {
                    dmyCal = _priv.nextMonth(_priv.convertDMYToNumeric(dmyCal));

                    if (_priv.validateMinMaxRange(dmyCal, inputId)) {
                        cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);

                        if (cal.innerHTML.indexOf(elem.className) > -1) {
                            $(cal).find('a.' + elem.className).focus();
                        }
                        else {
                            $(cal).find('a.monthYear').focus();
                        }
                    }
                }
                break;

            case 'fastNavNextQtr':
                // Make sure we only navigate when it is possible
                if (!(dmyCal.month === maxDateMonth && dmyCal.year === maxDateYear)) {
                    dmyCal = _priv.nextQuarter(_priv.convertDMYToNumeric(dmyCal));

                    if (_priv.validateMinMaxRange(dmyCal, inputId)) {
                        cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);

                        if (cal.innerHTML.indexOf(elem.className) > -1) {
                            $(cal).find('a.' + elem.className).focus();
                        }
                        else {
                            $(cal).find('a.monthYear').focus();
                        }
                    }
                    else {
                        // Move to the latest month as I can go allowed by maxDate
                        if (dmyCal.month > maxDateMonth || dmyCal.year > maxDate.getFullYear()) {
                            dmyCal.month = maxDateMonth;
                            dmyCal.year = maxDateYear;
                            cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);

                            if (cal.innerHTML.indexOf(elem.className) > -1) {
                                $(cal).find('a.' + elem.className).focus();
                            }
                            else {
                                $(cal).find('a.monthYear').focus();
                            }
                        }
                    }
                }
                break;

            case 'navPrevYear':
                // Make sure we only navigate when it is possible
                if (!(dmyCal.month === maxDateMonth && dmyCal.year === maxDateYear)) {
                    dmyCal.day = _priv.getLastDayOfMonth(new Date('01/' + monthYear[0] + '/' + monthYear[1]));
                    dmyCal = _priv.previousYear(_priv.convertDMYToNumeric(dmyCal));

                    if (_priv.validateMinMaxRange(dmyCal, inputId)) {
                        cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);
                    }
                }
                break;

            case 'navNextYear':
                // Make sure we only navigate when it is possible
                if (!(dmyCal.month === maxDateMonth && dmyCal.year === maxDateYear)) {
                    dmyCal = _priv.nextYear(_priv.convertDMYToNumeric(dmyCal));

                    if (_priv.validateMinMaxRange(dmyCal, inputId)) {
                        cal.innerHTML = _priv.getDatePickerHtml(dmyCal, inputId);
                    }
                }
                break;

            default:
                break;
        }
    };

    _priv.handleOptionsNavigation = function _handleOptionsNavigation (elem, cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var startOptYr = parseInt(document.getElementById('startOptYr_' + inputId).value, 10);
        var endOptYr = parseInt(document.getElementById('endOptYr_' + inputId).value, 10);
        var selYear = parseInt(document.getElementById(ID_PREFIXES.selectedYear + inputId).value, 10);
        var divMonths = $('#dpOptions_' + inputId).find('div.dpMon').get(0);
        var divYears = $('#dpOptions_' + inputId).find('div.dpYr').get(0);
        var settings = _priv.getSettings(inputId);
        var minDate = _priv.parseDateStringToDateObject(settings.minDate, inputId);
        var maxDate = _priv.parseDateStringToDateObject(settings.maxDate, inputId);

        switch (elem.className) {
            case 'fastNavPrevYrs':
                // Make sure we can only navigate to allowed years by min/max date
                if (_priv.validateMinMaxRange({day: 31, month: 12, year: (startOptYr - 1)}, inputId)) {
                    divYears.innerHTML = _priv.setOptionsYears({day: 1, month: 1, year: (startOptYr - 5)}, inputId);

                    if (selYear >= (startOptYr - 10) && selYear < startOptYr) {
                        divMonths.innerHTML = _priv.setOptionsMonths({day: 31, month: 12, year: selYear}, inputId);
                    }
                    else {
                        divMonths.innerHTML = _priv.setOptionsMonths({day: 31, month: 12, year: (startOptYr - 1)}, inputId);
                    }

                    if (minDate.getFullYear() < (startOptYr - 10)) {
                        $(cal).find('a.' + elem.className).focus();
                    }
                    else {
                        $(cal).find('a.fastNavNextYrs').focus();
                    }
                }
                break;

            case 'fastNavNextYrs':
                // Make sure we can only navigate to allowed years by min/max date
                if (_priv.validateMinMaxRange({day: 1, month: 1, year: (endOptYr + 1)}, inputId)) {
                    divYears.innerHTML = _priv.setOptionsYears({day: 1, month: 1, year: (endOptYr + 6)}, inputId);

                    if (selYear > endOptYr && selYear <= (endOptYr + 10)) {
                        divMonths.innerHTML = _priv.setOptionsMonths({day: 1, month: 1, year: selYear}, inputId);
                    }
                    else {
                        divMonths.innerHTML = _priv.setOptionsMonths({day: 1, month: 1, year: (endOptYr + 1)}, inputId);
                    }

                    if (maxDate.getFullYear() > (endOptYr + 10)) {
                        $(cal).find('a.' + elem.className).focus();
                    }
                    else {
                        $(cal).find('a.fastNavPrevYrs').focus();
                    }
                }
                break;
        }
    };

    /**
     * Subtract 3 months and return updated calendar
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.previousQuarter = function _previousQuarter (dmyCal) {
        dmyCal.month += -3;

        return _priv.recalculateDMY(dmyCal);
    };

    /**
     * Subtract 1 month and return updated calendar
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.previousMonth = function _previousMonth (dmyCal) {
        dmyCal.month += -1;

        return _priv.recalculateDMY(dmyCal);
    };

    /**
     * Add 1 month and return updated calendar
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.nextMonth = function _nextMonth (dmyCal) {
        dmyCal.month += 1;

        return _priv.recalculateDMY(dmyCal);
    };

    /**
     * Add 3 months and return updated calendar
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.nextQuarter = function _nextQuarter (dmyCal) {
        dmyCal.month += 3;

        return _priv.recalculateDMY(dmyCal);
    };

    /**
     * Subtract 1 year and return updated calendar
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.previousYear = function _previousYear (dmyCal) {
        dmyCal.month += -12;

        return _priv.recalculateDMY(dmyCal);
    };

    /**
     * Add 1 year and return updated calendar
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.nextYear = function _nextYear (dmyCal) {
        dmyCal.month += 12;

        return _priv.recalculateDMY(dmyCal);
    };

    /**
     * Correct the date for a calendar that has had its month or year changed
     * @param   {Object}  dmyCal  Calendar object
     * @return  {Object}          Updated calendar object
     */
    _priv.recalculateDMY = function _recalculateDMY (dmyCal) {
        if (dmyCal.month <= 0) {
            dmyCal.month += 12;
            dmyCal.year -= 1;
        }
        else if (dmyCal.month > 12) {
            dmyCal.month -= 12;
            dmyCal.year += 1;
        }

        return dmyCal;
    };

    _priv.showInlineError = function _showInlineError (elem) {
        $(elem).addClass(CLASSES.invalidDate);
    };

    _priv.removeInlineError = function _removeInlineError (elem) {
        $(elem).removeClass(CLASSES.invalidDate);
    };

    _priv.forceOptionsOK = function _forceOptionsOK (cal) {
        var inputId = cal.id.substring(cal.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var okBtn = document.getElementById('dpOK_' + inputId);
        var opts = document.getElementById('dpOther_' + inputId);

        _priv.runOptionsActions(okBtn, opts, cal);
    };

    ////////////
    // Events //
    ////////////

    _events._iconClick = function _iconClick (ev) {
        var target = ev.target;

        if (!target.id) {
            var $button = $(target);
            var $input = $button.prev('input');
            var inputId = $input.attr('id');

            if (inputId === undefined || inputId === null) {
                var tempId = _priv.generateID();

                $input.attr('id', tempId);
                $button.attr('id', 'cal_' + tempId);
            }
            else {
                $button.attr('id', 'cal_' + inputId);
            }
        }

        var iconId = target.id.substring(target.id.indexOf(ID_PREFIXES.calIcon) + ID_PREFIXES.calIcon.length);
        var cal = document.getElementById(ID_PREFIXES.datePicker + iconId);

        // Hide other datepickers
        _priv.hideAllDatePickers(iconId);

        _priv.showHideDatePicker(target, cal);

        // Do we need this?
        ev.stopPropagation();
    };

    _events._inputKeyup = function _inputKeyup (evt) {
        var $input;
        var entry;
        var newDate;
        var dateRegex = /(\d{1,2})\/(\d{1,2})\/(\d{4})/;
        // Validate the user's entry and normalize the date value as mm/dd/yyyy
        var __validateDate = function __validateDate (value) {
            var parts; // Pieces of the date (month, day, and year)

            // Only proceed if the value is a valid date
            if (dateRegex.test(value)) {
                // Make sure the month and day are zero-padded so it exactly fits the MM/DD/YYYY format
                parts = dateRegex.exec(value);

                // Reset the value to an empty string which will will build back up with the matching pieces from the regex
                value = '';

                // Month
                if (parts[1].length === 1) {
                    value += '0';
                }

                value += parts[1] + '/';

                // Day
                if (parts[2].length === 1) {
                    value += '0';
                }

                value += parts[2] + '/';

                // Year
                value += parts[3];

                return value;
            }
            else {
                return '';
            }
        };
        var __formatDate = function __formatDate (dateObj) {
            var newDateMonth;
            var newDateDay;

            // Month
            newDateMonth = dateObj.getMonth() + 1;

            // Zero-pad month
            if (newDateMonth < 10) {
                newDateMonth = '0' + newDateMonth;
            }

            // Date
            newDateDate = dateObj.getDate();

            // Zero-pad date
            if (newDateDate < 10) {
                newDateDate = '0' + newDateDate;
            }

            return newDateMonth + '/' + newDateDate + '/' + dateObj.getFullYear();
        };

        // Only proceed if the up or down arrow key was pressed
        if (evt.keyCode !== 38 && evt.keyCode !== 40) {
            return true;
        }

        $input = $(evt.target);

        // Validate date
        // entry = __validateDate($input.val().trim());
        entry = $input.val().trim();

        if (!dateRegex.test(entry)) {
            return true;
        }

        // Up arrow was pressed
        if (evt.keyCode === 38) {
            // If the date is valid, go to the next date
            newDate = new Date(entry);

            // Increment date object
            newDate.setDate(newDate.getDate() + 1);

            $input.val(__formatDate(newDate));
        }
        // Down arrow was pressed
        else {
            // If the date is valid, go to the previous date
            newDate = new Date(entry);

            // Increment date object
            newDate.setDate(newDate.getDate() - 1);

            $input.val(__formatDate(newDate));
        }
    };

    _events._inputBlur = function _inputBlur (ev) {

        var input = ev.target;
        var dateParsed = null;
        var settings = _priv.getSettings(input.id);

        if (input) {
            if ($.trim(input.value).length > 0) {
                dateParsed = _priv.getFormattedDate(input.value, input.id);
                if (dateParsed) {
                    input.value = dateParsed;
                    if (settings.display.autoError) {
                        _priv.removeInlineError(input);
                    }
                }
                else {
                    if (settings.display.autoError) {
                        _priv.showInlineError(input);
                    }
                }
            }
            else {
                if (settings.display.autoError) {
                    _priv.removeInlineError(input);
                }
            }
        }
    };

    _events._inputTextBlur = function _inputBlur (ev) {

    };

    _events._calClick = function _calClick (ev) {
        var icon = ev.target;
        var parent = icon;
        var clickElem = null;
        var clickParent = null;

        // Use delegation on the calendar div container to know what was clicked
        while (parent && parent.id.indexOf(ID_PREFIXES.datePicker) < 0) {
            if (parent.nodeName === 'A' || parent.nodeName === 'BUTTON') {
                clickElem = parent;
            }

            parent = parent.parentNode;

        }

        if (clickElem) {
            // We need to stop the click event from bubbling up to the body and triggering `_events._bodyClick()`. Here, we will be calling functions that replace the innerHTML of parents of the clicked element. When that happens, the target of the original event will be orphaned. When `_events._bodyClick()` checks to see if the event is inside a calendar it will not find a suitable parent; it will assume that the click happened outside a calendar and close all calendars.
            ev.stopPropagation();

            switch (clickElem.className) {
                case 'fastNavPrevQtr':
                case 'navPrevMon':
                case 'navNextMon':
                case 'fastNavNextQtr':
                    _priv.handleCalHeaderNavigation(clickElem, parent);
                    break;

                case 'monthYear':

                    _priv.showHideOptions(clickElem, document.getElementById('dpOptions_' + parent.id.substring(parent.id.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1))));
                    break;

                case 'fastNavPrevYrs':
                case 'fastNavNextYrs':
                    _priv.handleOptionsNavigation(clickElem, parent);
                    break;

                default:
                    // Check on parent's container to determine what was clicked
                    // Options - mon, yr, footer links, cal days
                    clickParent = clickElem;
                    while (clickParent !== parent && clickParent.nodeName !== 'BODY') {
                        if (clickParent.className === 'dpMon') {
                            _priv.setOptionsSelectedMonth(clickElem, clickParent, parent);
                            if (ev.type === 'dblclick') {
                                _priv.forceOptionsOK(parent);
                            }
                            break;
                        }
                        else if (clickParent.className === 'dpYr') {
                            _priv.setOptionsSelectedYear(clickElem, clickParent, parent);
                            if (ev.type === 'dblclick') {
                                _priv.forceOptionsOK(parent);
                            }
                            break;
                        }
                        else if (clickParent.className === 'dpOther') {
                            _priv.runOptionsActions(clickElem, clickParent, parent);
                            break;
                        }
                        // Specific date link
                        else if (clickParent.className === 'dpDays') {
                            _priv.setSelectedDate(clickElem, parent);
                            break;
                        }
                        // Quick date link
                        else if (clickParent.className === 'dpPrevYear') {
                            if (clickElem.className === 'dpPrevYearJan1') {
                                _priv.setSelectedDate(clickElem, parent, {type: 'prevYear', value: 'jan1'});
                            }
                            else if (clickElem.className === 'dpPrevYearDec31') {
                                _priv.setSelectedDate(clickElem, parent, {type: 'prevYear', value: 'dec31'});
                            }

                            break;
                        }

                        clickParent = clickParent.parentNode;
                    }

                    break;
            }
        }

        // Do we need this?
        ev.preventDefault();
    };

    _events._calKeydown = function _calKeydown (ev) {
        var elem = ev.target;
        var parentId = $(elem).closest('.dp').attr('id');
        var inputId = parentId.substring(parentId.indexOf(ID_PREFIXES.datePicker + '_') + (ID_PREFIXES.datePicker.length + 1));
        var $dpOptions = $('#dpOptions_' + inputId);
        var $calIcon = $('#' + ID_PREFIXES.calIcon + inputId);
        var calIcon = $calIcon.get(0);
        var $cal = $('#' + ID_PREFIXES.datePicker + inputId);
        var cal = $cal.get(0);
        var linksCal = [];
        var linksOpts = [];
        var isDpOptsHidden = $dpOptions.hasClass(CLASSES.hidden);

        switch (ev.keyCode) {
            case 27: // 'Esc' was pressed, close calendar
                _priv.showHideDatePicker(calIcon, cal, true);

                break;

            case 9: // 'Shift + Tab' (ev.shiftKey) or 'Tab' (!ev.shiftKey)
                linksCal = $('#dpCalWrap_' + inputId).find('a');
                linksOpts = $dpOptions.find('a');

                // Calendar
                if ((elem.id === ('dpCalWrap_' + inputId) && ev.shiftKey) || (linksCal[linksCal.length - 1] === elem && !ev.shiftKey)) {
                    _priv.hideDatePicker(cal);
                    $calIcon.focus();
                }
                // Options
                if ((elem.id === ('dpOptions_' + inputId) && ev.shiftKey) || (linksOpts[linksOpts.length - 1] === elem && !ev.shiftKey)) {
                    _priv.runOptionsClose(cal);
                }

                break;

            case 37: // left arrow goes back 1 month
                if (isDpOptsHidden) {
                    _priv.handleCalHeaderNavigation($cal.find('.navPrevMon').get(0), cal);
                }

                break;

            case 39: // right arrow goes forward 1 month
                if (isDpOptsHidden) {
                    _priv.handleCalHeaderNavigation($cal.find('.navNextMon').get(0), cal);
                }

                break;

            case 38: // up arrow goes forward 1 year
                if (isDpOptsHidden) {
                    _priv.handleCalHeaderNavigation('navNextYear', cal);
                    $cal.find('a.monthYear').focus();
                }

                break;

            case 40: // down arrow goes back 1 year
                if (isDpOptsHidden) {
                    _priv.handleCalHeaderNavigation('navPrevYear', cal);
                    $cal.find('a.monthYear').focus();
                }

                break;

            default:
                break;
        }
    };

    _events._bodyClick = function _bodyClick (ev) {
        var $target = $(ev.target);
        var $parent = $target.closest(SELECTORS.icon + ', .dp, .dpCalWrap, .dpOptWrap');

        // Check to see whether click happened inside or outside calendar
        if (!$parent.length) {
            // Make sure calendar is closed
            _priv.hideAllDatePickers();
        }
    };

    _events._windowResize = function _windowResize ( /*ev*/ ) {
        // Reposition opened calendars
        $('div.dp:not(.hidden)').each(function () {
            _priv.setDatePickerPosition(this);
        });
    };

    //////////////////////////////////////////
    // Expose public properties and methods //
    //////////////////////////////////////////

    DatePicker.defaults = DatePicker.prototype.defaults;

    DatePicker.version = VERSION;

    // Define jQuery plugin
    window.$.fn.datepicker = function (options) {
        return this.each(function () {
            new DatePicker(this, options).init();
        });
    };

    // Reveal public API
    window.$.datepicker = {
        setImagesPath: _setImagesPath,
        customize: _customize,
        hideAll: _hideAll
    };
});

/**
 * Within Viewport
 *
 * @description Determines whether an element is completely within the browser viewport
 * @author      Craig Patik, http://patik.com/
 * @version     1.0.0
 * @date        2015-08-02
 */
(function (root, name, factory) {
    // AMD
    if (typeof define === 'function' && define.amd) {
        define('withinviewport',[], factory);
    }
    // Node and CommonJS-like environments
    else if (typeof module !== 'undefined' && typeof exports === 'object') {
        module.exports = factory();
    }
    // Browser global
    else {
        root[name] = factory();
    }
}(this, 'withinviewport', function () {
    var canUseWindowDimensions = window.innerHeight !== undefined; // IE 8 and lower fail this

    /**
     * Determines whether an element is within the viewport
     * @param  {Object}  elem       DOM Element (required)
     * @param  {Object}  options    Optional settings
     * @return {Boolean}            Whether the element was completely within the viewport
    */
    var withinviewport = function withinviewport (elem, options) {
        var result = false;
        var metadata = {};
        var config = {};
        var settings;
        var isWithin;
        var elemBoundingRect;
        var sideNamesPattern;
        var sides;
        var side;
        var i;

        // If invoked by the jQuery plugin, get the actual DOM element
        if (typeof jQuery !== 'undefined' && elem instanceof jQuery) {
            elem = elem.get(0);
        }

        if (typeof elem !== 'object' || elem.nodeType !== 1) {
            throw new Error('First argument must be an element');
        }

        // Look for inline settings on the element
        if (elem.getAttribute('data-withinviewport-settings') && window.JSON) {
            metadata = JSON.parse(elem.getAttribute('data-withinviewport-settings'));
        }

        // Settings argument may be a simple string (`top`, `right`, etc)
        if (typeof options === 'string') {
            settings = {sides: options};
        }
        else {
            settings = options || {};
        }

        // Build configuration from defaults and user-provided settings and metadata
        config.container = settings.container || metadata.container || withinviewport.defaults.container || window;
        config.sides  = settings.sides  || metadata.sides  || withinviewport.defaults.sides  || 'all';
        config.top    = settings.top    || metadata.top    || withinviewport.defaults.top    || 0;
        config.right  = settings.right  || metadata.right  || withinviewport.defaults.right  || 0;
        config.bottom = settings.bottom || metadata.bottom || withinviewport.defaults.bottom || 0;
        config.left   = settings.left   || metadata.left   || withinviewport.defaults.left   || 0;

        // Use the window as the container if the user specified the body or a non-element
        if (config.container === document.body || !config.container.nodeType === 1) {
            config.container = window;
        }

        // Element testing methods
        isWithin = {
            // Element is below the top edge of the viewport
            top: function _isWithin_top () {
                return elemBoundingRect.top >= config.top;
            },

            // Element is to the left of the right edge of the viewport
            right: function _isWithin_right () {
                var containerWidth;

                if (canUseWindowDimensions || config.container !== window) {
                    containerWidth = config.container.innerWidth;
                }
                else {
                    containerWidth = document.documentElement.clientWidth;
                }

                // Note that `elemBoundingRect.right` is the distance from the *left* of the viewport to the element's far right edge
                return elemBoundingRect.right <= containerWidth - config.right;
            },

            // Element is above the bottom edge of the viewport
            bottom: function _isWithin_bottom () {
                var containerHeight;

                if (canUseWindowDimensions || config.container !== window) {
                    containerHeight = config.container.innerHeight;
                }
                else {
                    containerHeight = document.documentElement.clientHeight;
                }

                // Note that `elemBoundingRect.bottom` is the distance from the *top* of the viewport to the element's bottom edge
                return elemBoundingRect.bottom <= containerHeight - config.bottom;
            },

            // Element is to the right of the left edge of the viewport
            left: function _isWithin_left () {
                return elemBoundingRect.left >= config.left;
            },

            // Element is within all four boundaries
            all: function _isWithin_all () {
                // Test each boundary in order of most efficient and most likely to be false so that we can avoid running all four functions on most elements
                // Top: Quickest to calculate + most likely to be false
                // Bottom: Note quite as quick to calculate, but also very likely to be false
                // Left and right are both equally unlikely to be false since most sites only scroll vertically, but left is faster
                return (isWithin.top() && isWithin.bottom() && isWithin.left() && isWithin.right());
            }
        };

        // Get the element's bounding rectangle with respect to the viewport
        elemBoundingRect = elem.getBoundingClientRect();

        // Test the element against each side of the viewport that was requested
        sideNamesPattern = /^top$|^right$|^bottom$|^left$|^all$/;
        // Loop through all of the sides
        sides = config.sides.split(' ');
        i = sides.length;
        while (i--) {
            side = sides[i].toLowerCase();

            if (sideNamesPattern.test(side)) {
                if (isWithin[side]()) {
                    result = true;
                }
                else {
                    result = false;

                    // Quit as soon as the first failure is found
                    break;
                }
            }
        }

        return result;
    };

    // Default settings
    withinviewport.prototype.defaults = {
        container: document.body,
        sides: 'all',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };

    withinviewport.defaults = withinviewport.prototype.defaults;

    /**
     * Optional enhancements and shortcuts
     *
     * @description Uncomment or comment these pieces as they apply to your project and coding preferences
     */

    // Shortcut methods for each side of the viewport
    // Example: `withinviewport.top(elem)` is the same as `withinviewport(elem, 'top')`
    withinviewport.prototype.top = function _withinviewport_top (element) {
        return withinviewport(element, 'top');
    };

    withinviewport.prototype.right = function _withinviewport_right (element) {
        return withinviewport(element, 'right');
    };

    withinviewport.prototype.bottom = function _withinviewport_bottom (element) {
        return withinviewport(element, 'bottom');
    };

    withinviewport.prototype.left = function _withinviewport_left (element) {
        return withinviewport(element, 'left');
    };

    return withinviewport;
}));

/** @description Precise type-checker for JavaScript
 * @version 1.0.3
 * @date 2015-02-28
 * @copyright 2014
 * https://github.com/patik/kind
 */

/*global define: true */
(function (name, definition) {
    if (typeof define === "function" && define.amd) {
        define('kind',[], definition);
    }
    // Fall back to a global variable
    else {
        window[name] = definition();
    }
}('kind',
    function() {
        /**
         * Determine a variable's precise type
         * Objects are clarified if they're a common type (array, element, null, etc)
         * @param   {Mixed}    thing  Some variable to test
         * @param   {Boolean}  deep   Whether to dive deeper into some types to return a more specific type
         * @return  {String}          Lowercase name for the variable's type
         */
        var kind = function _kind(thing, deep) {
            var objectType, specialTypes, nodeTypes, i;

            /////////////////////////////
            // Basic, non-object types //
            /////////////////////////////

            // Null
            if (thing === null) {
                return 'null';
            }

            // Standard types except string and number
            if (/^function$|^undefined$|^boolean$/.test(typeof thing)) {
                return typeof thing;
            }

            // String and number can be deep-searched
            if (/^string$|^number$/.test(typeof thing)) {
                if (deep) {
                    // Strings
                    if (typeof thing === 'string') {
                        if (!thing.length) {
                            return 'emptystring';
                        }
                        else {
                            return 'string';
                        }
                    }

                    // Numbers
                    if (typeof thing === 'number') {
                        // Integer
                        if (parseInt(thing, 10) === thing) {
                            return 'integer';
                        }

                        // Float
                        if (parseFloat(thing) === thing) {
                            return 'float';
                        }
                    }
                }
                else {
                    return typeof thing;
                }
            }

            /////////////
            // Objects //
            /////////////

            if (typeof thing === 'object') {
                objectType = Object.prototype.toString.call(thing);

                // Special JavaScript types that inherit from Object
                specialTypes = ['Math', 'ErrorEvent', 'Error', 'Date', 'RegExp', 'Event', 'Array'];
                i = specialTypes.length;

                while (i--) {
                    if (objectType === '[object ' + specialTypes[i] + ']') {
                        return specialTypes[i].toLowerCase();
                    }
                }

                // Events
                if (/\[object\s(\w+Event)\]/.test(objectType)) {
                    if (deep) {
                        return /\[object\s(\w+Event)\]/.exec(objectType)[1].toLowerCase();
                    }
                    else {
                        return 'event';
                    }
                }

                // DOM element:

                // DOM Level 2
                if (typeof HTMLElement === 'object' && thing instanceof HTMLElement) {
                    return 'element';
                }

                // DOM Level 1
                if (typeof thing.nodeName === 'string' && thing.nodeType === 1) {
                    return 'element';
                }

                // DOM node:
                nodeTypes = {
                    '1': 'element',
                    '2': 'attribute',
                    '3': 'text',
                    '4': 'cdata',
                    '5': 'entityreference',
                    '6': 'entity',
                    '7': 'processinginstruction',
                    '8': 'comment',
                    '9': 'document',
                    '10': 'documenttype',
                    '11': 'documentfragment',
                    '12': 'notation'
                };

                // DOM Level 2
                if (typeof Node === 'object' && thing instanceof Node) {
                    if (deep && thing.nodeType.toString() in nodeTypes) {
                        return nodeTypes[thing.nodeType];
                    }

                    return 'node';
                }

                // DOM Level 1
                if (typeof thing.nodeType === 'number' && typeof thing.nodeName === 'string') {
                    if (deep && thing.nodeType.toString() in nodeTypes) {
                        return nodeTypes[thing.nodeType];
                    }

                    return 'node';
                }

                // Node lists
                if (/^\[object (HTMLCollection|NodeList|Object)\]$/.test(objectType) &&
                    typeof thing.length === 'number' &&
                    typeof thing.item !== 'undefined' &&
                    (thing.length === 0 || (typeof thing[0] === 'object' && thing[0].nodeType > 0))) {
                    return 'nodelist';
                }

                // Array-like object
                if (typeof thing.length === 'number' && thing !== window) {
                    return 'arraylike';
                }

                // Some other type of object, possible a plain object
                return 'object';
            }

            return 'unknown';
        };

        return kind;
    }
));
define('journal',['jquery', 'kind'], function ($, kind) {
    var VERSION = '0.0.1';

    var DEFAULT_SETTINGS = {
            type: 'log',   // Method of `console`
            owner: 'Unknown',   // 'UI'
            module: '',    // 'table',
            submodule: '', // tableSort
            func: '',      // `alphaDescending()`
            element: '',   // '#table-1',
            message: [],   // Main message or contents of the entry
        };

    var _storage = [];
    var _isLive = false;
    var _isLiveErrors = true;

    // Private function namespace
    var _priv = {};

    // Add log entry into storage array
    _priv.processEntry = function _processEntry (entry) {
        // Store the log
        _storage.push(entry);

        // Print the entry if live is enabled
        if (_isLive) {
            _priv.printEntry(entry);
        }
        // Print the entry if it's an error, unless we were told to suppress errors
        else if (_isLiveErrors && entry.type === 'error') {
            // Push all errors to the console regardless
            _priv.printEntry(entry);
        }
        // Otherwise, do not print anything right now
    };

    /**
     * Prints an entry to the browser console
     *
     * @param   {Object}  entry  Entry object
     */
    _priv.printEntry = function _printEntry (entry) {
        var contents = Array.prototype.slice.call(entry.message);
        var prefix = '';
        var hasCodeInfo = (entry.module || entry.submodule || entry.func);

        // Prepend any defined properties
        if (entry.owner) {
            prefix += entry.owner;
        }

        // Opening bracket for module, sub-module, and/or function
        if (hasCodeInfo) {
            // Separate it from the owner
            if (entry.owner) {
                prefix += ' ';
            }

            prefix += '[';
        }

        // Module
        if (entry.module) {
            prefix += entry.module;

            // Space between this and the function
            if (!entry.submodule && entry.func) {
                prefix += ' ';
            }
        }

        // Submodule
        if (entry.submodule) {
            prefix += '.' + entry.submodule;

            // Space between this and the function
            if (entry.func) {
                prefix += ' ';
            }
        }

        // Function
        if (entry.func) {
            prefix += '=> ' + entry.func;

            // Add parens to function name, if missing
            if (!/\(.*\)$/.test(entry.func)) {
                prefix += '()';
            }
        }

        // Closing bracket
        if (hasCodeInfo) {
            prefix += ']';
        }
        // No module information, but there is an owner
        else if (entry.owner) {
            // Insert a separator between the owner and the message
            prefix += ' |';
        }

        // Element
        // Add this before adding the prefix so the prefix is still first in the array
        if (typeof entry.element !== 'undefined') {
            if (typeof entry.element === 'string' && entry.element.length) {
                try {
                    contents.unshift($(entry.element));
                }
                catch (e) {
                    contents.unshift('element@' + entry.element);
                }
            }
            else {
                contents.unshift(entry.element);
            }
        }

        // Add the prefix and element to the message contents so it's all printed together
        if (prefix.length !== 0) {
            contents.unshift(prefix);
        }

        switch (entry.type) {
            case 'error':
                console.error.apply(console, contents);

                break;

            case 'warn':
                console.warn.apply(console, contents);

                break;

            case 'info':
                console.info.apply(console, contents);

                break;

            default:
                console.log.apply(console, contents);

                break;
        }
    };

    ////////////////////////////////////
    // Constructor and public methods //
    ////////////////////////////////////

    var journalEvent;

    (function() {

        if (typeof window.CustomEvent !== "function") {

            var CustomEvent = function _CustomEvent(event, params) {
                params = params || { bubbles: false, cancelable: false, detail: undefined };

                var evt = document.createEvent("CustomEvent");

                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);

                return evt;
            };

            CustomEvent.prototype = window.Event.prototype;

            window.CustomEvent = CustomEvent;
        }

    })();

    var journal = function _journal () {};

    journalEvent = new CustomEvent("journal");

    // Extend the base
    journal.prototype = {};

    journal.errors = false;
    journal.warnings = false;

    // Function to actual register the log event
    journal.log = function _log () {
        var entry;
        var contents;
        var options;

        // Filter out any log posts with no arguments
        if (arguments.length === 0) {
            return false;
        }

        // Turn `arguments` into a proper array
        contents = Array.apply(null, arguments);

        // Check for a settings object in the first argument
        if (contents.length > 1) {
            options = contents[0];

            // Check to see if the first parameter is an options object
            // We will assume it's an options object if any of the standard properties were defined
            if (kind(options) === 'object' && (options.type || options.owner || options.module || options.submodule || options.func || options.element || options.message)) {
                // Standardize the settings
                entry = $.extend({}, DEFAULT_SETTINGS, options);

                // Normalize the type
                if (entry.type === 'warning') {
                    entry.type = 'warn';
                }

                // Remove the options object from the list of contents
                contents.shift();
            }
            // No options were provided
            else {
                // Use the default settings
                entry = $.extend({}, DEFAULT_SETTINGS);
            }
        }
        // No settings were provided, just the contents
        else {
            // Use the default settings
            entry = $.extend({}, DEFAULT_SETTINGS);
        }

        // Add the contents to the entry
        entry.message = entry.message.concat(contents);

        if (!journal.errors) {
            if (entry.type === "error") {

                journal.errors = true;
            }
        }

        if (!journal.warnings) {
            if (entry.type === "warn") {

                journal.warnings = true;
            }
        }

        _priv.processEntry(entry);

        document.dispatchEvent(journalEvent);

        return true;
    };

    // Function to flush the current log buffer buffer
    journal.clear = function _clear (doClearConsole) {
        _storage = [];

        if (doClearConsole) {
            console.clear();
        }
    };

    // Function prints out all stored logs
    journal.print = function _print (filters) {
        var filterProps;
        var entry;
        var prop;
        var i;
        var j;
        var len;
        var jLen;

        // No filters specified, so just print everything
        if (typeof filters === 'undefined') {
            for (i = 0, len = _storage.length; i < len; i++) {
                _priv.printEntry(_storage[i]);
            }
        }
        // Filters were supplied, so only print what was requested
        else {
            if (typeof filters === 'string') {

                switch (filters.toLowerCase()) {
                    // Supported log types
                    case 'error':
                    case 'warn':
                    case 'info':
                    case 'log':
                        for (i = 0, len = _storage.length; i < len; i++) {
                            if (_storage[i].type === filters) {
                                _priv.printEntry(_storage[i]);
                            }
                        }

                        break;

                    // Print all logs
                    case 'all':
                        for (i = 0, len = _storage.length; i < len; i++) {
                            _priv.printEntry(_storage[i]);
                        }

                        break;

                    // No type was requested
                    default:

                        console.log(filters);

                        journal.log({type: 'error', owner: 'UI', module: 'journal', submodule: 'print'}, 'Journal only supports text strings that match specific message types, or "all". The provided value "' + filters.toLowerCase() + '" is not supported.');

                        break;
                }
            }
            else if (kind(filters) === 'object') {
                filterProps = Object.keys(filters);

                entryLoop:
                for (i = 0, len = _storage.length; i < len; i++) {
                    entry = _storage[i];

                    filterLoop:
                    for (j = 0, jLen = filterProps.length; j < jLen; j++) {

                        prop = filterProps[j];

                        // Handle elements differently -- the user may pass a string representing a selector which we will match against DOM elements
                        if (prop === 'element') {
                            // Entry doesn't have an element
                            if (!entry.element) {
                                continue entryLoop;
                            }

                            // The filter is a string, and the entry is either an element or a selector that points to a single element
                            // We can test if the filter is a selector that matches the element
                            if (typeof filters[prop] === 'string' && (kind(entry.element) === 'element' || (typeof entry.element === 'string' && /^\w*#\w+$/.test(entry.element)))) {
                                // Use a try/catch because jQuery will throw an exception if the selector is malformed
                                try {
                                    if (!$(entry.element).is(filters[prop])) {
                                        continue entryLoop;
                                    }
                                }
                                catch (e) {
                                    continue entryLoop;
                                }
                            }
                            // The filter is some other type of object, but it doesn't really matter to us what type it is, we just need to see if it's the same value as the entry
                            else if (entry.element !== filters[prop]) {
                                continue entryLoop;
                            }
                        }
                        // Check to see if this entry has the property; if not, skip to the next entry without printing
                        else if (entry[prop] === undefined || entry[prop] !== filters[prop]) {
                            continue entryLoop;
                        }
                    }

                    // Log has met the filter requirements
                    _priv.printEntry(_storage[i]);
                }
            }
            else {
                journal.log({type: 'error', owner: 'UI', module: 'journal', submodule: 'print'}, 'Unsupported filter provided: ', filter);
            }
        }
    };

    // Dumps the stored objects to the console unceremoniously
    // Use `journal.print` for nicer printing
    journal.showLog = function _showLog () {
        console.log(_storage);
    };

    journal.getStorage = function _getStorage () {

        return _storage.concat();
    };

    // Enables or disables live logging
    // The plugin will continue to store the logs regardless
    journal.live = function _live (mode) {
        // Make sure we know what `mode` to use
        if (typeof mode !== 'string' || !/^on$|^off$|^suppress$/.test(mode)) {
            // Set `mode` so that it will toggle the current state
            if (_isLive) {
                mode = 'off';
            }
            else {
                mode = 'on';
            }
        }

        if (mode === 'suppress') {
            // Turn live mode off
            _isLive = false;

            // Disable live printing of errors
            _isLiveErrors = false;
            console.warn('UI [journal.live] Live printing of logs has been disabled, including errors');
        }
        else if (mode === 'off') {
            // Turn live mode off
            _isLive = false;

            // Re-enable live printing of errors
            _isLiveErrors = true;
            console.warn('UI [journal.live] Live printing of logs has been disabled, except for errors');
        }
        else if (mode === 'on') {
            // Turn live mode on
            _isLive = true;

            // Re-enable live printing of errors
            _isLiveErrors = true;
            console.info('UI [journal.live] Live printing of logs has been enabled');
        }
    };

    // Simplified way to pass a usable boilerplate to functions.
    journal.getDefault = function _getDefault () {
        return $.extend({}, DEFAULT_SETTINGS);
    };

    /**
     * Displays the version number
     * @return  {String}  Semantic version
     */
    journal.getVersion = function _getVersion () {
        return VERSION;
    };

    journal.getCount = function _getCount() {
        return _storage.length;
    };

    journal.getStore = function _getStore() {
        return _storage.concat();
    };

    journal.hasErrors = function _has_errors() {

        return journal.errors;
    };

    journal.hasWarnings = function _has_warnings() {

        return journal.warnings;
    };

    // Check to make sure the journal is not exposed at the window level and expose it if its not.
    if (!window.journal) {
        window.journal = journal;
    }
    else {
        console.warn('UI [journal] Journal component has not been defined because `window.journal` is already in use: ', window.journal);
    }

    // This module returns nothing, developers should interact with it via the `window.journal` layer.
});

define('uiBox',['jquery', 'cui', 'guid', 'journal'], function ($, cui, guid) {

    /////////////
    // Globals //
    /////////////
    var NAMESPACE = 'uiBox';

    var VERSION = '1.0.0';

    var CLASSES = {
        uiBox: 'cui-' + NAMESPACE,
        uiBoxHeader: 'cui-' + NAMESPACE + '-header',
        uiBoxBody: 'cui-' + NAMESPACE + '-body',
        uiBoxFooter: 'cui-' + NAMESPACE + '-footer',
    };

    ////////////
    // Public //
    ////////////

    var UIBox = function (elem, options) {
        // should never be an instance of node
        if (elem instanceof Node) {
            // Store the element upon which the component was called
            this.elem = elem;
            // Create a jQuery version of the element
            // this.$self = $(elem);

            this.$button = $(elem);

            // This next line takes advantage of HTML5 data attributes
            // to support customization of the plugin on a per-element
            // basis. For example,
            // <div class="item" data-uiBox-options="{'message':'Goodbye World!'}"></div>
            this.metadata = this.$button.data('uiBox-options');
        }
        else {
            this.metadata = {};

            this.$self = false;

            options = elem;
        }

        // Store the options
        this.options = options;
    };

    UIBox.prototype = {};

    UIBox.prototype.default = {
        id: null,
        css: null,
        className: null,
        html: null,
        header: null,
        body: null,
        footer: null,
    };

    // Init function
    UIBox.prototype.init = function () {
        // Create the uiBox reference object
        var uiBox = this;

        // Extend the config options with the defaults
        if (typeof this.options === 'string') {
            uiBox.config = $.extend(true, {}, this.default);
            uiBox.config.html = this.options;
        }
        else {
            uiBox.config = $.extend(true, {}, this.default, this.options);
        }

        // Create a unique ID for the uiBox if one is not provided.
        if (!uiBox.config.id) {
            uiBox.config.id = guid();
        }

        ///////////////////
        // BUILD WRAPPER //
        ///////////////////

        var uiBoxClasses = CLASSES.uiBox;
        if (uiBox.config.className && typeof uiBox.config.className === 'string') {
            uiBoxClasses += ' ' + uiBox.config.className;
        }

        // Create the uiBox
        uiBox.$self = $('<div/>', {
                            'id': uiBox.config.id,
                            'class': uiBoxClasses,
                            'tabindex': 0,
                        });

        if (uiBox.config.css) {
            uiBox.$self.css(uiBox.config.css);
        }

        ///////////////////////
        // BUILD SIMPLE HTML //
        ///////////////////////

        if (uiBox.config.html) {
            uiBox.$self.append(uiBox.config.html);
        }

        //////////////////
        // BUILD HEADER //
        //////////////////

        if (uiBox.config.header && uiBox.config.header.html) {

            var uiBoxHeaderClasses = CLASSES.uiBoxHeader;
            if (uiBox.config.header && uiBox.config.header.className && typeof uiBox.config.header.className === 'string') {
                uiBoxHeaderClasses += ' ' + uiBox.config.header.className;
            }

            uiBox.$header = $('<header/>', {
                                'class': uiBoxHeaderClasses
                            });

            uiBox.$header.append(uiBox.config.header.html);

            if (uiBox.config.header.css) {
                uiBox.$header.css(uiBox.config.header.css);
            }

            uiBox.$self.append(uiBox.$header);
        }

        ////////////////
        // BUILD BODY //
        ////////////////

        if (uiBox.config.body && uiBox.config.body.html) {
            var uiBoxBodyClasses = CLASSES.uiBoxBody;

            if (uiBox.config.body && uiBox.config.body.className && typeof uiBox.config.body.className === 'string') {
                uiBoxBodyClasses += ' ' + uiBox.config.body.className;
            }

            uiBox.$body = $('<div/>', {
                                'class': uiBoxBodyClasses,
                            });

            uiBox.$body.append(uiBox.config.body.html);

            if (uiBox.config.body.css) {
                uiBox.$body.css(uiBox.config.body.css);
            }

            uiBox.$self.append(uiBox.$body);
        }

        //////////////////
        // BUILD FOOTER //
        //////////////////

        if (uiBox.config.footer && uiBox.config.footer.html) {
            var uiBoxFooterClasses = CLASSES.uiBoxFooter;

            if (uiBox.config.footer.className && typeof uiBox.config.footer.className === 'string') {
                uiBoxFooterClasses += ' ' + uiBox.config.footer.className;
            }

            uiBox.$footer = $('<footer/>', {
                                'class': uiBoxFooterClasses,
                            });

            uiBox.$footer.append(uiBox.config.footer.html);

            if (uiBox.config.footer.css) {
                uiBox.$footer.css(uiBox.config.footer.css);
            }

            uiBox.$self.append(uiBox.$footer);
        }

        // return the assembled uiBox
        return uiBox.$self;
    };

    // Set the version number
    UIBox.version = VERSION;

    // Define jQuery plugin with a source element
    $.fn.uiBox = function (options, elem) {
        return this.each(function () {
            return new UIBox(options).init();
        });
    };

    // Create from scratch.
    $.uiBox = function (options) {
        return new UIBox(options).init();
    };

});

define('uiPosition',['jquery', 'cui'], function ($, cui) {

    /////////////
    // Globals //
    /////////////
    var NAMESPACE = 'uiPosition';

    var VERSION = '1.0.1';
    var CLASSES = {
        uiPosition: 'cui-' + NAMESPACE,
    };
    var SELECTORS = {};
    var EVENT_NAMES = {};
    var DEFAULTS = {};

    var REL_PADDING = 6;
    var CENTER_PADDING = 10;

    /////////////////////
    // Private methods //
    /////////////////////

    var _priv = {};

    _priv.resetPositioningStyles = function resetPositioningStyles (element, config) {
        var maxWidth = '';
        var maxHeight = '';

        if (config.defaultCSS && config.defaultCSS['max-width']) {
            maxWidth = config.defaultCSS['max-width'];
        }
        if (config.defaultCSS && config.defaultCSS['max-height']) {
            maxHeight = config.defaultCSS['max-height'];
        }

        //Reset styles used for positioning. Resolves any display issues if viewport is resized between shows
        $(element).css({
                        'margin':'auto',
                        'top':'auto',
                        'left':'auto',
                        'right':'auto',
                        'bottom':'auto',
                        'position': '',
                    });

        if (config.overrideMaxDimensions) {
            $(element).css({
                        'max-height': maxHeight,
                        'max-width': maxWidth,
                    });
        }
    };

    _priv.adjustMaxHeight = function adjustMaxHeight (element, config) {
        if (config.overrideMaxDimensions) {
            var maxHeight = '';
            var windowMaxHeight = '';

            if (config.defaultCSS && config.defaultCSS['max-height']) {
                maxHeight = parseInt(config.defaultCSS['max-height']);
            }

            windowMaxHeight = $(window).height() - 2 * CENTER_PADDING;

            if (typeof maxHeight !== 'number' || windowMaxHeight < maxHeight) {
                maxHeight = windowMaxHeight;
            }

            $(element).css({
                            'max-height': maxHeight,
                        });
        }
    };

    _priv.adjustMaxWidth = function adjustMaxWidth (element, config) {
        if (config.overrideMaxDimensions) {
            var maxWidth = '';
            var windowMaxWidth = '';

            if (config.defaultCSS && config.defaultCSS['max-width']) {
                maxWidth = parseInt(config.defaultCSS['max-width']);
            }

            windowMaxWidth = $(window).width() - 2 *  CENTER_PADDING;

            if ((typeof maxWidth !== 'number') || (windowMaxWidth<maxWidth)) {
                maxWidth = windowMaxWidth;
            }

            $(element).css({
                            'max-width': maxWidth + 'px',
                        });
        }
    };

    _priv.positionTopLeft = function positionTopLeft (element, config) {
        $(element).css({
                        'top': config.offset.offsetY,
                        'left': config.offset.offsetX,
                        'bottom': 'auto',
                        'right': 'auto',
                        'margin-top': 'auto',
                        'margin-left': 'auto',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionTopCenter = function positionTopCenter (element, config) {
        _priv.adjustMaxWidth(element, config);

        $(element).css({
                        'top': config.offset.offsetY,
                        'left': '50%',
                        'bottom': 'auto',
                        'right': 'auto',
                        'margin-top': 'auto',
                        'margin-left': ((-1 * $(element).outerWidth()) / 2) + 'px',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionTopRight = function _positionTopRight (element, config) {
        $(element).css({
                        'top': config.offset.offsetY,
                        'left': 'auto',
                        'bottom': 'auto',
                        'right': config.offset.offsetX,
                        'margin-top': 'auto',
                        'margin-left': 'auto',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

     _priv.positionCenterLeft = function _positionCenterLeft (element, config) {
        _priv.adjustMaxHeight(element, config);

        $(element).css({
                        'top':'50%',
                        'left': config.offset.offsetX,
                        'bottom': 'auto',
                        'right': 'auto',
                        'margin-top': ((-1 * $(element).outerHeight()) / 2) + 'px',
                        'margin-left': 'auto',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionCenterCenter = function _positionCenterCenter (element, config) {
        _priv.adjustMaxHeight(element, config);
        _priv.adjustMaxWidth(element, config);

        $(element).css({
                        'top':'50%',
                        'left': '50%',
                        'bottom': 'auto',
                        'right': 'auto',
                        'margin-top': ((-1 * $(element).outerHeight()) / 2) + 'px',
                        'margin-left': ((-1 * $(element).outerWidth()) / 2) + 'px',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionCenterRight = function _positionCenterRight (element, config) {
        _priv.adjustMaxHeight(element, config);

        $(element).css({
                        'top':'50%',
                        'left': 'auto',
                        'bottom': 'auto',
                        'right': config.offset.offsetX,
                        'margin-top': ((-1 * $(element).outerHeight()) / 2) + 'px',
                        'margin-left': 'auto',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionBottomLeft = function positionBottomLeft (element, config) {
        $(element).css({
                        'top':'auto',
                        'left': config.offset.offsetX,
                        'bottom':  config.offset.offsetY,
                        'right': 'auto',
                        'margin-top': 'auto',
                        'margin-left': 'auto',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionBottomCenter = function positionBottomCenter (element, config) {
        _priv.adjustMaxWidth(element, config);

        $(element).css({
                        'top':'auto',
                        'left': '50%',
                        'bottom':  config.offset.offsetY,
                        'right': 'auto',
                        'margin-top': 'auto',
                        'margin-left': ((-1 * $(element).outerWidth()) / 2) + 'px',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionBottomRight = function positionBottomRight (element, config) {
        $(element).css({
                        'top':'auto',
                        'left': 'auto',
                        'bottom':  config.offset.offsetY,
                        'right': config.offset.offsetX,
                        'margin-top': 'auto',
                        'margin-left': 'auto',
                        'margin-bottom': 'auto',
                        'margin-right': 'auto',
                        'position': 'fixed',
                    });
    };

    _priv.positionRespectTo = function _positionRespectTo (element, positioningElement, config) {
        var location = config.positionType;
        var position = {
            top: 0,
            left: 0,
        };
        var addedRightMargin = false;
        var windowWidth;
        var popoverWidth;
        var popoverHeightActual;
        var popoverHeightWithPadding;
        var buttonOffset;
        var buttonWidth;
        var buttonHeight;
        var difference;
        var relativeMaxHeight;
        var availableSpaceAbove;
        var availableSpaceBelow;
        var offsetX = config.offset.offsetX;
        var offsetY = config.offset.offsetY;

        var __getRelativeMaxHeight = function _getRelativeMaxHeight (top, windowHeight, offset) {
            return (windowHeight - top - offset + $(window).scrollTop());
        };

        var __setCurrentPositionData = function __setCurrentPositionData (element, position) {
            $(element).data(NAMESPACE, {currentPosition: position});
        };

        /**
         * Determines the position based on the requested location, detects boundary collisions, and falls back to other locations if necessary
         *
         * @param   {String}  location  Location of the popover
         * @param   {Object}  position  Position definition
         *
         * @return  {Object}            Updated position definition
         */
        var __determinePosition = function __determinePosition (location, position) {

            /**
             * Determines the top and left positioning for the popover
             * This is a very simple, nearly logic-less function that does not do boundary testing or fallbacks
             */
            var __getTopAndLeft = function __getTopAndLeft (placement) {
                // Returns the `top` value when the popover is above the button
                var __getTopWhenAbove = function __getTopWhenAbove () {
                    return buttonOffset.top - popoverHeightActual - REL_PADDING;
                };

                // Returns the `top` value when the popover is below the button
                var __getTopWhenBelow = function __getTopWhenBelow () {
                    return buttonOffset.top + buttonHeight + REL_PADDING;
                };

                if (placement === 'below-left') {
                    position.left = buttonOffset.left + buttonWidth - popoverWidth + (REL_PADDING / 2);
                    position.top = __getTopWhenBelow();
                }
                else if (placement === 'above-left') {
                    position.left = buttonOffset.left + buttonWidth - popoverWidth + (REL_PADDING / 2);
                    position.top = __getTopWhenAbove();
                }
                else if (placement === 'below-right') {
                    position.left = buttonOffset.left;
                    position.top = __getTopWhenBelow();
                }
                else if (placement === 'above-right') {
                    position.left = buttonOffset.left;
                    position.top = __getTopWhenAbove();
                }
                else if (/^(above|below)\-center$/.test(placement)) {
                    // Vertical position is different for each `center` location
                    if (placement === 'below-center') {
                        position.top = __getTopWhenBelow();
                    }
                    else if (placement === 'above-center') {
                        position.top = __getTopWhenAbove();
                    }

                    // Horizontal position is the same for both `center` locations

                    // To determine the `left` value, start at the left edge of the button...
                    position.left = buttonOffset.left;

                    // ...then add half of the difference between the button's width and the popover's width
                    // If the popover is wider than the button, the difference will be a negative number which will actually pull the popover to the right (which is what we'd want to happen)
                    position.left += ((buttonWidth - popoverWidth) / 2);
                }
                else if (/^inline\-(right|left)$/.test(placement)) {
                    // Horizontal position is different for each `inline` location
                    if (placement === 'inline-left') {
                        position.left = buttonOffset.left - popoverWidth - REL_PADDING;
                    }
                    else if (placement === 'inline-right') {
                        position.left = buttonOffset.left + buttonWidth + REL_PADDING;
                    }

                    // Vertical position is the same for both `inline` locations

                    // To determine the `top` value, start at the top edge of the button...
                    position.top = buttonOffset.top;

                    // ...then add half of the difference between the button's height and the popover's height
                    // If the popover is taller than the button, the difference will be a negative number which will actually pull the popover upward (which is what we'd want to happen)
                    position.top += ((buttonHeight - popoverHeightActual) / 2);
                }
            };

            // Start off with a simple guess at the top and left values
            __getTopAndLeft(location);

            // Perform boundary detection and fallbacks based on the requested location
            // Note that not all locations have fallbacks. If they did, then we might create an infinite loop as each test fails and calls another fallback in turn. Instead, some of the locations merely tweak the positioning to find the most practical position for the popover. These locations are marked with a 'safe' comment -- falling back to a safe location will avoid infinite looping. Do not use a 'not safe' location as a fallback.

            // Safe (no recursive fallback)
            if (location === 'below-left') {
                // Clipped by the left edge of the screen
                if (position.left < 0) {
                    // Determine how far it is from the left edge (a negative value means it's being clipped)
                    difference = windowWidth - (position.left + popoverWidth + REL_PADDING);

                    // Shift the popover to the right just enough to fit on-screen
                    position.left = 0;

                    // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                    $(element).css('margin-right', REL_PADDING + 'px');
                    addedRightMargin = true;
                }
                //Check and set max height

                relativeMaxHeight = __getRelativeMaxHeight(position.top, windowHeight, 2 * REL_PADDING);
                __setCurrentPositionData(element, 'below-left');
            }
            // Not safe (includes recursive fallback)
            else if (location === 'above-left') {
                // We need to verify two things in conjunction: that it's not clipped by the top of the window, and that it's not running off the left edge of the screen

                // Condition: clipped by the top edge of the window
                if (position.top < $(window).scrollTop()) {
                    // It does not matter whether the popover is also clipped by the left edge. While we can fix the `left` value easily (see next condition), our only recourse for `top` is to fallback to a safe location
                    position = __determinePosition('below-left', position);
                }
                // Condition: clipped by the left edge of the window only
                else if (position.left < 0) {
                    // Shift the popover to the right just enough to fit on-screen
                    position.left = 0;

                    // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                    $(element).css('margin-right', REL_PADDING + 'px');
                    addedRightMargin = true;

                    __setCurrentPositionData(element, 'above-left');
                }
                else{
                    __setCurrentPositionData(element, 'above-left');
                }
            }
            // Safe (no recursive fallback)
            else if (location === 'below-right') {
                // Determine how far it is from the right edge (a negative value means it's being clipped)
                difference = windowWidth - (Math.ceil(position.left) + Math.ceil(popoverWidth) + (2 * REL_PADDING) + 2);
                // difference = windowWidth - (position.left + popoverWidth);

                // Clipped by the right edge
                if (difference < 0) {
                    // Shift the popover to the right just enough to fit on-screen
                    position.left += difference;
                    // position.left -= REL_PADDING;

                    // But make sure we didn't just push it off the left edge of the screen
                    if (position.left < 0) {
                        position.left = 0;

                        // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                        $(element).css('margin-right', REL_PADDING + 'px');
                        addedRightMargin = true;
                    }
                }

                //Check and set max height
                relativeMaxHeight = __getRelativeMaxHeight(position.top, windowHeight, 2 * REL_PADDING);
                __setCurrentPositionData(element, 'below-right');

            }
            // Not safe (includes recursive fallback)
            else if (location === 'above-right') {
                // We need to verify two things inconjunction: that it's not clipped by the top of the window, and that it's not running off the left edge of the screen

                // Determine how far it is from the right edge (a negative value means it's being clipped)
                // difference = windowWidth - (position.left + popoverWidth + REL_PADDING);
                difference = windowWidth - (Math.ceil(position.left) + Math.ceil(popoverWidth) + (2 * REL_PADDING) + 2);

                // Condition: clipped by the top of the window
                if (position.top < $(window).scrollTop()) {
                    // It doesn't matter if it is also clipped by the right edge. While we could fix the `left` value easily (see next condition), our only recourse for `top` is to fallback to a safe location
                    position = __determinePosition('below-right', position);
                }
                // Condition: clipped by the right edge of the window only
                else if (difference < 0) {
                    // Shift the popover to the right just enough to fit on-screen
                    position.left += difference;
                    // position.left -= REL_PADDING;

                    // But make sure we didn't just push it off the left edge of the screen
                    if (position.left < 0) {
                        position.left = 0;

                        // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                        $(element).css('margin-right', REL_PADDING + 'px');
                        addedRightMargin = true;
                    }
                    __setCurrentPositionData(element, 'above-right');
                }
                else{
                    __setCurrentPositionData(element, 'above-right');
                }
            }
            // Not safe (includes recursive fallback)
            else if (location === 'inline-left') {
                // Condition: clipped by the left edge of the screen
                if (position.left < 0) {
                    position = __determinePosition('below-left', position);
                }
                else{
                    __setCurrentPositionData(element, 'inline-left');
                }
            }
            // Not safe (includes recursive fallback)
            else if (location === 'inline-right') {
                // Condition: clipped by the right edge of the screen
                if (position.left + popoverWidth > windowWidth) {
                   __determinePosition('below-right', position);
                }
                else{
                    __setCurrentPositionData(element, 'inline-right');
                }
            }
            // Not safe (includes recursive fallback) unless only the `top` is broken
            else if (location === 'below-center') {
                // There are two bad scenarios: the popover is clipped by the right edge of the screen, or it's clipped by the left edge

                // Condition: clipped by the left edge of the screen
                if (position.left < 0) {
                    // Shift it to the right just enough to be on-screen
                    position.left = 0;

                    // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                    $(element).css('margin-right', REL_PADDING + 'px');
                    addedRightMargin = true;

                    __setCurrentPositionData(element, 'below-center');

                }
                // Clipped by the right edge
                else if (position.left + popoverWidth > windowWidth) {
                   __determinePosition('below-right', position);
                }
                else{
                    __setCurrentPositionData(element, 'below-center');
                }
            }
            // Not safe (includes recursive fallback) when the `top` is broken
            else if (location === 'above-center') {
                // There are three bad scenarios we need to check for. The popover can be clipped by these edges of the screen:
                // 1. top
                // 2. left
                // 3. right
                // We do not need to check for combinations (e.g. clipped by the right and top edges) because our fallback for `top` will handle any horizontal issues

                // 1. Clipped by the top edge
                if (position.top < $(window).scrollTop()) {
                    // If the top is broken we are forced to move the popover below the button. There's no point looking into whether it also fails the left or right edge since our fallback will take care of that.
                    __getTopAndLeft('below-center');
                    position = __determinePosition('below-center', position);
                }
                // 2. Clipped by the left edge, but not the top
                else if (position.left < 0) {
                    // Shift it to the right just enough to be on-screen
                    position.left = 0;

                    // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                    $(element).css('margin-right', REL_PADDING + 'px');
                    addedRightMargin = true;
                    __setCurrentPositionData(element, 'above-center');

                }
                // 3. Clipped by the right edge, but not the top
                else if (position.left + popoverWidth > windowWidth) {
                    // Determine how far it is from the left edge (a negative value means it's being clipped)
                    // difference = windowWidth - (position.left + popoverWidth + REL_PADDING);
                    difference = windowWidth - (Math.ceil(position.left) + Math.ceil(popoverWidth) + (2 * REL_PADDING) + 2);

                    // Shift the popover to the right just enough to fit on-screen
                    position.left += difference;
                    // position.left -= REL_PADDING;

                    // But make sure we didn't just push it off the left edge of the screen
                    if (position.left < 0) {
                        position.left = 0;

                        // Add a margin to prevent the popover from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the popover contains wrapping text the text will simply reflow and keep using as much width as possible.
                        $(element).css('margin-right', REL_PADDING + 'px');
                        addedRightMargin = true;
                    }
                    __setCurrentPositionData(element, 'above-center');
                }
                else{
                    __setCurrentPositionData(element, 'above-center');
                }
            }
            else {

                journal.log({type: 'error', owner: 'UI', module: 'uiPosition', submodule: 'positionRespectTo', func: '__determinePosition'}, 'Unsupported location "', location, '" ', element);

                return null;
            }

            return position;
        };

        // Gather measurements about key elements
        buttonOffset = $(positioningElement).offset();
        // buttonOffset.top = buttonOffset.top - $(window).scrollTop();

        buttonWidth = $(positioningElement).outerWidth();
        buttonHeight = $(positioningElement).outerHeight();

        popoverWidth = $(element).outerWidth() + (REL_PADDING / 2);
        popoverHeightActual = $(element).outerHeight(); // For inline positioning we want the actual height of the popover
        popoverHeightWithPadding = popoverHeightActual + (REL_PADDING / 2); // Above and below the button we want to account for padding, but only half of it because the button already has some visual padding built in

        windowWidth = window.innerWidth;
        windowHeight = window.innerHeight;

        // Get the positioning values for the requested location
        // Hint: this is the 'main' operation of this function and a good place to start for debugging. Most of the real work is done in `__determinePosition()`.

        position = __determinePosition(location, position);

        // No position found (e.g. the location was invalid)
        if (position === null) {
            return false;
        }

        if (relativeMaxHeight) {
            if ((config.defaultCSS && config.defaultCSS['max-height'])) {
                if (parseInt(config.defaultCSS['max-height']>relativeMaxHeight)) {
                    $(element).css('max-height', relativeMaxHeight);
                }
            }
            else{
                $(element).css('max-height', relativeMaxHeight);
            }
        }

        // Remove the margin that may have been added earlier in the page's lifecycle (e.g. before the window was resized)
        if (!addedRightMargin) {
            $(element).get(0).style.removeProperty('margin-right');
        }

        // Apply user-specified offsets. Need to update to either add or subtract offset based on the position to the element
        // if (offsetY > 0) {
            // if (location.toLowerCase().indexOf('below') >= 0) {
            //     position.top -= offsetY;
            // }
            // else{
                position.top += offsetY;
            // }

            // avoid negative margins
            if (position.top < 0) {
                position.top = 0;
            }
        // }

       // if (offsetX > 0) {
            // if (location.toLowerCase().indexOf('right') >= 0) {
            //     position.left -= offsetY;
            // }
            // else{
                position.left += offsetX;
            // }

            // avoid negative margins
            if (position.left < 0) {
                position.left = 0;
            }
        // }

        // Apply the positioning styles
        $(element).css({
                        left: Math.floor(position.left),
                        top: Math.floor(position.top),
                    });
    };


    ////////////////////
    // Public methods //
    ////////////////////

    var UIPosition = function (elem, options) {
        // Store the element to be positioned
        this.elem = elem;

        // Store the options
        this.options = options;
    };

    UIPosition.prototype = {};

    UIPosition.prototype.default = {
        positionType: null,
        offset: {
            offsetX: 0,
            offsetY: 0,
        },
        respectTo: null,
        overrideMaxDimensions: true,
        defaultCSS: null,
    };

    // Init function
    UIPosition.prototype.init = function () {
        // Create the uiPosition reference object
        var uiPosition = this;

        if (typeof this.options === 'string') {
            uiPosition.config = $.extend(true, {}, this.default);
            uiPosition.config.positionType = this.options;
        }
        else {
            uiPosition.config = $.extend(true, {}, this.default, this.options);
        }

        // Update offset if shortcut declaration used
        if (typeof uiPosition.config.offset === 'string' || typeof uiPosition.config.offset === 'number') {
            uiPosition.config.offset = {
                offsetX: this.options.offset,
                offsetY: this.options.offset,
            };
        }

        _priv.resetPositioningStyles(uiPosition.elem, uiPosition.config);

        // parse options and determine what process to return
        if (uiPosition.config.respectTo instanceof $) {
            _priv.positionRespectTo(uiPosition.elem, uiPosition.config.respectTo, uiPosition.config);
        }
        else {
            // Since no reference object was provided, position absolutely.
            if (uiPosition.config.positionType) {
                switch(uiPosition.config.positionType) {
                    case 'top-left':
                        _priv.positionTopLeft(uiPosition.elem, uiPosition.config);
                        break;

                    case 'top-center':
                        _priv.positionTopCenter(uiPosition.elem, uiPosition.config);
                        break;

                    case 'top-right':
                        _priv.positionTopRight(uiPosition.elem, uiPosition.config);
                        break;

                    case 'center-left':
                        _priv.positionCenterLeft(uiPosition.elem, uiPosition.config);
                        break;

                    case 'center-center':
                        _priv.positionCenterCenter(uiPosition.elem, uiPosition.config);
                        break;

                    case 'center-right':
                        _priv.positionCenterRight(uiPosition.elem, uiPosition.config);
                        break;

                    case 'bottom-left':
                        _priv.positionBottomLeft(uiPosition.elem, uiPosition.config);
                        break;

                    case 'bottom-center':
                        _priv.positionBottomCenter(uiPosition.elem, uiPosition.config);
                        break;

                    case 'bottom-right':
                        _priv.positionBottomRight(uiPosition.elem, uiPosition.config);
                        break;

                    default:
                        break;
                }
            }
        }
    };

    // Set the version number
    UIPosition.version = VERSION;

    // Define jQuery plugin with a source element
    $.fn.uiPosition = function (options) {
        return this.each(function () {
            return new UIPosition(this, options).init();
        });
    };
});

define('popover',['jquery', 'cui', 'guid', 'withinviewport', 'uiBox', 'uiPosition'], function ($, cui, guid, withinviewport) {
    ///////////////
    // Constants //
    ///////////////

    var VERSION = '2.0.3';
    var NAMESPACE = 'popover';

    var EVENT_NAMES = {
        show:   'show.cui.' + NAMESPACE,
        shown:  'shown.cui.' + NAMESPACE,
        hide:   'hide.cui.' + NAMESPACE,
        hidden: 'hidden.cui.' + NAMESPACE,
    };

    var CLASSES = {
        popover: 'cui-' + NAMESPACE,
        toggle: 'cui-' + NAMESPACE + '-toggle',
        closeButton: 'cui-' + NAMESPACE + '-hide',
        useArrow: 'cui-' + NAMESPACE + '-use-arrow',
        arrow: 'cui-' + NAMESPACE + '-arrow',
        popoverBody: 'cui-' + NAMESPACE + '-body',
        mobileBreakpoint: 'cui-breakpoint-mobile',
    };

    var MOBILE_BREAKPOINT = 600;
    var MOBILE_PADDING = 6;

    var priv = {};
    var popoverList = {};
    var $body = $('body');
    var $window = $(window);

    /////////////////
    // Constructor //
    /////////////////

    var Popover = function _Popover (elem, options) {
        // Create both a jQuery copy and a regular DOM copy of the element
        if (elem instanceof $) {
            this.$button = elem;
            this.button = elem.get(0);
        }
        else if (elem instanceof HTMLElement) {
            this.button = elem;
            this.$button = $(elem);
        }

        // Store the options
        this.options = options;

        // Extract data attribute options
        this.metadata = this.$button.data('popover-options');

        return this;
    };

    //////////////////////
    // Plugin prototype //
    //////////////////////

    Popover.prototype = {};

    // Default user options
    Popover.prototype.defaults = {
        html: '',
        display: {
            css: {
            },
            className: '',
            offset: {
                top: 0,
                left: 0,
            },
        },
        location: 'below-right',
        showPop: true,
        hideOnResize: false,
        hideOnEscape: true,
        gainFocus: false,
        isModal: true,
        useArrow: true,
        resizeMobile: true,
        hideOnScroll: true,
    };

    /**
     * Initializes the plugin
     * May be called multiple times
     */
    Popover.prototype.init = function _Popover_init () {
        var popover;
        var isInPageLink = (this.button.hasAttribute('href') && /^\#/.test(this.button.getAttribute('href')));

        // Introduce defaults that can be extended either globally or using an object literal
        if (typeof this.options === 'string') {
            this.config = $.extend(true, {}, this.defaults);
            this.config.html = this.options;
        }
        else {
            this.config = $.extend(true, {}, this.defaults, this.options, this.metadata);
        }

        // Create new popover object using this instance
        popover = this;

        popover.id = NAMESPACE + '_' + guid();
        popover.isShown = false;

        if (popover.config.html === '' && popover.$button.attr('title')) {
            popover.config.html = '<span>' + popover.$button.attr('title') + '</span>';
        }

        // Add a class to the button so we can tell whether it was clicked in `priv.onBodyClick()`
        popover.$button.addClass(CLASSES.toggle);

        // Create the popover element
        popover.$popover = priv.createPopover(popover);

        // Set up event listeners

        // Show/hide the popover when its button is clicked
        popover.$button.on('click', function _popover_onClick (evt) {
            // Prevent the page from jumping when the button links to another element
            if (isInPageLink) {
                evt.preventDefault();
            }

            if (popover.isShown === false) {
                priv.showPopover(popover);
            }
            else {
                priv.hidePopover(popover);
            }
        }.bind(popover));

        // Show/hide the popover when the user clicks outside of it
        // We need to give this function a name so it can be referenced later since we will turn it on and off. Other event listeners (e.g. window resize) are only ever turned on so we can just use anonymous functions without storing them.
        popover.onBodyClick = function _popover_onBodyClick (evt) {
            priv.onBodyClick(evt, popover);
        }.bind(popover);

        // Find the scrollable parent of the button
        //popover.$scrollableContainer = popover.$button.closest(':scrollable');

        // if (popover.$scrollableContainer.length) {
        //     // If the container happens to be the root, watch for `window` scrolling instead
        //     if (popover.$scrollableContainer.is('html')) {
        //         popover.$scrollableContainer = $window;
        //     }
        //     // Otherwise, scrolling parent is some other element
        //     else {
        //         // Unless `hideOnScroll` was explicitly set, force it to `always`. This is due to a limitation in `withinviewport` where it can only use the window as the viewport
        //         //TODO: Update the `withinviewport` lib to allow for any element to be considered the viewport, not just `window`
        //         if (typeof this.options !== 'object' || !this.options.hasOwnProperty('hideOnScroll')) {
        //             popover.config.hideOnScroll = 'always';
        //         }
        //     }

        //     // Define `scroll` event handler for this popover, which will only be in effect while the popover is open
        //     popover.onParentScroll = function _popover_onParentScroll (evt) {
        //         priv.onParentScroll(evt, popover);
        //     }.bind(popover);
        // }

        // Hide the popover when the Escape key is pressed
        if (popover.config.hideOnEscape) {
            popover.onWindowKeyup = function _popover_onKeyup (evt) {
                priv.onWindowKeyup(evt, popover);
            }.bind(popover);

            $window.on('keyup', popover.onWindowKeyup);
        }

        // Keep the popover aligned properly when window is resized
        popover.onWindowResize = function _popover_onResize (evt) {
            priv.onWindowResize(evt, popover);
        }.bind(popover);

        $window.on('resize', popover.onWindowResize);

        // Adds this Popover instance to our list so we can track all of them
        popoverList[popover.id] = popover;

        // Return this instance of the plugin
        return popover;
    };

    /**
     * Hides the popover
     *
     * @param   {Function}  callback         Optional function to run after closing the popover. It will receive the Popover instance as an argument.
     * @param   {Boolean}   hideImmediately  Set to `true` to skip animation and event triggering
     */
    Popover.prototype.hide = function _Popover_hide (callback, hideImmediately) {
        priv.hidePopover(this, hideImmediately);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Display the popover
     *
     * @param   {Function}  callback  Optional function to run after closing the popover. It will receive the Popover instance as an argument.
     */
    Popover.prototype.show = function _Popover_show (callback) {
        priv.showPopover(this);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * (Re)position the popover
     *
     * @param   {Function}  callback  Optional function to run after closing the popover. It will receive the Popover instance as an argument.
     */
    Popover.prototype.position = function _Popover_position (callback) {
        priv.positionPopover(this);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Destroy the popover
     *
     * @param   {Function}  callback  Optional function to run after closing the popover. It will receive the Popover instance as an argument.
     */
    Popover.prototype.destroy = function _Popover_destroy (callback) {
        var popover = this;
        var index = -1;

        // Hide it
        if (popover.isShown) {
            // Pass the "hide immediately" flag. A few lines below here we will remove the element so we don't want it to awkwardly disappear during the closing animation
            priv.hidePopover(popover, true);
        }

        // Undo any changes to the button
        popover.$button
            .removeClass(CLASSES.toggle)
            .off('click');

        // Remove the element
        popover.$popover
            .empty()
            .remove();

        // Remove event listeners from other elements

        if (popover.config.hideOnEscape) {
            $window.off('keyup', popover.onWindowKeyup);
        }

        $window.off('resize', popover.onWindowResize);

        $body.off('click', popover.onBodyClick);
        popover.onBodyClick = null;

        if (popover.onParentScroll) {
            popover.$scrollableContainer.off('scroll', popover.onParentScroll);
        }

        // Remove this Popover instance from our list
        delete popoverList[popover.id];

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(popover);
        }

        return popover;
    };

    /////////////////////
    // Private methods //
    /////////////////////

    // Opens a new popover window
    priv.showPopover = function _showPopover (popover) {
        // Hide other popovers
        if (popover.config.isModal) {
            priv.hideAllPopovers();
        }

        // Position it
        priv.positionPopover(popover);

        // Reveal it
        popover.$popover
            .animate(
                {opacity: 1},
                400,
                function _showPopover_animate () {
                    if (popover.gainFocus) {
                        $(this).focus();
                    }

                    popover.$popover.trigger(EVENT_NAMES.shown);
                    $window.trigger(EVENT_NAMES.shown);
                }
            );

        popover.isShown = true;

        //If not positioned below and not set to resize on mobile
        if((typeof popover.config.location === 'string') && (popover.config.location.indexOf('below')!== -1) && !popover.config.resizeMobile || (popover.config.resizeMobile && (window.innerWidth > MOBILE_BREAKPOINT))){
            priv.resetMaxHeight(popover);
            priv.resetSize(popover);
            priv.resetInnerContentHeight(popover);
        }

        if(popover.$popover && popover.$popover[0]){
            popover.$popover[0].focus();
        }

        // Add event listeners
        $body.on('click', popover.onBodyClick);

        if (popover.onParentScroll) {
            popover.$scrollableContainer.on('scroll', popover.onParentScroll);
        }

        popover.$popover.trigger(EVENT_NAMES.show);
        $window.trigger(EVENT_NAMES.show);
    };

    // Hides all popover instances
    priv.hideAllPopovers = function _hideAllPopovers () {
        Object.keys(popoverList).forEach(function (id) {
            priv.hidePopover(popoverList[id], true);
        });
    };

    /**
     * Hides a popover element
     *
     * @param   {Object}   popover           Popover instance
     * @param   {Boolean}  hideImmediately  Set to `true` to skip animation and event triggering
     */
    priv.hidePopover = function _hidePopover (popover, hideImmediately) {
        // Hide with animation and fire an event
        // This usually happens when a single popover is dismissed
        if (!hideImmediately) {
            // Animate it to hidden
            popover.$popover
                .animate(
                    {opacity: 0},
                    400,
                    function _hidePopover_animate () {
                        this.style.opacity = '0';
                        // Reset the position so that it doesn't cover other elements while invisible
                        this.style.top = '0';
                        this.style.left = '-9999em';

                        popover.$popover.trigger(EVENT_NAMES.hidden);
                        $window.trigger(EVENT_NAMES.hidden);
                    }
                )
                .trigger(EVENT_NAMES.hide);

            $window.trigger(EVENT_NAMES.hide);
        }
        // Hide it immediately without animation or events
        // This usually means we're closing all popovers before opening a new one and we don't want to create a delay
        else {
            popover.$popover
                .css({
                    opacity: 0,
                    top: '0',
                    left: '-9999em',
                })
                .trigger(EVENT_NAMES.hide)
                .trigger(EVENT_NAMES.hidden);

            $window.trigger(EVENT_NAMES.hide);
            $window.trigger(EVENT_NAMES.hidden);
        }

        popover.isShown = false;

        $body.off('click', popover.onBodyClick);

        if (popover.onParentScroll) {
            popover.$scrollableContainer.off('scroll', popover.onParentScroll);
        }

        priv.enablePageScrolling();
    };

    // Create the popover container element
    priv.createPopover = function _createPopover (popover) {
        var boxOptions = {};

        boxOptions.className = CLASSES.popover + ' ' + popover.config.display.className;
        boxOptions.css = {opacity: '0'};

        if (popover.config.display.css) {
            $.extend(boxOptions.css, popover.config.display.css);
        }

        if (popover.config.useArrow) {

            boxOptions.body = {};
            boxOptions.body.html = popover.config.html;
            boxOptions.body.className = CLASSES.popoverBody;

            boxOptions.className += ' ' + CLASSES.useArrow;
        }
        else {
            boxOptions.html = popover.config.html;
        }

        var $popoverBox = $.uiBox(boxOptions);

        // Used on mobile sizes
        if (popover.config.resizeMobile) {
            popover.$close = $('<button/>', {
                                'class': CLASSES.closeButton,
                            })
                            .text('Close Popover')
                            .on('click', function (evt) {
                                evt.preventDefault();
                                priv.hidePopover(popover);
                            });

            $popoverBox.append(popover.$close);
        }

        $popoverBox.appendTo(document.body);

        return $popoverBox;
    };

    // Function that will position the popover on the page using uiPosition
    priv.positionPopover = function _positionPopover (popover) {
        if (popover.config.useArrow) {
            priv.removeArrow(popover);
            priv.resetInnerContentHeight(popover);
        }

        var popoverOffset = {};
        var popoverDefaultCSS = {};

        // Convert popover offset call into uiPosition config call
        if (popover.config.display.offset) {
            if (popover.config.display.offset.top) {
                popoverOffset.offsetY = popover.config.display.offset.top;
            }

            if (popover.config.display.offset.left) {
                popoverOffset.offsetX = popover.config.display.offset.left;
            }
        }

        if (popover.config.display && popover.config.display.css) {
            popoverDefaultCSS = popover.config.display.css;
        }

        if (!popover.config.resizeMobile || (popover.config.resizeMobile && (window.innerWidth > MOBILE_BREAKPOINT))) {
            // Remove mobile class
            popover.$popover.removeClass(CLASSES.mobileBreakpoint);
            priv.resetSize(popover);

            priv.enablePageScrolling();

            var positionOptions = {
                positionType: popover.config.location,
                respectTo: popover.$button,
                offset: popoverOffset,
                defaultCSS: popoverDefaultCSS,
            };

            popover.$popover.uiPosition(positionOptions);

            if (popover.config.useArrow) {
                priv.positionArrow(popover);
                priv.setInnerContentHeight(popover);
            }
        }
        else {
            // Add mobile class
            popover.$popover.addClass(CLASSES.mobileBreakpoint);
            priv.setFullSize(popover);

            priv.disablePageScrolling();

            popover.$popover.uiPosition({
                positionType: 'center-center',
            });
        }
    };

    priv.positionArrow = function _positionArrow (popover) {

        var positionData = popover.$popover.data('uiPosition');
        var currentPosition = '';
        var validPosition = false;

        var arrowMargin = 15;

        if (positionData) {
            currentPosition = positionData.currentPosition;
        }

        if (currentPosition) {

            var adjustedTop;
            var arrowHeight = 7;
            var adjustedHeight;

            var buttonOffset = popover.$button.offset();
            var buttonWidth = popover.$button.outerWidth();
            var buttonHeight = popover.$button.outerHeight();

            var buttonCenterX = buttonOffset.left + buttonWidth / 2;
            var buttonCenterY = buttonOffset.top + buttonHeight / 2;

            var popoverLeft = parseInt(popover.$popover.css('left'));
            var popoverWidth = parseInt(popover.$popover.outerWidth());

            var arrowLeft = buttonCenterX - popoverLeft;

            //Determine the maximum left position of the arrow
            var maxArrowLeft = popoverWidth - arrowMargin;

            if ((arrowLeft) > maxArrowLeft){
                arrowLeft = (maxArrowLeft > 0) ? maxArrowLeft : 0;
            }

            // Determine the minimum left position of the arrow.
            if (arrowLeft  < arrowMargin){
                arrowLeft = arrowMargin;
            }

            popover.$arrow = $('<div/>', {
                                'class': CLASSES.arrow,
                            });

            var popoverBackground = popover.$popover.css('background-color');

            if ( (currentPosition === 'below-left') || (currentPosition === 'below-center') || (currentPosition === 'below-right') ) {
                popover.$arrow.css({
                                    left: arrowLeft + 'px',
                                    bottom: '100%',
                                    //borderColor: 'transparent transparent ' + popoverBackground + ' transparent',
                                });

                adjustedTop = parseInt(popover.$popover.css('top')) + arrowHeight;
                popover.$popover.css({top: adjustedTop+'px'});

                popover.$arrow.addClass('up-arrow');

                validPosition = true;
            }
            else if ( (currentPosition === 'above-left') || (currentPosition === 'above-center') || (currentPosition === 'above-right') ) {
                popover.$arrow.css({
                                    left: arrowLeft + 'px',
                                    bottom: (2*-arrowHeight) + 'px',
                                    //borderColor: popoverBackground + ' transparent transparent transparent',
                                });

                adjustedTop = parseInt(popover.$popover.css('top')) - arrowHeight;
                popover.$popover.css({top: adjustedTop + 'px'});

                popover.$arrow.addClass('down-arrow');

                validPosition = true;
            }
            else if (currentPosition === 'inline-left') {
                popover.$arrow.css({
                                    left: 'auto',
                                    right: (2*-arrowHeight) + 'px',
                                    bottom: '50%',
                                    transform: 'translate(0, 50%)',
                                    //borderColor: 'transparent transparent transparent ' + popoverBackground,
                                });

                adjustedLeft = parseInt(popover.$popover.css('left')) - arrowHeight;
                popover.$popover.css({left: adjustedLeft + 'px'});

                popover.$arrow.addClass('right-arrow');

                validPosition = true;
            }
            else if (currentPosition === 'inline-right') {
                popover.$arrow.css({
                                    left: -arrowHeight + 'px',
                                    bottom: '50%',
                                    transform: 'translate(0, 50%)',
                                    //borderColor: 'transparent ' + popoverBackground + ' transparent transparent',
                                });

                adjustedLeft = parseInt(popover.$popover.css('left'), 10) + arrowHeight;
                popover.$popover.css({left: adjustedLeft + 'px'});

                popover.$arrow.addClass('left-arrow');

                validPosition = true;
            }

            if (validPosition) {
                popover.$popover.append(popover.$arrow);

                adjustedHeight = parseInt(popover.$popover.css('max-height'), 10) - 5;

                popover.$popover.css({'max-height': adjustedHeight + 'px'});
            }
        }
    };

    priv.removeArrow = function _removeArrow (popover) {
        if (popover.$arrow) {
            popover.$arrow.remove();

        }
    };

    priv.resetInnerContentHeight = function _resetInnerContentHeight (popover) {
        var popoverBody = popover.$popover.find('.'+CLASSES.popoverBody);

        popoverBody.css({
                        maxHeight: '',
                        height: '',
                    });
    };

    priv.setInnerContentHeight = function _setInnerContentHeight (popover) {
        var popoverBody = popover.$popover.find('.'+CLASSES.popoverBody);
        var popoverHeight = popover.$popover.height();

        popoverBody.css({
                        maxHeight: popoverHeight + 'px',
                        height: popoverHeight + 'px',
                    });
    };

    priv.setFullSize = function _setFullSize (popover) {
        var maxWidth = $(window).width() - MOBILE_PADDING * 2;
        var maxHeight = $(window).height() - MOBILE_PADDING * 2;

        popover.$popover.css({height: maxHeight, width: maxWidth});
    };

    priv.resetSize = function _resetSize (popover) {
        var defaultWidth = 'auto';
        var defaultHeight = 'auto';

        if (popover.config.display.css.width) {
            defaultWidth = popover.config.display.css.width;
        }

        if (popover.config.display.css.height) {
            defaultHeight = popover.config.display.css.height;
        }

        popover.$popover.css({
                            width: defaultWidth,
                            height: defaultHeight,
                        });
    };

    priv.resetMaxHeight = function _resetMaxHeight (popover) {
        var defaultHeight = '';

        if (popover.config.display.css.height) {
            defaultHeight = popover.config.display.css.height;
        }

        popover.$popover.css({
                            maxHeight: defaultHeight
                        });
    };

    /**
     * Disables scrolling on the page
     *
     * If the popover has scrollable content, when you reach the bottom or top of the popover's content and keep scrolling the body itself will begin scrolling. These styles will prevent that from happening which means the user won't lose their place.
     */
    priv.disablePageScrolling = function _disablePageScrolling () {
        document.body.style.height = '100%';
        document.body.style.overflow = 'hidden';
    };

    /**
     * Allows the page body to scroll
     */
    priv.enablePageScrolling = function _enablePageScrolling () {
        document.body.style.removeProperty('height');
        document.body.style.removeProperty('overflow');
    };

    ////////////
    // Events //
    ////////////

    // Handles clicks away from the popover
    priv.onBodyClick = function _onBodyClick (evt, popover) {
        var $target = $(evt.target);

        // Make sure the user didn't click in/on the toggle button, or on the popover itself
        if (evt.target !== popover.$button.get(0) && !$target.closest('.' + CLASSES.popover + ', .' + CLASSES.toggle).length) {
            if (popover.isShown) {
                priv.hidePopover(popover);
            }
        }
    };

    // Handles the window resize event
    priv.onWindowResize = function _onWindowResize (evt, popover) {
        if (popover.isShown) {
            if (popover.config.hideOnResize) {
                priv.hidePopover(popover);
            }
            // Check if the popover is now outside the viewport and was configured to hide in this scenario
            else if (popover.config.hideOnScroll === true && !withinviewport(popover.$popover.get(0))) {
                priv.hidePopover(popover);
            }
            else {
                priv.positionPopover(popover);
            }
        }
    };

    // Watches for the escape key to be pressed and hides any open popover with the relevant setting
    priv.onWindowKeyup = function _onWindowKeyup (evt, popover) {
        // Escape key was pressed
        if (popover.isShown && evt.keyCode === 27) {
            priv.hidePopover(popover);
            if (popover.$button && popover.$button[0]) {
                popover.$button[0].focus();
            }
        }
    };

    priv.onParentScroll = function _onParentScroll (evt, popover) {
        // Popover is currently visible and it's supposed to hide when scrolling
        if (popover.isShown && popover.config.hideOnScroll) {
            // Hide popover upon any scroll event
            if (popover.config.hideOnScroll === 'always') {
                priv.hidePopover(popover);
            }
            // Hide popover only if it's (at least partially) outside the viewport
            else if (!withinviewport(popover.$popover.get(0))) {
                priv.hidePopover(popover);
            }
        }
    };

    //////////////////////////////////////////
    // Expose public properties and methods //
    //////////////////////////////////////////

    Popover.defaults = Popover.prototype.defaults;

    Popover.version = VERSION;

    // Define jQuery plugin
    window.$.fn.popover = function $_fn_popover (options, calback) {

        return this.each(function $_fn_popover_each () {
            new Popover(this, options).init();
        });
    };

    window.$.popover = function $_popover (toggler, options) {
        return new Popover(toggler, options).init();
    };
});

/*global feta */
define('tooltip',['jquery', 'popover'], function ($, popover) {
    ///////////////
    // Constants //
    ///////////////
    var VERSION = '0.0.1';

    var NAMESPACE = 'tooltip';

    var _priv = {};
    var _events = {};

    _priv.createTooltip = function(tooltip) {

        var tooltipSource = tooltip.getAttribute('data-tooltip-source');
        var tooltipContentContainer = tooltip.querySelector('.cui-hide-from-screen');

        var firstHeader = false;

        var newTooltip = document.createElement('div');
            newTooltip.classList.add('emp-tooltip-itag');

        if (tooltipSource) {

            var cloneSource = document.querySelector('#' + tooltipSource);

            if (cloneSource) {

                cloneSource = cloneSource.cloneNode(true);

                while (cloneSource.firstChild) {

                    var child = cloneSource.firstChild;

                    if (child.nodeType === 1) {


                        if (child.nodeName !== "HEADER") {

                            newTooltip.appendChild(child);
                        }
                        else {
                            if (!firstHeader) {
                                firstHeader = true;
                            }
                            else {
                                newTooltip.appendChild(child);
                            }
                        }

                    }

                    cloneSource.removeChild(cloneSource.firstChild);
                }

                return newTooltip;

            }
            else {

            }

        }  
        else if(tooltipContentContainer) {

            while (tooltipContentContainer.firstChild) {

                var childContent = tooltipContentContainer.firstChild;

                var cloneNode = false;

                if (childContent.nodeType === 1) {

                    if (childContent.nodeName !== "HEADER") {

                        cloneNode = childContent.cloneNode(true);

                        newTooltip.appendChild(cloneNode);
                    }
                    else {

                        // if (!firstHeader) {
                        //     firstHeader = true;
                        // }
                        // else {

                        //     cloneNode = childContent.cloneNode(true);

                        //     newTooltip.appendChild(cloneNode);
                        // }
                    }

                }

                tooltipContentContainer.removeChild(tooltipContentContainer.firstChild);
            }

            return newTooltip;

        }
        else{

        }

    };

    _events.click = function _clicked_tooltit(evt) {

        evt.stopPropagation();

        var defualts = {
            html: '',
            display: {
                css: {
                },
                className: '',
                offset: {
                    top: -5,
                    left: 0,
                },
            },
            location: 'below-right',
            hideOnResize: false,
            hideOnEscape: true,
            gainFocus: true,
            isModal: true,
            useArrow: true,
            showOnCreate: false,
            resizeMobile: false,
        };

        var tooltip = evt.data.tooltip;
        var tooltipContents = _priv.createTooltip(tooltip.tooltip);

        if (!tooltip.popover) {

            if (tooltip.tooltip.getAttribute('data-tooltip-source') && !tooltip.tooltip.classList.contains('emp-page-tooltips')) {

                defualts.html = tooltipContents;

                tooltip.popover = $.popover(tooltip.$tooltip, defualts);

                tooltip.popover.show(tooltip);

            }else{

                defualts.html = tooltipContents;

                tooltip.popover = $.popover(tooltip.$tooltip, defualts);

                tooltip.popover.show(tooltip);
            }

        }
        else{

            //console.log("Tooltip already created!");
        }

    };

    /////////////////
    // Constructor //
    /////////////////

    var Tooltip = function _Tooltip (elem, options) {
        // Create both a jQuery copy and a regular DOM copy of the element
        if (elem instanceof $) {
            this.$tooltip = elem;
            this.tooltip = elem.get(0);
        }
        else if (elem instanceof HTMLElement) {
            this.tooltip = elem;
            this.$tooltip = $(elem);
        }
        else {
            //FIXME: Not sure if these two lines are a good idea or not. I just want to prevent things from failing when the tooltip is not associated with a link. (CP 8/8/16)
            this.$tooltip = $();
            this.tooltip = document.createElement('a');
        }

        // Store the options
        this.options = options;

        // Extract data attribute options
        this.metadata = this.$tooltip.data('tooltip-options');

        return this;
    };

    //////////////////////
    // Plugin prototype //
    //////////////////////

    Tooltip.prototype = {};

    // Default user options
    // This mirrors the config for the popover component
    Tooltip.prototype.defaults = {};

    /**
     * Initializes the plugin
     * May be called multiple times
     */
    Tooltip.prototype.init = function _Tooltip_init () {

        var tooltip = this;

        tooltip.$tooltip.on('click', { tooltip: tooltip }, _events.click);

        // Return this instance of the plugin
        return tooltip;
    };

    /**
     * Hides the tooltip
     *
     * @param   {function}  callback         Optional function to run after closing the tooltip. It will receive the Tooltip instance as an argument.
     */
    Tooltip.prototype.hide = function _Tooltip_hide (callback) {
        var tooltip = this;

        tooltip.popover.hide(this);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Display the tooltip
     *
     * @param   {function}  callback  Optional function to run after closing the tooltip. It will receive the Tooltip instance as an argument.
     */
    Tooltip.prototype.show = function _Tooltip_show (callback) {
        var tooltip = this;

        tooltip.popover.show(this);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * (Re)position the tooltip
     *
     * @param   {function}  callback  Optional function to run after closing the tooltip. It will receive the Tooltip instance as an argument.
     */
    Tooltip.prototype.position = function _Tooltip_position (callback) {
        var tooltip = this;

        tooltip.popover.position(this);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Destroy the tooltip
     *
     * @param   {function}  callback  Optional function to run after closing the tooltip. It will receive the Tooltip instance as an argument.
     */
    Tooltip.prototype.destroy = function _Tooltip_destroy (callback) {
        var tooltip = this;

        tooltip.popover.hide(this, true);

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(tooltip);
        }

        return tooltip;
    };

    //////////////////////////////////////////
    // Expose public properties and methods //
    //////////////////////////////////////////

    Tooltip.defaults = Tooltip.prototype.defaults;

    Tooltip.version = VERSION;

    // Define jQuery plugin
    window.$.fn.tooltip = function $_fn_tooltip (options) {
        return this.each(function $_fn_tooltip_each () {
            var tooltip = new Tooltip(this, options).init();

        });
    };

    window.$.tooltip = function $_tooltip (toggler, options) {
        return new Tooltip(toggler, options).init();
    };
});

define('validation',['jquery', 'kind'], function ($, kind) {

    // The rules object
    var _rules = {};

    // Required Field
    // Test that a field has contents other than a space
    _rules.required = {
        test: /[^\s-]/,
        errorMsg: "This field is required.",
        code: "UI000"
    };

    _rules.requiredFieldSet = {
        test: function($field) {

            var $fieldSetInputs = $field.find('input[required], input[aria-required="true"]');

            for  (var fsi = 0, fsiLen = $fieldSetInputs.length; fsi < fsiLen; fsi++) {

                var field = $fieldSetInputs[fsi];

                if (field.checked) {
                    return true;
                }
            }

            return false;
        },
        errorMsg: "This field is required.",
        code: "UI000"
    };

    _rules.isNumeric = {
        test: /^$|^[0-9,\.\s]+$/,
        errorMsg: "This field can only contain numbers.",
        code: "UI001"
    };

    _rules.isAlpha = {
        test: /^$|^[A-Za-z\s]+$/,
        errorMsg: "This field can only contain letters and spaces.",
        code: "UI002"
    };

    _rules.isAlphaNumeric = {
        test: /^$|^[A-Za-z0-9\s]+$/,
        errorMsg: "This field can only contain letters, spaces and numbers.",
        code: "UI003"
    };

    _rules.isStrictlyAlphaNumeric = {
        test: /^$|^[A-Za-z0-9]+$/,
        errorMsg: "This field can only contain letters and numbers; without spaces.",
        code: "UI004"
    };

    _rules.isEmail = {
        test: /^$|^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,
        errorMsg: "This field's value must be a valid email address.",
        code: "UI005"
    };

    _rules.checkMaxLength = {
        test: function _checkMaxLength($field, maxLength) {

            var defaultLength = 15;

            // check to see if a length was implied by the old function method
            if (maxLength === undefined) {

                // No maxLength provided via a function parameter, so check for a input attribute
                var inputAttr = $field.attr('data-max-length');

                if (inputAttr !== null || inputAttr !== undefined) {

                    if (!isNaN(inputAttr)) {

                        // Convert input value to a number field.
                        if (typeof inputAttr === "string") {
                            inputAttr = parseInt(inputAttr);
                        }

                        // Use the value provided
                        maxLength = inputAttr;

                    }
                    else {

                        console.error("Validation when attempting to check maxLength attribute of: " + $field.attr('id'));

                        return false;
                    }

                }
                else {

                    // No input attribute provided fall back to default
                    maxLength = defaultLength;

                    // Add this value because its missing
                    $field.attr('data-max-length', defaultLength);

                }
            }
            else {

                // Check if the provided
                if (!isNaN(maxLength)) {

                    // Convert input value to a number field.
                    if (typeof maxLength === "string") {
                        maxLength = parseInt(maxLength.trim());
                    }

                    // Add this value because its missing
                    $field.attr('data-max-length', maxLength);

                }
                else {

                    console.error("MaxLength validation check was passed a non-numerical value: " + $field.attr('id'));

                    return false;
                }

            }

            if ($field.val().length <= maxLength) {

                return true;

            } else {

                return false;
            }
        },
        errorMsg: function _max_length_error($field, fieldID) {

            var maxLimit = $field.attr('data-max-length');
            var errorMsg = "This field's value cannot exceed + characters.";
            // code was : UI006

            return errorMsg.replace('~',fieldID).replace('+',maxLimit);

        }
    };

    _rules.checkMinLength = {
        test: function _checkMaxLength($field, minLength) {

            var defaultLength = 0;

            // check to see if a length was implied by the old function method
            if (minLength === undefined) {

                // No maxLength provided via a function parameter, so check for a input attribute
                var inputAttr = $field.attr('data-max-length');

                if (inputAttr !== null || inputAttr !== undefined) {

                    if (!isNaN(inputAttr)) {

                        // Convert input value to a number field.
                        if (typeof inputAttr === "string") {
                            inputAttr = parseInt(inputAttr);
                        }

                        // Use the value provided
                        minLength = inputAttr;

                    }
                    else {

                        console.error("Validation when attempting to check minLength attribute of: " + $field.attr('id'));

                        return false;
                    }

                }
                else {

                    // No input attribute provided fall back to default
                    minLength = defaultLength;

                    // Add this value because its missing
                    $field.attr('data-min-length', defaultLength);

                }
            }
            else {

                // Check if the provided
                if (!isNaN(minLength)) {

                    // Convert input value to a number field.
                    if (typeof maxLength === "string") {
                        minLength = parseInt(minLength.trim());
                    }

                    // Add this value because its missing
                    $field.attr('data-min-length', minLength);

                }
                else {

                    console.error("MinLength validation check was passed a non-numerical value: " + $field.attr('id'));

                    return false;
                }

            }

            if ($field.val().length >= minLength) {

                return true;

            } else {

                return false;
            }
        },
        errorMsg: function _min_length_error($field, fieldID) {

            var minLimit = $field.attr('data-min-length');
            var errorMsg = "This field's value must be at least + characters long";
            // code was UI007

            return errorMsg.replace('~',fieldID).replace('+', minLimit);

        }
    };

    _rules.isZero = {
        test: function _is_zero($field) {

            var value = $field.val();

            // First test it to see if the field is numeric
            var numericCheck = _rules.isNumeric.test.test(value);

            if (numericCheck) {

                if (value === "0" || value === 0) {
                    return false;
                } else {
                    return true;
                }

            }
            else {

                return false;
            }

        },
        errorMsg: "This field's value must be a number and can not be zero",
        code: "UI008"
    };

    _rules.isCurrency = {
        test: function _is_curreny($field) {

            if ($field.val().length) {

                var origFieldVal = $field.val();

                var currencyTest = /^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{0,2})?$/;

                var result = currencyTest.test(origFieldVal);

                if (!result) {

                    var noCommanVal = origFieldVal.replace(/\,/g, '');

                    result = currencyTest.test(noCommanVal);

                    return result;

                }
                else {

                    return true;
                }

            }
            else {

                return true;
            }

        },
        errorMsg: "This field's value must be a currency value.",
        code: "UI009"
    };

    _rules.validateName = {
        test: function _validate_name($field) {

            var value = $field.val();
            var val1, val2;

            // First test it to see if the field is numeric
            var alphaCheck = _rules.isAlphaNumeric.test.test(value);

            if (alphaCheck) {

                // Check to see if the name enter started with a space.
                if (value.substring(0,1) === " " && value.length > 1) {

                    value = value.trim();
                }

                var rep2 = /[A-Za-z]*([a-z.\-\']|[0-9\-\'])*\s*[A-Za-z0-9\-\'.]*/;
                var rep = /[^A-Za-z0-9\s\-\'.]+/;
                var test = value.match(rep);
                var test2 = value.match(rep2);

                if (test === null && test2 !== null) {

                    // Process and correct format even if it doesnt need to be
                    val1 = value.substring(0,1);
                    val1 = val1.toUpperCase();
                    val2 = value.substring(1);
                    val2 = val2.toLowerCase();

                    // Put the two together
                    value = val1 + val2;

                    $field.val(value);

                    return true;
                }
                else {

                    return false;
                }

            }
            else {

                return false;
            }

        },
        errorMsg: "Names may only be contain letters, numbers, and spaces",
        code: "UI010"
    };

    _rules.dateValidator = {
        test: function _date_validator($field) {
            var dateregex = /^[0-9]+[0-9]+\/+[0-9]+[0-9]+\/+[0-9]+[0-9]+[0-9]+[0-9]$/;
            //var dateregex = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
            var checkstr = "0123456789";
            var DateValue = $field.val();
            var DateTemp = "";
            var seperator = "/";
            var day;
            var month;
            var year;
            var leap = 0;
            var i;

            if (DateValue.match(dateregex) || DateValue === "") {
            }
            else {
                //alertMe('GL014', field);
                return "date";
            }

            //Delete all chars except 0..9 for the date value
            for (i = 0; i < DateValue.length; i++) {

                if (checkstr.indexOf(DateValue.substr(i,1)) >= 0) {

                  DateTemp = DateTemp + DateValue.substr(i,1);
                }
            }

            DateValue = DateTemp;

            //Get month value (2 digits)
            month = DateValue.substr(0,2);
            //Get the day value (2 digits)
            day = DateValue.substr(2,2);
            // Checks to make sure year entered is between 1900-2100, otherwise triggers error code GL021
            year = DateValue.substr(4,4);

            if (DateValue === "") {

                return true;
            } //Accept Last possible Valid Date
            else if ((month == 12) && (year == 9999) && (day == 31)) {

                return true;

            } //If the month is greater than 12 or less than 1, trigger error code GL022
            else if ( (month > 12) || (month < 1) ) {

                //alertMe("GL011", field);
                return "month";

            } //If the day is less than 1, trigger error message GL023
            else if ( (day < 1) || (day > 31) ) {

                //alertMe("GL012", field);
                return "day";

            } //If the year is greater than 2100 or less than 1800, trigger error code GL022
            else if ((year < 1800) || (year > 2100)) {

                //alertMe("GL013", field);
                return "year";
            }

            //Validation for leap-year / february / day. If it catches this, trigger error code GL022
            if ( ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0) ) {
                leap = 1;
            }

            if ((month === 2) && (leap === 1) && (day > 29)) {
                return "day";
            }

            if ((month === 2) && (leap !== 1) && (day > 28)) {
                return "day";
            }

            //Validation of other months . If date is greater than 31, trigger error message GL020
            if ((day > 31) && ((month === "01") || (month === "03") || (month === "05") || (month === "07") || (month === "08") || (month === "10") || (month === "12"))) {

                //alertMe("GL057", field);
                return "day";
            }

            if ((day > 30) && ((month === "04") || (month === "06") || (month === "09") || (month === "11"))) {

                //alertMe("GL057", field);
                return "day";

            } //If all conditions are valid, return true.
            else {
                return true;
            }
        },
        errorMsg: {
            "day": "Must be a valid day.",
            "month": "Must be a valid month.",
            "year": "Enter year between 1800-2100.",
            "date": "Dates must be in MM/DD/YYYY format."
        },
        // codes, day - UI011, month - UI012, year - UI013, date - UI014
    };

    _rules.validateListSize = {
        test: function _validate_list_size($field, num) {

            var defaultSize = 5;

            var selected = $field.val();
            var limitAttr = $field.attr('data-size-limit');

            // Check to see if we need to look in other places
            if (typeof num !== "number") {

                if (typeof num === "string" && !isNaN(num)) {

                    num = parseInt(num);
                }
                else if (limitAttr !== undefined && limitAttr !== null) {

                    if (!isNaN(limitAttr)) {

                        if (typeof limitAttr === "string") {
                            limitAttr = parseInt(limitAttr);
                        }

                        num = limitAttr;
                    }

                }
                else {

                    // Fall back to the default multiple select size.
                    num = defaultSize;
                }

            }

            // Set the field size attribute just in case. It is also used by the error control
            $field.attr('data-size-limit', num);

            if (selected === undefined || selected === null) {
                selected = [];
            }

            if (selected.length <= num) {
                return true;
            }
            else {
                return false;
            }

        },
        errorMsg: function _limit_size_error($field, fieldID) {

            var sizeLimit = $field.attr('data-size-limit');
            var errorMsg = "Limit the selection to + or less.";
            // code: UI015

            return errorMsg.replace('~',fieldID).replace('+', sizeLimit);

        }
    };

    _rules.checkMaxAllowed = {
        test: function _check_max_allowed($field, maxAllowed) {

            var defaultMax = 1000;

            // Pull the field value
            var value = $field.val();
            var maxAttr = $field.attr('data-max-allowed');
            var numericCheck = _rules.isNumeric.test.test(value);

            // Check to make sure the number is a value and not empty first
            if (numericCheck) {

                if (value.length === 0) {
                    return true;
                }

                value = parseInt(value);

            } else {

                return false;
            }

            // Check to or determine the proper maximum value
            if (typeof maxAllowed !== "number") {

                if (typeof maxAllowed === "string" && !isNaN(maxAllowed)) {

                    maxAllowed = parseInt(maxAllowed);
                }
                else if (maxAttr !== undefined && maxAttr !== null) {

                    if (!isNaN(maxAttr)) {

                        if (typeof maxAttr === "string") {
                            maxAttr = parseInt(maxAttr);
                        }

                        maxAllowed = maxAttr;
                    }

                }
                else {

                    // Fall back to the default multiple select size.
                    maxAllowed = defaultMax;
                }

            }

            // Set the field size attribute just in case. It is also used by the error control
            $field.attr('data-max-allowed', maxAllowed);

            if (value <= maxAllowed) {
                return true;
            } else {
                return false;
            }


        },
        errorMsg: function _check_max_allowed_error($field, fieldID) {

            var maxAllowed = $field.attr('data-max-allowed');
            var errorMsg = "This field's value must not exceed +.";
            // code: UI016

            return errorMsg.replace('~',fieldID).replace('+', maxAllowed);

        }
    };

    _rules.isPhone = {
        test: function _is_phone($field) {

            var i, temp;
            var num = $field.val();
            var alphaRegex = /[a-zA-Z]/g;
            var returnString = '';

            // No value entered
            if (num.length < 1 || num === "") {
                return true;
            }

            // Remove non-digits, capitalize letters
            for (i=0; i<num.length; i++) {
                num = num.replace(/\W/,'');
                num = num.replace(/\_/,'');

                // Remove ()-.
                num = num.replace(/\-/, '');
                num = num.replace(/\(/, '');
                num = num.replace(/\)/, '');
                num = num.replace(/\./, '');

                if (alphaRegex.test(num.substr(i,1))) {
                    temp = num;
                    num = "" + temp.substr(0,i) + temp.substr(i,1).toUpperCase() + temp.substr(i+1);
                    i--;
                }
            }

            // Some 11-digit numbers are still valid
            if (num.length == 11) {

                // If first digit is 1, remove it
                if (num.substr(0,1) == "1") {

                    //rebuild number without 1
                    temp = num;
                    num = "" + temp.substr(1);
                }
                // 11 digits but not beginning with 1
                else {

                    return false;
                }
            }

            // Check the length
            if (num.length == 10) {

                // Check for all the exceptions:
                // =============================

                // Make sure first three digits are numbers (area code)
                if ( alphaRegex.test(num.substr(0,3)) || num.substr(0,1) === "0" || num.substr(0,1) === "1"  ) {

                    return false;
                }
                // Exchange cannot begin with 1 or 0
                else if(num.substr(3,1) === "0" || num.substr(3,1) === "1") {

                    return false;
                }
                // If the exchange is 555, the post code must not be between 0100 and 0199
                else if(num.substr(3,3) === "555" && parseInt(num.substr(6,1)) === 0 && parseInt(num.substr(7,3)) < 200 && parseInt(num.substr(7,3)) >= 100) {

                    return false;
                }
                // Exchange cannot end with 11 (e.g., 911, 411, 211)
                else if(num.substr(4,2) === "11") {

                    return false;
                }
                else {
                    $field.val("(" + num.substr(0,3) + ")" + num.substr(3,3) + "-" + num.substr(6,4));
                    return true;
                }
            }
            else {

                return false;
            }

            return false;
        },
        errorMsg: "This field's value must be a valid phone number.",
        code: "UI017"
    };

    _rules.isForeignPhone = {

        test: function _is_foreign_phone($field) {

            var i;
            var num = $field.val();

            // No value entered
            if (num.length < 1 || num === "") {
                return true;
            }

            // Remove non-digits
            for (i=0; i<num.length; i++) {
                num = num.replace(/\W/,'');
                num = num.replace(/\_/,'');
            }

            //check length
            if (num.length > 9 && num.length < 16) {

                return true;
            }
            else {

                return false;
            }
        },
        errorMsg: "This field's value must be a valid foreign phone number.",
        code: "UI018"
    };

    _rules.checkSpecialChars = {
        test: function _check_special_chars($field, maxLength, validChars, enter) {

            var val = $field.val();

            if (val.length === 0) {
                return true;
            }

            // Check to see if maxlength is a number or not
            if (isNaN(maxLength)) {

                // Max length is not defined so we will assume its missing and shift the values
                enter = validChars;
                validChars = maxLength;

                // Add default of 1000 characters.
                maxLength = 1000;

            }

            $field.attr('data-max-allowed', maxLength);

            // Loop through and manually check each character
            for (var i = 0, len = val.length, valid=validChars; i < len; i++) {

                // Get char
                var substr = val.substring(i,i+1);

                if (valid.indexOf(substr) === -1) {

                    if(substr < "0" || substr > "9" ) {

                        if (substr < "a" || substr > "z") {

                            if (substr < "A" || substr > "Z") {

                                if (enter === "Y" || enter === "y" || enter ===  true) {

                                    if (substr !== '\r' && substr != '\n') {

                                        return false;
                                    }
                                }
                                else {

                                    return false;
                                }
                            }
                        }
                    }
                }
            }

            var checkMaxLength = _rules.checkMaxLength.test($field, maxLength);

            if (checkMaxLength) {

                return true;
            }

            return false;

        },
        errorMsg: function _check_special_chars_error($field, fieldID) {

            var maxAllowed = $field.attr('data-max-allowed');
            var errorMsg = "This field's value must not exceed +.";
            // code: UI019

            return errorMsg.replace('~',fieldID).replace('+', maxAllowed);
        }
    };

    _rules.isSSN = {
        test: function _is_ssn($field) {

            var val = $field.val().trim();

            if(val === null || val.length === 0) {

                return true;
            }

            var strMatch = /^[0-9]+[0-9]+[0-9]+\-+[0-9]+[0-9]+\-+[0-9]+[0-9]+[0-9]+[0-9]$/;

            if(val.match(strMatch) !== null) {

                if (val.length === 11) {

                    return true;
                } else {

                    return false;
                }
            }
            else {

                return false;
            }
        },
        errorMsg: "This field's value must be a valid solcial security number (SSN)",
        code: "UI020"
    };

    _rules.isEIN = {
        test: function _is_esn($field) {

            var val = $field.val().trim();

            if(val === null || val.length === 0) {
                return true;
            }

            var strMatch = /^[0-9]+[0-9]+\-+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]$/;

            if(val.match(strMatch) !== null) {
                return true;
            }
            else {
                return false;
            }

        },
        errorMsg: "This field's value must be a valid EIN.",
        code: "UI021"
    };

    _rules.isDosId = {
        test: function _is_dos_id($field) {

            var val = $field.val().trim();

            if(val === null || val.length === 0) {
                return true;
            }

            var strMatch = /^[dD]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]+[0-9]$/;

            if(val.match(strMatch) !== null) {
                return true;
            }
            else {
                return false;
            }

        },
        errorMsg: "DOS IDs nust be a 'D' followed by 8 digits.",
        code: "UI022"
    };

    _rules.validateZip = {
        test: function _validate_zip($field) {
            //validate zip

            var val = $field.val().trim();
            var valid = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-";
            var hyphencount = 0;

            //This ensures that 5 or 10 characters are entered, otherwise an error message will display
            if(val.length === 0) {

                return true;
            }
            else if (val.length !== 5 && val.length !== 10 && val.length !== 6) {

                return "zip";
            }

            //Checks for valid characters in the zip code field
            for (var i=0; i < val.length; i++) {

                temp = "" + val.substring(i, i+1);

                if (temp == "-") hyphencount++;

                if (valid.indexOf(temp) == "-1") {

                    return "char";
                }
            }

            if (hyphencount >= 1) {

                var zipSplit = val.split('-');

                if (zipSplit[0].length !== 5 || zipSplit[1].length !== 4) {

                    return "format";
                }

            }

            return true;

        },
        errorMsg: {
            "zip": "This field's value must be a valid zip code.",
            "char": "This field's value must be a valid zip code.",
            "format": "Zip codes must be in #####-#### format."
        }
        // codes: zip - UI023, char - UI024, format - UI025
    };

    _rules.isWebSite = {
        test: function _is_website($field) {

            var site = $field.val().trim();
            var webSiteRegex = /^(http[s]?:\/\/)?([a-zA-Z0-9\-*]+\.)+([a-zA-Z]{2,4})(\/?$|\/[\w\.\-\#@\$=&\:]+)*$/;

            // No value entered
            if (site.length < 1 || site === "") {
                return true;
            }

            // Check the address for valid syntax and length
            if (webSiteRegex.test(site) && site.length < 257) {
                return true;
            }
            else {
                return false;
            }
        },
        errorMsg: "This field's value must be a valid website URL.",
        code: "UI026"
    };

    _rules.isCurrencySpecial = {
        test: function _is_currency_special($field) {

            var val = $field.val().trim();
            var regExp = /^(\-?\d+((\.\d{1,2})|\.)?)?$/;

            if (!regExp.test(val)) {

                return false;
            }
            else {

                // Check and return true if there is no value.
                if (val.length === 0) {
                    return true;
                }

                if (/\.\d$/.test(val)) {
                    val = val + '0';
                }
                if (/\.$/.test(val)) {
                    val = val + '00';
                }
                if (!(/\./.test(val))) {
                    val = val + '.00';
                }

                // Ensure that the value with decimals is not too large for the field
                var maxLength = $field.attr('maxlength');

                // incase maxlength is not defined on the input, default it to 23 characters.
                if (maxLength === undefined || maxLength === null) {
                    maxLength = 23;
                }

                if (val.length <= maxLength) {

                    // Updat ethe field
                    $field.val(val);
                    return true;
                }
                else {

                    return false;
                }

            }

        },
        errorMsg: "This field's value must be a valid special currency.",
        code: "UI027"
    };

    _rules.isNumericWithDecimal = {
        //test: /^$|^((\d+(\.\d+)?)|(\.\d+))?$/, // Changed on 2/6/2018 to support when user enters in commas and negative signs
        test: function() {

            var val = $field.val().trim();

            if (val.length !== 0) {

                var regExp = /^-?[0-9]{1,3}(,?[0-9]{3})*(\.[0-9]+)*$/;

                if (regExp.test(val)) {
                    return true;
                }
                else {

                    if (val.charAt(0) === ".") {

                        val = 0 + val;

                        if (regExp.test(val)) {
                            return true;
                        }
                        else {
                            return false;
                        }

                    }
                    else {

                        return false;
                    }
                }
            }

            return true;
        },
        errorMsg: "This field's value must be in proper decimal format.",
        code: "UI028"
    };

    _rules.isWithinRange = {
        // TODO: inline min and max with data-range-min and data-range-max
        test: function _is_within_range($field, min, max) {

            var minVal, maxVal;

            var val = parseFloat($field.val().trim(), 10);

            if (isNaN(val) || arguments.length != 3) {

                return "setup";
            }

            if (val.toString.length < 1) {

                return "range";
            }

            // Get Min value if possible
            if (typeof min === "string" && min.indexOf("document") !== -1) {
                var minName = min.split('.')[2];
                min = $('[name="' + minName + '"]');

                if (min.length === 0) {
                    minVal = false;
                }
                else {
                    minVal = parseFloat(min.val(), 10);
                }
            }
            else if (!isNaN(min)) {
                minVal = false;
            }
            else {
                minVal = parseFloat(min.val(), 10);
            }

            // Get Max value if possible
            if (typeof max === "string" && max.indexOf("document") !== -1) {
                var maxName = max.split('.')[2];
                max = $('[name="' + maxName + '"]');

                if (max.length === 0) {
                    maxVal = false;
                }
                else {
                    maxVal = parseFloat(max.val(), 10);
                }
            }
            else if (!isNaN(max)) {
                maxVal = false;
            }
            else {
                maxVal = parseFloat(max.val(), 10);
            }

            $field.attr('data-min-val', minVal);
            $field.attr('data-max-val', maxVal);

            // Check to make sure both min and max are not both missing.
            if (isNaN(minVal) && isNaN(maxVal)) {

                return "setup";
            }

            // Check to make sure the min is smaller than the max
            if (minVal > maxVal) {
                return "invalidRange";
            }

            // Check to see if the provided value is bigger than the known max
            if (isNaN(minVal)) {

                if (val > maxVal) {
                    return "overMax";
                }

                return true;
            }

            // Check to see if the provided value is less than the known min
            if (isNaN(maxVal)) {

                if (val < minVal) {
                    return "underMin";
                }

                return true;
            }

            // Both upper and lower limits specified
            if (!(minVal <= val && val <= maxVal)) {

                return "range";
            }
            else {

                return true;
            }

        },
        errorMsg: {
            "range": function _range_error($field){

                var errorMsg = "Value must be within + and -.";

                var minVal = $field.attr('data-min-val');
                var maxVal = $field.attr('data-max-val');

                return errorMsg.replace('+', minVal).replace('-', maxVal);
            },
            "setup": "Required parameters are missing to properly validate value.",
            "invalidRange": "Minimum range value is larger than defined maximum.",
            "overMax": function _overMax_error($field){

                var errorMsg = "Value must not exceed +.";

                var maxVal = $field.attr('data-max-val');

                return errorMsg.replace('+', maxVal);

            },
            "underMin": function _underMin_error($field){

                var errorMsg = "Value must be larger than +";

                var minVal = $field.attr('data-min-val');

                return errorMsg.replace('+', minVal);
            }
        }
        //codes: range - UI029, setup - UI030, invalidRange - UI031, overMax - UI032, underMin - UI033
    };

    _rules.isLengthWithinRange = {
        test: function _is_length_within_range($field, min, max) {

            var minVal, maxVal;

            var val = $field.val().trim().length;

            if (isNaN(val) || arguments.length != 3) {

                return "setup";
            }

            if (val.toString.length < 1) {

                return "setup";
            }

            // Get Min value if possible
            if (typeof min === "string" && min.indexOf("document") !== -1) {
                var minName = min.split('.')[2];
                min = $('[name="' + minName + '"]');

                if (min.length === 0) {
                    minVal = false;
                }
                else {
                    minVal = parseInt(min.val());
                }
            }
            else if (!isNaN(min)) {
                minVal = false;
            }
            else {
                minVal = parseInt(min.val());
            }

            // Get Max value if possible
            if (typeof max === "string" && max.indexOf("document") !== -1) {
                var maxName = max.split('.')[2];
                max = $('[name="' + maxName + '"]');

                if (max.length === 0) {
                    maxVal = false;
                }
                else {
                    maxVal = parseInt(max.val());
                }
            }
            else if (!isNaN(max)) {
                maxVal = false;
            }
            else {
                maxVal = parseInt(max.val());
            }

            $field.attr('data-min-val', minVal);
            $field.attr('data-max-val', maxVal);

            // Check to make sure both min and max are not both missing.
            if (isNaN(minVal) && isNaN(maxVal)) {

                return "setup";
            }

            // Check to make sure the min is smaller than the max
            if (minVal > maxVal) {
                return "invalidRange";
            }

            // Check to see if the provided value is bigger than the known max
            if (isNaN(minVal)) {

                if (val > maxVal) {
                    return "overMax";
                }

                return true;
            }

            // Check to see if the provided value is less than the known min
            if (isNaN(maxVal)) {

                if (val < minVal) {
                    return "underMin";
                }

                return true;
            }

            // Both upper and lower limits specified
            if (!(minVal <= val && val <= maxVal)) {

                return "range";
            }
            else {

                return true;
            }

        },
        errorMsg: {
            "range": "Must be within specified range",
            "setup": "Required parameters are missing to properly validate value",
            "invalidRange": "Minimum range value is larger than defined maximum.",
            "overMax": function _overMax_error($field){

                var errorMsg = "Must not exceed ~ characters.";

                var maxVal = $field.attr('data-max-val');

                return errorMsg.replace('~', maxVal);

            },
            "underMin": function _underMin_error($field){

                var errorMsg = "Must be larger than ~ characters.";

                var minVal = $field.attr('data-min-val');

                return errorMsg.replace('~', minVal);
            }
        }
        //codes: range - UI034, setup - UI035, invalidRange - UI036, overMax - UI037, underMin - UI038
    };

    _rules.dateCompare = {
        test: function _date_compare($source, date1, date2) {

            var splitDate;

            if (typeof date1 === "string" && date1.indexOf('document') !== -1) {

                splitDate = date1.split('.')[2];

                $date = $('input[name="' + splitDate + '"]');

                if ($date.length === 1) {

                    date1 = $date.val();
                }

            }

            if (typeof date2 === "string" && date2.indexOf('document') !== -1) {

                splitDate = date2.split('.')[2];

                $date = $('input[name="' + splitDate + '"]');

                if ($date.length === 1) {

                    date2 = $date.val();
                }

            }

            $source.attr('data-start-date', date1);
            $source.attr('data-end-date', date2);

            var dateObj1 = new Date(date1);
            var dateObj2 = new Date(date2);

            if (date1 === "" && date2 === "") {
                return true;
            }

            if (date1 === date2) {

                return "same";
            }

            if(dateObj2 < dateObj1) {

                return "sooner";
            }

        },
        errorMsg: {
            "same": "The two dates supplied are the same date.",
            "sooner": function _sooner_error($field, fieldID) {

                var date1 = $field.attr('data-start-date');
                var date2 = $field.attr('data-end-date');
                var errorMsg = "Date must fall between + and -.";

                return errorMsg.replace('~',fieldID).replace('+', date2).replace('-', date1);

            }

        }
        // code: same - UI039, sooner - UI040
    };

    _rules.tableSelect = {
        test: function($table) {

            var tableId = $table.attr('id');

            if (emp.reference.tables[tableId].dataStore.selectable && emp.reference.tables[tableId].dataStore.selectionRequired) {

                // Get the hidden input for checked rows
                $checkedInput = $('#' + tableId + '_checked_index');

                if ($checkedInput.val().length === 0) {

                    return "noselect";
                }
                else {

                    return true;
                }

            }
            else {

                return true;
            }

        },
        errorMsg: {
            "noselect": function _table_no_selection($table, tableId) {

                var tableTitle = false;

                if (emp.reference.tables[tableId].dataStore.title && emp.reference.tables[tableId].dataStore.title.indexOf('please') === -1 && emp.reference.tables[tableId].dataStore.title.indexOf('Please') === -1) {

                    tableTitle = emp.reference.tables[tableId].dataStore.title;
                }
                else {

                    var $tableSection = $table.parents('section').eq(0).find('.emp-section-title');

                    if ($tableSection.length) {

                        tableTitle = $tableSection.text().trim();
                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'validation', func: 'TableSelect Test'}, 'Table selection test could not find a valid title to identify the table in error');
                    }
                }

                //var errorMsg = "UI037: The ~ table is invalid. Please select a row(s).";
                var errorMsg = "Please select a row.";
                // code: UI040

                return errorMsg.replace('~', tableTitle);
            }
        }
    };

    // Private functions
    var _priv = {};

    _priv.findReference = function _priv_findField (reference) {

        var $reference;

        // test jQuery reference
        if (reference instanceof jQuery) {

            if (reference.length === 1) {
                $reference = reference;
            }
            else if (reference.length === 0) {

                console.error("The provided reference validation jQuery reference has no length.");
                return false;
            }
            else if (reference.length > 1) {

                console.error("The provided reference validation jQuery reference has more than a singluar reference.");
                return false;
            }
        }
        // test string (id, then class) for references
        else if (typeof reference === "string") {

            var idTest = $('#' + reference);

            if (idTest.length === 1) {

                $reference = idTest;
            }
            else {

                var classTest = $('.' + reference);

                if (classTest.length === 1) {

                    $reference = classTest;

                } else {


                    if (classTest.length > 1 || idTest.length > 1) {

                        console.error("The provided reference validation string: " + reference + " has a reference to more than one element");
                        return false;
                    }
                    else if (classTest.length === 0 && idTest.length === 1) {

                        console.error("The provided reference validation string: " + reference + " was not able to produce a selectable reference");
                        return false;
                    }

                }

            }
        }
        // test native element reference
        else if (kind(reference) === "element") {

            var elemTest = $(reference);

            if (elemTest.length === 1) {

                $reference = elemTest;

            }
            else {
                console.error("The provided reference validation element reference was unusable");
                return false;
            }
        }

        return $reference;
    };

    _priv.validateField = function _priv_validate_field ($field) {

        // Start a default object
        var fieldObj = {
            $reference: $field,
            tests: {},
            result: true
        };

        // Start by checking to see if this is a required attribute
        if ($field.attr('aria-required') === "true") {

            // Create a test spaced
            fieldObj.tests.required = {};

            if ($field[0].nodeName === "FIELDSET") {

                fieldObj.tests.required.result = _priv.testRunner("requiredFieldSet", $field);
            }
            else {

                // Add results object
                fieldObj.tests.required.result = _priv.testRunner("required", $field);
            }

        }

        // Check for validation functions
        if ($field.attr('data-validation')) {

            var calledRule;
            var validationRules = $field.attr('data-validation').replace(';','').split(/\,/);

            // Loop through all of the potential rules given
            for (var i = 0, len = validationRules.length; i < len; i++) {

                if (validationRules[i].indexOf('(') === -1) {

                    fieldObj.tests[validationRules[i]] = {};

                    fieldObj.tests[validationRules[i]].result = _priv.testRunner(validationRules[i], $field);

                    calledRule = validationRules[i];

                } else {

                    // Start by rebuilding the valudation rule.
                    var fullRule = validationRules[i];

                    // Rebuild the empire 1 rule.
                    while (fullRule.indexOf(")") === -1 &&  i < len ) {

                        fullRule += "," + validationRules[i + 1];

                        i++;
                    }

                    // Now just get the rule name
                    var rule = fullRule.replace(/ *\([^)]*\) */g, "");

                    fieldObj.tests[rule] = {};

                    calledRule = rule;

                    var params = fullRule.match(/\(([^)]+)\)/);

                    if (params.length > 0) {
                        params = params[1].split(',');
                    }

                    // Check to see if we want to strip the first parameter
                    switch (rule) {

                        case "checkMaxLength":
                        case "checkMinLength":
                        case "isZero":
                        case "validateName":
                        case "dateValidator":
                        case "validateListSize":
                        case "checkMaxAllowed":
                        case "isPhone":
                        case "isForeignPhone":
                        case "checkSpecialChars":
                        case "isSSN":
                        case "isEIN":
                        case "isDosId":
                        case "validateZip":
                        case "isWebSite":
                        case "isCurrencySpecial":
                        case "isNumericWithDecimal":

                            if (params[0].indexOf("document.") !== -1) {

                                params.shift();
                            }

                            break;

                        case "isWithinRange":
                        case "isLengthWithinRange":

                            // Check if 3 items are being provided (input, and 3 other values/fields, only then strip the first off)
                            if (params.length === 3) {
                                params.shift();
                            }

                            break;
                    }

                    // Pass the validation rule name, the field and the params that might have existed
                    fieldObj.tests[rule].result = _priv.testRunner(rule, $field, params);

                }

                // Catch any invalid returns/test and remove them from the tests object
                if (fieldObj.tests[calledRule].result === null) {

                    delete fieldObj.tests[calledRule];
                }

            }
        }

        // Loop through and check if we can switch the field state to true.
        for (var test in fieldObj.tests) {

            // Check for a failure
            if (!fieldObj.tests[test].result) {

                fieldObj.result = false;
            }

        }

        return fieldObj;
    };

    _priv.validateTable = function _priv_validate_table ($table) {

        // Start a default object
        var tableObj = {
            $reference: $table,
            tests: {},
            result: true
        };

        tableObj.tests.tableSelect = {};

        tableObj.tests.tableSelect.result = _priv.testRunner("tableSelect", $table);

        // Loop through and check if we can switch the field state to true.
        for (var tableTest in tableObj.tests) {

            // Check for a failure
            if (!tableObj.tests[tableTest].result) {

                tableObj.result = false;
            }

        }

        return tableObj;
    };

    _priv.testRunner = function _priv_test_runner(rule, $field, params) {
        var result = false;

        if (_rules.hasOwnProperty(rule)) {

            // Figure out what the test type is
            if (_rules[rule].test instanceof RegExp) {

                result = _rules[rule].test.test($field.val());

                if (_rules[rule].flipResult) {
                    result = !result;
                }

                return result;
            }
            else if (typeof _rules[rule].test === "function") {

                var newParams = [$field];

                params = newParams.concat(params);

                result = _rules[rule].test.apply(this, params);

                return result;
            }

        } else {

            journal.log({type: 'error', owner: 'UI', module: 'validation', func: 'testRunner'}, 'Unknown or unsuppoted validation rule: ' + rule);

            return null;
        }
    };

    _priv.generateError = function _priv_generate_error(resultsObj, test, result) {

        // Get field demographics
        var $field = resultsObj.$reference;
        var fieldID = false;
        var fieldName;

        if ($field[0].nodeName === "FIELDSET") {
            $subRef = $field.find('.emp-fieldset-contents').eq(0);
            fieldID = $subRef.attr('aria-labelledby');
        }
        else {
            fieldID = $field.attr('id');
        }

        var $fieldLabel = $('label[for="' + fieldID + '"]');

        if ($fieldLabel.length === 1) {
            fieldName = $fieldLabel.text();
        }
        else if ($field[0].nodeName === "FIELDSET") {
            fieldName = $('#' + fieldID).text();
        }
        else {
            fieldName = fieldID;
        }

        if (typeof _rules[test].errorMsg === "string") {

            return _rules[test].errorMsg.replace("~", fieldName);

        }
        else if (typeof _rules[test].errorMsg === "object") {

            if (_rules[test].errorMsg.hasOwnProperty(result)) {

                if (typeof _rules[test].errorMsg[result] === "string") {

                    return _rules[test].errorMsg[result].replace("~", fieldName);
                }
                else if (typeof _rules[test].errorMsg[result] === "function") {

                    return _rules[test].errorMsg[result].apply(this, [$field, fieldName]);
                }

            }
            else {

                journal.log({type: 'error', owner: 'UI', module: 'validation', func: 'generateError'}, 'Unknown object based error message definition for: ' + test + ' called: ' + result);
            }
        }
        else if (typeof _rules[test].errorMsg === "function") {

            return _rules[test].errorMsg.apply(this, [$field, fieldName]);
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'validation', func: 'generateError'}, 'Validation error for ' + test + ' could not be generated because the errorMsg type is not string or function');
        }
    };

    var field = function _field(field) {

        var acceptableFields = ['INPUT', 'SELECT', 'TEXTAREA', 'TABLE', 'FIELDSET'];

        // Test reference to ensure its valid.
        $field = _priv.findReference(field);

        if ($field && acceptableFields.indexOf($field[0].nodeName) !== -1) {

            // Check to see if the field has either of the aria-required or data-validation attributes
            if ($field.attr('aria-required') || $field.attr('data-validation')) {

                var fieldID = false;

                if($field[0].nodeName==="FIELDSET") {
                    $subRef = $field.find('.emp-fieldset-contents').eq(0);
                    fieldID = $subRef.attr('aria-labelledby');
                }
                else {
                    fieldID = $field.attr('id');
                }

                journal.log({ type: 'info', owner: 'UI', module: 'validation', func: 'field' }, "Form field being validated:", fieldID);

                // Test the field
                var fieldTest = _priv.validateField($field);

                journal.log({type: 'info', owner: 'UI', module: 'validation', func: 'field'}, $field.attr('id') + "Form field tests:", fieldTest);

                // Set the field test to true for now and let the individual test check change it.
                fieldTest.result = true;

                // Loop through all of the tests and check if any failed
                for (var test in fieldTest.tests) {

                    // Check if the test field
                    if (typeof fieldTest.tests[test].result === "boolean" && !fieldTest.tests[test].result) {

                        // Set the field itself to false
                        fieldTest.result = false;

                        // Add the proper test message related to the test to the test object
                        fieldTest.tests[test].message = _priv.generateError(fieldTest, test, fieldTest.tests[test].result);

                    }
                    else if (typeof fieldTest.tests[test].result === "string") {

                        // Set the field itself to false
                        fieldTest.result = false;

                        fieldTest.tests[test].message = _priv.generateError(fieldTest, test, fieldTest.tests[test].result);

                    }

                }

                return fieldTest;

            }
            else if ($field.hasClass('emp-selectionRequired')) {

                var tablesTest = _priv.validateTable($field);

                // Set the field test to true for now and let the individual test check change it.
                tablesTest.result = true;

                for (var tabtest in tablesTest.tests) {

                    if (typeof tablesTest.tests[tabtest].result === "boolean" && !tablesTest.tests[tabtest].result) {

                        // Set the field itself to false
                        tablesTest.result = false;

                        // Add the proper test message related to the test to the test object
                        tablesTest.tests[tabtest].message = _priv.generateError(tablesTest, tabtest, tablesTest.tests[tabtest].result);

                    }
                    else if (typeof tablesTest.tests[tabtest].result === "string") {

                        // Set the field itself to false
                        tablesTest.result = false;

                        tablesTest.tests[tabtest].message = _priv.generateError(tablesTest, tabtest, tablesTest.tests[tabtest].result);

                    }

                }

                return tablesTest;
            }

        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'validation', func: 'field'}, 'Failed to validate field becasue proper DOM reference could not be made.');

            testResults.endResult = false;
        }
    };

    var form = function _form(form) {

        var testResults = {
            fields: [],
            endResult: true
        };

        // Test reference to ensure its valid.
        $form = _priv.findReference(form);

        journal.log({type: 'info', owner: 'UI', module: 'validation', func: 'form'}, "Form being validationed:", $form.attr('id'));

        if ($form.length === 1 && $form[0].nodeName === "FORM") {

            // Find all of the inputs in this form
            var inputs = $form.find('input, select, textarea, table.emp-selectionRequired, fieldset.emp-yes-no-component').not(':hidden');

            //Add inputs that could be within hidden section resulting in display:none.
            inputs = inputs.add($form.find('input[aria-required="true"], select[aria-required="true"], textarea[aria-required="true"], table.emp-selectionRequired[aria-required="true"], fieldset.emp-yes-no-component[aria-required="true"]'));

            // Check to see if anything inputs were even found.
            if (inputs.length > 0) {

                // Loop the found inputs.
                inputs.each(function(i) {

                    var $field = $(this);
                   
                    if($field.closest(".emp-collapse").length > 0){
                        return;
                    }


                    var fieldResult = field($field);

                    if (fieldResult !== undefined) {

                        // If this field failed update the end results for the whole form.
                        if (!fieldResult.result) {
                            testResults.endResult = false;
                        }

                        // Add this fields results to the fields array
                        testResults.fields.push(fieldResult);

                    }

                });

            }

            return testResults;
        }
        else {

            journal.log({type: 'error', owner: 'UI', module: 'validation', func: 'form'}, 'Failed to validate form becasue proper DOM reference could not be made.');

            testResults.endResult = false;
        }
    };

    return {
        form: form,
        field: field
    };

});

define('external-menu',['render', 'guid'], function(render, guid) {

    var _priv = {};
    var _events = {};

    _priv.isGenerated = false;
    _priv.isOpen = false;
    _priv.inputTimeout = false;
    _priv.filterTolerance = 400;
    _priv.oCatalogMenu = false;
    _priv.$generatedCatalogMenu = false;
    _priv.oOriginalMenu = false;
    _priv.bMenuChanged = false;
    _priv.init = false;

    // Menu currently used in rendering
    _priv.aCurrentMenu = false;

    _priv.CLASSLIST = {
        "changeCatalogToggle": "emp-active-catalog"
    };

    _priv.generateMenuContents = function _generate_menu_contents(fragment, menuItems, level) {

        if (!level) {
            level = 1;
        }

        if (_priv.aCurrentMenu === false && level === 1) {
            _priv.currentMenu = [].concat(menuItems);
        }

        var menuSection = document.createElement('ul');
        menuSection.setAttribute('id', guid() + "_menu_section" );

        for (var i = 0, len = menuItems.length; i < len; i++) {

            var menuItem = menuItems[i];

            if (menuItem.hasOwnProperty('skip') && menuItem.skip) {
                continue;
            }

            var dMenuItem = document.createElement('li');
            var dMenuControlText = document.createTextNode(menuItem.text);
            var dMenuControl = false;

            if (menuItem.href || (menuItem.attributes && menuItem.attributes.href)) {

                var href = (menuItem.href) ? menuItem.href : menuItem.attributes.href;

                dMenuControl = document.createElement('a');
                dMenuControl.setAttribute('href', href);
                
                if (menuItem.attributes && menuItem.attributes['data-appId']) {

                    dMenuControl.setAttribute('data-appId', menuItem.attributes['data-appId']);

                    if (fwData && fwData.context && fwData.context.app && fwData.context.app.id)

                    if (menuItem.attributes['data-appId'] === fwData.context.app.id) {
                        dMenuControl.classList.add('emp-active-menu-item');
                    }

                }

                if (menuItem.attributes && menuItem.attributes.target) {
                    dMenuControl.setAttribute('target', menuItem.attributes.target);
                }

                if (menuItem.onclick) {
                    dMenuControl.setAttribute('onclick', menuItem.onclick);
                }
            }
            else if (menuItem.items) {

                if (menuItem.isHeader) {
                    dMenuControl = document.createElement('header');
                }
                else {

                    dMenuControl = document.createElement('button');

                    if (menuItem.expanded) {

                        dMenuControl.setAttribute('aria-expanded', 'true');
                    }
                    else {
                        dMenuControl.setAttribute('aria-expanded', 'false');
                    }

                }
            }
            else {

                dMenuControl = document.createElement('span');
            }

            dMenuControl.appendChild(dMenuControlText);

            // Add the control before we deal with sub items
            dMenuItem.appendChild(dMenuControl);

            if (menuItem.items) {

                _priv.generateMenuContents(dMenuItem, menuItem.items, (level + 1));

                // Now check to see if this menu should be expanded
                var subSpan = dMenuItem.querySelector('span');

                if (subSpan) {
                    dMenuControl.setAttribute('aria-expanded', 'true');
                }
            }

            menuSection.appendChild(dMenuItem);

        }

        fragment.appendChild(menuSection);

    };

    _priv.generate = function _generate(full, data) {

        var outerMenuWrapper = false;
        var globaMenuControlWrapper = false;
        var globalMenuCloseControl = false;
        var menuContensWrapper = false;

        if (full) {

            outerMenuWrapper = document.createElement('nav');
            outerMenuWrapper.setAttribute('id', 'emp-global-menu-wrapper');
            outerMenuWrapper.setAttribute('tabindex', '0');
            outerMenuWrapper.classList.add('emp-global-menu-wrapper');

            // #=====================
            // Global Menu Control
            // #=====================

            globaMenuControlWrapper = document.createElement('div');
            globaMenuControlWrapper.classList.add('emp-menu-control-container');

            globalMenuCloseControl = document.createElement('button');
            globalMenuCloseControl.setAttribute('type', 'button');
            globalMenuCloseControl.classList.add('emp-global-menu-close');
            globalMenuCloseControl.innerHTML = '&times';

            globalMenuCloseControl.addEventListener('click', function(evt) {
                _events.closeMenu(evt);
            });

            globaMenuControlWrapper.appendChild(globalMenuCloseControl);

            // #=====================
            // Global Filter Control
            // #=====================

            var globalFilterWrapper = document.createElement('div');
            globalFilterWrapper.classList.add('emp-menu-filter-container');

            var globalFilterInput = document.createElement('input');
            globalFilterInput.setAttribute('type', 'text');
            globalFilterInput.setAttribute('placeholder', 'Filter');

            globalFilterInput.addEventListener('keyup', function(evt) {

                if (_priv.inputTimeout) {
                    clearTimeout(_priv.inputTimeout);
                }

                _priv.inputTimeout = setTimeout(function() {

                    _events.filterInput(evt);
                }, _priv.filterTolerance);

            });

            // Add Filter to wrapper
            globalFilterWrapper.appendChild(globalFilterInput);

            // #=====================
            // Catagory Control
            // #=====================

            var catalogWrapper = false;

            if (fwData.menus.global && fwData.menus.global.catalogs) {

                catalogWrapper = document.createElement('div');
                catalogWrapper.classList.add('emp-catalog-outer-wrapper');

                var catalogInnerWrapper = document.createElement('div');
                catalogInnerWrapper.classList.add('emp-catalog-inner-wrapper');

                if (fwData.menus.global.catalogs.length === 1) {

                    catalogInnerWrapper.classList.add('emp-static-catalog-title');

                    var staticCatalogTitle = document.createElement('span');
                    staticCatalogTitle.classList.add(_priv.CLASSLIST.changeCatalogToggle);

                    var staticCatalogText = document.createTextNode(fwData.menus.global.catalogs[0].text);

                    staticCatalogTitle.appendChild(staticCatalogText);

                    catalogInnerWrapper.appendChild(staticCatalogTitle);
                }
                else {

                    var oActiveCatalog = false;

                    for (var c = 0, cLen = fwData.menus.global.catalogs.length; c < cLen; c++) {

                        if (fwData.menus.global.catalogs[c].active) {
                            oActiveCatalog = fwData.menus.global.catalogs[c];
                            break;
                        }

                    }

                    catalogInnerWrapper.classList.add('emp-interactive-catalog-title');

                    var interCatalogControl = document.createElement('button');
                    interCatalogControl.setAttribute('role', 'button');
                    interCatalogControl.classList.add('emp-active-catalog');

                    var interCatalogIcon = document.createElement('div');
                    interCatalogIcon.classList.add('emp-active-catalog-icon');
                    interCatalogControl.appendChild(interCatalogIcon);

                    for (var i = 1, len = 5; i < len; i++) {

                        var interIconPart = document.createElement('span');
                        interIconPart.classList.add('sqr-'+ i);

                        interCatalogIcon.appendChild(interIconPart);
                    }


                    var interCatalogTitleWrapper = document.createElement('div');
                    interCatalogTitleWrapper.classList.add('emp-active-catalog-title-wrapper');

                    var interCatalogTitle = document.createTextNode(oActiveCatalog.text);
                    interCatalogTitleWrapper.appendChild(interCatalogTitle);

                    interCatalogControl.addEventListener('click', _events.catalogClick);

                    interCatalogControl.appendChild(interCatalogTitleWrapper);
                    catalogInnerWrapper.appendChild(interCatalogControl);
                }

                catalogWrapper.appendChild(catalogInnerWrapper);
            }

            // #=====================
            // Menu Wrapper
            // #=====================

            menuContensWrapper = document.createElement('div');
            menuContensWrapper.classList.add('emp-menu-contents');

            menuContensWrapper.addEventListener('click', function (evt) {

                _events.expandMenuLevel(evt);
            });

            _priv.generateMenuContents(menuContensWrapper, window.fwData.menus.global.items);

            // Append everything to the outerwrapper
            outerMenuWrapper.appendChild(globaMenuControlWrapper);
            outerMenuWrapper.appendChild(globalFilterWrapper);
            if (fwData.menus.global && fwData.menus.global.catalogs) {
                outerMenuWrapper.appendChild(catalogWrapper);
            }
            outerMenuWrapper.appendChild(menuContensWrapper);

            // Add the menu to the body wrapper
            var dBodyWrapper = document.querySelector('#body-wrapper');

            dBodyWrapper.appendChild(outerMenuWrapper);

            _priv.isGenerated = true;

            var menuElem = document.querySelector('#emp-global-menu-wrapper');

            _priv.menuElem = menuElem;
        }
        else {

            menuContensWrapper = document.querySelector('#emp-global-menu-wrapper .emp-menu-contents');

            // Flush the onld menu contents
            var child = menuContensWrapper.lastElementChild;

            while (child) {
                menuContensWrapper.removeChild(child);
                child = menuContensWrapper.lastElementChild;
            }

            _priv.generateMenuContents(menuContensWrapper, data);
        }

    };

    _priv.filterMenu = function _filter_menu(slug) {

        console.log(_priv.currentMenu);

        function searchItems(regex, menuArray) {

            var newMenuLevelArray = [];

            for (var m = 0, mLen = menuArray.length; m < mLen; m++) {

                var item = menuArray[m];

                // Check to see if the current item has sub items;
                if (item.items) {

                    var subMenu = searchItems(regex, item.items);

                    // Since we had a subMenu we need to check to see if any falses were returned
                    for (var sm = 0, smLen = subMenu.length; sm < smLen; sm++) {

                        var smItem = subMenu[sm];

                        if (smItem.hasOwnProperty('skip') && smItem.skip === false) {
                            item.skip = false;

                            break;
                        }
                    }

                    if (!item.hasOwnProperty('skip')) {
                        item.skip = true;
                    }

                    newMenuLevelArray.push(item);

                }
                else {

                    // Check the text for possible slug match
                    if (item.text.toLowerCase().match(regex)) {
                        item.skip = false;
                    }
                    else {
                        item.skip = true;
                    }

                    newMenuLevelArray.push(item);

                }

            }

            return newMenuLevelArray;
        }

        var customRegEx = new RegExp(slug.toLowerCase(), 'g');

        // Make a copy of the current menu
        var currentMenu = [].concat(_priv.currentMenu);

        var newMenu = searchItems(customRegEx, currentMenu);

        return newMenu;
    };

    _priv.closeMenu = function _close_global_menu (){

    	_priv.isOpen = false;
        _priv.menuControl.setAttribute('aria-expanded', _priv.isOpen);
        _priv.menuElem.classList.remove('active');

        if (_priv.bMenuChanged) {

            var dOldMenu = document.querySelector('#emp-global-menu-wrapper');

            dOldMenu.parentNode.removeChild(dOldMenu);

            fwData.menus.global = JSON.parse(JSON.stringify(_priv.oOriginalMenu));

            // Reset defaults
            _priv.isGenerated = false;
            _priv.bMenuChanged = false;
        }

        // Remove the body click event
        document.body.removeEventListener('click', _events.openMenuBodyClick, true);
    };

    _priv.openMenu = function _open_global_menu (){

    	_priv.isOpen = true;
		_priv.menuControl.setAttribute('aria-expanded', _priv.isOpen);
        _priv.menuElem.classList.add('active');

        document.body.addEventListener('click', _events.openMenuBodyClick, true);

    	// set focus
    	_priv.menuElem.focus();
    };

    _events.openMenuBodyClick = function _open_menu_body_click(evt) {

        var dClickedElement = evt.target;
        var dLastParent = false;

        var aDOMTree = [];

        var bForceClose = true;

        aDOMTree.push(dClickedElement);

        // Get all elements to parent
        while(true) {

            var dNextParent = false;

            if (dLastParent) {

                dNextParent = dLastParent.parentNode;
            }
            else {

                dNextParent = dClickedElement.parentNode;
            }

            if (dNextParent.nodeName !== "BODY") {

                aDOMTree.push(dNextParent);
                dLastParent = dNextParent;
            }
            else {

                break;
            }

        }

        for (var d = 0, dLen = aDOMTree.length; d < dLen; d++) {

            if (aDOMTree[d].classList.contains('emp-active-catalog') || aDOMTree[d].classList.contains('emp-cataloge-popup-container') || aDOMTree[d].classList.contains('emp-global-menu-wrapper') || aDOMTree[d].classList.contains('menu-button')) {

                bForceClose = false;
                break;
            }

        }


        if (_priv.isOpen && bForceClose) {
            _priv.closeMenu();
        }
        else if (!bForceClose) {

            //console.log("Force close stopped!");
        }
    };

    _events.menuClick = function _menu_click(evt) {

        if (fwData.menus && fwData.menus.global && Object.keys(fwData.menus.global).length) {

            if (!_priv.isGenerated) {

                _priv.generate(true);
            }

            // Toogle the expanded state
            _priv.isOpen = !_priv.isOpen;

            if (_priv.isOpen) {
                _priv.openMenu();
            }
            else {
                _priv.closeMenu();
            }
        }
        else {

            journal.log({ type: 'error', owner: 'FW', module: 'externalMenu', func: '_event.menuClick' }, 'Page JSON does not contain any global menu definition.');
        }
    };

    _events.closeMenu = function _close_global_menu_event(evt) {
    	var control = evt.target;
        if (control.classList.contains('emp-global-menu-close')) {
        	_priv.closeMenu();
        }
        return;
    };

    _events.expandMenuLevel = function _expand_menu_level(evt) {

        var control = evt.target;
        var level = control.nextSibling;

        var controlExpanded = control.getAttribute('aria-expanded');

        if (controlExpanded === "false") {

            control.setAttribute('aria-expanded', 'true');
        }
        else {

            control.setAttribute('aria-expanded', 'false');
        }

    };

    _events.filterInput = function _filter_input(evt) {

        var inputValue = evt.target.value.trim();

        var updatedJSON = _priv.filterMenu(inputValue);

        _priv.generate(false, updatedJSON);
    };

    _events.catalogClick = function _catalog_click(evt) {

        if (!_priv.$generatedCatalogMenu) {

            var dCatalogTrigger = evt.target;

            if(!dCatalogTrigger.classList.contains(_priv.CLASSLIST.changeCatalogToggle)){

                var $catalogToggle = $(dCatalogTrigger).closest("."+_priv.CLASSLIST.changeCatalogToggle);

                if($catalogToggle.length > 0){
                    dCatalogTrigger = $catalogToggle.get(0);
                }

            }

            var oCatalogPopover = {
                "template": "popover",
                "contents": [
                    {
                        "template": "output",
                        "raw": true,
                        "text": '<div class="emp-catalog-menu-title">Change Role:</div>'
                    },
                    {
                        "template": "tree",
                        "items": []
                    }
                ]
            };

            // Generate a list of catalogs that are not active
            for (var c = 0, cLen = fwData.menus.global.catalogs.length; c < cLen; c++) {

                var oCatalog = fwData.menus.global.catalogs[c];

                console.log(oCatalog);

                var oMenuButton = {
                    "template": "link",
                    "attributes": {
                        "href": false
                    },
                    "text": false
                };

                if (!oCatalog.active) {
                    oMenuButton.text = oCatalog.text;
                    oMenuButton.attributes.href = oCatalog.href;

                    oCatalogPopover.contents[1].items.push(oMenuButton);
                }
            }

            _priv.oCatalogMenu = oCatalogPopover;

            render.section(undefined, _priv.oCatalogMenu, 'return', function(html) {

                var catalogButtons = html.querySelector('a');

                _priv.$generatedCatalogMenu = $.popover($(dCatalogTrigger), {
                    html: html,
                    display: {
                        className: 'emp-cataloge-popup-container',
                        offset: {
                            left: -175
                        }
                    },
                    location: 'below-left',
                });

                catalogButtons.addEventListener('click', _events.catalogSelected);

                _priv.$generatedCatalogMenu.show();
            });
        }
    };

    _events.catalogSelected = function _catalog_selected(evt) {

        var dSelectedCatalog = evt.target;
        var sSelectedCatalog = dSelectedCatalog.getAttribute('data-catalog-selected');

        // // Find catalog menu
        for (var c = 0, cLen = fwData.menus.global.catalogs.length; c < cLen; c++) {

            if (fwData.menus.global.catalogs[c].name === sSelectedCatalog) {

                oCatalog = fwData.menus.global.catalogs[c];

                if(oCatalog.switchFunc){
                    emp.functionCall(oCatalog.switchFunc);
                }

            }

        }

    };

    var init = function _external_menu_init() {

        if (!_priv.init) {

            var menuControl = document.querySelector('.emp-global-header .application-header button.menu-button');

            if (menuControl) {

                _priv.menuControl = menuControl;

                menuControl.addEventListener('click', function(evt) {

                    // Save off an original copy of the menu.
                    _priv.oOriginalMenu = JSON.parse(JSON.stringify(fwData.menus.global));

                    _events.menuClick(evt);

                });
            }

            _priv.init = true;
        }

    };

    return {
        init: init
    };

});

define('detectIE',[], function() {

  function detectIE() {
    var ua = window.navigator.userAgent;

    // Test values; Uncomment to check result …

    // IE 10
    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
    
    // IE 11
    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
    
    // IE 12 / Spartan
    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
    
    // Edge (IE 12+)
    // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

    var msie = ua.indexOf('MSIE ');
    if (msie > 0) {
      // IE 10 or older => return version number
      //return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
      return {
        ie: true,
        edge: false
      };
    }

    var trident = ua.indexOf('Trident/');
    if (trident > 0) {
      // IE 11 => return version number
      var rv = ua.indexOf('rv:');
      //return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
      return {
        ie: true,
        edge: false
      };
    }

    var edge = ua.indexOf('Edge/');
    if (edge > 0) {
      // Edge (IE 12+) => return version number
      //return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
      return {
        ie: true,
        edge: true
      };
    }

    // other browser
    return false;
  }

  return detectIE;

})
;
/* Copyright (c) 2010-2016 Marcus Westin, https://github.com/marcuswestin/store.js/ */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define('store',[],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.store = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
module.exports=function(){function e(){try{return o in n&&n[o]}catch(e){return!1}}var t,r={},n="undefined"!=typeof window?window:global,i=n.document,o="localStorage",a="script";if(r.disabled=!1,r.version="1.3.20",r.set=function(e,t){},r.get=function(e,t){},r.has=function(e){return void 0!==r.get(e)},r.remove=function(e){},r.clear=function(){},r.transact=function(e,t,n){null==n&&(n=t,t=null),null==t&&(t={});var i=r.get(e,t);n(i),r.set(e,i)},r.getAll=function(){},r.forEach=function(){},r.serialize=function(e){return JSON.stringify(e)},r.deserialize=function(e){if("string"==typeof e)try{return JSON.parse(e)}catch(t){return e||void 0}},e())t=n[o],r.set=function(e,n){return void 0===n?r.remove(e):(t.setItem(e,r.serialize(n)),n)},r.get=function(e,n){var i=r.deserialize(t.getItem(e));return void 0===i?n:i},r.remove=function(e){t.removeItem(e)},r.clear=function(){t.clear()},r.getAll=function(){var e={};return r.forEach(function(t,r){e[t]=r}),e},r.forEach=function(e){for(var n=0;n<t.length;n++){var i=t.key(n);e(i,r.get(i))}};else if(i&&i.documentElement.addBehavior){var c,u;try{u=new ActiveXObject("htmlfile"),u.open(),u.write("<"+a+">document.w=window</"+a+'><iframe src="/favicon.ico"></iframe>'),u.close(),c=u.w.frames[0].document,t=c.createElement("div")}catch(l){t=i.createElement("div"),c=i.body}var f=function(e){return function(){var n=Array.prototype.slice.call(arguments,0);n.unshift(t),c.appendChild(t),t.addBehavior("#default#userData"),t.load(o);var i=e.apply(r,n);return c.removeChild(t),i}},d=new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]","g"),s=function(e){return e.replace(/^d/,"___$&").replace(d,"___")};r.set=f(function(e,t,n){return t=s(t),void 0===n?r.remove(t):(e.setAttribute(t,r.serialize(n)),e.save(o),n)}),r.get=f(function(e,t,n){t=s(t);var i=r.deserialize(e.getAttribute(t));return void 0===i?n:i}),r.remove=f(function(e,t){t=s(t),e.removeAttribute(t),e.save(o)}),r.clear=f(function(e){var t=e.XMLDocument.documentElement.attributes;e.load(o);for(var r=t.length-1;r>=0;r--)e.removeAttribute(t[r].name);e.save(o)}),r.getAll=function(e){var t={};return r.forEach(function(e,r){t[e]=r}),t},r.forEach=f(function(e,t){for(var n,i=e.XMLDocument.documentElement.attributes,o=0;n=i[o];++o)t(n.name,r.deserialize(e.getAttribute(n.name)))})}try{var v="__storejs__";r.set(v,v),r.get(v)!=v&&(r.disabled=!0),r.remove(v)}catch(l){r.disabled=!0}return r.enabled=!r.disabled,r}();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1])(1)
});

define('clickblocker',['spin'], function(spin) {

	var CLASSES = {
		iconControl: 'emp-icon-hide-icon',
		textControl: 'emp-no-icon-hide-text'
	};

	var _priv = {};

	_priv.blocker = false;
	_priv.active = false;
	_priv.source = false;
    _priv.lastFocus = false;

    _priv.errorTimer = false;
    _priv.errorTimerTime = 60000;
    _priv.currentErrorWaitCount = 0;
    _priv.errorCheckCounter = 3;

    _priv.$body = $('body');

    // Private check function that will put a message up after 3 minutes
    _priv.checkForNoResponse = function() {

        if (_priv.currentErrorWaitCount !== _priv.errorCheckCounter) {

            _priv.currentErrorWaitCount += 1;

            journal.log({ type: 'info', owner: 'UI', module: 'clickblocker', func: 'checkForNoResponse' }, (_priv.errorCheckCounter - _priv.currentErrorWaitCount) + ' minutes before click blocker errors out!');

            _priv.errorTimer = setTimeout(_priv.checkForNoResponse, _priv.errorTimerTime);
        }
        else {

            emp.empMessage.createMessage({ text: "Something has gone wrong. Please contact the help desk!", type: "error" }, {scroll: true});

            blocker.remove();
        }
    };

    var blocker = function _blocker () {};

    // Extend the base
    blocker.prototype = {};

	blocker.check = function _check() {

		if (_priv.blocker) {

			return true;
		}

		return false;
	};

	blocker.add = function _add($source, skipErrorCheck, lockMsg) {

		//if ($source && $source.is(':visible')) {
        if ($source) {

			var spinnerOpts = {};
			var spinner = false;
			var controlWidth = false;
			var properClass = false;

			var sourceClasses = $source.attr('class') || false;

			if (sourceClasses && sourceClasses.indexOf('emp-icon') !== -1) {


                spinnerOpts = {
                    lines: 7,      // The number of lines to draw
                    length: 3,     // The length of each line
                    width: 2,      // The line thickness
                    radius: 3,     // The radius of the inner circle
                    corners: 0.5,  // Corner roundness (0..1)
                    rotate: 75,    // The rotation offset
                    color: '#000', // #rgb or #rrggbb
                    speed: 1,      // Rounds per second
                    trail: 75,     // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: true, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 900,   // The z-index (defaults to 2000000000)
                    left: '12px'
                };

                properClass = CLASSES.iconControl;

			}
			else {

                spinnerOpts = {
                    lines: 7,      // The number of lines to draw
                    length: 3,     // The length of each line
                    width: 2,      // The line thickness
                    radius: 3,     // The radius of the inner circle
                    corners: 0.5,  // Corner roundness (0..1)
                    rotate: 75,    // The rotation offset
                    color: '#000', // #rgb or #rrggbb
                    speed: 1,      // Rounds per second
                    trail: 75,     // Afterglow percentage
                    shadow: false, // Whether to render a shadow
                    hwaccel: true, // Whether to use hardware acceleration
                    className: 'spinner', // The CSS class to assign to the spinner
                    zIndex: 900,   // The z-index (defaults to 2000000000)
                    left: '50%'
                };

                properClass = CLASSES.textControl;

			}

			spinner = new spin(spinnerOpts).spin();

            fastdom.measure(function() {

            	controlWidth = $source.outerWidth();

            	fastdom.mutate(function() {

            		$source.css('width', controlWidth + 'px');

                	$source.addClass(properClass);
                	$source[0].appendChild(spinner.el);

            	});
            });

			_priv.source = {
				$source: $source,
				width: controlWidth,
				class: properClass
			};

		}

		// Check to see if the blocker has even been created yet
		if (!_priv.blocker) {

			_priv.blocker = $('<div/>', {
				'class': 'emp-click-blocker',
				'id': 'emp-click-blocker',
                'tabindex': '0'
			}).on('keydown keyup mouseup', function(e) {

                if(e.which == 9) {
                    e.preventDefault();
                }

            });

            if (lockMsg) {

                var blockMessage = $('<div/>', {
                    'class': 'emp-click-blocker-message'
                });

                blockMessage.append(
                    $('<span/>').text("Page is locked until popup is closed.")
                );

                _priv.blocker.append(blockMessage);

            }

			journal.log({type: 'info', owner: 'UI', module: 'blocker', func: 'add'}, 'Created the blocker div!');

		}

		if (!_priv.active) {

            // Get the currently focused element
            _priv.lastFocus = $(document.activeElement);

			_priv.$body.append(_priv.blocker);

            _priv.blocker.focus();

			_priv.active = true;

			journal.log({type: 'info', owner: 'UI', module: 'blocker', func: 'add'}, 'Blocker div has been added to the DOM.');
		}
        else {

            journal.log({type: 'error', owner: 'UI', module: 'blocker', func: 'add'}, 'Can not add blocker as it already is active.');
        }

        if (!skipErrorCheck) {

            journal.log({type: 'info', owner: 'UI', module: 'blocker', func: 'add'}, 'Click blocker error timer started');

            // Add delay message for error
            _priv.errorTimer = setTimeout(_priv.checkForNoResponse, _priv.errorTimerTime);
        }

	};

	blocker.remove = function _remove() {

		if (_priv.active) {

            _priv.blocker.remove();
            _priv.blocker = false;

            // Remove possible error before it can happen
            clearInterval(_priv.errorTimer);


			journal.log({type: 'info', owner: 'UI', module: 'blocker', func: 'remove'}, 'Blocker div removed from DOM.');


			if (_priv.source) {

				fastdom.mutate(function() {

					//var $spinner = _priv.source.$source.find('.spinner');

					fastdom.mutate(function() {

						_priv.source.$source.find('.spinner').remove();
						_priv.source.$source.removeClass(_priv.source.class);
						_priv.source.$source.removeAttr('style');

						_priv.source = false;

                        if (_priv.lastFocus) {

                            _priv.lastFocus.focus();

                            _priv.lastFocus = false;
                        }
					});
				});

			}


			_priv.active = false;

		}
	};

	return blocker;

});

define('addRemove',['guid'], function (guid) {

    var CLASSES = {};

    // Private method namespace
    var _priv = {};

    _priv.updateHiddenInput = function _priv_update_hidden_input(addRemove) {

        addRemove.$selectedHidden.val(addRemove.currentSelected.join(','));
    };

    _priv.changeOrder = function _priv_change_order (addRemove, direction) {

        var currentInPlace = false;
        var currentLength = addRemove.currentSelected.length;
        var currentIndex = addRemove.currentSelected.indexOf(addRemove.focus.value);

        // Check to see if the item is in the current set
        if (currentIndex !== -1) {

            var newIndex = (direction === "up") ? currentIndex - 1 : currentIndex + 1;

            if ((direction === "up" && currentIndex !== 0) || (direction === "down" && currentIndex !== (currentLength - 1) )) {

                // Fix the hidden input array first
                addRemove.currentSelected.splice(currentIndex, 1);
                addRemove.currentSelected.splice(newIndex, 0, addRemove.focus.value);

                journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'addRemove', func: 'changeOrder'}, "Moving Index:", currentIndex, "to", newIndex);
                
                // Detach the current focus element;
                addRemove.focus.$elem.detach();

                if (newIndex === 0) {
                    addRemove.$selectedContainer.prepend(addRemove.focus.$elem);
                }
                else if (newIndex + 1 === currentLength) {

                    addRemove.$selectedContainer.append(addRemove.focus.$elem);
                }
                else {
                    addRemove.$selectedContainer.find('li').eq(newIndex).before(addRemove.focus.$elem);
                }

                _priv.updateHiddenInput(addRemove);
            }
        }
        else {
            journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: 'addRemove', func: 'changeOrder'}, 'We dont have a value, but we called focus order change call!');
        }
    };

    _priv.updateFocus = function _priv_update_focus (addRemove) {

        var $currentSelected = addRemove.$selectedContainer.find('li.emp-selected-item');

        if ($currentSelected.length) {
            $currentSelected.removeClass('emp-selected-item');
        }

        addRemove.focus.$elem.addClass('emp-selected-item');
    };

    var _events = {};

    _events.checkbox = function _event_checkbox(evt, indivudalTick, addRemove) {

        var $checkbox = $(evt.target);
        var $label = $('label[for="' + $checkbox.attr('id') + '"]');

        var value = $checkbox.val();
        var currentIndex = addRemove.currentSelected.indexOf(value);

        if ($checkbox.is(':checked')) {

            if (addRemove.currentSelected.indexOf(value) === -1) {

                var newLI = $('<li>', {
                    'data-checkvalue': value
                });

                var newSPAN = $('<span>').text($label.text());

                newSPAN.appendTo(newLI);

                addRemove.$selectedContainer.append(newLI);

                addRemove.currentSelected.push(value);

                if (indivudalTick) {
                    addRemove.focus.$elem = newLI;
                    addRemove.focus.value = value;

                    _priv.updateFocus(addRemove);
                }

                _priv.updateHiddenInput(addRemove);
            }

        }
        else {

            if (addRemove.currentSelected.indexOf(value) !== -1) {

                // Remove the Li
                addRemove.$selectedContainer.find('li[data-checkvalue="' + value + '"]').remove();

                addRemove.currentSelected.splice(currentIndex, 1);

                // Flush out current focus if its unchecked!
                if (addRemove.focus.value === value) {
                    addRemove.focus.$elem = false;
                    addRemove.focus.value = false;
                }

                _priv.updateHiddenInput(addRemove);
            }
        }

    };

    _events.checkAll = function _event_check_all(evt, addRemove) {

        var $checkAll = $(evt.target);

        if ($checkAll.is(':checked')) {

            addRemove.addAll = true;

            addRemove.$options.each(function(i) {

                var $option = $(this);

                if (!$option.is(':checked')) {

                    $option.trigger('click');
                }

            });
           
            addRemove.addAll = false;
        }
        else {

            // Remove all checkmarks
            addRemove.$options.trigger('click');

        }

    };

    _events.selectedLI = function _events_selectedLI(evt, addRemove) {

        var $item = $(evt.target);

        if ($item[0].nodeName === "SPAN") {
            $item = $item.parent();
        }

        if ($item.hasClass('emp-selected-item')) {

            $item.removeClass('emp-selected-item');

            addRemove.focus.$elem = false;
            addRemove.focus.value = false;

        }
        else {

            if (addRemove.focus.$elem) {
                addRemove.focus.$elem.removeClass('emp-selected-item');
            }

            $item.addClass('emp-selected-item');

            // Update Focus
            addRemove.focus.$elem = $item;
            addRemove.focus.value = $item.attr('data-checkvalue');
        }

    };

    _events.selectedUp = function _events_selected_up(evt, addRemove) {

        if (addRemove.focus.value) {

            _priv.changeOrder(addRemove, 'up');
        }
        else {
            journal.log({type: 'warning', owner: 'UI', module: 'emp', submodule: 'addRemove', func: 'selectedUp'}, 'There is no selected value to move.');
        }

    };

    _events.selectedDown = function _events_selected_down(evt, addRemove) {

        if (addRemove.focus.value) {

             _priv.changeOrder(addRemove, 'down');
        }
        else {
            journal.log({type: 'warning', owner: 'UI', module: 'emp', submodule: 'addRemove', func: 'selectedDown'}, 'There is no selected value to move.');
        }

    };

    ///////////////////
    // Public method //
    ///////////////////

    var addRemove = function (elem, options) {
        // Store the element upon which the component was called
        this.elem = elem;

        // Create a jQuery version of the element
        this.$self = $(elem);

        var id = this.$self.attr('id');

        if (!id) {
            id = guid();
        }

        this.id = id;

        this.options = options;
    };

    addRemove.prototype.init = function _init (cb) {

        var addRemove = this;

        addRemove.buttons = {};

        addRemove.buttons.$up = addRemove.$self.find('.emp-add-remove-up-button');
        addRemove.buttons.$down = addRemove.$self.find('.emp-add-remove-down-button');

        addRemove.$options = addRemove.$self.find('.emp-add-remove-container input:not(".emp-check-include-all")');
        addRemove.$checkAll = addRemove.$self.find('.emp-add-remove-container input.emp-check-include-all');
        addRemove.$selectedContainer = addRemove.$self.find('.emp-order-list-container ol');
        addRemove.$selected = addRemove.$self.find('.emp-order-list-container li');

        addRemove.$selectedHidden = addRemove.$self.find('.emp-add-remove-list-box input[type="hidden"]');

        addRemove.currentSelected = addRemove.$selectedHidden.val();

        if (addRemove.currentSelected.length) {
            addRemove.currentSelected = addRemove.currentSelected.split(',');
        }
        else {
            addRemove.currentSelected = [];
        }

        addRemove.addAll = false;

        addRemove.focus = {
            $elem: false,
            value: false
        };

        // Bind the click for the include all.
        addRemove.$checkAll.on('click', function(evt) {
            _events.checkAll(evt, addRemove);
        });

        // Bind click event on checkbox itself
        addRemove.$options.on('click', function(evt) {

            if (addRemove.addAll) {

                _events.checkbox(evt, false, addRemove);
            }
            else {

                _events.checkbox(evt, true, addRemove);
            }

        });

        // Bind click event on selected li
        addRemove.$selectedContainer.on('click', function(evt) {
            _events.selectedLI(evt, addRemove);
        });

        // Bind up click event
        addRemove.buttons.$up.on('click', function(evt) {
            _events.selectedUp(evt, addRemove);
        });

        addRemove.buttons.$down.on('click', function(evt) {
            _events.selectedDown(evt, addRemove);
        });


        return addRemove;
    };

    // Define and Expose the table component to jQeury
    window.$.fn.addRemove = function (options, callback) {

        if (typeof options === 'function') {
            callback = options;
            options = {};
        }

        // Loop through all of the discovered tables
        return this.each(function (options, callback) {

            new addRemove(this, options).init(function(addRemoveInstance) {

                if (!window.emp.reference.addRemove) {

                    emp.reference.addRemove = {};
                }

                emp.reference.addRemove[addRemoveInstance.id] = addRemoveInstance;

            });

        });
    };

});

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
        typeof define === 'function' && define.amd ? define('promise',factory) :
            (factory());
}(this, (function () {
    'use strict';

    // Store setTimeout reference so promise-polyfill will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var setTimeoutFunc = setTimeout;

    function noop() { }

    // Polyfill for Function.prototype.bind
    function bind(fn, thisArg) {
        return function () {
            fn.apply(thisArg, arguments);
        };
    }

    function Promise(fn) {
        if (!(this instanceof Promise))
            throw new TypeError('Promises must be constructed via new');
        if (typeof fn !== 'function') throw new TypeError('not a function');
        this._state = 0;
        this._handled = false;
        this._value = undefined;
        this._deferreds = [];

        doResolve(fn, this);
    }

    function handle(self, deferred) {
        while (self._state === 3) {
            self = self._value;
        }
        if (self._state === 0) {
            self._deferreds.push(deferred);
            return;
        }
        self._handled = true;
        Promise._immediateFn(function () {
            var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
            if (cb === null) {
                (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
                return;
            }
            var ret;
            try {
                ret = cb(self._value);
            } catch (e) {
                reject(deferred.promise, e);
                return;
            }
            resolve(deferred.promise, ret);
        });
    }

    function resolve(self, newValue) {
        try {
            // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
            if (newValue === self)
                throw new TypeError('A promise cannot be resolved with itself.');
            if (
                newValue &&
                (typeof newValue === 'object' || typeof newValue === 'function')
            ) {
                var then = newValue.then;
                if (newValue instanceof Promise) {
                    self._state = 3;
                    self._value = newValue;
                    finale(self);
                    return;
                } else if (typeof then === 'function') {
                    doResolve(bind(then, newValue), self);
                    return;
                }
            }
            self._state = 1;
            self._value = newValue;
            finale(self);
        } catch (e) {
            reject(self, e);
        }
    }

    function reject(self, newValue) {
        self._state = 2;
        self._value = newValue;
        finale(self);
    }

    function finale(self) {
        if (self._state === 2 && self._deferreds.length === 0) {
            Promise._immediateFn(function () {
                if (!self._handled) {
                    Promise._unhandledRejectionFn(self._value);
                }
            });
        }

        for (var i = 0, len = self._deferreds.length; i < len; i++) {
            handle(self, self._deferreds[i]);
        }
        self._deferreds = null;
    }

    function Handler(onFulfilled, onRejected, promise) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.promise = promise;
    }

    /**
     * Take a potentially misbehaving resolver function and make sure
     * onFulfilled and onRejected are only called once.
     *
     * Makes no guarantees about asynchrony.
     */
    function doResolve(fn, self) {
        var done = false;
        try {
            fn(
                function (value) {
                    if (done) return;
                    done = true;
                    resolve(self, value);
                },
                function (reason) {
                    if (done) return;
                    done = true;
                    reject(self, reason);
                }
            );
        } catch (ex) {
            if (done) return;
            done = true;
            reject(self, ex);
        }
    }

    Promise.prototype['catch'] = function (onRejected) {
        return this.then(null, onRejected);
    };

    Promise.prototype.then = function (onFulfilled, onRejected) {
        var prom = new this.constructor(noop);

        handle(this, new Handler(onFulfilled, onRejected, prom));
        return prom;
    };

    Promise.prototype['finally'] = function (callback) {
        var constructor = this.constructor;
        return this.then(
            function (value) {
                return constructor.resolve(callback()).then(function () {
                    return value;
                });
            },
            function (reason) {
                return constructor.resolve(callback()).then(function () {
                    return constructor.reject(reason);
                });
            }
        );
    };

    Promise.all = function (arr) {
        return new Promise(function (resolve, reject) {
            if (!arr || typeof arr.length === 'undefined')
                throw new TypeError('Promise.all accepts an array');
            var args = Array.prototype.slice.call(arr);
            if (args.length === 0) return resolve([]);
            var remaining = args.length;

            function res(i, val) {
                try {
                    if (val && (typeof val === 'object' || typeof val === 'function')) {
                        var then = val.then;
                        if (typeof then === 'function') {
                            then.call(
                                val,
                                function (val) {
                                    res(i, val);
                                },
                                reject
                            );
                            return;
                        }
                    }
                    args[i] = val;
                    if (--remaining === 0) {
                        resolve(args);
                    }
                } catch (ex) {
                    reject(ex);
                }
            }

            for (var i = 0; i < args.length; i++) {
                res(i, args[i]);
            }
        });
    };

    Promise.resolve = function (value) {
        if (value && typeof value === 'object' && value.constructor === Promise) {
            return value;
        }

        return new Promise(function (resolve) {
            resolve(value);
        });
    };

    Promise.reject = function (value) {
        return new Promise(function (resolve, reject) {
            reject(value);
        });
    };

    Promise.race = function (values) {
        return new Promise(function (resolve, reject) {
            for (var i = 0, len = values.length; i < len; i++) {
                values[i].then(resolve, reject);
            }
        });
    };

    // Use polyfill for setImmediate for performance gains
    Promise._immediateFn =
        (typeof setImmediate === 'function' &&
            function (fn) {
                setImmediate(fn);
            }) ||
        function (fn) {
            setTimeoutFunc(fn, 0);
        };

    Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
        if (typeof console !== 'undefined' && console) {
            console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
        }
    };

    var globalNS = (function () {
        // the only reliable means to get the global object is
        // `Function('return this')()`
        // However, this causes CSP violations in Chrome apps.
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    })();

    if (!globalNS.Promise) {
        globalNS.Promise = Promise;
    }

})));

define('fetchWrapper',['promise'], function (Promise) {

    // Utitlit function to handle checking HTTP return status
    function checkStatus(response) {

        if (response.status >= 200 && response.status < 300) {

            return response;

        } else {

            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'fetchWrapper', func: 'checkStatus' }, response.statusText);

            var error = new Error(response.statusText);

            error.response = response;

            throw error;
        }
    }

    // Utility function to parse JSON
    function parseJSON(response) {

        if (typeof response === "object") {

            return response.json();
        }
        else if (typeof response === "string") {

            try {

                return JSON.parseJSON(response);
            }
            catch(e) {
                return response;
            }

        }

        return response;
    }

    function encodeFormData (oData) {

        var aEncodedValues = [];

        for (var key in oData) {
            aEncodedValues.push(encodeURIComponent(key) + '=' + encodeURIComponent(oData[key]));
        }

        return aEncodedValues.join('&');
    }

    var request = function request(req, res, jsonSubmit) {

        if (req.url) {

            var fetchObj = {
                cache: 'no-cache',
                method: req.method,
            };

            if ((location.hostname === "localhost" || location.hostname === "127.0.0.1") && location.port === "8888" && !req.ignoreLocal) {

                journal.log({ type: 'warning', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'request' }, 'Request method being forced to "GET"');

                req.method = 'GET';
            }
            else {

                // Add method only if needed
                if (!req.method) {
                    fetchObj.method = 'POST';
                }
                else {
                    fetchObj.method = req.method;
                }

                if (!req.headers) {

                    // Add this in all other environments not UI developer machines
                    fetchObj.mode = 'cors';
                    fetchObj.credentials = 'same-origin';

                    fetchObj.headers = {
                        'Access-Control-Allow-Origin': '*'
                    };
                }
                else {

                    fetchObj.mode = 'cors';
                    fetchObj.headers = req.headers;
                }

                if (req.body && typeof req.body === "object" && jsonSubmit) {

                    req.data = JSON.stringify(req.body);
                }

                if (jsonSubmit) {

                    if (fetchObj.headers) {
                        fetchObj.headers['Content-Type'] = 'application/json';
                    }

                    fetchObj.body = req.data;

                }
                else {

                    if (fetchObj.headers) {
                    	fetchObj.headers['Content-Type'] = 'application/x-www-form-urlencoded';
                    }

                    fetchObj.body = encodeFormData(req.data);
                }

            }

            if (!req.ignoreResponse) {

                fetch(req.url, fetchObj)
                    .then(checkStatus)
                    .then(parseJSON)
                    .then(function (data) {

                        if (typeof res === "object") {

                            // If response contains a done function execute it
                            if (res.done) {

                                res.done(data);
                            }

                        }
                        else {

                            journal.log({ type: 'error', owner: 'UI', module: 'fetch', func: 'irequest' }, 'Fetch completed but, there was no response object!');
                        }
                    })
                    //resolved or rejected - always
                    .then(function (data) {

                        if (res.always) {

                            res.always(data);
                        }

                    })
                    // Same as jQuery fail!
                    .catch(function (err) {

                        journal.log({ type: 'error', owner: 'UI', module: 'fetch', func: 'irequest' }, 'Fetch Data request failed!');

                        console.log(err);

                        if (res.fail) {

                            res.fail(err);
                        }
                        else {

                            console.log(res);

                        }

                    });

            }
            else {

                journal.log({ type: 'info', owner: 'UI', module: 'fetch', func: 'irequest' }, 'Fetch Data request successfully, but contents ignored!');

                fetch(req.url, fetchObj)
                    .then(checkStatus)
                    .then(function () {


                        if (typeof res === "object") {

                            // If response contains a done function execute it
                            if (res.done) {

                                res.done();
                            }

                        }
                        else {

                            journal.log({ type: 'error', owner: 'UI', module: 'fetch', func: 'irequest' }, 'Fetch completed but, there was no response object!');
                        }
                    })
                    //resolved or rejected - always
                    .then(function () {

                        if (res.always) {

                            res.always();
                        }

                    })
                    // Same as jQuery fail!
                    .catch(function (err) {

                        journal.log({ type: 'error', owner: 'UI', module: 'fetch', func: 'irequest' }, 'Fetch Data request failed!');

                        if (res.fail) {

                            res.fail(err);
                        }

                    });
            }


        }
    };

    return {
        request: request
    };

});

define('staticTree',[], function() {

    var _events = {};

    _events.staticToggle = function _static_toggle(evt) {

        evt.stopPropagation();

        var targetControl = evt.target;
        var canContinue = true;

        while(true) {

            if (targetControl.nodeType === 1) {

                if (targetControl.nodeName === "BODY") {
                    canContinue = false;
                    break;
                }

                if (targetControl.classList.contains("emp-expanding-control")) {
                    break;
                }
                else {
                    targetControl = targetControl.parentNode;
                }
                
                break;
            }
            else {

                targetControl = targetControl.parentNode;
            }

        }

        if (targetControl.classList.contains('emp-collapse-children')) {
            targetControl.classList.remove('emp-collapse-children');
        }
        else{
            targetControl.classList.add('emp-collapse-children');
        }

    };

    var StaticTree = function _staticTree(dStaticTree) {

        this.self = dStaticTree;

        this.self.addEventListener('click', function(evt) {
            _events.staticToggle(evt);
        });
    };

    var init = function _tree_init() {
        
        dStaticTrees = document.querySelectorAll('.emp-static-tree.emp-tree-root');

        for (var dST = 0, dSTLen = dStaticTrees.length; dST < dSTLen; dST++) {

            var dStaticTree = dStaticTrees[dST];

            if (dStaticTree.nodeType === 1) {

                var staticTreeRef = new StaticTree(dStaticTree);
            } 

        }

    };

    return {
        init: init
    };

});
define('analytics',[],function () {
    // Value codes:

    // Tooltips:
    // 1 Off-target click
    // 2 Close button click
    // 3 Repeat icon click
    // 4 Escape key
    // 5 Tab key
    // 6 Shift-tab key

    // Confirm dialog:
    // 1 Display
    // 2 Accept
    // 3 Decline

    ///////////////
    // Constants //
    ///////////////

    var VERSION = '0.0.1';
    var GA_PROPERTY_ID = 'UA-47449816-22';
    var GTM_PROPERTY_ID = 'GTM-T4FP6H';
    var DEBUG_TRACKING = false;

    // Enumeration of valid categories, per iflow convention
    var CATEGORIES = {
        // Non-user actions
        client: 'Client', // Device-related info
        app:    'App',    // App- and page-related info

        // User actions
        banner:     'Banner',
        footer:     'Footer',
        extlink:    'External Link Click',
        intlink:    'Internal Link Click',
        tooltip:    'Tooltip',
        datepicker: 'Date Picker',
        removeitem: 'Remove Item',
        tablerows:  'Table Expandable Rows',
    };

    // Private API namespace
    var priv = {};

    // Queue of events to be processed (e.g. events that occur before the Google plugin has loaded)
    priv.queue = [];

    // Ensure we don't initalize twice
    priv.hasInitialized = false;

    ////////////////////
    // Public methods //
    ////////////////////

    /**
     * Initialize Google Analytics and start tracking items on the page
     */
    var _init = function _init () {
    	// Insert Google Analytics script
        // Note that this will only run on a server with a .gov domain. For local testing, a test version of `ga` will be defined in the uiMockup component.
        if (!priv.hasInitialized && typeof ga !== 'function' && /\.gov$/.test(document.location.host)) {
            // console.info('real analytics init');

            if(GA_PROPERTY_ID === '' || GTM_PROPERTY_ID === ''){
                journal.log({type: 'info', owner: 'UI', module: 'analytics', submodule: '_init'}, 'Property ID not defined');

                return false;
            }

            /* jshint ignore:start */
            (function (i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function (){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
            ga('create', GA_PROPERTY_ID, 'auto');
            ga('send', 'pageview');
            /* jshint ignore:end */
        }
        else if (!priv.hasInitialized && typeof ga !== 'function') {
            // console.warn('fake analytics init');
            DEBUG_TRACKING = true;
            // Define our own GA that just logs to the console
            window.ga = function _ga_test (a, b, category, action, label, value, isNonInteraction) {
                // Events
                if (a === 'send' && b === 'event') {
                    // Must have at least category and action
                    if (typeof category !== 'string' || typeof action !== 'string') {
                        journal.log({type: 'error', owner: 'UI', module: 'analytics', submodule: '_init'}, 'Bad event tracking! Must supply category and action. First arg: ', JSON.parse(JSON.stringify(a)), ', second arg: ', JSON.parse(JSON.stringify(b)));

                        return false;
                    }

                    category = category.trim().toLowerCase();
                    action = action.trim();

                    // Make sure the category and action are not empty strings
                    if (!category.length || !action.length) {
                        journal.log({type: 'error', owner: 'UI', module: 'analytics', submodule: '_init'}, 'Bad event tracking! Invalid category or action: "', category, '", "', action, '", "', label, '", ', value, ', ' + isNonInteraction);

                        if (DEBUG_TRACKING) {
                            console.error('Bad event tracking: "', category, '", "', action, '", "', label, '", ', value, ', ' + isNonInteraction);
                        }

                        return false;
                    }

                    // No label
                    if (typeof label !== 'string' || label.trim().length < 1) {
                        if (DEBUG_TRACKING) {
                            console.info('Tracked event: "' + category  + '", "' + action + '"');
                        }
                    }
                    else {
                        label = label.trim();

                        // All components
                        if (typeof value === 'number' && value > -1) {
                            if (DEBUG_TRACKING) {
                                console.info('Tracked event: "' + category + '", "' + action + '", "' + label + '", ' + value, + ', ' + isNonInteraction);
                            }
                        }
                        // No value
                        else {
                            if (DEBUG_TRACKING) {
                                console.info('Tracked event: "' + category + '", "' + action + '", "' + label + '", ' + isNonInteraction);
                            }
                        }
                    }

                    // Log event
                    if (DEBUG_TRACKING) {
                        console.info('[GA Event] ', Array.prototype.slice.call(arguments));
                    }
                }
                // Some other request
                else {
                    // console.error('[GA] First two arguments must be `send` and `event`: ', Array.prototype.slice.call(arguments));
                }
            };

            // Process queue
            if (priv.queue.length) {
                var ev = priv.queue.pop();
                var i = 0;

                while (ev && i < 100) {
                    ga('send', 'event', ev.category, ev.action, ev.label, ev.value, ev.isNonInteraction);

                    if (DEBUG_TRACKING) {
                        console.info('popped from queue ', ev);
                    }

                    ev = priv.queue.pop();
                    i++;
                }
            }
        }

        // Setup the page as long as some version of `ga` has been defined
        if (!priv.hasInitialized && typeof ga !== 'function') {
            priv.insertGoogleTagManager();
            priv.setupEventTracking();
            priv.processQueue();

            priv.hasInitialized = true;
        }
    };

    /**
     * Dispatch a tracked event to GA
     * Documentation: https://developers.google.com/analytics/devguides/collection/analyticsjs/events
     *
     * @param   {string}  category          Name of general category; required
     * @param   {string}  action            Name of action; required
     * @param   {string}  label             Associated label; optional
     * @param   {number}  value             Integer value; optional
     * @param   {boolean} isNonInteraction  Whether the event is not a user action (and should not affect the bounce rate)
     */
    var _trackEvent = function _trackEvent (category, action, label, value, isNonInteraction) {
        // Make sure GA is available (i.e. we're not on a test server)
        if (typeof ga !== 'function') {
            priv.queue.push({
                category: category,
                action: action,
                label: label,
                value: value,
                isNonInteraction: isNonInteraction
            });
            // console.warn('added to queue ', {category: category, action: action, label: label, value: value, isNonInteraction: isNonInteraction});

            return false;
        }

        priv.processQueue();

        // Must have at least category and action
        if (typeof category !== 'string' || typeof action !== 'string') {
            return false;
        }

        category = category.trim().toLowerCase();
        action = action.trim();

        // Make sure the category is a valid one, and check for empty strings
        if (!category.length || !action.length || !CATEGORIES.hasOwnProperty(category)) {
            journal.log({type: 'error', owner: 'UI', module: 'analytics', submodule: '_trackEvent'}, 'Bad tracking', category, action, label, value);

            return false;
        }

        // Use normalized category text
        category = CATEGORIES[category];

        // No label
        if (typeof label !== 'string' || label.trim().length < 1) {
            if (isNonInteraction) {
                ga('send', 'event', category, action, {'nonInteraction': 1});
            }
            else {
                ga('send', 'event', category, action);
            }

            // console.info(category, action);
        }
        else {
            label = label.trim();

            // No value
            if (typeof value !== 'number' || value > -1) {
                if (isNonInteraction) {
                    ga('send', 'event', category, action, label, {'nonInteraction': 1});
                }
                else {
                    ga('send', 'event', category, action, label);
                }
                // console.info(category, action, label);
            }
            // All components
            else {
                if (isNonInteraction) {
                    ga('send', 'event', category, action, label, value, {'nonInteraction': 1});
                }
                else {
                    ga('send', 'event', category, action, label, value);
                }
                // console.info(category, action, label, value);
            }
        }
    };

    var _getVersion = function _getVersion (callback, hideImmediately) {
        return VERSION;
    };

    /////////////////////
    // Private methods //
    /////////////////////

    /**
     * Processes queued tracking events
     *
     * @return  {boolean}  Whether the queue was processed
     */
    priv.processQueue = function _processQueue () {
        var ev;

        if (typeof ga !== 'function' || !priv.queue.length) {
            return false;
        }

        ev = priv.queue.pop();
        while (ev) {
            trackEvent(ev.category, ev.action, ev.label, ev.value, ev.isNonInteraction);
            // console.info('popped from queue ', ev);
            ev = priv.queue.pop();
        }

        return true;
    };

    /**
     * Setup tracking for specific items that are not generated by JavaScript
     */
    priv.setupEventTracking = function _setupEventTracking () {
        var progressBar = document.getElementById('progress-bar');
        var trackProgressBar;
        var elems;
        var numElems;

        // Progress bar links
        if (progressBar) {
            // Define tracking parameters
            trackProgressBar = function _trackProgressBar (evt) {
                trackEvent('ProgressBar', 'Link click', evt.target.innerHTML);
            };

            // Get links
            elems = progressBar.getElementsByTagName('a');
            numElems = elems.length;

            while (numElems--) {
                elems[numElems].addEventListener('click', trackProgressBar, false);
            }
        }
    };

    /**
     * Insert Google Tag Manager for the uNav
     */
    priv.insertGoogleTagManager = function _insertGoogleTagManager () {
        if (typeof window.dataLayer === 'undefined' && document.location.protocol !== 'file:') {
            (function (w, d, s, l, i) {
                w[l] = w[l] || [];
                w[l].push({
                    'gtm.start': new Date().getTime(),
                    event: 'gtm.js'
                });

                var f = d.getElementsByTagName(s)[0];
                var j = d.createElement(s);
                var dl = l !== 'dataLayer' ? '&l=' + l : '';

                j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
                j.type = 'text/javascript';
                j.async = true;
                f.parentNode.insertBefore(j, f);
            })(window, document, 'script', 'dataLayer', GTM_PROPERTY_ID);
        }
    };

    //////////////////////////////////////////
    // Expose public properties and methods //
    //////////////////////////////////////////

    return {
        init: _init,
        trackEvent: _trackEvent,
        getVersion: _getVersion,
    };
});

define('fileUploadProgressModal',['jquery', 'render'], function($, render) {

    var _priv = {};
        _priv.loadendResponse;
        _priv.progressBarModal;

    var _events = {};

    _priv.createProgressBarModal = function _create_progress_bar_modal(){

        var progressBarModalCancelBtnJSON = {
            "contents": [
                {
                    "type": "row",
                    "template": "buttonGroup",
                    "style": "upload-modal",
                    "contents": [
                        {
                            "type": "column",
                            "template": "buttonGroup",
                            "style": "align-right",
                            "width": "full",
                            "contents": [
                                {
                                    "type": "button",
                                    "template": "field",
                                    "input": {
                                        "attributes": {
                                            "id": "cancel-upload",
                                        },
                                        "text": "Cancel",
                                    },
                                    "noFieldWrap": true
                                }
                            ]
                        }
                    ]
                }
            ]
        };

        render.section(undefined, progressBarModalCancelBtnJSON, 'return', function(htmlContents) {
    
            var progressBarModal = $.modal({
                    html: htmlContents,
                    hideDestroy: true,
                    buildInvisible: true,
                    autoOpen: true,
                    progressBar: true
                    //onCreate: function(modal){}
            });

            _priv.progressBarModal = progressBarModal;
        });
    };

    _priv.blockModalOverlayClick = function _modal_overlay_click_blocker(){
        
        setTimeout(function(){

            //click blocker Source
            var modalOverlay = document.querySelector('.cui-modal-overlay');

            if(modalOverlay !== null){

                $modalOverlay = $(modalOverlay);

                emp.clickblocker.add($modalOverlay);
            }

        }, 500);
    }; 

    _events.removeClickBlocker = function _remove_click_blocker(){

        var bodyElem = document.querySelector('body');

        bodyElem.addEventListener('click', function(evt){

            var targetElem = evt.target;

            if(targetElem.classList.contains('cui-modal-hide') || targetElem.id == 'cancel-upload'){

                if(emp.clickblocker.check()) {
                    emp.clickblocker.remove();
                }
            }

            //destroy modal
            if(targetElem.id == 'cancel-upload'){
                _priv.progressBarModal.destroy();
            }
        });
    };

    _priv.calculateProgressPercentage = function _calculate_progress_percentage(progressEvt){

        if(progressEvt.lengthComputable){
            
            var progressPercentage = (progressEvt.loaded / progressEvt.total * 100).toFixed();

            //update modal
            var modalElem = document.querySelector('.cui-modal');
            
            if(modalElem){

                var progressBarFillElem= modalElem.querySelector('.cui-modal-progress-bar-fill'),
                    progressBarPercentageElem = progressBarFillElem.querySelector('.cui-modal-progress-bar-percentage'),
                    modalActionText = modalElem.querySelector('.cui-modal-progress-bar-action-text');

                    progressBarFillElem.style.width = progressPercentage + '%';
                    progressBarPercentageElem.textContent = progressPercentage + '%';

                    //console.log(progressPercentage);

                //upload completed - update message
                if(progressPercentage == 100){

                    console.log(_priv.loadendResponse);

                    var loadendResponseJSONParse = JSON.parse(_priv.loadendResponse);

                    modalActionText.innerText = loadendResponseJSONParse.message;

                    //destroy modal
                    setTimeout(function(){

                        _priv.progressBarModal.destroy();

                        //remove click click blocker
                        if(emp.clickblocker.check()) {
                            emp.clickblocker.remove();
                        }

                    }, 500);
                }
            }
        }
    };

    _priv.handleFileUploadError = function _handle_file_upload_errr(evt, xhr){

        //wait for modal to render
        setTimeout(function(){

            //update modal
            var modalElem = document.querySelector('.cui-modal');

            if(modalElem){

                var modalActionText = modalElem.querySelector('.cui-modal-progress-bar-action-text');
                    modalActionText.innerText = 'An error has occurred.';
                    modalActionText.style.color = '#b52c2c';
            }
            
        }, 500);

        //abort the request
        xhr.abort();

        journal.log({ type: 'error', owner: 'UI', module: 'fileUploadModal', func: '_priv.handleFileUploadError' }, 'Error occured with request!');

        journal.log({ type: 'error', owner: 'UI', module: 'fileUploadModal', func: '_priv.handleFileUploadError' }, 'Request has been aborted!');
    };

    _events.abortFileUpload = function _abort_file_upload(xhr){

        setTimeout(function(){

            var modalElem = document.querySelector('.cui-modal'),
                modalCloseBtn = modalElem.querySelector('.cui-modal-hide'),
                cancelUploadBtn = modalElem.querySelector('#cancel-upload');

            if(modalCloseBtn !== null && cancelUploadBtn !== null){

                modalCloseBtn.addEventListener('click', function(){
                    xhr.abort();
                });

                cancelUploadBtn.addEventListener('click', function(){
                    xhr.abort();
                });
            }

        }, 500);
    };

    //sets up formData
    /* _priv.processForm = function _process_form(form){

        form = form[0];
    }; */

    //xhr file upload request
    _priv.xhrUploadFileRequest = function _fetch_upload_file(uploadUrl, file){

        var req = {
            method: "POST",
            url: uploadUrl,
            data: file
        };

        //create new xhr object
        var xhr = new XMLHttpRequest();
        //xhr.setRequestHeader('Content-Type', 'multipart/form-data');

        //upload progress listener
        xhr.upload.addEventListener('progress', function(evt){
            setTimeout(function(){
                _priv.calculateProgressPercentage(evt);
            }, 500);
        });

        //upload error listener - error during the upload
        xhr.upload.addEventListener('error', function(evt){
            _priv.handleFileUploadError(evt, xhr);
        });

        //check status
        xhr.addEventListener('loadend', function(evt){

            if(this.status == 200){
                _priv.loadendResponse = this.response;
            }
        });

        //prevent click outside of modal content
        _priv.blockModalOverlayClick();

        //remove click block after modal close or Cancel btn is clicked
        _events.removeClickBlocker();

        //abort upload listener
        _events.abortFileUpload(xhr);

        //setup request
        xhr.open(req.method, req.url);

        //send request
        xhr.send(req.data);
    };

    var setup = function _init(evt, args){


        //validate form
        var bodyWrapper = document.querySelector('#body-wrapper'),
            mainForm = bodyWrapper.querySelector('form');

        //needs to be converted to a jQuery obj for now
        mainForm = $(mainForm);

        var validationResult = emp.validate.form(mainForm);

        if(validationResult == true){

            if(args && args.url && args.url !==''){

                // Check to see if the require module
                if (require.defined('modal')) {
                    _priv.createProgressBarModal();
                }
                else {

                    // Load the require module and then create the modal
                    cui.load('modal', function _progress_bar_modal() {
                        _priv.createProgressBarModal();
                    });
                }

                //_priv.processForm(mainForm);

                var formData = new FormData(mainForm[0]);                

                _priv.xhrUploadFileRequest(args.url, formData);
            }
        }
    };

    return{
        setup: setup
    };
});
define('badge',['jquery', 'cui'], function ($, cui) {
    ///////////////
    // Constants //
    ///////////////
    var VERSION = '0.1.0';

    var CLASSES = {
                // Global classes
                hidden: 'cui-hidden',
                animateShake: 'cui-animate-shake',

                // Plugin-specific classes
                badge: 'cui-badge',
                indeterminateState: 'cui-badge-indeterminate',
            };

    var PADDING = -2;

    var priv = {};
    var badges = [];
    var $body = $('body');
    var $window = $(window);

    /////////////////
    // Constructor //
    /////////////////

    var Badge = function (elem, options) {
        // Create a jQuery version of the element
        this.$target = $(elem);
        // Store the options
        this.options = options;

        // Extract data attribute options
        this.metadata = this.$target.data('badge-options');

        return this;
    };

    //////////////////////
    // Plugin prototype //
    //////////////////////

    Badge.prototype = {};

    // Default user options
    Badge.prototype.defaults = {
        value: 0,
        display: {
            css: {
            },
            className: '',
            offset: {
                top: 0,
                left: 0,
            },
        },
        location: 'above-right',
        increment: null,
        decrement: null,
    };

    /**
     * Initializes the plugin
     * May be called multiple times
     */
    Badge.prototype.init = function () {
        var badge;

        // Introduce defaults that can be extended either globally or using an object literal
        if (typeof this.options === 'string') {
            this.config = $.extend(true, {}, this.defaults);
            this.config.value = this.options;
        }
        else {
            this.config = $.extend(true, {}, this.defaults, this.options, this.metadata);
        }

        // Create new badge object using this instance
        badge = this;

        badge.isOpen = false;

        // Create the badge element
        badge.$badge = priv.createBadge(badge);

        // Apply the value
        priv.applyValue(badge);

        // Adds this badge instance to our array so we can track all of them
        badges.push(badge);

        // Keep the badge aligned properly when window is resized
        $window.on('resize', function (evt) {
            priv.onWindowResize(evt, badge);
        }.bind(badge));

        // Return this instance of the plugin
        return badge;
    };

    /**
     * Set a badge's value
     *
     * @param   {Function}  callback  Optional function to run after closing the badge. It will receive the badge instance as an argument.
     */
    Badge.prototype.set = function _set (newValue, callback) {
        this.config.value = newValue;

        priv.applyValue(this);

        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Increments a badge's value
     *
     * @param   {Function}  callback  Optional function to run after closing the badge. It will receive the badge instance as an argument.
     */
    Badge.prototype.increment = function _increment (options, callback) {
        if (options && typeof options === 'object') {
            priv.incrementValue(this, options);
        }
        else {
            priv.incrementValue(this);
        }

        // Check to see if the caller included a callback function as the first/only argument
        if (typeof options === 'function' && typeof callback !== 'function') {
            options(this);
        }

        // Check to see if the caller included a callback function
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Decrements a badge's value
     *
     * @param   {Function}  callback  Optional function to run after closing the badge. It will receive the badge instance as an argument.
     */
    Badge.prototype.decrement = function _decrement (options, callback) {
        if (options && typeof options === 'object') {
            priv.decrementValue(this, options);
        }
        else {
            priv.decrementValue(this);
        }

        // Check to see if the caller included a callback function as the first/only argument
        if (typeof options === 'function' && typeof callback !== 'function') {
            options(this);
        }

        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * (Re)position the badge
     *
     * @param   {Function}  callback  Optional function to run after closing the badge. It will receive the badge instance as an argument.
     */
    Badge.prototype.position = function _position (callback) {
        priv.positionBadge(this);

        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /**
     * Destroy the badge
     *
     * @param   {Function}  callback  Optional function to run after closing the badge. It will receive the badge instance as an argument.
     */
    Badge.prototype.destroy = function _destroy (callback) {
        if (typeof callback === 'function') {
            callback(this);
        }
    };

    /////////////////////
    // Private methods //
    /////////////////////

    // Opens a new badge window
    priv.openBadge = function openBadge (badge) {
        // Position it
        priv.positionBadge(badge);

        // Reveal it
        badge.$badge
            .animate(
                {opacity: 1},
                400
            );

        badge.isOpen = true;

        badge.$badge.trigger('show.badge');
    };

    // Handles the window resize event
    priv.onWindowResize = function onWindowResize (evt, badge) {
        if (badge.isOpen) {
            priv.positionBadge(badge);
        }
    };

    // Create the badge container element
    priv.createBadge = function createBadge (badge) {
        // Defines the badge window div and makes it fade in
        var $badge = $('<div/>')
                            .addClass(CLASSES.badge)
                            .addClass(badge.config.display.className)
                            .attr('tabindex', '0')
                            .css(badge.config.display.css)
                            .css('opacity', '0') // Keep it hidden for now
                            .appendTo(document.body);

        return $badge;
    };

    // Function that will position the badge on the page - Aligned to right side of Notifications button
    priv.positionBadge = function positionBadge (badge) {
        var position = {
            top: 0,
            left: 0,
        };
        var addedRightMargin = false;
        var windowWidth;
        var badgeWidth;
        var badgeHeightActual;
        var badgeHeightWithPadding;
        var buttonOffset;
        var buttonWidth;
        var buttonHeight;
        var buttonLineHeight;
        var difference;

        /**
         * Determines the position based on the requested location, detects boundary collisions, and falls back to other locations if necessary
         *
         * @param   {String}  location  Location of the badge
         * @param   {Object}  position  Position definition
         *
         * @return  {Object}            Updated position definition
         */
        var __determinePosition = function __determinePosition (location, position) {
            /**
             * Determines the top and left positioning for the badge
             * This is a very simple, nearly logic-less function that does not do boundary testing or fallbacks
             */
            var __getTopAndLeft = function __getTopAndLeft (placement) {
                // Returns the `top` value when the badge is above the button
                var __getTopWhenAbove = function __getTopWhenAbove () {
                    return buttonOffset.top; // - (buttonLineHeight / 8);
                };

                // Returns the `top` value when the badge is below the button
                var __getTopWhenBelow = function __getTopWhenBelow () {
                    return buttonOffset.top + buttonHeight + PADDING;
                };

                if (placement === 'below-left') {
                    position.left = buttonOffset.left;
                    position.top = __getTopWhenBelow();
                }
                else if (placement === 'above-left') {
                    position.left = buttonOffset.left;
                    position.top = __getTopWhenAbove();
                }
                else if (placement === 'below-right') {
                    position.left = buttonOffset.left + buttonWidth - badgeWidth + (PADDING / 2) - (buttonLineHeight / 8);
                    position.top = __getTopWhenBelow();
                }
                else if (placement === 'above-right') {
                    position.left = buttonOffset.left + buttonWidth - badgeWidth + (badgeWidth / 2);
                    position.top = __getTopWhenAbove();
                }
                else if (/^(above|below)\-center$/.test(placement)) {
                    // Vertical position is different for each `center` location
                    if (placement === 'below-center') {
                        position.top = __getTopWhenBelow();
                    }
                    else if (placement === 'above-center') {
                        position.top = __getTopWhenAbove();
                    }

                    // Horizontal position is the same for both `center` locations

                    // To determine the `left` value, start at the left edge of the button...
                    position.left = buttonOffset.left;

                    // ...then add half of the difference between the button's width and the badge's width
                    // If the badge is wider than the button, the difference will be a negative number which will actually pull the badge to the right (which is what we'd want to happen)
                    position.left += ((buttonWidth - badgeWidth) / 2);
                }
                else if (/^inline\-(right|left)$/.test(placement)) {
                    // Horizontal position is different for each `inline` location
                    if (placement === 'inline-left') {
                        position.left = buttonOffset.left - badgeWidth - PADDING;
                    }
                    else if (placement === 'inline-right') {
                        position.left = buttonOffset.left + buttonWidth + PADDING;
                    }

                    // Vertical position is the same for both `inline` locations

                    // To determine the `top` value, start at the top edge of the button...
                    position.top = buttonOffset.top;

                    // ...then add half of the difference between the button's height and the badge's height
                    // If the badge is taller than the button, the difference will be a negative number which will actually pull the badge upward (which is what we'd want to happen)
                    position.top += ((buttonHeight - badgeHeightActual) / 2);
                }
            };

            // Start off with a simple guess at the top and left values
            __getTopAndLeft(location);

            // Perform boundary detection and fallbacks based on the requested location
            // Note that not all locations have fallbacks. If they did, then we might create an infinite loop as each test fails and calls another fallback in turn. Instead, some of the locations merely tweak the positioning to find the most practical position for the badge. These locations are marked with a 'safe' comment -- falling back to a safe location will avoid infinite looping. Do not use a 'not safe' location as a fallback.

            // Safe (no recursive fallback)
            if (location === 'below-left') {
                // Clipped by the left edge of the screen
                if (position.left < 0) {
                    // Determine how far it is from the left edge (a negative value means it's being clipped)
                    difference = windowWidth - (position.left + badgeWidth + PADDING);

                    // Shift the badge to the right just enough to fit on-screen
                    position.left = 0;

                    // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                    badge.$badge.css('margin-right', PADDING + 'px');
                    addedRightMargin = true;
                }
            }
            // Not safe (includes recursive fallback)
            else if (location === 'above-left') {
                // We need to verify two things in conjunction: that it's not clipped by the top of the window, and that it's not running off the left edge of the screen

                // Condition: clipped by the top edge of the window
                if (position.top < 0) {
                    // It does not matter whether the badge is also clipped by the left edge. While we can fix the `left` value easily (see next condition), our only recourse for `top` is to fallback to a safe location
                    position = __determinePosition('below-left', position);
                }
                // Condition: clipped by the left edge of the window only
                else if (position.left < 0) {
                    // Shift the badge to the right just enough to fit on-screen
                    position.left = 0;

                    // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                    badge.$badge.css('margin-right', PADDING + 'px');
                    addedRightMargin = true;
                }
            }
            // Safe (no recursive fallback)
            else if (location === 'below-right') {
                // Determine how far it is from the right edge (a negative value means it's being clipped)
                difference = windowWidth - (position.left + badgeWidth + PADDING);

                // Clipped by the right edge
                if (difference < 0) {
                    // Shift the badge to the right just enough to fit on-screen
                    position.left += difference;
                    position.left -= PADDING;

                    // But make sure we didn't just push it off the left edge of the screen
                    if (position.left < 0) {
                        position.left = 0;

                        // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                        badge.$badge.css('margin-right', PADDING + 'px');
                        addedRightMargin = true;
                    }
                }
            }
            // Not safe (includes recursive fallback)
            else if (location === 'above-right') {
                // We need to verify two things inconjunction: that it's not clipped by the top of the window, and that it's not running off the left edge of the screen

                // Determine how far it is from the right edge (a negative value means it's being clipped)
                difference = windowWidth - (position.left + badgeWidth + PADDING);

                // Condition: clipped by the top of the window
                if (position.top < 0) {
                    // It doesn't matter if it is also clipped by the right edge. While we could fix the `left` value easily (see next condition), our only recourse for `top` is to fallback to a safe location
                    position = __determinePosition('below-right', position);
                }
                // Condition: clipped by the right edge of the window only
                else if (difference < 0) {
                    // Shift the badge to the right just enough to fit on-screen
                    position.left += difference;
                    position.left -= PADDING;

                    // But make sure we didn't just push it off the left edge of the screen
                    if (position.left < 0) {
                        position.left = 0;

                        // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                        badge.$badge.css('margin-right', PADDING + 'px');
                        addedRightMargin = true;
                    }
                }
            }
            // Not safe (includes recursive fallback)
            else if (location === 'inline-left') {
                // Condition: clipped by the left edge of the screen
                if (position.left < 0) {
                    position = __determinePosition('below-left', position);
                }
            }
            // Not safe (includes recursive fallback)
            else if (location === 'inline-right') {
                // Condition: clipped by the right edge of the screen
                if (position.left + badgeWidth > windowWidth) {
                   __determinePosition('below-right', position);
                }
            }
            // Not safe (includes recursive fallback) unless only the `top` is broken
            else if (location === 'below-center') {
                // There are two bad scenarios: the badge is clipped by the right edge of the screen, or it's clipped by the left edge

                // Condition: clipped by the left edge of the screen
                if (position.left < 0) {
                    // Shift it to the right just enough to be on-screen
                    position.left = 0;

                    // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                    badge.$badge.css('margin-right', PADDING + 'px');
                    addedRightMargin = true;
                }
                // Clipped by the right edge
                else if (position.left + badgeWidth > windowWidth) {
                   __determinePosition('below-right', position);
                }
            }
            // Not safe (includes recursive fallback) when the `top` is broken
            else if (location === 'above-center') {
                // There are three bad scenarios we need to check for. The badge can be clipped by these edges of the screen:
                // 1. top
                // 2. left
                // 3. right
                // We do not need to check for combinations (e.g. clipped by the right and top edges) because our fallback for `top` will handle any horizontal issues

                // 1. Clipped by the top edge
                if (position.top < 0) {
                    // If the top is broken we are forced to move the badge below the button. There's no point looking into whether it also fails the left or right edge since our fallback will take care of that.
                    __getTopAndLeft('below-center');
                    position = __determinePosition('below-center', position);
                }
                // 2. Clipped by the left edge, but not the top
                else if (position.left < 0) {
                    // Shift it to the right just enough to be on-screen
                    position.left = 0;

                    // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                    badge.$badge.css('margin-right', PADDING + 'px');
                    addedRightMargin = true;
                }
                // 3. Clipped by the right edge, but not the top
                else if (position.left + badgeWidth > windowWidth) {
                    // Determine how far it is from the left edge (a negative value means it's being clipped)
                    difference = windowWidth - (position.left + badgeWidth + PADDING);

                    // Shift the badge to the right just enough to fit on-screen
                    position.left += difference;
                    position.left -= PADDING;

                    // But make sure we didn't just push it off the left edge of the screen
                    if (position.left < 0) {
                        position.left = 0;

                        // Add a margin to prevent the badge from butting up against the edge of the screen. We cannot simply change the `left` value to create this gap because if the badge contains wrapping text the text will simply reflow and keep using as much width as possible.
                        badge.$badge.css('margin-right', PADDING + 'px');
                        addedRightMargin = true;
                    }
                }
            }
            else {
                console.error('UI [badge] Unsupported location "' + badge.config.location + '" ', badge);

                return null;
            }

            return position;
        };

        // Gather measurements about key elements

        buttonOffset = badge.$target.offset();
        buttonWidth = badge.$target.outerWidth();
        buttonHeight = badge.$target.outerHeight();
        buttonLineHeight = getComputedStyle(badge.$target.get(0)).lineHeight;

        if (/px$/.test(buttonLineHeight)) {
            buttonLineHeight = parseInt(buttonLineHeight, 10);
        }
        else if (/em$/.test(buttonLineHeight)) {
            buttonLineHeight = parseInt(buttonLineHeight, 10) * 16;
        }
        else {
            buttonLineHeight = buttonHeight;
        }

        badgeWidth = badge.$badge.outerWidth() + (PADDING / 2);
        badgeHeightActual = badge.$badge.outerHeight(); // For inline positioning we want the actual height of the badge
        badgeHeightWithPadding = badgeHeightActual + (PADDING / 2); // Above and below the button we want to account for padding, but only half of it because the button already has some visual padding built in

        windowWidth = window.innerWidth;

        // Get the positioning values for the requested location
        // Hint: this is the "main" operation of this function and a good place to start for debugging. Most of the real work is done in `__determinePosition()`.
        position = __determinePosition(badge.config.location, position);

        // No position found (e.g. the location was invalid)
        if (position === null) {
            return false;
        }

        // Remove the margin that may have been added earlier in the page's lifecycle (e.g. before the window was resized)
        if (!addedRightMargin) {
            badge.$badge.get(0).style.removeProperty('margin-right');
        }

        // Apply user-specified offsets
        if (badge.config.display.offset) {
            if (badge.config.display.offset.top) {
                position.top += badge.config.display.offset.top;
            }

            if (badge.config.display.offset.left) {
                position.left += badge.config.display.offset.left;
            }
        }

        // Apply the positioning styles
        badge.$badge
            .css({
                left: position.left,
                top: position.top,
            });
    };

    /**
     * Increases the badge's current value
     *
     * @param   {Object}  badge    Badge instance
     * @param   {Object}  options  Optional settings
     *
     * @return  {Boolean}          The new value
     */
    priv.incrementValue = function _incrementValue (badge, options) {
        var valueType;

        // User-defined function for incrementing the value
        if (typeof badge.config.increment === 'function') {
            badge.config.value = badge.config.increment(badge.config.value, badge, options);
        }
        // Automatic incrementing
        else {
            // Ignore the indeterminate state
            if (priv.isIndeterminateState(badge)) {
                return false;
            }

            valueType = typeof badge.config.value;

            // Number, either an actual number like `2` or a string equivalent like `"2"`
            if (valueType === 'number' || (valueType === 'string' && ('' + parseFloat(badge.config.value)) === badge.config.value)) {
                badge.config.value = parseFloat(badge.config.value) + 1;
            }
            // String
            else if (valueType === 'string') {
                // Single letter
                if (badge.config.value.length === 1) {
                    // Increase by one
                    badge.config.value = String.fromCharCode(badge.config.value.charCodeAt(0) + 1);
                }
                // No other strings are supported yet
                else {
                    console.error('[Badge] Cannot increment string value: "' + badge.config.value + '"');

                    return false;
                }
            }
            // Boolean
            else if (valueType === 'boolean') {
                // Toggle to the opposite state
                badge.config.value = !!badge.config.value;
            }
            // Nothing else is supported yet
            else {
                console.error('[Badge] Cannot increment value of type ' + (valueType) + ': "', badge.config.value, '"');

                return false;
            }
        }

        // Apply the value
        priv.applyValue(badge, options);

        return badge.config.value;
    };

    /**
     * Decreases the badge's current value
     *
     * @param   {Object}  badge    Badge instance
     * @param   {Object}  options  Optional settings
     *
     * @return  {Boolean}          The new value
     */
    priv.decrementValue = function _decrementValue (badge, options) {
        var valueType;

        // User-defined function for decrementing the value
        if (typeof badge.config.decrement === 'function') {
            badge.config.value = badge.config.decrement(badge.config.value, badge, options);
        }
        // Automatic decrementing
        else {
            // Ignore the indeterminate state
            if (priv.isIndeterminateState(badge)) {
                return false;
            }

            valueType = typeof badge.config.value;

            // Number, either an actual number like `2` or a string equivalent like `"2"`
            if (valueType === 'number' || (valueType === 'string' && ('' + parseFloat(badge.config.value)) === badge.config.value)) {
                badge.config.value = parseFloat(badge.config.value) - 1;
            }
            // String
            else if (valueType === 'string') {
                // Single letter
                if (badge.config.value.length === 1) {
                    // Decrease by one
                    badge.config.value = String.fromCharCode(badge.config.value.charCodeAt(0) - 1);
                }
                // No other strings are supported yet
                else {
                    console.error('[Badge] Cannot decrement string value: "' + badge.config.value + '"');

                    return false;
                }
            }
            // Boolean
            else if (valueType === 'boolean') {
                // Toggle to the opposite state
                badge.config.value = !!badge.config.value;
            }
            // Nothing else is supported yet
            else {
                console.error('[Badge] Cannot decrement value of type ' + (valueType) + ': "', badge.config.value, '"');

                return false;
            }
        }

        // Apply the value
        priv.applyValue(badge, options);

        return badge.config.value;
    };

    /**
     * Updates the displayed value on the badge
     *
     * @param   {Object}  badge    Badge instance
     * @param   {Object}  options  Optional settings
     *
     * @return  {Boolean}          Success/failure
     */
    priv.applyValue = function _applyValue (badge, options) {
        // Display the new value
        if (badge.config.value instanceof $) {
            badge.$badge.append(badge.config.value);
        }
        else {
            badge.$badge.html(badge.config.value);
        }

        // Hide if there's no value
        if ([null, 0, undefined, ''].indexOf(badge.config.value) !== -1) {
            badge.$badge.addClass(CLASSES.hidden);
            badge.isOpen = false;
        }
        else {
            badge.$badge.removeClass(CLASSES.hidden);
            badge.isOpen = true;

            if (priv.isIndeterminateState(badge)) {
                badge.$badge.addClass(CLASSES.indeterminateState);
            }
            else {
                badge.$badge.removeClass(CLASSES.indeterminateState);
            }

            // Display the badge
            if (!badge.$badge.hasClass(CLASSES.hidden)) {
                priv.openBadge(badge);
            }

            // Animate the change, unless told not to
            if (!options || options.animation !== false) {
                // Start the animation
                badge.$badge.addClass(CLASSES.animateShake);

                // Stop the animation after a brief period
                setTimeout(function () {
                    badge.$badge.removeClass(CLASSES.animateShake);
                }, 200);
            }
        }

        return true;
    };

    /**
     * Determines whether the badge is currently in an indeterminate state
     *
     * @param   {Object}   badge  Badge instance
     *
     * @return  {Boolean}         The result
     */
    priv.isIndeterminateState = function _isIndeterminateState (badge) {
        return (badge.config.value === -1);
    };

    //////////////////////////////////////////
    // Expose public properties and methods //
    //////////////////////////////////////////

    Badge.defaults = Badge.prototype.defaults;

    Badge.version = VERSION;

    // Define jQuery plugin
    window.$.fn.badge = function (options) {
        return this.each(function () {
            new Badge(this, options).init();
        });
    };

    window.$.badge = function (target, options) {
        return new Badge(target, options).init();
    };
});

// Returns the cursor position within an input field
// http://stackoverflow.com/a/2897510/348995
(function ($) {
    $.fn.getCursorPosition = function _getCursorPosition () {
        var input = this.get(0);
        var sel;
        var selLength;

        if (!input) {
            return;
        }

        // Standards-compliant browsers
        if ('selectionStart' in input) {
            return input.selectionStart;
        }
        // IE <9
        else if (document.selection) {
            input.focus();
            sel = document.selection.createRange();
            selLength = document.selection.createRange().text.length;
            sel.moveStart('character', -input.value.length);
            return sel.text.length - selLength;
        }
    };
}(jQuery));

define("getCursorPosition", function(){});

!function(t){"use strict";function e(){var e=this;e.reads=[],e.writes=[],e.raf=s.bind(t)}function n(t){t.scheduled||(t.scheduled=!0,t.raf(i.bind(null,t)))}function i(t){var e,i=t.writes,o=t.reads;try{r(o),r(i)}catch(a){e=a}if(t.scheduled=!1,(o.length||i.length)&&n(t),e){if(!t["catch"])throw e;t["catch"](e)}}function r(t){for(var e;e=t.shift();)e.fn.call(e.ctx)}function o(t,e){var n=t.indexOf(e);return!!~n&&!!t.splice(n,1)}function a(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])}var s=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.msRequestAnimationFrame||function(t){return setTimeout(t,16)};e.prototype={constructor:e,measure:function(t,e){var i={fn:t,ctx:e};return this.reads.push(i),n(this),i},mutate:function(t,e){var i={fn:t,ctx:e};return this.writes.push(i),n(this),i},clear:function(t){return o(this.reads,t)||o(this.writes,t)},extend:function(t){if("object"!=typeof t)throw new Error("expected object");var e=Object.create(this);return a(e,t),e.fastdom=this,e.initialize&&e.initialize(),e},"catch":null};var exports=t.fastdom=t.fastdom||new e;"f"==(typeof define)[0]?define('fastdom',[],function(){return exports}):"o"==(typeof module)[0]&&(module.exports=exports)}(window);
define('showHidePassword',[], function() {

    var init = function _password_init() {

        var documentBody = document.querySelector('body');

        documentBody.addEventListener('click', function(evt) {

            var source = evt.target;

            if (source.classList.contains('emp-password-toggle')) {

                var parentWrapper = evt.target;
                var currentInput = false;
                var currentValue = false;
                var newInput = false;

                while(!parentWrapper.classList.contains('emp-password-wrapper')) {
                    parentWrapper = parentWrapper.parentNode;
                }

                currentInput = parentWrapper.querySelector('.emp-password-input');
                currentValue = currentInput.value;

                var inputAttributes = {};

                for (var i = 0, atts = currentInput.attributes, n = atts.length; i < n; i++){

                    if (atts[i].nodeName === "type") {

                        if (currentInput.getAttribute("type") === "text") {
                            inputAttributes.type = "password";
                            source.textContent = "Show";
                        }
                        else {
                            inputAttributes.type = "text";
                            source.textContent = "Hide";
                        }

                    }
                    else if (atts[i].nodeName === "value") {
                        inputAttributes.value = currentValue;
                    }
                    else {
                        inputAttributes[atts[i].nodeName] = currentInput.getAttribute(atts[i].nodeName);
                    }
                }

                // Generate the new input
                newInput = document.createElement('input');
                newInput.value = currentValue;

                for (var attrs in inputAttributes) {
                    newInput.setAttribute(attrs, inputAttributes[attrs]);
                }

                parentWrapper.removeChild(currentInput);
                parentWrapper.insertBefore(newInput, parentWrapper.childNodes[0]);

            }

        });

    };

    return {
        init: init
    };

});
define('empMessage',['jquery', 'cui', 'kind', 'render'], function ($, cui, kind, render) {

    //Functionality.
    /*
    Field Messages:
        - Add field message
        - Remove field message
        - supress page message

    Page Messages:
        - Display message(determine filed/page);
        - Add page message
        - remove page message

    Message reference store:
        - Add message to store
        - Remove message from store and update page/field messages accordingly
        - Check if message exists

    Field Message Page Notifier:
        - Determine When to display based on field level messages and options (pageNotifier)

    Suppress field error page notifier with in fwData:
        "screen":{
            "suppressPageNotifier":true
        },
    */

    var CLASSES = {
        iconControl: 'emp-icon-hide-icon',
        textControl: 'emp-no-icon-hide-text',
        pageNotifier: 'cui-field-error-notifier',
        hideFromScreen: 'cui-hide-from-screen'
    };

    var ARIA_DESCRIPTIONS = {
        warning:"Warning message:",
        success:"Success message:",
        error:"Error message:",
        informational:"Informational message:",
        info:"Informational message:",
        default:"Message:"
    };

    var _priv = {};
    var _defaults = {
        options : {
            pageNotifier: true, //Only applies to field level messages
            field: false, //jquery field object or id. Determines if message is field or page level message
            msgLocation: false,
            scroll: true //Scroll to top of page when page message or notifier is displayed
        }
    };

    //Page level suppression flag.
    var suppressPageNotifier = false;

    //Check if page suppression is enabled.
    if (window.fwData && fwData.context && fwData.context.screen && fwData.context.screen.suppressPageNotifier && fwData.context.screen.suppressPageNotifier === true){
        suppressPageNotifier = true;
    }

    _priv.$pageBody = $("html,body");

    /*
    Public Functions
    */

    //Returns message object
    var createMessage = function _createMessage(msgObj, options){
        var $messageLoc;
        var $fieldParent;
        var newMsg;
        var $newMsg;
        var $message;

        options = _priv.extendOptions(options);

        if (options.msgLocation && options.msgLocation.nodeType && options.msgLocation.nodeType === 1) {
            options.msgLocation = $(options.msgLocation);
        }

        //Determine wether to call page or field message.
        if (options.field && options.field.nodeType === Node.ELEMENT_NODE ) {

            options.field = $(options.field);

            $message = _priv.createFieldMessage(msgObj, options);
        }
        else if(options.field && typeof options.field[0] === 'object'){
            $message = _priv.createFieldMessage(msgObj, options);
        }
        else if(options.field && typeof options.field === 'object'){
            $message = _priv.createFieldMessage(msgObj, options);
        }
        else if(options.field && typeof options.field === 'string'){

            if(options.field.indexOf('#')>0){
                options.field = $(options.field);
            }
            else{
                options.field = $('#'+options.field);
            }

            $message = _priv.createFieldMessage(msgObj, options);
        }
        else{

            $message = _priv.createPageMessage(msgObj, options);
        }

        return $message;
    };

    var removeMessage = function _removeMessage($msg, options){

        options = _priv.extendOptions(options);

        //Remove message from emp.references object.
        if (emp.reference.message && emp.reference.message.length) {

            for (var i = 0, len = emp.reference.message.length; i < len; i++) {

                if (emp.reference.message[i].ref && emp.reference.message[i].ref.is($msg)) {

                    emp.reference.message.splice(i, 1);

                    break;
                }
            }
        }

        var location = options.msgLocation;

        // If the location is not specified look for it.
        if (!location) {

            var $pageMessage = [];
            var $fieldMessage = [];

            if($('ul.cui-messages.emp-messages')){
                $pageMessage = $msg.parents('ul.cui-messages.emp-messages').eq(0);
            }
            if($('.cui-messages.cui-field-message')){
                $fieldMessage = $msg.parents('.cui-messages.cui-field-message').eq(0);
            }

            if ($pageMessage.length === 1) {

                // Remove message
                $msg.remove();

                if ($pageMessage.children().length === 0) {
                    $pageMessage.addClass('cui-hidden');
                }
            }
            else if($fieldMessage.length === 1) {

                $fieldWrapper = $fieldMessage.parents('.emp-field').eq(0);

                // Remove message
                $msg.remove();

                if ($fieldMessage.children().length === 0) {

                    $fieldMessage.addClass('cui-hidden');
                    $fieldWrapper.removeClass('cui-in-error');
                }

                _priv.updatePageNotifier(options);
            }
            else{
                // Remove message
                // $msg.remove();
            }
        }
        else if(typeof location === 'object'){
            $msg.remove();

            if (location.children().length === 0) {
                    location.addClass('cui-hidden');
            }

            _priv.updatePageNotifier(options);
        }
        else {

        }
    };

    var scrollToMessage = function _scrollToMessage($messageLoc){
        var scrollPage = false;

        if($messageLoc === undefined){
            $pageMessages = $('#body-wrapper').find('ul.cui-messages.emp-messages').eq(0);

            if(!$pageMessages.hasClass('cui-hidden') && $pageMessages.children().length >= 1){
                $messageLoc = $pageMessages;
            }
        }

        if (emp.reference.message && emp.reference.message.length) {
            for (var j = 0, leng = emp.reference.message.length; j < leng; j++) {

                if(emp.reference.message[j].options.field){
                    if (emp.reference.message[j].options.pageNotifier && emp.reference.message[j].options.pageNotifier !== false) {
                        scrollPage = true;
                    }
                }
                else{
                    scrollPage = true;
                }

            }
        }

        if(scrollPage && $messageLoc !== undefined){
            if(!_priv.$pageBody.is(':animated')){
                _priv.$pageBody.animate({scrollTop: 0}, 800);
            }
        }
    };

    /*
    Private Functions
    */
    _priv.extendOptions = function _extendOptions(options){
        // Extend options object with defaults
        if (options === undefined) {
            options = $.extend(true, {}, _defaults.options);
        }
        else{
            options = $.extend(true, {}, _defaults.options, options);
        }

        return options;
    };

     _priv.getAriaDescriptionElementFromType = function _getAriaDescriptionElementFromType (type) {
        var ariaDescription;
        var $desriptionElement;

        switch(type) {
            case 'success':
                ariaDescription = ARIA_DESCRIPTIONS.success;
            break;

            case 'error':
                ariaDescription = ARIA_DESCRIPTIONS.error;
            break;

            case 'warning':
                ariaDescription = ARIA_DESCRIPTIONS.warning;
            break;

            case 'informational':
                ariaDescription = ARIA_DESCRIPTIONS.informational;
            break;

            case 'info':
                ariaDescription = ARIA_DESCRIPTIONS.info;
            break;

            default:
                ariaDescription = ARIA_DESCRIPTIONS.default;
            break;
        }


        $descriptionElement = $('<span/>', {
                            'class':CLASSES.hideFromScreen,
                            'text': ariaDescription,
                        });

        return $descriptionElement;
    };


    _priv.createPageMessage = function _createPageMessage(msgObj, options){

        options = _priv.extendOptions(options);
        var $messageLoc;
        var messageType;

        if(options.msgLocation && options.msgLocation !== false){
            $messageLoc = options.msgLocation;
        }
        else{
            $messageLoc = $('#body-wrapper').find('ul.cui-messages.emp-messages').eq(0);
        }

        // Figure out if we need to build the messages or if we can use append them
        if (kind(msgObj) === 'object') {

            var baseTemplate = {
                template: 'message',
                list: [],
            };

            baseTemplate.list.push({
                type: msgObj.type,
                text: msgObj.text
            });

            messageType = msgObj.type;

            render.section(null, baseTemplate, 'return', function (html) {

                if (html) {
                    // Get all of the li's out of the message response
                    newMsg = $(html).find('li');
                }
                else {
                    journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'pageMessage'}, 'Failed to build message');
                }
            });

        }
        else {
            journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'pageMessage'}, 'Unsupported page message call: ', kind(msgObj));
        }

        if (newMsg !== undefined) {

            //Get aria description element
            var $ariaDescriptionElement = _priv.getAriaDescriptionElementFromType(messageType);

            //Add aria text
            newMsg.prepend($ariaDescriptionElement);

            // Append the messages
            $messageLoc.append(newMsg);

            // Display the message section if its marked as hidden
            if ($messageLoc.hasClass('cui-hidden')) {
                $messageLoc.removeClass('cui-hidden');
            }

            if (options.scroll) {
                if(!_priv.$pageBody.is(':animated')){
                    _priv.$pageBody.animate({scrollTop: 0}, 800);
                }
            }

            if (!emp.reference.message) {
                emp.reference.message = [];
            }

            emp.reference.message.push({
                ref: $(newMsg),
                options: options
            });

            return $(newMsg);
        }
    };

    _priv.createFieldMessage = function _createFieldMessage(msgObj, options){
        options = _priv.extendOptions(options);

        var $messageLoc;
        var messageType;
        var newMsg;
        var $newMsg;
        var fieldMessage;
        var $field = options.field;
        var $fieldParent = $field.parent();
        var $filedWrapper = $field.parents('.emp-field').eq(0);

        if($field instanceof jQuery){

            if(options.msgLocation && options.msgLocation !== false){
                $messageLoc = options.msgLocation;
            }
            else{

                if($field[0].nodeName === 'TABLE') {
                    $fieldParent = $field.parents('.emp-table').eq(0);
                }

                if($fieldParent.find('.cui-messages')[0]){
                    $messageLoc = $($fieldParent.find('.cui-messages')[0]);
                }

                if($fieldParent.parents('.emp-composite').eq(0)){

                    $compositeWrapper = $fieldParent.parents('.emp-composite').eq(0);

                    $messageLoc = $('<div/>', {
                                    'class': 'cui-messages'
                                }).wrap('</div>', {
                                    'class': 'emp-composite-message'
                                });

                    $compositeWrapper.append($messageLoc);
                }
                else{

                    $messageLoc = $('<ul/>', {
                                    'class': 'cui-hidden cui-messages cui-field-message'
                                });
                    $fieldParent.prepend($messageLoc);
                }
            }
            //Determine to suppress page message
            if($field.data('page-notifier') !== undefined && $field.data('page-notifier') === false){
                options.pageNotifier = false;
            }

            // Figure out if we need to build the messages or if we can use append them
            if (kind(msgObj) === 'object') {

                var baseTemplate = {
                    template: 'message',
                    list: [],
                };

                baseTemplate.list.push({
                    type: msgObj.type,
                    text: msgObj.text
                });

                messageType = msgObj.type;

                render.section(null, baseTemplate, 'return', function (html) {

                    if (html) {
                        // Get all of the li's out of the message response
                        newMsg = $(html).find('li');
                    }
                    else {
                        journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'fieldMessage'}, 'Failed to build message');
                    }
                });

            }
            else {
                journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'fieldMessage'}, 'Unsupported page message call: ', kind(msgObj));
            }

            if (newMsg !== undefined) {

                $filedWrapper.addClass('cui-in-error');

                //Get aria description element
                var $ariaDescriptionElement = _priv.getAriaDescriptionElementFromType(messageType);

                //Add aria text
                newMsg.prepend($ariaDescriptionElement);

                // Appen the messages
                $messageLoc.append(newMsg);

                // Display the message section if its marked as hidden
                if ($messageLoc.hasClass('cui-hidden')) {
                    $messageLoc.removeClass('cui-hidden');
                }

                if (!emp.reference.message) {
                    emp.reference.message = [];
                }

                emp.reference.message.push({
                    ref: $(newMsg),
                    options: options
                });

                if(options.pageNotifier && !suppressPageNotifier){
                    _priv.setPageNotifier(options);
                }

                return $(newMsg);
            }
        }
    };

    //Adds page notifier if it does not exist, set to visible.
    _priv.setPageNotifier = function _setPageNotifier(options){

        //identify form with validation issue
        var fieldLoc = "below";
        var fieldFormContainer = options.field[0].form;

        if(fieldFormContainer && fieldFormContainer.id === 'form_search'){

            fieldLoc = "search box";
        }

        var $messageLoc = $('#body-wrapper').find('ul.cui-messages.emp-messages').eq(0);
        var fieldPageNotifierClass = "cui-field-error-notifier";
        var fieldPageNotifierMessage = "Please review the highlighted messages shown below before continuing.";

        if($messageLoc.find('.cui-field-error-notifier').eq(0).length === 0){
            $message = $('<li/>', {
                    'class':'cui-error '+ fieldPageNotifierClass,
                    'html': fieldPageNotifierMessage
            });

            //remove success msg - if error found
            var $messageLocChildren = $messageLoc.children();

            $messageLocChildren.each(function(){
                var $message = $(this);

                if($message.hasClass('cui-success')){

                    $message.addClass('cui-hidden');

                    journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'message' }, "Success message found - set to hidden!");

                }else{

                    journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'message' }, "success message class not found");
                }
            });

            // Appen the messages
            $messageLoc.append($message);

            // Display the message section if its marked as hidden
            if ($messageLoc.hasClass('cui-hidden')) {
                $messageLoc.removeClass('cui-hidden');
            }
        }

        if(!_priv.$pageBody.is(':animated') && options.scroll){
            _priv.$pageBody.animate({scrollTop: 0}, 800);
        }
    };

    //Determines if page notifier should be displayed
    _priv.updatePageNotifier = function _updatePageNotifier(){
        var $messageLoc = $('#body-wrapper').find('ul.cui-messages.emp-messages').eq(0);
        var $notifier = $messageLoc.find('.'+CLASSES.pageNotifier).eq(0);

        var displayNotifier = false;

        if (emp.reference.message && emp.reference.message.length) {
            for (var i = 0, len = emp.reference.message.length; i < len; i++) {
                if (emp.reference.message[i].options.pageNotifier) {
                    displayNotifier = true;
                }
            }
        }

        if($notifier !== undefined && !displayNotifier){
            $notifier.remove();
            if($messageLoc.children().length <= 0){
                $messageLoc.addClass('cui-hidden');
            }
        }
    };

    return {
        createMessage: createMessage,
        removeMessage: removeMessage,
        scrollToMessage: scrollToMessage,
        notifier: _priv.updatePageNotifier
    };

});

define('utils',[], function() {

    var cleanupID = function(id) {

        var returnID = id;

        if (id.indexOf('.') !== -1 || id.indexOf('#') !== -1) {

            // check for class css character
            if (returnID.indexOf('.') !== -1) {

                returnID = returnID.replace(/\./g, '');
            }

            // check for id css character
            if (returnID.indexOf('#') !== -1) {

                returnID = returnID.replace(/\#/g, '');
            }
        }

        if (returnID !== id) {
            journal.log({ type: 'error', owner: 'DEV|FW', module: 'processMap', func: 'formMap' }, 'Form created with a dangerous id (' + id + ')! It is not recommmended to create form id\'s that contain special characters used by CSS selectors. It is highly recommended you rename this control if possible.');
        }

        return returnID;
    };

    var arrayEqual = function(arr1, arr2) {
        if (arr1.length !== arr2.length)
            return false;
        for (var i = arr1.length; i--;) {
            if (arr1[i] !== arr2[i])
                return false;
        }

        return true;
    };

    return {
        arrayEqual: arrayEqual,
        cleanupID: cleanupID
    };

});

define('process',['utils'], function(utils) {

    var _priv = {};

    _priv.elementParent = function _element_parent(startElem, searchClass) {

        var stopLoop = false;
        var foundTarget = false;
        var currentElem = startElem;

        while (!stopLoop) {

            currentElem = currentElem.parentNode;

            if (currentElem.nodeName !== "BODY") {

                if (currentElem.classList.contains(searchClass)) {
                    stopLoop = true;
                    foundTarget = true;
                }
            }
            else {
                stopLoop = true;
            }

        }

        if (foundTarget) {
            return currentElem;
        }

        return false;
    };

    // Common function to pull values from DOM elements
    _priv.getElemValue = function _get_elem_value(elmField) {

        var value = false;

        switch (elmField.nodeName) {

            case 'INPUT':
            case 'TEXTAREA':
            case 'SELECT':

                value = elmField.value;
                break;

            // Catch all none input field types
            default:

                value = elmField.innerText;
                break;
        }

        return value;
    };

    // Common function to lookup DOM elements be ID
    _priv.lookupFieldValue = function _lookup_field(fieldID) {

        // See if we can find a field with a given id
        var elmField = document.getElementById(fieldID);

        if (elmField) {

            return _priv.getElemValue(elmField);
        }
        else {

            return false;
        }

    };

    // Common function to get the source value
    _priv.findSourceValue = function _find_source_value(src) {

        // Convert numbers to string
        if (typeof src === "number") {
            src = src.toString();
        }

        // Check for static indicators
        if (src.indexOf(':strict:') !== -1) {

            // Remove strict hook from static value
            src = src.replace(':strict:', '');

            if (src.indexOf('/s') !== -1) {
                src = src.replace(/\/s/g, ' ');
            }

            return src;
        }
        else {

            var lookupValue = _priv.lookupFieldValue(src);

            if (lookupValue !== false) {

                if (src.indexOf('/s') !== -1) {
                    src = src.replace(/\/s/g, ' ');
                }

                return lookupValue;
            }
            else {

                journal.log({ type: 'warning', owner: 'UI', module: 'process', func: 'valueMap' }, 'Unable to find source field or text (' + src + '), defaulting value too: ' + src);

                if (src.indexOf('/s') !== -1) {
                    src = src.replace(/\/s/g, ' ');
                }

                return src;
            }
        }

    };

    // Common function to place values into dest fields
    /*
     *  Object structure
     *      {
     *          dest: DOM Element,
     *          src: Actual Value (string)
     *      }
     */
    _priv.executeFieldMap = function _execute_field_map(map) {

        for (var i = 0, len = map.length; i < len; i++) {

            var oMap = map[i];

            try {

                var parentRoot = false;
                var inputDataStore = false;

                switch(oMap.dest.nodeName) {

                    case "INPUT":

                        var type = oMap.dest.getAttribute('type');

                        if (type === "checkbox" || type === "radio") {

                            parentRoot = _priv.elementParent(oMap.dest, 'emp-field');
                            inputDataStore = emp.ds.getStore(parentRoot.getAttribute('data-store-id'));

                            if (inputDataStore) {

                                // Check to see if the check and uncheck values are defined
                                if (inputDataStore.input && inputDataStore.input.checkValue && inputDataStore.input.uncheckValue) {

                                    if (inputDataStore.input.checkValue === oMap.src) {

                                        oMap.dest.checked = true;
                                    }
                                    else if (inputDataStore.input.uncheckValue === oMap.src) {

                                        oMap.dest.checked = false;
                                    }

                                }
                                else if (oMap.src === ":check" || oMap.src === ":check:" || oMap.src === ":uncheck" || oMap.src === ":uncheck:") {

                                    if (oMap.src === ":check" || oMap.src === ":check:") {

                                        oMap.dest.checked = true;
                                    }
                                    else if (oMap.src === ":uncheck" || oMap.src === ":uncheck:") {

                                        oMap.dest.checked = false;
                                    }

                                }

                            }

                        }
                        else {

                            oMap.dest.value = oMap.src;
                        }

                        break;

                    case "SELECT":

                        var options = oMap.dest.options;

                        // Loop and remove any currently selected option
                        for (var o = 0, oLen = options.length; o < oLen; o++) {

                            if (options[o].hasAttribute("selected")) {
                                options[o].removeAttribute("selected");
                            }
                        }

                        oMap.dest.value = oMap.src;
                        break;

                    case "TEXTAREA":

                        oMap.dest.value = oMap.src;
                        break;

                    case "I":

                        parentRoot = _priv.elementParent(oMap.dest, 'emp-field');
                        inputDataStore = emp.ds.getStore(parentRoot.getAttribute('data-store-id'));

                        if (inputDataStore) {

                            // Check to see if the check and uncheck values are defined
                            if (inputDataStore.input && inputDataStore.input.checkValue && inputDataStore.input.uncheckValue) {

                                if (inputDataStore.input.checkValue === oMap.src) {

                                    oMap.dest.classList.remove("emp-icon-stop");
                                    oMap.dest.classList.add("emp-icon-redcheck");
                                }
                                else if (inputDataStore.input.uncheckValue === oMap.src) {

                                    oMap.dest.classList.remove("emp-icon-redcheck");
                                    oMap.dest.classList.add("emp-icon-stop");
                                }

                            }
                            else if (oMap.src === ":check" || oMap.src === ":check:" || oMap.src === ":uncheck" || oMap.src === ":uncheck:") {

                                if (oMap.src === ":check" || oMap.src === ":check:") {

                                    oMap.dest.classList.remove("emp-icon-stop");
                                    oMap.dest.classList.add("emp-icon-redcheck");
                                }
                                else if (oMap.src === ":uncheck" || oMap.src === ":uncheck:") {

                                    oMap.dest.classList.remove("emp-icon-redcheck");
                                    oMap.dest.classList.add("emp-icon-stop");
                                }

                            }

                        }

                        break;

                    default:

                        oMap.dest.innerText = oMap.src;
                        break;

                }

                journal.log({ type: 'info', owner: 'UI', module: 'process', func: 'executeFieldMap' }, 'Setting input ' + oMap.dest.id + ' to:', (oMap.src !== "") ? oMap.src : ":empty-string:");

            }
            catch (e) {

                journal.log({ type: 'error', owner: 'UI', module: 'process', func: 'executeFieldMap' }, 'Unable to set destination value or text for:', (oMap.src !== "") ? oMap.src : ":empty-string:");

                return false;
            }

        }

        return true;
    };

    _priv.executeQueryMap = function _execute_query_map(map) {

        var qs = false;

        for (var i = 0, len = map.length; i < len; i++) {

            if (qs) {
                qs += "&" + map[i].dest + "=" + map[i].src;
            }
            else {
                qs = "?" + map[i].dest + "=" + map[i].src;
            }

        }

        return qs;
    };

    // This function is used when we need to preform a process mapping without the existance of a form target.
    var directMap = function _direct_map(destSrc, settings) {

        // New map
        var map = [];
        var tableRef = false;
        var tableColumnValues = false;

        if (settings && settings.tableSrc) {

            // Get ride of the jQuery reference!
            if (settings.tableSrc instanceof jQuery) {

                settings.tableSrc = settings.tableSrc[0];
            }

            // Get the id
            var tableID = settings.tableSrc.getAttribute('id');

            if (emp.reference.tables[tableID]) {

                tableRef = emp.reference.tables[tableID];
                tableColumnValues = tableRef.getCheckedColumnValues();
            }
            else {

                console.log("ERROR NO TABLE IN REFERNECE");
            }
        }

        for (var dest in destSrc) {

            var finalValue = false;

            // Get the destination location
            var finalDest = document.querySelector('#' + dest);

            // See if we found the destination elem
            if (finalDest) {

                if (settings && settings.tableSrc) {

                    // Remove 1 from the index as values are passed starting at 1 not 0
                    var tableColumn = destSrc[dest] - 1;

                    finalValue = _priv.findSourceValue(tableColumnValues[tableColumn]);
                }
                else {

                    finalValue = _priv.findSourceValue(destSrc[dest]);
                }

                map.push({ "dest": finalDest, "src": finalValue });

                // check for a display example
                var finalDestDisplay = document.querySelector('#' + dest + '_DISPLAY');

                if (finalDestDisplay) {
                    map.push({ "dest": finalDestDisplay, "src": finalValue });
                }
            }
            else {

                console.log("Destination provided is invalid");
            }
        }

        if (map.length) {

            // Execute the field map
            return _priv.executeFieldMap(map);
        }

        return true;
    };

    // This function is used for mapping related directly to forms
    var formMap = function _value_map(form, destSrc) {

        var map = [];

        form = document.getElementById(form.id);

        if (typeof destSrc === "object") {

            // Loop throught the dest source map
            for (var dest in destSrc) {

                // Get the current source value/field name
                var src = destSrc[dest];

                // Store the dest ids just in case
                var destID = dest;

                destID = utils.cleanupID(destID);

                // Try and find the dest location
                if (form) {
                    dest = form.querySelector('#' + destID);
                }
                else {
                    dest = document.getElementById(destID);
                }

                if (dest) {

                    // Validate the source value
                    if (typeof src === "string" || typeof src == undefined || typeof src === "boolean" || typeof src === "number") {

                        if (typeof src === "string") {

                            src = _priv.findSourceValue(src);

                        }
                        else if (typeof src === "number") {
                            src = src.toString();
                        }
                        else if (src === undefined) {

                            src = "";
                            journal.log({ type: 'warning', owner: 'UI', module: 'process', func: 'valueMap' }, 'Source value is undefined, defaulting to a empty string');
                        }

                        // Add the map object
                        map.push( {dest: dest, src: src}) ;
                    }
                    else {

                        journal.log({ type: 'error', owner: 'UI', module: 'process', func: 'valueMap' }, 'Failed on invalid source type in destSrc map for:', destID);

                        return false;
                    }
                }
                else {

                    journal.log({ type: 'error', owner: 'UI', module: 'process', func: 'valueMap' }, 'Process map included a dest field (' + destID + ') that does not exist on the DOM.');

                    return false;
                }

            }

            // Check to see if map has something to process
            if (map.length) {

                _priv.executeFieldMap(map);
            }
            else {

                journal.log({ type: 'info', owner: 'UI', module: 'process', func: 'valueMap' }, 'Process map resulted in an empty end map.');
            }

            return true;
        }
        else {

            journal.log({ type: 'error', owner: 'UI', module: 'process', func: 'valueMap' }, 'Value map failed because passed argument was not an object');
        }

        return false;

    };

    var queryString = function(destSrc) {

        var map = [];

        if (typeof destSrc === "object") {

            // Loop throught the dest source map
            for (var dest in destSrc) {

                // Get the current source value/field name
                var src = destSrc[dest];

                // Store the dest ids just in case
                var destID = dest;

                // Validate the source value
                if (typeof src === "string" || typeof src == undefined || typeof src === "boolean") {

                    if (typeof src === "string") {

                        src = _priv.findSourceValue(src);
                    }
                    else if (src === undefined) {

                        src = "";
                        journal.log({ type: 'warning', owner: 'UI', module: 'process', func: 'queryString' }, 'Source value is undefined, defaulting to a empty string');
                    }

                    // Add the map object
                    map.push({ dest: dest, src: src });
                }
                else {

                    journal.log({ type: 'error', owner: 'UI', module: 'process', func: 'queryString' }, 'Failed on invalid source type in destSrc map for:', destID);

                    return false;
                }

            }

            // Check to see if map has something to process
            if (map.length) {

                return _priv.executeQueryMap(map);
            }
            else {

                journal.log({ type: 'info', owner: 'UI', module: 'process', func: 'queryString' }, 'Process map resulted in an empty end map.');
            }

            return true;
        }
        else {

            journal.log({ type: 'error', owner: 'UI', module: 'process', func: 'queryString' }, 'Value map failed because passed argument was not an object');
        }

    };

    var data = function(destSrc) {

        if (destSrc && typeof destSrc === "object") {

            var dataReturn = {};

            for (var dest in destSrc) {

                var src = destSrc[dest];

                var srcValue = _priv.findSourceValue(src);

                dataReturn[dest] = srcValue;
            }

            return dataReturn;

        }
        else {

            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'processMap', func: 'data' }, 'Data destSrc map is not valid or not an object.');
        }

    };

    return {
        // Used with static maps
        directMap: directMap,
        // Used with forms maps
        formMap: formMap,
        queryString: queryString,
        data: data
    };

});

define('selectionPopup',['jquery', 'render', 'guid', 'process'], function ($, render, guid, process) {

    var emp = false;

    var MODAL_THREASHOLD = 50;

    var initalModalHeight = false;
    var initalTableWrapperHeight = false;

    var selectionPopup = function _selection_popup(event, settings) {

        if (settings.measure) {

            if (!emp) {
                emp = window.emp;
            }

            emp.getPreformance('selectionPopup');
        }

        // Input that maps values when the selection pop/go is clicked
        if (settings.inputMapping) {

            process.directMap(settings.inputMapping);
        }

        var resizeModal = function _resize_modal (modal){
                modal.adjustCSS();
                modal.adjustHeight();
                modal.center();
        };

        // Function called when the selection popup is going to be closed
        var destoryTable = function _destroy_table (modal) {

            // Check to see if a click blocker is in place and remove it.
            if (emp.clickblocker.check) {
                emp.clickblocker.remove();
            }

            // Call the table debind event.
            modal.table.debind();

            delete emp.reference.tables[modal.table.id];

            if (modal.table.config.setup.responsive) {
                modal.table.deleteStyleSheets();
            }
        };

        var fixPopupHeight = function _fix_popup_height(modal, table) {

            function fixRowHeight(total, allocated, modal, table) {

                //console.log(total, allocated, modal.$self.outerHeight());

                if (modal.$self.outerHeight() < total) {
                    total = modal.$self.outerHeight();
                }

                var tableOuterHeight = table.obj.$tableWrapper.outerHeight() - table.obj.$viewWrapper.height();
                var tableHeadHeight = table.obj.$thead.outerHeight();

                allocated += tableHeadHeight + tableOuterHeight;

                var remaining = total - allocated;

                // Get a running count of rows
                var rowCount = 0;

                var $rows = table.obj.$tbody.children('tr');

                for (var i = 0, len = $rows.length; i < len; i++) {

                    var $row = $rows.eq(i);

                    var rowHeight = $row.outerHeight();

                    if (remaining > rowHeight + 2) {

                        rowCount += 1;

                        remaining -= (rowHeight + 2);

                    }
                    else {

                        break;
                    }

                }

                table.resize(rowCount, function () {

                    setTimeout(function () {

                        table.reflow(function () {

                            resizeModal(modal);

                            // Only show if its not already being shown.
                            if (!modal.config.isOpen) {
                                modal.show();
                            }

                        });

                    }, 50);

                });
            }

            // Get the max height we can fill
            var maxModalHeight = modal.getMaxContentAreaHeight();
            var allocated = 0;

            var tableHeaderHeight = table.obj.$viewWrapper[0].offsetTop;

            var $messages = modal.$self.find('.cui-messages');

            if ($messages.length) {

                $messages.each(function() {

                    var $message = $(this);

                    allocated +=  $message.outerHeight();
                });
            }

            if (tableHeaderHeight < 10) {

                var checks = 0;

                (function recheck(check) {

                    if (check < 5) {

                        tableHeaderHeight = table.obj.$viewWrapper[0].offsetTop;

                        if (tableHeaderHeight < 10) {
                            recheck(check += 1);
                        }
                        else {
                            fixRowHeight(maxModalHeight, (allocated + MODAL_THREASHOLD), modal, table);
                        }

                    }
                    else {
                        journal.log({type: 'error', owner: 'UI', module: 'emp', func: 'selectionPopup-recheck'}, 'Selection popup table is large taking too much time to build.');
                    }

                })(checks);
            }
            else {
                fixRowHeight(maxModalHeight, (allocated + MODAL_THREASHOLD), modal, table);
            }
        };

        // Function to create a popup
        var createPopup = function _create_popup ($control, htmlContent, headerContent, footerContent, selectionControls) {

            fastdom.mutate(function () {

                var $preModalTable = $(htmlContent.querySelector('table'));

                if ($preModalTable.length && settings.prefilter) {
                    $preModalTable.attr('data-open-filters', 'true');
                }

                // Build the modal
                var selectionPopup = $.modal({
                    html: htmlContent,
                    header:{
                        html: headerContent,
                    },
                    footer:{
                        html: footerContent,
                    },
                    hideDestroy: true,
                    buildInvisible: true,
                    onCreate: function (modal) {
                        var tableOptions = {
                            setup: {
                                changeReturn: true,
                            },
                            plugins: {
                                resize: {
                                    noControl: true,
                                    manualHeight: true
                                },
                                changeReturn: {
                                    mapping: settings.mapping,
                                },
                            },
                        };

                        modal.table.on('setup.table', function (evt) {

                            journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'selectionPopup => createPopup'}, 'Setting up table inside of selection popup modal."');

                            var table = emp.reference.tables[$(evt.target).attr('id')];

                            // Update the modal object link
                            modal.table = table;

                            modal.table.$self.on('table.filterButtonClick', function() {
                                fastdom.measure(function(){
                                    fixPopupHeight(modal, modal.table);
                                });
                            });

                            if (table.dataStore.body && table.dataStore.body.rows.length > 0) {

                                setTimeout(function () {
                                    fixPopupHeight(modal, table);

                                    if (!modal.config.isOpen) {

                                        modal.show();

                                        if (settings.measure) {
                                            emp.getPreformance('selectionPopup');
                                        }
                                    }

                                }, 150);
                            }
                            else {
                                modal.show();

                                if (settings.measure) {
                                    emp.getPreformance('selectionPopup');
                                }
                            }

                        });

                        modal.table.on('resize.table', function(evt) {

                            if (modal.config.isOpen) {

                                modal.center();
                            }
                        });

                        modal.table.table(tableOptions);
                    },
                    eventHandlers: {
                        resize: function (evt, modal) {

                            if (!modal.resizeTimer) {
                                modal.resizeTimer = false;
                            }

                            clearInterval(modal.resizeTimer);

                            modal.resizeTimer = setTimeout(function() {

                                var table = modal.table;

                                if (table.dataStore.body && table.dataStore.body.rows.length > 0) {

                                   fixPopupHeight(modal, modal.table);
                                }
                            }, 200);
                        }
                    },
                    onDestroy: destoryTable,
                });

                var $table = selectionPopup.$self.find('table').eq(0);

                selectionPopup.table = $table;

                // Make a binding to the element the created the popup
                $control.attr('data-modal', selectionPopup.config.id);

                // Bind close modal event to the close button
                selectionPopup.$self.find('#' + selectionControls.close).on('click', {modal: selectionPopup}, function (evt) {
                    var modal = evt.data.modal;

                    modal.destroy();
                });

                // Bind clear event that will flush all mapped values accordingly
                selectionPopup.$self.find('#' + selectionControls.clear).on('click', {modal: selectionPopup, mapping: settings.mapping, inputMapping: settings.inputMapping}, function (evt) {

                    // Get the mapping
                    var modal = evt.data.modal;
                    var mapping = $.extend(true, {}, evt.data.mapping);

                    var keys = Object.keys(mapping);

                    // Loop through all of the mappings and set the default value to an empty string or uncheck a checkbox
                    for (var i = 0, len = keys.length; i < len; i++) {

                        var mappedElements = document.querySelector('#' + keys[i]);

                        if(mappedElements.type === 'checkbox'){

                            if(mappedElements.checked === true){

                                mappedElements.checked = false;
                            }

                        }else{
                            // Fill in with empty string value
                            mapping[keys[i]] = '';
                        }

                    }

                    process.directMap(mapping);

                    if (evt.data.inputMapping) {

                        var inputMapping = $.extend(true, {}, evt.data.inputMapping);

                        var inputMappingKeys =  Object.keys(inputMapping);

                        // Loop through all of the mappings and set the default value to an empty string
                        for (var im = 0, imLen = inputMappingKeys.length; im < imLen; im++) {

                            // Fill in with empty string value
                            inputMapping[inputMappingKeys[im]] = '';
                        }

                        process.directMap(inputMapping);
                    }

                    modal.clear = true;

                    modal.destroy();
                });

                // Check to see if a custom select button function was passed or not.
                if (settings && typeof settings.selectFunc == "function") {


                    selectionPopup.$self.find('#' + selectionControls.select).on('click', {modal: selectionPopup, mapping: settings.mapping}, function (evt) {

                        // Pull the needed values out
                        var modal = evt.data.modal;

                        // Check to see if a option has been selected (Check for false as 0 will show false positives)
                        if (modal.table.getCheckedIndex() === false) {

                            if (modal.table.config.errors === undefined || Object.keys(modal.table.config.errors).length === 0 ) {

                                // Add an error to the table
                                modal.table.addError("Please select a row.");

                                fixPopupHeight(modal, modal.table);
                            }
                        }
                        else {

                            var mapping = evt.data.mapping;

                            settings.selectFunc(evt, modal, modal.table, settings);
                        }

                    });
                }
                else {

                    // Bind a standard select button event
                    selectionPopup.$self.find('#' + selectionControls.select).on('click', {modal: selectionPopup, mapping: settings.mapping}, function (evt) {

                        // Pull the needed values out
                        var modal = evt.data.modal;

                        if (modal.table.getCheckedIndex() === false) {

                            if (modal.table.config.errors === undefined || Object.keys(modal.table.config.errors).length === 0 ) {

                                // Add an error to the table
                                modal.table.addError("Please select a row.");

                                fixPopupHeight(modal, modal.table);
                            }

                        }
                        else {

                            var mapping = $.extend(true, {}, evt.data.mapping);

                            if (modal.table.config.error) {

                                modal.table.removeErrors();
                            }

                            if (modal.table.config.setup.changeReturn && modal.table.config.plugins.changeReturn.toggleMap) {

                                emp.processMap(evt, mapping, modal.table.$self, function () {

                                    if (modal.table.config.setup.changeReturn) {

                                        var clearList = [];
                                        var clearMapping = $.extend(true, {}, settings.mapping);

                                        // Loop through and determine the
                                        for (var col in modal.table.config.plugins.changeReturn.toggleMap) {
                                            if (!modal.table.config.plugins.changeReturn.toggleMap[col].selected) {
                                                clearList.push(modal.table.config.plugins.changeReturn.toggleMap[col].name);
                                            }
                                        }

                                        // Cleanup and define the process map.
                                        for (var field in settings.mapping) {
                                            if (clearList.indexOf(field) === -1) {
                                                delete clearMapping[field];
                                            }
                                            else {
                                                clearMapping[field] = '';
                                            }
                                        }

                                        process.directMap(clearMapping);
                                    }
                                });
                            }
                            else {

                                //emp.processMap(evt, mapping, modal.table.$self);
                                process.directMap(mapping, { tableSrc: modal.table.$self });
                            }

                            modal.destroy();
                        }
                    });
                }

            });
        };

        var selectFirst = function _select_first(mapping, data) {

            var filledInMap = {};

            for (var column in mapping) {

                var col = mapping[column] - 1;

                if (data[col].text) {

                    // Only supporting text and selection popups should not have controls.
                    filledInMap[column] = data[col].text;
                }
                else {

                    filledInMap[column] = "";

                    journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'selectionPopup' }, 'Selection popup select first found that column:', col, 'contained no data. Providing blank.');
                }

            }

            //emp.processMap(event, filledInMap, ":strict:");
            process.directMap(filledInMap);
        };

        if (emp === undefined) {
            emp = window.emp;
        }

        if (settings && settings.request) {

            // Save off the source control
            var $control = $(event.target);

            emp.clickblocker.add($control);

            // Create the actual request object response objects
            var req = {};
            var res = {};

            if (typeof settings.request === "string") {

                req.url = settings.request;
            }
            else if (typeof settings.request === "object") {

                req.url = settings.request.url;
            }

            // Check for data mapping object
            if (settings.request.data && typeof settings.request.data === "object") {

                // We need to crea a request data object
                for (var dest in settings.request.data) {

                    if (settings.request.data[dest] !== undefined) {

                        var $idLookup = $('#' + settings.request.data[dest]);

                        if ($idLookup.length === 1) {

                            var sendValue = null;

                            switch ($idLookup[0].nodeName) {
                                case 'INPUT':
                                case 'TEXTAREA':
                                case 'SELECT':

                                    if (($idLookup.attr('type') === "checkbox" || $idLookup.attr('type') === "radio")){

                                        if ($idLookup.is(':checked')) {

                                            sendValue = $idLookup.val();
                                        }
                                        else {

                                            sendValue = "";
                                        }

                                    }
                                    else {

                                        sendValue = $idLookup.val();
                                    }

                                    break;

                                default:

                                    sendValue = $idLookup.text();
                                    break;
                            }

                            journal.log({type: 'info', owner: 'Developer', module: 'emp', submodule: 'selectionPopup'}, 'Selection popup parameter "' + dest + '" set to:', (sendValue !== "") ? sendValue : '(empty string)', '"');

                            settings.request.data[dest] = sendValue;
                        }
                        else if ($idLookup.length === 0) {
                            journal.log({type: 'warn', owner: 'Developer', module: 'emp', submodule: 'selectionPopup'}, 'Selection popup parameter listed could not be found via jQuery, assuming this is a hardcoded value for: "', dest, '"');
                        }
                        else {
                            journal.log({type: 'err', owner: 'Developer', module: 'emp', submodule: 'selectionPopup'}, 'Selection popup parameter listed contained source input that could not be found: "' + dest + '"');
                        }
                    }
                    else {
                        journal.log({type: 'error', owner: 'Developer', module: 'emp', submodule: 'selectionPopup'}, 'Selection popup parameter list contained an undefined source for: "', dest, '"');
                    }
                }

                // Set the request data ajax value.
                req.data = settings.request.data;

            }
            else if (settings.data && typeof settings.data !== "object") {

                journal.log({type: 'error', owner: 'FW', module: 'emp', func: 'selectionPopup'}, 'Selection Popups contained a definition for request data, but it was not in the proper object format. Skipping data porition of request');
            }

            res.done = function _selection_popup_res_done(data) {

                if (settings.hasOwnProperty('autoSingleSelect') === false) {
                    settings.autoSingleSelect = true;
                }

                var messages = false;
                var errorMsg = false;
                var renderModal = true;

                if (data && data.status && data.status === "success") {

                    if (data.result && data.result.length) {

                        // Before we get too far, check for all prerender functions
                        if (settings && settings.preRenderCheck && typeof settings.preRenderCheck === "function") {

                            renderModal = settings.preRenderCheck(event, data);

                            if (renderModal === false) {

                                if (settings.autoSingleSelectFunc && typeof settings.autoSingleSelectFunc === "function") {

                                    settings.autoSingleSelectFunc(data);
                                }
                            }
                            else if (renderModal === undefined) {

                                emp.clickblocker.remove();
                            }

                        }
                        else if (settings && settings.autoSingleSelect && data) {

                            var tableData = data.result[0].body.contents[0];

                            if (tableData.body && tableData.body.rows && tableData.body.rows.length === 1) {

                                renderModal = false;

                                selectFirst(settings.mapping, tableData.body.rows[0].columns);

                            }

                        }

                        if (renderModal) {

                            journal.log({type: 'info', owner: 'UI', module: 'emp', func: 'selectionPopup'}, 'Selection popup render not skipped!.');

                            data = data.result[0];

                            data.rowLimit = 25;

                            // Check to see if this being body wrapped in the proper AJAX response object
                            if (data.body && !data.template) {

                                if (data.messages) {
                                    messages = data.messages;

                                    for (var m = 0, mLen = messages.lenght; m < mLen; m++) {

                                        if (messages[m].type === "error") {

                                            errorMsg = true;
                                            break;
                                        }

                                    }

                                }

                                data = data.body;
                            }

                            if (Array.isArray(data) && data.length === 1) {
                                data = data[0];
                            }
                            else if (Array.isArray(data) && data.length > 1) {

                                journal.log({type: 'error', owner: 'UI', module: 'emp', func: 'selectionPopup'}, 'Selection popup ajax request returned more than one nodes worth of data in an array format.');
                            }

                            if (data.contents && data.contents.length === 1 && data.contents[0].template === "table") {

                                data = data.contents[0];

                                if (!data.attributes) {
                                    data.attributes = {};
                                }

                                // Remove specific plugins
                                //data.attributes['data-responsive'] = "false";
                            }

                            data.type = "breakout";

                            if (settings.selectReturn) {

                                if (!data.attributes) {
                                    data.attributes = {};
                                }

                                data.attributes['data-changereturn'] = "true";
                            }

                            data.rowLimit = 50;

                            // Create some ids for the new buttons
                            var selectionControls = {
                                close: guid() + '_close',
                                clear: guid() + '_clear',
                                select: guid() + '_select',
                            };

                            // Static renderer contents
                            var popupContents = {
                                "type": "div",
                                "template": "universal",
                                "attributes": {
                                    "className": "emp-selection-popup-modal-controls"
                                },
                                "contents": [

                                ]
                            };

                            var headerHtml = "";

                            var footerHtml = $('<header/>', {
                                                'class': "emp-col-full button-col emp-button-group cui-align-right"
                                            });

                            // Add Close Button
                            var closeButton = $('<button/>' ,{
                                                'id' :  selectionControls.close
                                            })
                                            .text('Close');

                            footerHtml.append(closeButton);


                            // Add Clear Selection
                            if (settings === undefined || !settings.removeClear) {

                                var clearButton = $('<button/>', {
                                                'id' : selectionControls.clear
                                            }).text('Clear Selection');

                                footerHtml.append(clearButton);
                            }

                            // Add Select Button
                            var selectButton = $('<button/>', {
                                            'id' : selectionControls.select,
                                            'class': 'cui-button-primary'
                                        }).text("Select");

                            footerHtml.append(selectButton);

                            // Check the message variable for any popup messages
                            if (messages) {

                                for (var i = 0, len = messages.length; i < len; i++) {

                                    if (!messages[i].template) {
                                        messages[i].template = "message";
                                    }

                                    popupContents.contents.push(messages[i]);
                                }
                            }

                            // Add data
                            popupContents.contents.push(data);

                            // Render the section
                            var testContent = render.section(null, popupContents, 'return', function (contentHtml) {

                                if (contentHtml) {

                                    // Check to see if the require module
                                    if (require.defined('modal')) {

                                        // Create the modal
                                        createPopup($control, contentHtml, headerHtml, footerHtml, selectionControls);
                                    }
                                    else {

                                        // Load the require module and then create the modal
                                        cui.load('modal', function _selection_modal() {
                                            createPopup($control, contentHtml, headerHtml, footerHtml, selectionControls);
                                        });
                                    }
                                }
                                else {
                                    journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'selectionPopup'}, 'Failed to build selection popup.');
                                }
                            });
                        }
                        else {

                            if (emp.clickblocker.check) {
                                emp.clickblocker.remove();
                            }

                            if (settings.autoSelect) {

                                settings.selectFunc(":render-skipped:", false, data, mapping);

                                journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'selectionPopup'}, 'Render blocked but auto select was enabled!');
                            }
                            else if (settings && settings.autoSingleSelect) {

                                journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'selectionPopup'}, 'Render blocked and standard auto select single was executed!');
                            }
                            else {

                                journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'selectionPopup'}, 'Selection popup was not render, and there was no auto select function enabled.');
                            }
                        }

                    }
                    else if (data.messages && data.messages.length) {

                        journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'selectionPopup'}, 'Selection Popup request only returned a messages, not the normal but still possibly valid');

                        if (emp.clickblocker.check) {
                            emp.clickblocker.remove();
                        }

                        for (var n = 0, nLen = data.messages.length; n < nLen; n++) {

                            emp.empMessage.createMessage(data.messages[n], {});
                        }
                    }

                }

            };

            res.fail = function _selection_popup_res_fail(data) {

                console.log(data);

                journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: 'selectionPopup'}, 'Selection Popup failed to get a response from the url. "' + data + '"');

                var msg = {
                    "type": "error",
                    "template": "message",
                    "text": "Selection popup request failed. Please contact the help desk to report this issue."
                };

                emp.empMessage.createMessage(msg);

                if (data && data.status && data.status !== "success") {

                    var msgObj = false;

                    // Check for global message
                    if (data.messsages) {

                        msgObj = data.messages;
                    }
                    else if (data.result && data.result[0].work) {

                        msgObj = data.result[0].messages;
                    }

                    if (msgObj) {

                        if (!Array.isArray(msgObj)) {

                            msgObj = [ msgObj ];
                        }

                        for (var i = 0, len = msgObj.length; i < len; i++) {

                            emp.empMessage.createMessage(msgObj[i]);
                        }

                    }
                    else {

                        journal.log({type: 'error', owner: 'UI', module: 'emp', submodule: 'selectionPopup'}, 'Selection Popup data returned, but no fail message was provided.');
                    }
                }

                if (emp.clickblocker.check) {

                    emp.clickblocker.remove();
                }

            };

            if (settings.mockup) {

                res.done(window[settings.mockData]);
            }
            else {

                // Now perform the AJAX request.
                emp.ajax.request(req, res, true);
            }
        }
        else {

            journal.log({type: 'error', owner: 'FW', module: 'emp', func: 'selectionPopup'}, 'Selection Popups settings object is missing either the request or mapping parameter or both!');

            return false;
        }

        return true;
    };

    if (!emp) {
        emp = window.emp;
    }

    return selectionPopup;

});

define('getCookie',[], function() {

    return function _get_cookie(sName) {

        var aCookies = document.cookie.split(';');
        var i = aCookies.length;
        var oCookie;

        sName = sName + '=';

        while (i--) {
            oCookie = aCookies[i].replace(/^\s*/, '');

            if (oCookie.indexOf(sName) === 0) {
                return oCookie.substring(sName.length, oCookie.length);
            }
        }

        return null;
    };

});

define('windows',['guid', 'getCookie', 'clickblocker', 'store', 'utils'], function(guid, getCookie, clkblocker, store, utils) {

    var _priv = {};

    _priv.childWindowsBoilerPlate = '<!doctype html><html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="pragma" content="no-cache" /><meta http-equiv="Cache-control" content="no-cache" /><meta name="expires" content="0" /><meta charset="utf-8"/><title>Loading Child Window</title></head><body onload="childInit()"><div id="message" class="message" style="z-index:900; height: 100%; width: 100%; position: fixed;"> <style type="text/css"> @-webkit-keyframes uil-default-anim{0%{opacity: 1}100%{opacity: 0}}@keyframes uil-default-anim{0%{opacity: 1}100%{opacity: 0}}.uil-default-css > div:nth-of-type(0){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.5s; animation-delay: -0.5s;}.uil-default-css > div:nth-of-type(1){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.5s; animation-delay: -0.5s;}.uil-default-css > div:nth-of-type(2){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.4166666666666667s; animation-delay: -0.4166666666666667s;}.uil-default-css > div:nth-of-type(3){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.33333333333333337s; animation-delay: -0.33333333333333337s;}.uil-default-css > div:nth-of-type(4){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.25s; animation-delay: -0.25s;}.uil-default-css > div:nth-of-type(5){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.16666666666666669s; animation-delay: -0.16666666666666669s;}.uil-default-css > div:nth-of-type(6){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: -0.08333333333333331s; animation-delay: -0.08333333333333331s;}.uil-default-css > div:nth-of-type(7){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: 0s;animation-delay: 0s;}.uil-default-css > div:nth-of-type(8){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: 0.08333333333333337s; animation-delay: 0.08333333333333337s;}.uil-default-css > div:nth-of-type(9){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: 0.16666666666666663s; animation-delay: 0.16666666666666663s;}.uil-default-css > div:nth-of-type(10){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: 0.25s; animation-delay: 0.25s;}.uil-default-css > div:nth-of-type(11){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: 0.33333333333333337s; animation-delay: 0.33333333333333337s;}.uil-default-css > div:nth-of-type(12){-webkit-animation: uil-default-anim 1s linear infinite; animation: uil-default-anim 1s linear infinite; -webkit-animation-delay: 0.41666666666666663s; animation-delay: 0.41666666666666663s;}.uil-default-css{position: relative; background:none; width:40px; height:40px; left: -16px; top: -16px;}</style> <div class="container" style="height: 65px;position:absolute;white-space: nowrap;display: inline-block;top: 50%;margin: -34.5px 0 0 -70px;width: 140px;left: 50%;"> <div class="spinner" style="height: 40px; width: 40px; margin: auto;"> <div class="uil-default-css" style="transform:scale(0.20);"> <div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(0deg) translate(0,-60px);transform:rotate(0deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(30deg) translate(0,-60px);transform:rotate(30deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(60deg) translate(0,-60px);transform:rotate(60deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(90deg) translate(0,-60px);transform:rotate(90deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(120deg) translate(0,-60px);transform:rotate(120deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(150deg) translate(0,-60px);transform:rotate(150deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(180deg) translate(0,-60px);transform:rotate(180deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(210deg) translate(0,-60px);transform:rotate(210deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(240deg) translate(0,-60px);transform:rotate(240deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(270deg) translate(0,-60px);transform:rotate(270deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(300deg) translate(0,-60px);transform:rotate(300deg) translate(0,-60px);border-radius:10px;position:absolute;"></div><div style="top:80px;left:93px;width:14px;height:40px;background:#000000;-webkit-transform:rotate(330deg) translate(0,-60px);transform:rotate(330deg) translate(0,-60px);border-radius:10px;position:absolute;"></div></div></div><p>Loading, Please Wait.</p></div></div>';

    // Place for storing all window references
    _priv.windows = {};

    _priv.windowsTrackStatus = {
        open: [],
        closed: []
    };

    _priv.lStorage = {};
    _priv.currentSession = false;

    _priv.openChildrenCheck = false;

    _priv.defaultWindowID = false;
    _priv.windowCheckInterval = false;

    _priv.windowMessageEvent = false;

    // Default window settings
    _priv.defaultWindowOptions = 'scrollbars=yes,menubar=no,resizable=yes,toolbar=no,width=925,height=700,titlebar=yes,status=no,location=no';

    _priv.defaultNewSettings = function _default_new_settings() {

        var settings = {};

        // Ensure the window options are set
        settings.windowOptions = _priv.defaultWindowOptions;

        return settings;
    };

    _priv.createWindowReference = function _create_windown_reference(name, settings, oldChild) {

        _priv.windows[name] = {
            name: name,
            windowOptions: settings.windowOptions,
            window: false,
            oldWindow: false,
            documentClosed: false
        };

        if (oldChild) {
            _priv.windows[name].oldWindow = true;
        }

        journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'createWindowReference' }, 'Creating window reference for: ' + name);

        return _priv.windows[name];
    };

    _priv.createWindow = function _create_window(name) {

        journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'createWindow' }, 'Creating new window: ' + name);
        journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'createWindow' }, 'Window is being created and opening a false child window.');

        var initGuid = guid();

        var blankPageInsert = _priv.childWindowsBoilerPlate + '<script>' + 'var childID = "' + initGuid + '";var origin="' + window.location.origin +  '";var windowName="' + name + '";';
            blankPageInsert += "var childInit=function(){};";
            blankPageInsert += '</script></body></html>';

        var newWindow = window.open('about:blank', name, _priv.windows[name].windowOptions);

        try {

            // Write the blank page HTML and close it to kick off the page messaging service
            newWindow.document.write(blankPageInsert);

            newWindow.document.close();

            _priv.windows[name].documentClosed = true;

            _priv.windows[name].window = newWindow;

            journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'createWindow' }, 'New child window created without issue.');

            // Check to see if we are running any open window checkers. if we are not, then we need to!
            if (!_priv.openChildrenCheck) {
                _priv.openChildrenCheck = setInterval(_priv.openWindowChecker, 500);
            }
            else {

            }

            return true;
        }
        catch(e) {

            _priv.windows[name].window = newWindow;

            _priv.windows[name].oldWindow = true;

            journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'createWindow' }, 'Exception occured when creating new window: ' + e.message);

            return false;
        }

    };

    _priv.updateWindowsLocalStorage = function _update_window_local_storage() {

        var knownOpenWindows = [];

        // Now get a list of all the known open windows asn save that into the _priv.lStorage windows array
        for (var win in _priv.windows) {

            if (_priv.windows[win].window && !_priv.windows[win].window.closed) {
                //_priv.lStorage[_priv.currentSession].windows.push(_priv.windows[win].name);
                // Save off the know open window
                knownOpenWindows.push(_priv.windows[win].name);
            }

        }

        if (knownOpenWindows.length) {

            if (!_priv.lStorage[_priv.currentSession]) {
                _priv.lStorage[_priv.currentSession] = {};
            }

            // Update the timestamp with the new window creation
            _priv.lStorage[_priv.currentSession].timestamp = Math.round(new Date().getTime() / 1000);

            _priv.lStorage[_priv.currentSession].windows = knownOpenWindows;
        }
        else {

            if (_priv.lStorage[_priv.currentSession]) {
                // Since we have no known open windows, remove this session object

                delete _priv.lStorage[_priv.currentSession];
            }

        }

        // Check to see if we are updating or removing the localStorage windows object.
        if (Object.keys(_priv.lStorage).length) {

            store.set('windows', _priv.lStorage);

            journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'updateWindowsLocalStorage' }, 'Updating logcal storage windows object to match current status');

        }
        else {

            store.remove('windows');

            journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'updateWindowsLocalStorage' }, 'Removing local storage windows object as no sessions exist that need tracking');
        }

    };

    _priv.checkWindow = function _check_window(childWin) {

        if (childWin && childWin.closed) {
            window.clearInterval(_priv.windowCheckInterval);

            if (clkblocker.check) {

                journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'windows' }, 'Click blocker being removed as locking pop was closed.');

                clkblocker.remove();
            }
        }
    };

    // This function checks to see if any windows are open and update the backing localstorage object
    _priv.openWindowChecker = function _open_window_checker() {

        var openedWindows = [];
        var closedWindows = [];

        for (var win in _priv.windows) {

            if (_priv.windows[win].window && !_priv.windows[win].window.closed) {
                openedWindows.push(_priv.windows[win].name);
            }
            else {
                closedWindows.push(_priv.windows[win].name);
            }

        }

        var openCheck = utils.arrayEqual(openedWindows, _priv.windowsTrackStatus.open);
        var closeCheck = utils.arrayEqual(closedWindows, _priv.windowsTrackStatus.closed);

        if (!openCheck || !closeCheck) {

            _priv.windowsTrackStatus.open = openedWindows;
            _priv.windowsTrackStatus.closed = closedWindows;

            _priv.updateWindowsLocalStorage();

            if (!_priv.windowsTrackStatus.open.length) {
                clearInterval(_priv.openChildrenCheck);
                _priv.openChildrenCheck = false;
            }
        }

    };

    // Generate a new window reference
    var createReference = function _create_windown_reference(name, settings, overwrite) {

        if (name) {

            // Check to verify the name is not already in use
            if (_priv.windows[name]) {

                if (!overwrite) {

                    journal.log({ type: 'error', owner: 'UI', module: 'windows', func: 'createWindowReference' }, 'The requested window reference: ' + name + ' already exists!');

                    return false;
                }
                else {

                    delete _priv.windows[name];
                }
            }

        }
        else {

            // Check if the default windows was created. If so set that as the defualt name
            if (_priv.windows[_priv.defaultWindowID]) {

                if (!overwrite) {

                    journal.log({ type: 'warning', owner: 'UI', module: 'windows', func: 'createWindowReference' }, 'The requested window default instance already exists!');
                }

                delete _priv.windows[name];
            }
            else {

                // No defined name and default is not currently in use, so enforce defaultID
                name = _priv.defaultWindowID;
            }
        }

        if (!settings || (settings && typeof settings !== "object")) {
            settings = _priv.defaultNewSettings();
        }
        else if (settings && typeof settings === "object") {

            // Verify window option settings
            if (!settings.windowOptions) {

                settings.windowOptions = _priv.defaultWindowOptions;
            }
        }

        // Create a window reference with provided settings
        return _priv.createWindowReference(name, settings, overwrite);
    };

    var getDefaultWindowName = function _get_default_window_name() {

        var sessionId = false;

        if (!_priv.defaultWindowID) {

            if (fwData && fwData.context && fwData.context.screen && fwData.context.screen.session) {

                sessionId = emp.platform + "_win_" + fwData.context.screen.session.replace(/\:|\-|\_|\&|\$|\!|\%/g, '');

                journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'Using session id from framework for all unammed default windows');
            }
            else {

                sessionId = emp.platform + "_win_" + guid();

                journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'No server-side session exists, generating page level default window name');
            }

            _priv.defaultWindowID = sessionId;
        }


        return _priv.defaultWindowID;

    };

    // Lookup the window reference
    var getReference = function _get_reference(name) {

        // Get a specific window
        if (name) {

            if (_priv.windows[name]) {

                return _priv.windows[name];
            }
            else {

                journal.log({ type: 'error', owner: 'UI', module: 'windows', func: 'getReference' }, 'The requested window reference: ' + name + ' does not exist');

                return false;
            }
        }
        else  {

            // Check for a defualt window instance
            if (_priv.windows[_priv.defaultWindowID]) {

                return _priv.windows[_priv.defaultWindowID];
            }
            else {

                journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'getReference' }, 'The window module is not currently tracking any default windows');

                return false;
            }

        }
    };

    var open = function _open(name, location, method, popup, lock, formID, readyCB) {

        var newWindow = false;

        //console.log(arguments);

        // Check to see if the window name has been reference was reserved.
        if (_priv.windows[name]) {

            // Check to see if the window object is defined
            if (_priv.windows[name].window) {

                journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'Requested window reference already exists.');

                // Window reference exists, so we need to check to see if it is still open
                if (!_priv.windows[name].window.closed) {

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'Window that is already open is being overwritten with another child window request!');


                    // Check to see if the lock was needed
                    if (lock) {

                        _priv.windowCheckInterval = window.setInterval(_priv.checkWindow, 500, _priv.windows[name].window);
                    }

                    // Update reference just in case
                    emp.reference.windows[name] =  _priv.windows[name].window;

                    if (typeof readyCB === "function") {
                        readyCB(_priv.windows[name].window);
                    }
                }
                else {

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'Requested window reference was for a closed window. Requesting a new one');

                    // Create a window!
                    newWindow = _priv.createWindow(name);

                    // Save of popup flag
                    if (popup && method !== "GET") {
                        _priv.windows[name].window.isPopup = true;
                    }

                    // Check to see if the lock was needed
                    if (lock) {

                         _priv.windowCheckInterval = window.setInterval(_priv.checkWindow, 500, _priv.windows[name].window);
                    }

                    if (!emp.reference.windows) {
                        emp.reference.windows = {};
                    }

                    emp.reference.windows[name] =  _priv.windows[name].window;

                    //return _priv.windows[name].window;
                    if (typeof readyCB === "function") {
                        readyCB(_priv.windows[name].window);
                    }

                }

            }
            else {

                journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'Window does not exist, requesting it for the first time.');

                if (Object.keys(_priv.lStorage).length && _priv.lStorage[_priv.currentSession]) {

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'Detected local storage window object');

                    if (_priv.lStorage[_priv.currentSession].windows.indexOf(name) !== -1) {

                        journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'open' }, 'It appears the windows name (' + name + ') was used to open up a screen in the past, but the parent was changed before the close was detected.');

                        try {

                            var existingWindowCheck = window.open('', name);

                            // check to see
                            if (existingWindowCheck.location && existingWindowCheck.location.href === "about:blank") {
                                existingWindowCheck.close();
                            }
                            else {

                                if (!emp.reference.windows) {
                                    emp.reference.windows = {};
                                }


                                if (!emp.reference.windows[name]) {
                                    emp.reference.windows[name] = {};
                                }

                                // Update reference just in case
                                emp.reference.windows[name] = _priv.windows[name].window;

                                if (typeof readyCB === "function") {
                                    readyCB(_priv.windows[name].window);
                                }

                                return true;
                            }

                        }
                        catch (e) {


                            journal.log({ type: 'error', owner: 'UI', module: 'windows', func: 'open' }, 'Windows (' + name + ') was created on a different parent as we get permission denied! just doing a blind form submit. This is really not good as we are not properly tracking!');

                            _priv.createWindowReference(name, _priv.defaultNewSettings, true);

                            // Since we failed we need to assume the popup already exists
                            if (typeof readyCB === "function") {
                                readyCB(false);
                            }

                            return false;
                        }

                    }

                }

                // Create a window!
                newWindow = _priv.createWindow(name);

                if (!newWindow) {
                    journal.log({ type: 'warning', owner: 'UI', module: 'windows', func: 'open' }, 'It appears a window may have already existed but no reference existed. This is like an old window from a prior page. Closeing existing window and attempting reopen.');

                    try {

                        // Try and close the window.
                        _priv.windows[name].window.close();
                    }
                    catch(e) {}

                    newWindow = _priv.createWindow(name);
                }

                // Save of popup flag
                if (popup && method !== "GET") {
                    _priv.windows[name].window.isPopup = true;
                }

                // Check to see if the lock was needed
                if (lock) {

                        _priv.windowCheckInterval = window.setInterval(_priv.checkWindow, 500, _priv.windows[name].window);
                }

                if (!emp.reference.windows) {
                    emp.reference.windows = {};
                }

                emp.reference.windows[name] =  _priv.windows[name].window;

                if (typeof readyCB === "function") {
                    readyCB(_priv.windows[name].window);
                }

            }

            return true;
        }
        else {

            journal.log({ type: 'error', owner: 'UI', module: 'windows', func: 'open' }, 'The requested window reference: ' + name + ' does not exist');
        }
    };

    var setup = function _setup() {

        var lStorage = store.get('windows');

        var todayUnix = Math.round(new Date().getTime() / 1000 );
        var yesterdayUnix = todayUnix - (24 * 3600);

        if (fwData && fwData.context && fwData.context.screen && fwData.context.screen.session) {
            _priv.currentSession = fwData.context.screen.session;
        }
        else {
            _priv.currentSession = "fake_session_" + guid();
        }

        if (lStorage) {

            var sessionsToRemove = [];

            // Since we have windows object, we need to loop through and remove anything over 24 hours old
            for (var winSession in lStorage) {

                if (lStorage[winSession].timestamp < yesterdayUnix) {

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'Windows session' + winSession + ' marked for removal because its over 24 hours old.');

                    sessionsToRemove.push(winSession);
                }
                else {

                    if (!lStorage[winSession].windows.length) {

                        journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'Windows session' + winSession + ' marked for removal because has no open windows name links');

                        sessionsToRemove.push(winSession);
                    }
                    else {

                        journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'Windows session' + winSession + ' has references to possible open windows.');

                    }
                }

            }

            if (sessionsToRemove.length) {

                for (var s = 0, sLen = sessionsToRemove.length; s < sLen; s++) {

                    delete lStorage[sessionsToRemove[s]];

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'Windows session' + sessionsToRemove[s] + ' removed from local storage!');
                }

                if (Object.keys(lStorage).length) {

                    store.set('windows', lStorage);

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'Updated the local storage windows container for now and saved working copy in memory.');

                    _priv.lStorage = lStorage;
                }
                else {

                    journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'There is nothing in our local window storage container any longer, removing local storage property for now.');
                    store.remove('windows');
                }
            }

            _priv.lStorage = lStorage;

        }
        else {

            journal.log({ type: 'info', owner: 'UI', module: 'windows', func: 'setup' }, 'There is no local storage container to worry about at this time.');
        }

    };

    return {
        createReference: createReference,
        getDefaultWindowName: getDefaultWindowName,
        getReference: getReference,
        open: open,
        setup: setup
    };

});

define('forms',['process', 'windows', 'clickblocker', 'utils'], function (process, windows, clkblocker, utils) {

    var _priv = {};
    var formWin;

    // Variable to track global submit status
    _priv.disabledSubmit = false;

    // Variable to keep track of all the used forms
    _priv.forms = {};

    // Function to create the actual form element
    _priv.createForm = function _create_form(formAttr, newWindow) {

        var form = false;

        function formCreation() {

            var form = document.createElement('form');

            // Loop through all attributes and add the standard form attributes
            for (var attr in formAttr) {

                _priv.createElemAttribute(form, attr, formAttr[attr]);
            }

            if (newWindow) {

                var popupInput = document.createElement('input');

                // Add window name to form post for framework
                _priv.createElemAttribute(popupInput, 'name', 'fw_popup_name');
                _priv.createElemAttribute(popupInput, 'type', 'hidden');
                _priv.createElemAttribute(popupInput, 'value', formAttr.target);

                form.appendChild(popupInput);

                var popupIndInput = document.createElement('input');

                // Add window name to form post for framework
                _priv.createElemAttribute(popupInput, 'name', 'fw_popup_request_ind');
                _priv.createElemAttribute(popupInput, 'type', 'hidden');
                _priv.createElemAttribute(popupInput, 'value', "true");

                form.appendChild(popupIndInput);

                // Add target attribute to the form.
                _priv.createElemAttribute(form, 'target', formAttr.target);

            }

            // Add form the page body
            document.body.appendChild(form);

            return form;
        }

        if (formAttr && typeof formAttr === "object") {

            // Check to see if the same form already exists
            var formCheck = document.getElementById(formAttr.id);

            if (formCheck) {

                journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual' }, 'Existing virtual form with the same id: ', formAttr.id, ' already exists. Removing it to ensure proper values are passed.');

                document.body.removeChild(formCheck);
            }

            // Call the actual creation function
            return formCreation();
        }
        else {

            return false;
        }

    };

    // Function to create form inputs
    _priv.createInputs = function _create_input(form, inputMap) {

        function createInput(name) {

            var id = utils.cleanupID(name);

            // Create the input attributes
            var iAttributes = {
                "name": name,
                "id": id,
                "type": "hidden",
                "value": ""
            };

            if (id !== name) {
                journal.log({ type: 'error', owner: 'DEV|FW', module: 'form', func: 'createInputs->createInput' }, 'Form created with a dangerous id (' + name + ')! It is not recommmended to create form id\'s that contain special characters used by CSS selectors. It is highly recommended you rename this control if possible.');
            }

            var input = document.createElement('input');

            for (var attr in iAttributes) {

                _priv.createElemAttribute(input, attr, iAttributes[attr]);
            }

            // Append input to form
            form.appendChild(input);
        }

        for (var input in inputMap) {

            createInput(input);
        }

        return true;
    };

    // Function to add attributes for both the input and forms tags
    _priv.createElemAttribute = function _create_element_attribute(elem, attrName, attrValue) {

        elem.setAttribute(attrName, attrValue, 0);
    };

    // Generic common function to remove click blocker
    _priv.removeBlocker = function() {

        if (clkblocker.check()) {
            clkblocker.remove();
        }
    };

    // Default virtual form attributes
    var defaultVirtualAttr = {
        id: 'virtual',
        method: 'POST',
        class: 'emp-hide-form'
    };

    // Function disables form submissions for this module
    var setDisable = function _set_disable(state) {

        _priv.disabledSubmit = state;
    };

    // Creats and submits a form
    /**
     * attributes - object containing the attributes to apply on the form
     * map - object of key value pair defining the destination : source value
     * newWindow - setting to indicate if item should appear in a new windwo (popup)
     * submitAfter - setting to indicate if the form should be submitted after its created (default: true)
     */
    var virtual = function _virtual(evt, formDef) {

        var winRef = false;

        evt.preventDefault();

        // Check to make sure that the form def was provided
        if (formDef && typeof formDef === "object") {

            // Verify that the form attributes exist
            if (formDef.attributes && formDef.attributes.action) {

                // Extend the form attributes with the defaults
                formDef.attributes = $.extend(true, {}, defaultVirtualAttr, formDef.attributes);

                // Ensure that newWindows exists and is defaulted if missing
                if (!formDef.hasOwnProperty('newWindow')) {
                    formDef.newWindow = false;
                }

                // Ensure that submitAfter exists and is defaulted if missing
                if (!formDef.hasOwnProperty('submitAfter')) {
                    formDef.submitAfter = true;
                }

                // Check and set the form target to the provided name or get the default from the windows module
                if (formDef.newWindow) {

                    if (formDef.windowName) {
                        formDef.attributes.target = formDef.windowName;
                    }
                    else {
                        formDef.attributes.target = windows.getDefaultWindowName();
                    }

                    // Check for a window reference with this name
                    winRef = windows.getReference();

                    if (!winRef) {
                        winRef = windows.createReference(formDef.attributes.target);
                    }
                }

                // check to see what the form method is as it might change the open process
                if (formDef.attributes.method.toLowerCase() === "post") {

                    /*
                     * === POST METHOD ===
                     */

                    // Create the form we will submit
                    var form = _priv.createForm(formDef.attributes, formDef.newWindow);

                    // Verify the form was created in memory
                    if (form) {

                        journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual' }, 'New virtual form created: ', formDef.attributes.id);

                        // Check to see if there is an input map
                        if (formDef.map && typeof formDef.map === "object") {

                            // Create all the form inputs (without values)
                            _priv.createInputs(form, formDef.map);

                            // Now execute a process map.
                            var mapResult = process.formMap(form, formDef.map);

                            // Check to verify that the map worked.
                            if (!mapResult) {

                                // Remove the click blocker
                                _priv.removeBlocker();

                                // Returning false to stop the page.
                                return false;
                            }

                        }
                        else {

                            journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual' }, 'No map provided to form: ', formDef.attributes.id);
                        }

                        // Save off the form instance just in case.
                        _priv.forms[formDef.attributes.id] = {
                            name: formDef.attributes.id,
                            dom: form,
                            target: form.getAttribute('target')
                        };

                        if (!formDef.submitAfter) {

                            journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' submission block by submitAfter property being false.');
                        }
                        else {

                            if (_priv.disabledSubmit) {

                                journal.log({ type: 'info', owner: 'Developer', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' submission block by developer global debug disable property being true.');
                            }
                            else {

                                if (formDef.newWindow) {

                                    journal.log({ type: 'info', owner: 'Developer', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' attempting to open a new window.');

                                    if (formDef.lock) {

                                        journal.log({ type: 'info', owner: 'Developer', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' enable the parent lock feature.');

                                        // Create a click blocker
                                        clkblocker.add($(evt.target), true, true);
                                    }

                                    // Open the window and when it reports back ready (callback execute the form)
                                    windows.open(winRef.name, undefined, "POST", formDef.newWindow, formDef.lock, formDef.attributes.id, function(winRef) {

                                        _priv.forms[formDef.attributes.id].dom.submit();

                                        setTimeout(function _focusOnPopup() {

                                            if (winRef && winRef.focus) {

                                                winRef.focus();
                                            }
                                            else {

                                                journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' focus not supoported!');
                                            }

                                            return true;
                                        }, 1000);

                                    });

                                }
                                else {

                                    // Not a new window, so just create the form normally.
                                    form.submit();
                                }

                                return true;
                            }

                        }

                        if (formDef.newWindow && formDef.lock) {

                            return {
                                "preserveBlocker": true
                            };
                        }

                        return true;

                    }
                    else {

                        journal.log({ type: 'error', owner: 'UI', module: 'form', func: 'virtual' }, 'Error occured when attempting to build out new virtual form');

                        // Remove the click blocker
                        _priv.removeBlocker();

                        return false;
                    }
                }
                else {

                    /*
                     * === GET METHOD ===
                     */
                    var externalGWindow = false;

                    if (formDef.newWindow) {

                        externalGWindow = windows.createReference();

                        if (formDef.attributes) {
                            formDef.attributes.target = externalGWindow.name;
                        }
                    }

                    var formG = _priv.createForm(formDef.attributes, formDef.newWindow);

                    if (formDef.map && typeof formDef.map === "object") {

                        // Create all the form inputs (without values)
                        _priv.createInputs(formG, formDef.map);

                        // Now execute a process map.
                        var mapResultG = process.formMap(formG, formDef.map);

                        // Check to verify that the map worked.
                        if (!mapResultG) {

                            // Remove the click blocker
                            _priv.removeBlocker();

                            // Returning false to stop the page.
                            return false;
                        }

                    }

                    if (!formDef.submitAfter) {

                        journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' submission block by submitAfter property being false.');
                    }
                    else {

                        if (_priv.disabledSubmit) {

                            journal.log({ type: 'info', owner: 'Developer', module: 'form', func: 'virtual' }, 'Form: ' + formDef.attributes.id + ' submission block by developer global debug disable property being true.');
                        }
                        else {

                            // Save off the form instance just in case.
                            _priv.forms[formDef.attributes.id] = {
                                name: formDef.attributes.id,
                                target: formDef.attributes.id,
                                window: externalGWindow.name
                            };

                            if (formDef.newWindow) {

                                journal.log({ type: 'info', owner: 'Developer', module: 'form', func: 'virtual' }, 'Form (GET): ' + formDef.attributes.id + ' attempting to open a new window.');

                                if (formDef.lock) {

                                    journal.log({ type: 'info', owner: 'Developer', module: 'form', func: 'virtual' }, 'Form (GET): ' + formDef.attributes.id + ' enable the parent lock feature.');

                                    // Create a click blocker
                                    clkblocker.add($(evt.target), true, true);
                                }

                                // Call window open function to open the window in advance
                                windows.open(externalGWindow.name, undefined, "GET", formDef.newWindow, formDef.lock, function(winRef) {

                                    formG.submit();

                                    setTimeout(function _focusOnPopup() {

                                        if (winRef && winRef.focus) {

                                            winRef.focus();
                                        }
                                        else {

                                            journal.log({ type: 'info', owner: 'UI', module: 'form', func: 'virtual - window callback' }, 'Window focus not supoported!');
                                        }

                                        return true;
                                    }, 1000);
                                });
                            }
                            else {

                                var fullURL = formDef.attributes.action + process.queryString(formDef.map);

                                window.location = fullURL;
                            }
                        }

                    }

                    _priv.removeBlocker();

                    return true;
                }

            }
            else {

                journal.log({ type: 'error', owner: 'UI', module: 'form', func: 'virtual' }, 'Unable to process forms when form attributes or action attribute are missing.');

                return false;
            }

        }
        else {

            journal.log({ type: 'error', owner: 'UI', module: 'form', func: 'virtual' }, 'Unable to process forms when setting object is not in place');

            return false;
        }

    };

    return {
        setDisable: setDisable,
        virtual: virtual
    };

});

define('refresh',[], function () {

    var protocol = window.location.protocol;

    if (protocol.indexOf("http") !== -1) {
        protocol = true;
    }
    else {
        protocol = false;
    }

    function inIframe () {
        try {
            return window.self !== window.top;
        } catch (e) {
            return true;
        }
    }

    var favorites = function _favorites_refresh(cb) {

        var errorText = false;

        console.log("fav refresh");

        if (fwData.context.urls && fwData.context.urls.favorites && fwData.context.urls.favorites.fetch) {

            var req = {
                "url": fwData.context.urls.favorites.fetch,
                "cache": false
            };

            var res = {

                done: function _done(data) {

                    if (data.status && data.status === "success") {

                        if (data.result.length === 1 && data.result[0].body) {

                            var body = data.result[0].body;

                            journal.log({type: 'info', owner: 'UI', module: 'refreshSession', func: 'favorites'}, 'Data was recieved via the framework endpoint.');

                            var favData = body.data;
                            var tabsetids = body.tabsetids;

                            if (typeof cb === "function") {

                                cb(favData, tabsetids);
                            }

                        }

                    }
                    else {

                        errorText = "Favorites returned in error. Please contact the help desk.";

                        emp.empMessage.createMessage({text:errorText, type:"error"});

                    }

                },
                fail: function _fail() {

                    errorText = "Favorites fetch failed. Please contact the help desk.";

                    emp.empMessage.createMessage({text:errorText, type:"error"});
                }
            };

            if (protocol) {
                emp.ajax.request(req, res, false, true);
            }
        }
        else {

            if (protocol) {

                errorText = "Unable to find global references to refresh user favorites. Please Contact Help Desk.";

                if (inIframe) {

                    emp.empMessage.createMessage({text:errorText, type:"error"});
                }
                else {
                    emp.empMessage.createMessage({text:errorText, type:"success"});
                }

            }

        }


    };

    return {
        favorites: favorites
    };

});

define('findParent',[], function() {

    var _priv = {};

    // Function that will continue to loop up the document parent chain until it reaches body or stop selector is true
    var getFirst = function(dSource, sSelector) {

        if (!dSource || (dSource && dSource.nodeType !== 1)) {

            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'findParent', func: 'getFirst' }, 'Invalid starting source element specified');

            return false;
        }

        var dParent = dSource.parentNode;

        while (true) {

            // Double check we havent already reached the top of the DOM.
            if (dParent.nodeName === "BODY") {
                return false;
            }

            // Check to see if the selector provided matches
            if (dParent.matches(sSelector)) {

                return dParent;
            }
            else {

                dParent = dParent.parentNode;
            }
            
        }

    };

    return {
        getFirst: getFirst
    };

});
define('errorPage',[], function() {

    var relocate = function _error_out(sErrorPageName) {

        //console.log(window.location);

        var sAppName = window.location.pathname.slice(1).split('/')[0];
        var sAppBaseURI = window.location.protocol + '//' + window.location.hostname + '/' + sAppName;

        switch (sErrorPageName) {

            case 'invalidSession':
                window.location.replace(sAppBaseURI + '/invalid-session-error.jsp');
                break;

            case 'session':
                window.location.replace(sAppBaseURI + '/existingSessionError.jsp');
                break;

            case 'auth':
                window.location.replace(sAppBaseURI + '/genericAuthError.jsp');
                break;

            default:
                window.location.replace(sAppBaseURI + '/error.jsp');
                break;

        }

    };

    return {
        relocate: relocate
    };

});

define('dynamicDropDown',['findParent', 'process', 'fetchWrapper', 'render', 'empMessage', 'errorPage'], function(fParent, process, fw, render, eMessage, errPage) {

    var _priv = {};

    _priv.createFieldMessageLoc = function _dropdown_field_message_loc(dField) {

        var dFieldMessageLoc = dField.querySelector('div.cui-messages');
        var dFieldParent = dField.parentNode;

        if (!dFieldMessageLoc) {
            dFieldMessageLoc = document.createElement('div');
            dFieldMessageLoc.classList.add('cui-messages');

            dFieldParent.appendChild(dFieldMessageLoc);
        }

        return dFieldMessageLoc;
    };

    var dropdown = function(evt, target, source, reqType) {

        var returnResult = false;

        if (typeof target === "string") {

            // Get all the target information
            var dTarget = document.querySelector('#' + target);
            var dTargetFieldWrapper = fParent.getFirst(dTarget, '.emp-field');
            var sTargetDataStoreID = dTargetFieldWrapper.getAttribute('data-store-id');
            var oTargetDataStore = emp.ds.getStore(sTargetDataStoreID);

            if (reqType) {

                switch(reqType) {

                    case 'data':

                        break;

                    case 'ajax':

                        if (source && typeof source === "object" && source.url && source.data) {

                            // Generate a request object
                            var req = {
                                url: source.url
                            };

                            var res = {};

                            // Check to see if the data object exists
                            if (Object.keys(source.data).length >= 1) {

                                // Generate a data map from the source.data property defined on the argument map
                                source.data = process.data(source.data);

                                req.data = source.data;

                            }
                            else {

                                journal.log({ type: 'info', owner: 'Developer|Framework', module: 'emp', submodule: 'dropdown - ajax' }, 'Source request for dynamic dropdown did not require any additional parameters');
                            }

                            console.log(req.data);

                            res.done = function _dropdown_response_done(data) {

                                if (data.status === "success" && data.result.length === 1) {

                                    // Check to see if the current target specification has an options property, if not add it
                                    if (!oTargetDataStore.input.options) {
                                        oTargetDataStore.input.options = false;
                                    }

                                    oTargetDataStore.input.options = data.result[0].body;

                                    render.section(undefined, oTargetDataStore, 'return', function(html) {

                                        var dTargetFieldColumn = dTargetFieldWrapper.parentNode;

                                        dTargetFieldColumn.insertBefore(html.firstChild, dTargetFieldWrapper);
                                        dTargetFieldColumn.removeChild(dTargetFieldWrapper);

                                    });
                                }
                                else {

                                    // Error out the user and relocate them to the standard error.jsp for the app
                                    errPage.relocate('error');
                                }

                            };

                            res.fail = function _dropdown_response_fail(err) {

                                    // Error out the user and relocate them to the standard error.jsp for the app
                                    errPage.relocate('error');
                            };

                            fw.request(req, res);
                        }
                        else {

                            journal.log({ type: 'error', owner: 'Developer|Framework', module: 'emp', submodule: 'dropdown - ajax' }, 'Source object is missing or missing url or data property. This is what we have: "' + source + '"');
                        }

                        break;

                    default:

                        journal.log({ type: 'error', owner: 'Developer|Framework', module: 'emp', submodule: 'dropdown' }, 'Unknown request type returned "' + reqType + '"');
                        break;

                }

            }
            else {

                journal.log({ type: 'error', owner: 'Developer|Framework', module: 'emp', submodule: 'dropdown' }, 'Dynamic Dropdown missing source request type');
            }

        }
        else {

            journal.log({ type: 'error', owner: 'Developer|Framework', module: 'emp', submodule: 'dropdown' }, 'Dynamic Dropdown target was not defined!');
        }

        return returnResult;
    };

    return {
        dropdown: dropdown
    };

});

define('uiPopup',[], function() {

    var popup = function() {

    };

    return {
        uiPopup: popup
    };

});

define('events',['dataStore', 'deepmerge', 'render',], function(ds, dm, render) {

    var _priv = {};


    _priv.otherDropdown = function _other_dropdown(dSelectElem) {

        dSelectElem.addEventListener('change', function _other_select_change(event) {

            // Get the dropdown element, parent container and value container
            var dSelectOtherDropdown = event.target;
            var dSelectOtherParentContainer = dSelectOtherDropdown.parentNode.parentNode.parentNode;
            var dSelectOtherValueContainer = dSelectOtherParentContainer.nextElementSibling;

            var otherValue = dSelectOtherDropdown.getAttribute('data-select-other');

            if (otherValue === dSelectOtherDropdown.value) {

                var dOption = dSelectOtherDropdown.querySelector('option[value="' + otherValue + '"]');

                var sOptionText = dOption.text.toLowerCase().trim();

                if (sOptionText === "other") {

                    if (dSelectOtherValueContainer.classList.contains('cui-hidden')) {
                        dSelectOtherValueContainer.classList.remove('cui-hidden');
                    }

                }
                else {

                    journal.log({ type: 'error', owner: 'Developer', module: 'emp', events: '', func: 'otherDropdown' }, 'Developer defined invalid field to act as Other. Other fields must have the specific text of "Other".');
                }
            }
            else {

                if (!dSelectOtherValueContainer.classList.contains('cui-hidden')) {
                    dSelectOtherValueContainer.classList.add('cui-hidden');

                    var dDescribeInputs = dSelectOtherValueContainer.querySelectorAll('input, select, textarea');

                    if (dDescribeInputs.length) {

                        for (var dElem = 0, dElemLen = dDescribeInputs.length; dElem < dElemLen; dElem++) {

                            // Set value to nothing
                            dDescribeInputs[dElem].value = "";

                            dDescribeInputs[dElem].removeAttribute("value");
                        }

                    }

                }
            }


        });

    };

    _priv.clearAllSearchBox = function _clear_all_searchbox(event) {

        journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'events', func: 'clearAllSearchBox'}, 'User clicked clear all!');

        var dSearchBoxForm = document.querySelector('#form_search .emp-search-fields');

        var headerIDRow = dSearchBoxForm.querySelector('#headerID');
        var headerIDDropdown;

        if(headerIDRow){
            
            headerIDDropdown = headerIDRow.querySelector('#HEADER_ID_TYPE');
        }

        // Verify it can be changes (Not readonly page)
        if (headerIDDropdown && headerIDDropdown.nodeName === "SELECT") {

            var headerDataStore = ds.getStore('globalHeader');

            if (headerDataStore.search.headerID) {

                headerDataStore.search.headerID.defaultValues = {};

                if (headerDataStore.search.headerID.select.input.defaultValue) {

                    headerDataStore.search.headerID.select.input.value = headerDataStore.search.headerID.select.input.defaultValue;
                }

            }

            var data = {
                template: 'partialCaller',
                partialTemp: 'headerID',
                arguments: dm({}, headerDataStore)
            };

            if (data.arguments.search.headerID) {

                data.arguments.search.headerID.defaultValues = {};

                render.section(undefined, data, 'return', function (html) {

                    var currentHeaderID = document.getElementById('headerID');
                    var parentContainer = currentHeaderID.parentNode;

                    parentContainer.insertBefore(html.firstChild, currentHeaderID);

                    parentContainer.removeChild(currentHeaderID);

                });
            }

        }

        // Clear all the regular inputs after this.
        _priv.clearSearchbox(event, true);

    };

    _priv.clearSearchbox = function _clear_searchbox(event, fromAll) {

        journal.log({type: 'info', owner: 'UI', module: 'emp', submodule: 'events', func: 'clearSearchbox'}, 'User clicked clear or clear was called via clear all click!');

        function setGenericInput(fromAll, input, inputDefault, inputIsRequired) {

            if (fromAll) {

                if (inputDefault && inputIsRequired) {

                    input.removeAttribute('value');
                    input.setAttribute('value', inputDefault.trim());
                    input.value = inputDefault.trim();
                }
                else {

                    input.removeAttribute('value');
                    input.setAttribute('value', "");
                    input.value = "";
                }

            }
            else {

                // On regular clear, defaults are restored otherwise the field is wiped.
                if (inputDefault) {

                    input.removeAttribute('value');
                    input.setAttribute('value', inputDefault.trim());
                    input.value = inputDefault.trim();
                }
                else {

                    input.removeAttribute('value');
                    input.setAttribute('value', "");
                    input.value = "";
                }

            }

        }

        function clearDropdown(input) {

            var options = input.querySelectorAll('option');

            // Loop through and remove the selected attribute to ensure its gone!
            for (var o = 0, oLen = options.length; o < oLen; o++) {

                var option = options[o];

                option.removeAttribute('selected');

            }

        }

        // Get all of the fields currently in the searchbox
        var dSearchBoxForm = document.querySelector('#form_search .emp-search-fields');

        var adNormalSearchRows = dSearchBoxForm.querySelectorAll('.cui-row:not(#headerID)');

        for (var r = 0, rLen = adNormalSearchRows.length; r < rLen; r++) {

            var row = adNormalSearchRows[r];

            var inputs = row.querySelectorAll('input, select, textarea, .emp-data');

            for (var i = 0, iLen = inputs.length; i < iLen; i++) {

                var input = inputs[i];
                var rootElem = input.parentNode.parentNode;

                // Lets get some input attributes
                var inputID = input.getAttribute('id');
                var inputName = input.getAttribute('name');
                var inputDefault = input.getAttribute('data-default');
                var inputType = input.nodeName;

                var inputIsRequired = rootElem.classList.contains('cui-required');
                var inputHTMLType = false;


                // Skip to next input if this is a regular clear hit and its a tax type field.
                if (!fromAll) {

                    // Check to see if this ia at tax type field.
                    if ((inputID.indexOf('S_TAX_TYPE') !== -1) || (inputID.indexOf('S_TAX_SUB_TYPE') !== -1)) {
                        continue;
                    }

                }

                if (inputType === "INPUT") {
                    inputHTMLType = input.getAttribute('type').toLocaleLowerCase();
                }

                switch(inputType) {

                    case "INPUT":

                        switch (inputHTMLType) {

                            case "radio":
                            case "checkbox":

                                // Check if they user clicked clear all
                                if (fromAll) {

                                    // Since we are coming from an all click and the input has a default and its required, we need to restore the value
                                    if (inputDefault && inputIsRequired) {

                                        input.checked = inputDefault.trim();
                                    }
                                    else {

                                        input.checked = false;
                                    }

                                }
                                else {

                                    // Since normal clear was clicked, if there is a default. Reset it, otherwise just clear.
                                    if (inputDefault) {

                                        input.checked = inputDefault.trim();
                                    }
                                    else {
                                        input.checked = false;
                                    }
                                }

                                break;

                            default:

                                // Because this is a hidden field we need to look in a different location for the hidden attribute tag
                                if (inputHTMLType === "hidden") {
                                    inputIsRequired = (input.getAttribute('data-required')) ? true : false;
                                }

                                setGenericInput(fromAll, input, inputDefault, inputIsRequired);

                                break;

                        }

                        break;

                    case "SELECT":

                        if (fromAll) {

                            if (inputDefault && inputIsRequired) {

                                clearDropdown(input);
                                input.value = inputDefault;
                            }
                            else {

                                clearDropdown(input);
                                input.value = "";
                            }

                        }
                        else{

                            if (inputDefault) {

                                clearDropdown(input);
                                input.value = inputDefault;
                            }
                            else {

                                clearDropdown(input);
                                input.value = "";
                            }

                        }


                        break;

                    case "TEXTAREA":

                            setGenericInput(fromAll, input, inputDefault, inputIsRequired);

                        break;

                    case "P":
                    case "SPAN":

                        if (fromAll) {

                            if (inputDefault && inputIsRequired) {

                                input.innerHTML = inputDefault;
                            }
                            else {

                                input.innerHTML = "";
                            }

                        }
                        else {

                            if (inputDefault) {

                                input.innerHTML = inputDefault;
                            }
                            else {

                                input.innerHTML = "";
                            }

                        }

                        break;

                }

            }

        }


    };

    return {
        clearAllSearchBox: _priv.clearAllSearchBox,
        clearSearchbox: _priv.clearSearchbox,
        otherDropdown: _priv.otherDropdown
    };

});

/*jshint loopfunc: true */
define('expandables',[], function () {

    var _priv = {};

    _priv.expandRegion = function _expand_region(regionElem, expand) {

        if (expand) {

            // Check region to see if its already open or not
            if (regionElem.classList.contains('emp-collapse')) {

                regionElem.classList.remove('emp-collapse');
            }

        }
        else {

            // Check region to see if its already open or not
            if (!regionElem.classList.contains('emp-collapse')) {

                regionElem.classList.add('emp-collapse');
            }

        }

    };

    _priv.setExpandState = function _set_expand_state(controlElem, state) {

        controlElem.setAttribute('aria-expanded', state);

    };

    _priv.setupRegion = function _setup_regions(ariaControls) {


        // Now that we know all the expandable sections we need to add a targetting class
        for (var ac = 0, acLen = ariaControls.length; ac < acLen; ac++) {

            var expandRegion = document.querySelector('#' + ariaControls[ac]);

            if (expandRegion) {

                if (!expandRegion.classList.contains('emp-expandable-region')) {

                    expandRegion.classList.add('emp-expandable-region');
                }
            }
            else {

                journal.log({ type: 'error', owner: 'DEV', module: 'emp', submodule: 'expandables', func: '_priv.setupRegion' }, 'Expandable region with id: ' + ariaControls[ac] + ' does not exist on this page.');
            }

        }

    };

    var setup = function _expandable_setup() {

        var expandableControls = document.querySelectorAll('.emp-expandable-control');

        // Loop through
        for (var ec = 0, ecLen = expandableControls.length; ec < ecLen; ec++){

            var eControl = expandableControls[ec];

            switch (eControl.nodeName) {

                case "INPUT":

                    // Filter out radio lists as they only allow for a single
                    if (eControl.getAttribute('type') === "radio") {

                        //console.log(eControl);

                        var radioName = eControl.getAttribute('name').trim();

                        var allAriaControls = [];

                        // Get all radio groups with this name
                        var radios = document.querySelectorAll('input[name="' + radioName + '"]');

                        // Loop through all radios to collect the needed aria-controls
                        for (var r = 0, rLen = radios.length; r < rLen; r++) {

                            var radio = radios[r];

                            var ariaControls = radio.getAttribute('aria-controls');

                            if (ariaControls) {

                                ariaControls = ariaControls.split(' ');

                                allAriaControls = allAriaControls.concat(ariaControls);

                            }

                        }

                        var ariaBreakdown = {};

                        // Loop through agaim, this time identifying the controlling breakdown
                        for (var r2 = 0, r2Len = radios.length; r2 < r2Len; r2++) {

                            var radio2 = radios[r2];

                            var radioValue = radio2.value;

                            var ariaControls2 = radio2.getAttribute('aria-controls');

                            if (ariaControls2) {

                                ariaControls2 = ariaControls2.split(' ');

                                var ariaCollapse = [];
                                var ariaExpand = [];

                                for (var a = 0, aLen = allAriaControls.length; a < aLen; a++) {

                                    var currentControl = allAriaControls[a];

                                    if(ariaControls2.indexOf(currentControl) !== -1){
                                        ariaExpand.push(currentControl);
                                    }
                                    else {
                                        ariaCollapse.push(currentControl);
                                    }
                                }

                                ariaBreakdown[radioValue] = {
                                    expand: ariaExpand.slice(0),
                                    collapse: ariaCollapse.slice(0),
                                    radio: radio2
                                };

                            }
                            else {

                                ariaBreakdown[radioValue] = {
                                    expand: [],
                                    collapse: allAriaControls.slice(0),
                                    radio: radio2
                                };
                            }

                        }

                        var radioFieldSet = radios[0].parentNode;

                        while(radioFieldSet.nodeName !== "FIELDSET") {

                            if (radioFieldSet.nodeName === "body") {
                                break;
                            }

                            radioFieldSet = radioFieldSet.parentNode;
                        }

                        _priv.setupRegion(allAriaControls);

                        // Bind even to root fieldset
                        radioFieldSet.addEventListener('change', function(ariaBreakdown, evt) {

                            var radio = evt.target;
                            var radioValue = radio.value;

                            if (ariaBreakdown[radioValue]) {

                                // Get the active radios expands for reference
                                var activeRadio = ariaBreakdown[radioValue];

                                // Loop through all collapse first
                                for (var c = 0, cLen = activeRadio.collapse.length; c < cLen; c++) {

                                    var collapseSection = document.querySelector('#' + activeRadio.collapse[c]);

                                     if (!collapseSection.classList.contains('emp-collapse')) {
                                        collapseSection.classList.add('emp-collapse');
                                    }
                                }

                                // Loop through and expand all items that need to be
                                for (var e = 0, eLen = activeRadio.expand.length; e < eLen; e++) {

                                    var expandSection = document.querySelector('#' + activeRadio.expand[e]);

                                    if (expandSection.classList.contains('emp-collapse')) {
                                        expandSection.classList.remove('emp-collapse');
                                    }

                                }

                                //Update aria-expanded values for all items in ariaBreakdown
                                var ariaKeys = Object.keys(ariaBreakdown);
		                        for(var i = 0; i < ariaKeys.length; i++){
		                        	if(ariaKeys[i] == radioValue){
		                        		ariaBreakdown[ariaKeys[i]].radio.setAttribute("aria-expanded", "true");
		                        	}
		                        	else{
										ariaBreakdown[ariaKeys[i]].radio.setAttribute("aria-expanded", "false");
		                        	}
		                        }

								//Send custom event that section has been expanded
								var event = document.createEvent('Event');
								event.initEvent('expandableChange', true, true);
								radio.dispatchEvent(event);
                            }

                    	//}.bind(null, JSON.parse(JSON.stringify(ariaBreakdown))), false);
                    	}.bind(null, ariaBreakdown), false);

                    }
                    else {

                        checkboxAriaControls = eControl.getAttribute('aria-controls');

                        if (checkboxAriaControls) {
                            checkboxAriaControls = checkboxAriaControls.split(' ');

                            _priv.setupRegion(checkboxAriaControls);
                        }

                        eControl.addEventListener('change', function(evt) {

                            var check = evt.target;
                            var checkedState = evt.target.checked;
                            var ariaControls = (check.hasAttribute('aria-controls')) ? check.getAttribute('aria-controls').split(' ') : false;

                            var checkExpands = [];

                            if (ariaControls && ariaControls.length) {

                                for(var containerID = 0; containerID < ariaControls.length; containerID++){

                                    var containerElem = document.getElementById(ariaControls[containerID]);

                                    if (containerElem) {

                                        checkExpands.push(containerElem);
                                    }
                                }

                                if (checkedState) {
                                    _priv.setExpandState(check, true);
                                }
                                else {
                                    _priv.setExpandState(check, false);
                                }

                                if (checkExpands.length) {
                                    for (var ce = 0, ceLen = checkExpands.length; ce < ceLen; ce++) {

                                        if (checkedState) {

                                            _priv.expandRegion(checkExpands[ce], true);
                                        }
                                        else {

                                            _priv.expandRegion(checkExpands[ce], false);
                                        }

                                    }
                                }

                            }

                        });

                    }

                    break;

                case "SELECT":

                    // Pull the expandableRegionId from the select control
                    var selectAriaControls = eControl.getAttribute('aria-controls');

                    if (selectAriaControls) {
                        selectAriaControls = selectAriaControls.split(' ');

                        _priv.setupRegion(selectAriaControls);
                    }

                    eControl.addEventListener('change', function (evt) {

                        var selectElem = evt.target;
                        var selectElemValue = evt.target.value;
                        var selectOptionElems = selectElem.querySelectorAll('option');

                        var regionToExpand = [];
                        var regionToClose = [];

                        for (var o = 0, oLen = selectOptionElems.length; o < oLen; o++) {

                            var option = selectOptionElems[o];
                            var optionValue = selectOptionElems[o].getAttribute('value');

                            // Check to see if this option controls a section
                            if (option.hasAttribute('data-expands')) {

                                var optionExpandTargets = false;

                                if (option.dataset) {
                                    optionExpandTargets = option.dataset.expands.split(' ');
                                }
                                else {
                                    optionExpandTargets = option.getAttribute('data-expands').split(' ');
                                }

                                for(var containerID = 0; containerID < optionExpandTargets.length; containerID++){

                                    var containerElem = document.getElementById(optionExpandTargets[containerID]);

                                    if (containerElem) {

                                        // Check to see if this option is the option we are currently looking at
                                        if (selectElemValue === optionValue) {

                                            regionToExpand.push(containerElem);
                                        }
                                        else {

                                            regionToClose.push(containerElem);
                                        }
                                    }
                                }

                            }

                        }

                        if (regionToExpand.length) {
                            _priv.setExpandState(selectElem, true);
                        }
                        else {
                            _priv.setExpandState(selectElem, false);
                        }

                        // Collapse any sections that need to be hidden
                        if (regionToClose.length) {
                            for (var rtc = 0, rtcLen = regionToClose.length; rtc < rtcLen; rtc++) {

                                _priv.expandRegion(regionToClose[rtc], false);

                            }
                        }

                        // Expand any sections that need to be hidden
                        if (regionToExpand.length) {
                            for (var rte = 0, rteLen = regionToExpand.length; rte < rteLen; rte++) {

                                _priv.expandRegion(regionToExpand[rte], true);

                            }
                        }

                    });

                    break;

            }

        }

    };

    return {
        setup: setup
    };

});

/*jshint loopfunc: true */
define('externalApp',['render'], function (render) {

    var _priv = {};
    var _events = {};

    _priv.$userPopover = false;
    _priv.$supportPopover = false;

    _events.getSupportPopover = function(supportJSON, evt) {

        evt.preventDefault();

        var generatePopver = function() {

            var $supportButton = $('#agencyHelp');

            render.section(undefined, supportJSON.popover, 'return', function(html) {

                _priv.$supportPopover = $.popover($supportButton, {
                    html: html,
                    display: {
                        className: 'emp-support-popup'
                    }
                });
            });
        };

        emp.load('popover', function _load_support_popover() {

            if (!_priv.$supportPopover) {
                generatePopver();

                _priv.$supportPopover.show();
            }
        });

    };

    _events.userAccountPopover = function(userAcctJSON, evt) {

        evt.preventDefault();

        var generatePopver = function() {

            var $userAccountButton = $('#userAcct');

            // Generate the contents
            render.section(undefined, userAcctJSON.popover, 'return', function(html) {

                _priv.$userPopover = $.popover($userAccountButton, {
                    html: html,
                    display: {
                        className: 'emp-account-popup'
                    }
                });
            });

        };

        emp.load('popover', function _loadPopover() {

            if (!_priv.$userPopover) {
                generatePopver();

                if (_priv.$userPopover) {

                    _priv.setUpExpandables(_priv.$userPopover.$popover[0]);
                }

                _priv.$userPopover.show();
            }

        });

    };

    _priv.expandToggle = function(dExpandControl) {

        var dCurrentNode = dExpandControl;

        while(true) {

            if (dCurrentNode.nodeName === "BODY") {
                dCurrentNode = false;
                break;
            }

            if (dCurrentNode.nodeType === 1) {

                if (dCurrentNode.classList.contains('emp-expandable-control')) {
                    break;
                }

            }

            dCurrentNode = dCurrentNode.parentNode;
        }

        if (dCurrentNode) {

            dSpan = dCurrentNode;

            if (dSpan.classList.contains('emp-collapse-children')) {
                dSpan.classList.remove('emp-collapse-children');
            }
            else {
                dSpan.classList.add('emp-collapse-children');
            }
        }
    };

    _priv.setUpExpandables = function(dContents) {

        var dnExpandables = dContents.querySelectorAll('.emp-expandable-control');

        if (dnExpandables && dnExpandables.length) {

            for (var e = 0, eLen = dnExpandables.length; e < eLen; e++) {

                dnExpandables[e].addEventListener('click', function(evt, dElem) {
                    _priv.expandToggle(evt.target);
                });
            }
        }

    };

    _priv.isInit = false;

    _priv.init = function _init(dSelectElem) {

        var dHTML = document.querySelector('html');

        if (dHTML.classList.contains('external-app') && !_priv.isInit) {
            journal.log({ type: 'info', owner: 'UI', module: 'emp', function: 'externalApp' }, 'Page is running in external app mode!');

            var dUnavBannerToggle = document.querySelector('#banner-toggle button');
            var dUnavBannerMobileToggle = document.querySelector('.unav-header .unav-primary-bar .unav-toggle-arrow a');

            var dBodyWrapper = document.querySelector('#body-wrapper');
            var dHeaderWrapper = document.querySelector('#header-wrapper');
            var dUniversalBar = document.querySelector('#header-wrapper .unav-header');

            if (dUnavBannerToggle) {

                dUnavBannerToggle.addEventListener('click', function() {

                    if (dUnavBannerToggle.classList.contains('active')) {
                        dHeaderWrapper.classList.remove('active-unav-bar');
                        dUnavBannerToggle.classList.remove('active');
                    }
                    else {
                        dHeaderWrapper.classList.add('active-unav-bar');
                        dUnavBannerToggle.classList.add('active');
                    }

                });

            }
            else {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', function: 'externalApp' }, 'Banner toogle event not setup because element is missing.');
            }

            if (dUnavBannerMobileToggle) {

                dUnavBannerMobileToggle.addEventListener('click', function(e) {

                    event.preventDefault();

                    if (dHeaderWrapper.classList.contains('active-unav-menu')) {
                        dHeaderWrapper.classList.remove('active-unav-menu');
                        dUnavBannerMobileToggle.classList.remove('active');
                    }
                    else {
                        dHeaderWrapper.classList.add('active-unav-menu');
                        dUnavBannerMobileToggle.classList.add('active');
                    }

                });
            }
            else {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', function: 'externalApp' }, 'Banner mobile toogle event not setup because element is missing.');
            }

            // Find user and support controls
            var dUserAccountButton = document.querySelector('#userAcct');
            var dSupportButton = document.querySelector('#agencyHelp');

            var bInlineMenu = false;

            if (dUserAccountButton) {
                bInlineMenu = (dUserAccountButton.getAttribute('data-inlinemenu')) ? true : false;
            }

            var userAccountPopover = false;

            if (dUserAccountButton && (fwData.menus.system || fwData.menus.userAccount)) {

                userAccountPopover = {
                    "popover": {
                        "contents": [
                            {
                                "template": "popover",
                                "contents": [
                                ]
                            }
                        ]
                    }
                };

                // Construct the user info section if it exists
                if (fwData && fwData.context && fwData.context.screen && fwData.context.screen.userInfo) {

                    var oUserInfo = {
                        "type": "external-auth-user",
                        "template": "composite",
                        "properties": {
                            "realName": fwData.context.screen.userInfo.realName,
                            "companyName": fwData.context.screen.userInfo.companyName,
                            "userid": fwData.context.screen.userInfo.userid
                        }
                    };

                    userAccountPopover.popover.contents[0].contents.push(oUserInfo);
                }

                // Construct the account info section if it exists
                if (fwData && fwData.context && fwData.context.screen && fwData.context.screen.accountInfo) {

                    var oUserAcctInfo = {
                        "type": "external-account-demo",
                        "template": "composite",
                        "properties": {
                            "account": fwData.context.screen.accountInfo.account,
                            "role": fwData.context.screen.accountInfo.role
                        }
                    };

                    userAccountPopover.popover.contents[0].contents.push(oUserAcctInfo);
                }

                // Add the user account menu if it exists
                if (fwData && fwData.menus && fwData.menus.userAccount && fwData.menus.userAccount.items && fwData.menus.userAccount.items.length) {
                    userAccountPopover.popover.contents[0].contents.push(fwData.menus.userAccount);
                }

                // Add the system menu if it exists
                if (fwData && fwData.menus && fwData.menus.system && fwData.menus.system.items && fwData.menus.system.items.length) {

                    // var logoutIndex = false;

                    // for (var sm = 0, smLen = fwData.menus.system.items.length; sm < smLen; sm++) {
                    //     var menuItem = fwData.menus.system.items[sm];

                    //     if (menuItem.text.toLowerCase() === "logout") {
                    //         logoutIndex = sm;
                    //     }

                    // }

                    // if (logoutIndex > -1) {
                    //     fwData.menus.system.items.splice(logoutIndex, 1);
                    // }

                    if (fwData.menus.system.items && fwData.menus.system.items.length) {

                        userAccountPopover.popover.contents[0].contents.push(fwData.menus.system);
                    }

                }

                if (userAccountPopover.popover.contents[0].contents.length) {
                    dUserAccountButton.addEventListener('click', _events.userAccountPopover.bind(null, userAccountPopover));
                }
                else {

                    dUserAccountButton.classList.add('emp-disabled-user-menu');
                }

                journal.log({ type: 'info', owner: 'UI', module: 'emp', function: 'externalApp' }, 'User Account Menu setup');
            }
            else if (dUserAccountButton && bInlineMenu) {

                var oAgencyHeader = false;

                for (var h = 0, hLen = fwData.header.contents.length; h < hLen; h++) {

                    var oHeader = fwData.header.contents[h];

                    if (oHeader && oHeader.template && oHeader.template === "agency-header") {
                        oAgencyHeader = oHeader;
                        break;
                    }

                }

                if (oAgencyHeader) {

                    userAccountPopover = {
                        popover: {
                            contents: false
                        }
                    };

                    userAccountPopover.popover.contents = oAgencyHeader.userAcct.popover.contents;

                    dUserAccountButton.addEventListener('click', _events.userAccountPopover.bind(null, userAccountPopover));
                }

                journal.log({ type: 'warn', owner: 'UI', module: 'emp', function: 'externalApp' }, 'User Account Menu setup, but is using the old spec via the agency header template!');

            }
            else {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', function: 'externalApp' }, 'User Account Menu not setup because something is missing');
            }

            var bSupportMenuLinksExist = false;

            if (dSupportButton && (fwData.menus.supportContact || fwData.menus.appHelp)) {

                var supportPopover = {
                    "popover": {
                        "contents": [
                            {
                                "template": "popover",
                                "contents": [
                                ]
                            }
                        ]
                    }
                };

                // Add the account menu if it exists
                if (fwData && fwData.menus && fwData.menus.appHelp && fwData.menus.appHelp.items && fwData.menus.appHelp.items.length) {
                    supportPopover.popover.contents[0].contents.push(fwData.menus.appHelp);

                    bSupportMenuLinksExist = true;
                }

                // Add the account menu if it exists
                if (fwData && fwData.menus && fwData.menus.supportContact && fwData.menus.supportContact.items && fwData.menus.supportContact.items.length) {
                    supportPopover.popover.contents[0].contents.push(fwData.menus.supportContact);

                    bSupportMenuLinksExist = true;
                }

                if (bSupportMenuLinksExist) {

                    dSupportButton.addEventListener('click', _events.getSupportPopover.bind(null, supportPopover));
                    journal.log({ type: 'info', owner: 'UI', module: 'emp', function: 'externalApp' }, 'Support Menu setup');
                }
                else {

                    journal.log({ type: 'warning', owner: 'UI', module: 'emp', function: 'externalApp' }, 'Support Menu setup skipped, no items');
                }

            }
            else {
            	journal.log({ type: 'error', owner: 'UI', module: 'emp', function: 'externalApp' }, 'Support Menu not setup because something is missing');
            }

            _priv.isInit = true;
        }

    };

    return {
        init: _priv.init
    };

});

/*jshint loopfunc: true */
define('expandingTextArea',[], function() {

    _priv = {};

    _priv.autoSize = function autoSize(elm) {

        setTimeout(function () {

            var scrollHeight = elm.scrollHeight;
            var currentHeight = parseInt(elm.style.height.replace('px', ''));

            if (scrollHeight !== currentHeight) {

                if (scrollHeight >= 38) {

                    elm.style.height = 'inherit';

                    var computed = window.getComputedStyle(elm);

                    var height = parseInt(computed.getPropertyValue('border-top-width'), 10) + parseInt(computed.getPropertyValue('padding-top'), 10) + elm.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom'), 10) + parseInt(computed.getPropertyValue('border-bottom-width'), 10);

                    elm.style.height = height + 'px';
                }
                else {

                    elm.style.height = 'inherit';
                }
            }

        }, 0);
    };

    var setup = function _setup() {

        var expandingTextAreas = document.querySelectorAll('textarea.emp-expanding');

        for (var e = 0, eLen = expandingTextAreas.length; e < eLen; e++) {

            var expandintTextArea = expandingTextAreas[e];

            // Add an event listener
            expandintTextArea.addEventListener('keydown', function() {

                _priv.autoSize(this);
            });

            _priv.autoSize(expandintTextArea);

        }



    };

    return {
        setup: setup
    };

});

define('keepAlive',['fetchWrapper'], function (fw) {

    var platform = function _platform(pltfrmUrl, cb, pltfrm) {

        var req = {
            url: false,
            ignoreResponse: true
        };

        if (pltfrmUrl.indexOf('http') === -1) {

            req.url = window.location.protocol + "//" + window.location.hostname + pltfrmUrl;
        }
        else {

            req.url = pltfrmUrl;
        }

        //We need to pass an object in some instances for journal log
        if(typeof pltfrm === 'object'){

            var pltfrmName = pltfrm.name;
        }

        var res = {
            "done": function (data) {

                if (data) {

                    // Since empire 1 does not return any page json or standard ajax we just assume its fine by done being called.
                    journal.log({ type: 'info', owner: 'FW', module: 'keepAlive', func: 'flatform' }, pltfrmName + ' successfully refreshed from ' + pltfrmName + ' ajax endpoint');

                    if (typeof cb === "function") {
                        cb(true, pltfrm);
                    }
                }

            },
            "fail": function (err) {

                journal.log({ type: 'error', owner: 'FW', module: 'keepAlive', func: 'flatform' }, 'Error occured when attempting to refresh ' + pltfrmName + ' endpoint');

                if (typeof cb === "function") {
                    cb(false, pltfrm);
                }
            }
        };

        // Send request
        emp.fw.request(req, res);

    };

    return {
        platform: platform
    };

});

define('session',['render', 'keepAlive', 'store'], function (render, keepAlive, store) {

    var _priv = {};

    _priv.currentModal = false;
    _priv.currentModalTimer = false;
    _priv.currentSessionExpired = false;

    _priv.sessionHasParent = false;

    _priv.parentLastVisit = false;
    _priv.parentTimeout = false;
    _priv.currentSessionTimeout = false;

    _priv.parentRefreshTimer = false;

    _priv.fiveMinutes = 300000;

    _priv.refreshParent = function _refresh_parent(newTime) {

        if (!newTime) {
            newTime = Date.now();
        }

        function cb(result, pltfrm){

            var pltfrmTimeout = (typeof pltfrm.timeout === "string") ? parseInt(pltfrm.timeout) : pltfrm.timeout;
    
            if (!result) {

                journal.log({ type: 'error', owner: 'UI', module: 'session', submodule: '', func: 'refreshParent' }, 'Failed to refresh ' + pltfrm.name + ' session!');

            }
            else {

                store.set(pltfrm.name+'LastVisit', newTime);

                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'refreshParent' }, pltfrm.name + ' localstorage value was refreshed');

                // Re-setup the parent(s) timer to kick up in the expected number of miliseconds
                _priv.parentRefreshTimer = setTimeout(_priv.refreshParent, pltfrmTimeout);

                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'refreshParent' }, pltfrm.name + ' Session extended for another ' + pltfrmTimeout + ' miliseconds');
            }
        }

        if (!_priv.currentSessionExpired) {

            //Check for parent(s) - Prevously visited platform(s)
            if(_priv.sessionHasParent){

                for(var sPrnt in fwData.context.session.parent){

                    keepAlive.platform(fwData.context.session.parent[sPrnt].keepAlive, cb, fwData.context.session.parent[sPrnt]);
                }

            }else{

                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'refreshParent' }, 'Attempted to refresh parent sessions - No parents found.');
            }
        }

    };

    _priv.warningModal = function _warning_modal() {

        emp.load('modal', function _empire2_warning_modal() {

            var warningModal = {
                "contents": [
                    {
                        "type": "row",
                        "template": "grid",
                        "contents": [
                            {
                                "type": "column",
                                "template": "grid",
                                "contents": [
                                    {
                                        "template": "output",
                                        "text": "Your session will expire in 5 minutes. Would you like to extend it?"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "row",
                        "template": "buttonGroup",
                        "style": "session-modal",
                        "contents": [
                            {
                                "type": "column",
                                "template": "buttonGroup",
                                "style": "align-right",
                                "width": "full",
                                "contents": [
                                    {
                                        "type": "button",
                                        "template": "field",
                                        "input": {
                                            "attributes": {
                                                "id": "extendSessionCancel",
                                            },
                                            "text": "No",
                                        },
                                        "noFieldWrap": true
                                    },
                                    {
                                        "type": "button",
                                        "template": "field",
                                        "input": {
                                            "attributes": {
                                                "id": "extendSession",
                                            },
                                            "text": "Yes, Extend Session",
                                            "primary": true,
                                        },
                                        "noFieldWrap": true
                                    }
                                ]
                            }
                        ]
                    }
                ]
            };

            render.section(undefined, warningModal, 'return', function(htmlContents) {

                var warningModal = $.modal({
                        html: htmlContents,
                        hideDestroy: false,
                        buildInvisible: true,
                        autoOpen: true,
                        onCreate: function(modal) {

                            _priv.currentModal = modal;

                            var extendSessionButton = document.querySelector('#extendSession');
                            var extendSessionCancelButton = document.querySelector('#extendSessionCancel');

                            clearInterval(_priv.currentModalTimer);

                            _priv.currentModalTimer = setTimeout(_priv.timeoutModal, _priv.fiveMinutes);

                            extendSessionCancelButton.addEventListener('click', function() {

                                _priv.currentModal.destroy();

                                journal.log({ type: 'warning', owner: 'UI', module: 'session', submodule: '', func: 'warningModal' }, 'User decided to not extend their session.');
                            });

                            extendSessionButton.addEventListener('click', function() {

                                //Current session
                                keepAlive.platform(fwData.context.session.current.keepAlive, function(result) {

                                    _priv.currentModal.destroy();

                                    clearInterval(_priv.currentModalTimer);

                                    if (!result) {

                                        journal.log({ type: 'error', owner: 'UI', module: 'session', submodule: '', func: 'warningModal' }, 'Session failed to be extended!');
                                    }
                                    else {

                                        //refresh parent(s) - Keep parents in sync
                                        if(_priv.sessionHasParent){

                                            _priv.refreshParent();
                                        }

                                        //sync localstorage - Is this needed? localStorage is being set by _priv.refreshParent function, but only if request successful.
                                        if(_priv.sessionHasParent){

                                            for(var sP in fwData.context.session.parent){

                                                if(store.get(fwData.context.session.parent[sP].name+'LastVisit')){

                                                    store.set(fwData.context.session.parent[sP].name+'LastVisit', Date.now());
                                                }
                                            }
                                        }

                                        _priv.currentModalTimer = setTimeout(_priv.warningModal, _priv.currentSessionTimeout);

                                        journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'warningModal' }, 'Session extended for another ' + _priv.currentSessionTimeout + ' miliseconds');
                                    }

                                }, fwData.context.session.current);

                            });

                        }

                });

                currentTimeoutModal = warningModal;

            });

        });
    };

    _priv.timeoutModal = function _timeout_modal() {

        var timeoutModal = {
            "contents": [
                {
                    "type": "row",
                    "template": "grid",
                    "contents": [
                        {
                            "type": "column",
                            "template": "grid",
                            "contents": [
                                {
                                    "template": "output",
                                    "text": "Your session has expired. You can close this modal, but any other action buttons on this page will no longer work."
                                }
                            ]
                        }
                    ]
                },
                {
                    "type": "row",
                    "template": "buttonGroup",
                    "contents": [
                        {
                            "type": "column",
                            "template": "buttonGroup",
                            "style": "align-right",
                            "contents": [
                                {
                                    "type": "button",
                                    "template": "field",
                                    "input": {
                                        "attributes": {
                                            "id": "sessionExpired",
                                        },
                                        "text": "OK",
                                        "primary": true
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        };
    
        render.section(undefined, timeoutModal, 'return', function(htmlContents) {
    
            var timeoutModal = $.modal({
                    html: htmlContents,
                    hideDestroy: false,
                    buildInvisible: true,
                    autoOpen: true,
                    onCreate: function(modal) {
    
                        journal.log({ type: 'error', owner: 'UI', module: 'session', submodule: '', func: 'timeoutModal' }, 'Session expired!');
    
                        _priv.currentModal.destroy();
    
                        _priv.currentModal = modal;
    
                        _priv.currentSessionExpired = true;
    
                        var sessionExpiredButton = document.querySelector('#sessionExpired');
    
                        sessionExpiredButton.addEventListener('click', function() {
    
                            modal.destroy();

                            //redirect to logout page
                            if(fwData && fwData.context && fwData.context.session && fwData.context.session.current && fwData.context.session.current.logout){

                                if(fwData.context.session.current.logout !== ""){

                                    window.location = fwData.context.session.current.logout;

                                    journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'timeoutModal' }, 'Redirected user to logout page.');
                                
                                }else{

                                    journal.log({ type: 'error', owner: 'UI', module: 'session', submodule: '', func: 'timeoutModal' }, 'Logout url not found!');
                                }

                            }else{

                                journal.log({ type: 'error', owner: 'UI', module: 'session', submodule: '', func: 'timeoutModal' }, 'Logout property not found!');
                            }
                            
                        });
    
                    }
    
            });
    
            _priv.currentTimeoutModal = timeoutModal;
    
        });    
    };


    var init = function _session_setup(){

        _priv.currentTime = Date.now();

        var remainingParentTime = false;

        //Get session parents 
        if(fwData && fwData.context && fwData.context.session && fwData.context.session.parent && fwData.context.session.parent.length > 0){

            _priv.sessionHasParent = true;

            for(var sessionParent in fwData.context.session.parent){
                
                // Take care of issue where parents lastVisited data becomes null as user jumps from different platforms.
                if(fwData.context.session.parent[sessionParent].lastVisited){

                    var parentLastVisitedLST = store.get(fwData.context.session.parent[sessionParent].name+'LastVisit');

                    if(parentLastVisitedLST){

                        //Assign lStorage value
                        fwData.context.session.parent[sessionParent].lastVisited = parentLastVisitedLST;
                    }
                }
            }
        }

        if(fwData && fwData.context && fwData.context.session && fwData.context.session.current && fwData.context.session.current.timeout && fwData.context.session.current.keepAlive){

            journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'refreshParents' }, 'Attempting to setup session management.');

            // ----------------- Parent(s) session -----------------
            if(_priv.sessionHasParent === true){

                for(var sParent in fwData.context.session.parent){

                    if(fwData.context.session.parent[sParent].lastVisited && fwData.context.session.parent[sParent].timeout){

                        //Sanitize lastVisited and timeout values
                        _priv.parentLastVisit = (typeof fwData.context.session.parent[sParent].lastVisited === "string") ? parseInt(fwData.context.session.parent[sParent].lastVisited) : fwData.context.session.parent[sParent].lastVisited;
                        _priv.parentTimeout = (typeof fwData.context.session.parent[sParent].timeout === "string") ? parseInt(fwData.context.session.parent[sParent].timeout) : fwData.context.session.parent[sParent].timeout;

                        // Start by checking to see if we have parent(s) LastVisited Information in localStorage
                        _priv.parentLastVisitedLStorage = store.get(fwData.context.session.parent[sParent].name+'LastVisit');

                        if(!_priv.parentLastVisitedLStorage){

                            journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'No local storage value was found for ' + fwData.context.session.parent[sParent].name);

                            // Defaulting local storage value to current fwdata value
                            _priv.parentLastVisitedLStorage = _priv.parentLastVisit;

                            // Because we dont know how long a user may have been on the last parent page we need to compute remaining time from provided timeout duration
                            remainingParentTime = _priv.currentTime - _priv.parentLastVisit;

                            // Check to see if the parent timer is already withing 5 minutes or less
                            if (remainingParentTime <= _priv.fiveMinutes) {

                                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Forcing ' + fwData.context.session.parent[sParent].name + ' refresh as it will expire in less than 5 minutes');

                                _priv.refreshParent(_priv.currentTime);

                            }else if (remainingParentTime > _priv.parentTimeout) {

                                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Forcing ' + fwData.context.session.parent[sParent].name + ' refresh though it might be too late');
            
                                _priv.refreshParent(_priv.currentTime);
                                
                            }else {

                                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, fwData.context.session.parent[sParent].name + ' set to refresh in ' + (remainingParentTime - _priv.fiveMinutes) + ' milliseconds');
            
                                // Parent does not need to be refreshed just yet but it will require refresh sooner than current session.
                                _priv.parentRefreshTimer = setTimeout(_priv.refreshParent, (remainingParentTime - _priv.fiveMinutes));
                            }


                        }else{

                            journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Local storage value was found for ' + fwData.context.session.parent[sParent].name);

                            var workingLastVisit = false;

                            // We have a local storage value so we need to compare
                            // If the localStorage value is bigger than the value in the fwData we will run with that number
                            if (_priv.parentLastVisitedLStorage > _priv.parentLastVisit) {

                                // Work of the current local storage value
                                workingLastVisit = _priv.parentLastVisitedLStorage;
                            }
                            else if (_priv.parentLastVisitedLStorage === _priv.parentLastVisit) {

                                // Work off the fwData
                                workingLastVisit = _priv.parentLastVisit;
                            }

                            remainingParentTime = _priv.currentTime - workingLastVisit;

                            // Check to see if the parent timer is already withing 5 minutes or less
                            if (remainingParentTime <= _priv.fiveMinutes) {

                                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Forcing ' + fwData.context.session.parent[sParent].name + ' refresh as it will expire in less than 5 minutes');

                                _priv.refreshParent(_priv.currentTime);

                            }else if(remainingParentTime > _priv.parentTimeout) {

                                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Forcing ' + fwData.context.session.parent[sParent].name + ' refresh though it might be too late');
            
                                _priv.refreshParent(_priv.currentTime);
                            
                            }else {

                                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, fwData.context.session.parent[sParent].name  + ' set to refresh in ' + (remainingParentTime - _priv.fiveMinutes) + 'milliseconds');
            
                                // Parent does not need to be refreshed just yet but it will require refresh sooner than current session.
                                _priv.parentRefreshTimer = setTimeout(_priv.refreshParent, (remainingParentTime - _priv.fiveMinutes));
                            }
                        }
                    }
                }           
            }else{

                journal.log({ type: 'info', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Attempted to address parent sessions - No parents found.');
            }

            //----------------- Current session -----------------
            _priv.currentSessionTimeout = (typeof fwData.context.session.current.timeout === "string") ? parseInt(fwData.context.session.current.timeout ) : fwData.context.session.current.timeout;

            //Set timer for current session
            _priv.currentModalTimer = setTimeout(_priv.warningModal, (_priv.currentSessionTimeout - _priv.fiveMinutes));
        
        }else{

            journal.log({ type: 'error', owner: 'UI', module: 'session', submodule: '', func: 'init' }, 'Session timeout not able to be setup!');
        }
        
    };

    return {
        setup: init
    };

});
/*jshint loopfunc: true, quotmark: false, sub: true */
define('emp',['jquery', 'cui', 'dataStore', 'render', 'table', 'tabs', 'datepicker', 'tooltip', 'showHidePassword', 'validation', 'kind', 'external-menu', 'spin', 'detectIE', 'guid', 'store', 'clickblocker', 'empMessage', 'selectionPopup', 'addRemove', 'forms', 'getCookie', 'refresh', 'dynamicDropDown', 'fetchWrapper', 'uiPopup', 'process', 'events', 'windows', 'expandables', 'staticTree', 'externalApp', 'expandingTextArea', 'keepAlive', 'analytics', 'fileUploadProgressModal', 'session', 'badge', 'getCursorPosition', 'fastdom', 'journal'], function($, cui, ds, render, table, tabs, datepicker, tooltip, showHidePassword, validation, kind, externalMenu, spin, detectIE, guid, store, clkblocker, empMessage, selectionPopup, addRemove, forms, getCookie, refresh, dyncDD, fw, uiPopup, processM, events, windowsM, expandables, staticTree, externalApp, expandingTextArea, keepAlive, analytics, fileUploadProgressModal, session) {

    if (!Element.prototype.matches) {
    	Element.prototype.matches = Element.prototype.msMatchesSelector ||
    		Element.prototype.webkitMatchesSelector;
    }

    var _priv = {
        isInitialized: false,
        $groupToggleControl: null,
    };

    var _disableReport = false;
    var _disableForms = false;
    var _disableAjax = false;

    var $clickBlock = false;
    var clickSource = false;

    var $body = $(document.body);
    var $window = $(window);

    var dHtml = document.querySelector('html');

    if (dHtml && !dHtml.classList.contains('external-app')) {
        dHtml.classList.add('external-app');
    }

    var hostname = window.location.hostname;

    var pageScripts = false;

    var protocol = window.location.protocol;

    var windows = {};

    if (protocol.indexOf("http") !== -1) {
        protocol = true;
    }
    else {
        protocol = false;
    }

    var sessionTimeout = false;

    var externalEmpire = false;

    /**
     * Sets up the page after its HTML has been rendered
     * Adds event listeners, loads applicable plugins, etc
     */
    _priv.pageSetup = function _pageSetup(options, cb) {

        externalEmpire = (document.querySelector('html.external-app')) ? true : false;

        // Older jQuery values
        var $mainWrapper = $('main');
        var $tables = $('.emp-table table');
        var $dateInputs = $('.emp-date');
        var $dateCalenders = $('.cui-c-datepicker');
        var $selectOtherBoxes = $('.emp-select-other-selectbox select');
        var $selectOtherCheckbox = $('.emp-check-other-checkbox input');
        var $fileUploads = $('.emp-file-upload');
        var $viewDocumentSections = $('.emp-document-viewer');
        var $entityLookup = $('.emp-entity-lookup .emp-entity-lookup-toggle select');

        // Ensure `fwData` and its required properties exist
        _priv.stubOutFwData();

        emp.isIE = false;
        emp.isEdge = false;

        var dApplicationTitle = document.querySelector('.application-title');
        var dPageTitle = document.querySelector('title');
        var sApplicationTitle = null;
        var sPageTitle = null;

        if (dPageTitle) {

            sPageTitle = (dPageTitle.textContent) ? dPageTitle.textContent.trim() : dPageTitle.textContent.trim();
        }

        if (dApplicationTitle) {

            sApplicationTitle = (dApplicationTitle.textContent) ? dApplicationTitle.textContent.trim() : dApplicationTitle.innerText.trim();

            if (sApplicationTitle.length === 0 && sPageTitle && sPageTitle.length) {
                dApplicationTitle.textContent = dPageTitle.textContent;
            }
        }


        analytics.init();
        analytics.trackEvent('app', 'Page view', sApplicationTitle + ' | ' + sPageTitle, null, true);

        session.setup();
        
        showHidePassword.init();

        var detectIntE = detectIE();

        expandables.setup();
        expandingTextArea.setup();

        _priv.selectionListSetup();

        if (detectIntE) {
            $body.addClass('ie');
            emp.isIE = true;

            if (detectIntE.edge) {
                emp.isEdge = true;
            }
        }

        var localSessionID = store.get("sessionID");
        var refreshSession = false;

        // Check for a session ID;
        if (fwData.context.screen && fwData.context.screen.id && (fwData.context.screen.type !== "framework-search" && fwData.context.screen.type !== "error" && fwData.context.urls  && fwData.context.urls.errorReport)) {

            if (localSessionID) {

                // Check to see if the local session matches the current session id
                if (fwData.context.screen.id !== localSessionID) {

                    journal.log({ type: 'warning', owner: 'UI', module: 'emp', submodule: '', func: 'pageSetup' }, 'New session ID detected, updating');

                    refreshSession = true;
                }
                else {

                    journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: '', func: 'pageSetup' }, 'Session ID and Local Storage match!');
                }

            }
            else {

                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'pageSetup' }, 'No session ID in localStorage!');

                refreshSession = true;
            }

        }
        else {

            if (fwData.context.screen && (fwData.context.screen.type !== "framework-search" && fwData.context.screen.type !== "error" && fwData.context.screen.type !== "missing")) {

                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'pageSetup' }, 'No session ID was provided as part of the page screen object!');
            }
            else {

                journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: '', func: 'pageSetup' }, 'Refresh blocked on none valid screen type');
            }
        }

        windowsM.setup();

        // Default required Table plugins
        if ($tables.length && !options.skipTable) {

            $tables.table();

            $tables.on('sort.table', function () {

                var $ajaxTooltips = $tables.find('.emp-ajax-tooltip');

                if ($ajaxTooltips.length) {

                    $ajaxTooltips.each(function () {
                        requestTooltip($(this));
                    });
                }

            });

            $tables.on('table.filter', function () {

                var $ajaxTooltips = $tables.find('.emp-ajax-tooltip');

                if ($ajaxTooltips.length) {

                    $ajaxTooltips.each(function () {
                        requestTooltip($(this));
                    });
                }

            });
        }

        var $itag = $('button.emp-icon-help:not(.emp-legend-help)');

        if ($itag.length) {

            $itag.tooltip();
        }

        // Select other page binding
        if ($selectOtherBoxes.length) {

            // Loop through all of the selectOthers and bind the event
            for (var so = 0, soLen = $selectOtherBoxes.length; so < soLen; so++) {

                // Passing in the raw element at this point to by pas jQuery
                events.otherDropdown($selectOtherBoxes[so]);

            }

        }

        if ($selectOtherCheckbox.length) {

            $selectOtherCheckbox.on('click', function (evt) {

                _events.checkOther(evt);
            });
        }

        // Add custom binding for when user types dates to auto add '/'s
        dateMask($dateInputs);

        // Bind the date picker to all date inputs.
        $dateCalenders.datepicker();

        // Just do a body binding for the tooltips.
        $body.on('click', '.emp-tooltip, td span[title]', function (evt) {

            function createTooltip($tooltip, force) {

                if ($tooltip[0].hasAttribute("data-title")) {

                    $tooltip.popover({
                        display: {
                            className: 'emp-tooltip-style'
                        },
                        html: '<span>' + $tooltip.attr("data-title") + '</span>'
                    });

                }
                else {

                    var tooltip = $tooltip.attr('title').replace(/[\n]/g, '<br>');

                    $tooltip.popover({

                        display: {
                            className: 'emp-tooltip-style'
                        },
                        html: '<span>' + tooltip + '</span>'
                    });
                }

                setTimeout(function () {

                    $tooltip.trigger('click');

                }, 100);
            }

            var $tooltip = $(this);

            if (!$tooltip.hasClass('cui-popover-toggle')) {

                if (require.defined('popover')) {

                    createTooltip($tooltip);
                }
                else {

                    clkblocker.add($tooltip);

                    cui.load('popover', function _loadPopover() {

                        clkblocker.remove();

                        fastdom.mutate(function () {

                            createTooltip($tooltip);
                        });

                    });
                }
            }
        });

        var $ajaxTooltips = $('.emp-ajax-tooltip');

        if ($ajaxTooltips.length) {

            $ajaxTooltips.each(function () {
                requestTooltip($(this));
            });
        }

        if ($fileUploads.length) {

            $fileUploads.each(function () {

                var $fileUploadContainer = $(this);
                var $fakeButton = $fileUploadContainer.find('button');
                var $realInput = $fileUploadContainer.find('input');
                var $spanText = $fileUploadContainer.find('span');

                var elmObject = {
                    "$button": $fakeButton,
                    "$input": $realInput,
                    "$span": $spanText
                };

                // Bind the button click event
                $fakeButton.on('click', elmObject, _events.fileUploadButton);

                $realInput.on('change', elmObject, _events.fileUploadInput);

            });
        }

        // Test to see if this window is a popup
        if (window.isPopup || fwData.isPopup || fwData.popup) {

            render.section(null, { "template": "closePopup" }, 'return', function (html) {

                if (html) {
                    $('#body-wrapper').append(html);
                }
                else {
                    journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'popupWindow' }, 'Failed to build popup close control');
                }
            });
        }

        // Check for framework blinky's
        $body.on('click', '.emp-icon-ghost', function (evt) {

            _events.frameworkError(evt);

        });

        if (fwData.popup) {

            journal.log({ type: 'info', owner: 'UI', module: 'emp', func: 'pageSetup => popup detected' }, 'Detected window is a popup.');

            window.opener.emp.showChild();
        }

        if ($viewDocumentSections.length) {

            $viewDocumentSections.each(function () {

                var $resizer = $(this).find('.emp-view-document-resizer');

                if ($resizer.length === 1) {

                    $resizer.on('click', _events.resizeDocumentViewer);
                }

            });
        }

        $rootForm = $('main').find('form:not(#form_asof)').eq(0);

        if ($rootForm.length) {

            $rootForm.on('keypress', function (e) {

                if (e.keyCode === 13) {

                    // Get the current control
                    var $elm = $(':focus');

                    if ($elm[0].nodeName !== "BUTTON" && $elm[0].nodeName !== "SELECT" && $elm[0].nodeName !== "TEXTAREA") {

                        $compositeParent = $elm.parents('.emp-search-composite').eq(0);

                        e.preventDefault();

                        if ($compositeParent.length) {

                            $compositeButton = $compositeParent.find('button');

                            if ($compositeButton.length === 1) {

                                $compositeButton.trigger('click');
                            }
                            else if ($compositeButton.length === 0) {

                                journal.log({ type: 'warning', owner: 'UI', module: 'emp', func: 'pageSetup' }, 'Blocked enter key on field preventing composite action as no button was found.');
                            }
                            else {

                                journal.log({ type: 'warning', owner: 'UI', module: 'emp', func: 'pageSetup' }, 'Blocked enter key on field preventing composite action as you have more than 1 button control!.');
                            }
                        }
                        else {

                            journal.log({ type: 'warning', owner: 'UI', module: 'emp', func: 'pageSetup' }, 'Blocked enter key on field preventing page from submitting.');
                        }

                    }
                }

            });
        }

        var $addRemoveList = $('.emp-add-remove-list');

        if ($addRemoveList && $addRemoveList.length) {

            $addRemoveList.addRemove();
        }

        // Setup tabs!
        var $tabs = $('.emp-tabs');

        if ($tabs.length) {

            $tabs.tabs();
        }

        var $pageSelects = $mainWrapper.find('select');

        if ($pageSelects.length) {

            $pageSelects.each(function () {

                $body.on('change', 'main select', function () {

                    var $select = $(this);

                    var value = $select.val();

                    var $option = $select.children('option[value="' + value + '"]');

                    if ($option) {

                        var dynamicSectionOpen = $option.attr('data-open-section');
                        var dynamicSectionClose = $option.attr('data-close-section');

                        if (dynamicSectionOpen || dynamicSectionClose) {

                            journal.log({ type: 'info', owner: 'UI', module: 'emp', function: 'selectBoxChange' }, 'User changes dynamic section dropdown');

                            var $section = false;

                            if (dynamicSectionClose) {

                                var closeSections = dynamicSectionClose.split(',');

                                for (var c = 0, cLen = closeSections.length; c < cLen; c++) {

                                    $section = $('#' + closeSections[c]);

                                    if ($section.length && $section[0].nodeName === "SECTION") {

                                        if (!$section.hasClass('emp-collapse')) {
                                            $section.addClass('emp-collapse');
                                        }

                                    }
                                    else {

                                        journal.log({ type: 'error', owner: 'Developer', module: 'emp', function: 'selectBoxChange' }, 'Unable to find section with ID: ' + closeSections[c]);
                                    }

                                }

                            }

                            if (dynamicSectionOpen) {

                                var openSections = dynamicSectionOpen.split(',');

                                for (var o = 0, oLen = openSections.length; o < oLen; o++) {

                                    $section = $('#' + openSections[o]);

                                    if ($section.length && $section[0].nodeName === "SECTION") {

                                        if ($section.hasClass('emp-collapse')) {
                                            $section.removeClass('emp-collapse');
                                        }

                                    }
                                    else {

                                        journal.log({ type: 'error', owner: 'Developer', module: 'emp', function: 'selectBoxChange' }, 'Unable to find section with ID: ' + openSections[o]);
                                    }

                                }
                            }

                        }

                    }


                });

            });
        }

        $body.trigger('setup.page');

        $entityLookup.on('change', function(evt) {

            _events.entityChange(evt, $(evt.target));
        });

        function newItagContainer(headerText, tagContents, tagID) {

            var wrapper = document.createElement('div');
            wrapper.setAttribute('id', tagID);

            wrapper.innerHTML = tagContents;

            var header = document.createElement('header');
            headerText = document.createTextNode(headerText);

            header.appendChild(headerText);

            wrapper.insertBefore(header, wrapper.firstChild);

            return wrapper;
        }

        staticTree.init();

        if (externalEmpire) {

            var pageInstructionTooltip = document.querySelector('.emp-page-legend button.emp-page-itags');

            if (pageInstructionTooltip) {

                pageInstructionTooltip.addEventListener('click', function () {

                    var instructionSection = document.querySelector('#emp-field-instructions');

                    if (instructionSection) {

                        if (instructionSection.classList.contains('showOnScreen')) {
                            instructionSection.classList.remove('showOnScreen');
                        }
                        else {
                            instructionSection.classList.add('showOnScreen');
                        }
                    }
                    else {

                        // Find all of the help text below
                        var helpTagsButtons = document.querySelectorAll(
                            '#body-wrapper .cui-row .emp-icon-help, #body-wrapper th .emp-icon-help, #body-wrapper section .emp-icon-help');

                        var newInstructionSection = document.createElement('div');
                        newInstructionSection.setAttribute('id', 'emp-field-instructions');
                        newInstructionSection.classList.add('emp-field-instructions');
                        newInstructionSection.classList.add('showOnScreen');

                        for (var h = 0, hlen = helpTagsButtons.length; h < hlen; h++) {

                            var fieldWrapper = false;
                            var fieldSetWrapper = false;
                            var tableColumnWrapper = false;
                            var sectionWrapper = false;

                            var helpTagButton = helpTagsButtons[h];
                            var helpTagContents = helpTagButton.querySelector('.cui-hide-from-screen').innerHTML;

                            var helpDataSource = helpTagButton.getAttribute('data-tooltip-source');

                            if (!helpDataSource) {
                                helpDataSource = guid();

                                helpTagButton.setAttribute('data-tooltip-source', helpDataSource);
                            }

                            var parentNode = helpTagsButtons[h].parentNode;

                            while (true) {

                                if (parentNode.nodeName === "BODY") {
                                    break;
                                }
                                else {
                                    // Break at rows to speed up the looping
                                    if (parentNode.nodeName === "DIV" && parentNode.classList.contains('cui-row'))  {
                                        break;
                                    }

                                    if (parentNode.nodeName === "DIV" && parentNode.classList.contains('emp-field')) {
                                        fieldWrapper = parentNode;
                                    }

                                    if (parentNode.nodeName === "FIELDSET") {
                                        fieldSetWrapper = parentNode;
                                    }

                                    if (parentNode.nodeName === "TH") {
                                        tableColumnWrapper = parentNode;
                                    }

                                    if (parentNode.nodeName === "SECTION") {
                                        sectionWrapper = parentNode;
                                    }
                                }

                                parentNode = parentNode.parentNode;
                            }

                            var helpTitle = false;

                            if (fieldSetWrapper) {

                                helpTitle = fieldSetWrapper.querySelector('.cui-label legend').innerText;
                            }
                            else if (fieldWrapper) {

                                var fieldLabel = fieldWrapper.querySelector('.cui-label label, .cui-label span');

                                helpTitle = fieldLabel.innerText;
                            }
                            else if (sectionWrapper) {
                                helpTitle = sectionWrapper.querySelector('section h3').innerText;
                            }

                            var helpTagInstruction = newItagContainer(helpTitle, helpTagContents, helpDataSource);

                            newInstructionSection.appendChild(helpTagInstruction);

                        }

                        // Add missing instruction section
                        document.body.appendChild(newInstructionSection);
                    }

                });

            }

            externalApp.init();
        }

        // Execute menu Init!
        externalMenu.init();

        if (typeof cb === "function") {
            cb();
        }

    };

    // Reinitialize a section of code that was added to the page after initial page load
    sectionSetup = function _sectionSetup(section, options) {
        var $section;
        var $tabsetTitleBar;
        var $tables;
        var $dateInputs;
        var $dateCalenders;
        var $selectOtherBoxes;
        var $fileUploads;
        var $frameworkErrors;
        var $tooltips;
        var $ajaxTooltips;
        var $printIcon;
        var $groupSection;
        var $employeeSearch;

        function setupTables($tables, options) {
            $tables.each(function () {
                $this = $(this);

                var tableID = $this.attr("id");

                if (tableID) {
                    if (emp.reference.tables[tableID]) {
                        // Remove Stylesheets to avoid conflicts
                        emp.reference.tables[tableID].deleteStyleSheets();
                        // Debind table
                        emp.reference.tables[tableID].debind();
                        // Delete table from emp.references
                        delete emp.reference.tables[tableID];
                    }
                    // Add reference to new table in emp.reference.tables
                    emp.reference.tables[tableID] = this;
                }

                // initialize table
                $this.table();
            });
        }

        function setupSelectOtherBoxes($selectOtherBoxes, options) {
            $selectOtherBoxes.each(function () {
                $(this).on('change', function (evt) {
                    _events.selectOther(evt);
                });
            });
        }

        function setupDateInputs($dateInputs, options) {
            $dateInputs.each(function () {
                dateMask($(this));
            });
        }

        function setupCalendars(dateCalenders, options) {
            $dateCalenders.each(function () {
                $(this).datepicker();
            });
        }

        function setupPrintIcon($printIcon, options) {
            $printIcon.each(function () {
                $(this).on('click', function () {
                    // Not sure why we need this anonymous function wrapper, rather than passing `window.print` directly, but jQuery throws an 'illegal invocation' error without it
                    window.print();
                });
            });
        }

        function setupTooltips($tooltips, options) {
            cui.load('popover', function _loadPopover() {
                $tooltips.each(function () {

                    var $tooltip = $(this);

                    if ($tooltip[0].hasAttribute("data-title")) {

                        $tooltip.popover({
                            display: {
                                className: 'emp-tooltip-style'
                            },
                            html: '<span>' + $tooltip.attr("data-title") + '</span>'
                        });
                    }
                    else {

                        $tooltip.popover({
                            display: {
                                className: 'emp-tooltip-style',
                            }
                        });
                    }
                });
            });
        }

        function setupAjaxTooltips($ajaxTooltips, options) {
            $ajaxTooltips.each(function () {
                ajaxTooltip($(this));
            });
        }

        function setupEmployeeSearch($employeeSearch, options) {
            $employeeSearch.each(function (i) {
                var $select = $(this);
                $select.on('change', function (evt) {
                    _events.employeeSearchDropDown(evt);
                });
            });
        }

        function setupFileUploads($elements, options) {
            $elements.each(function () {
                var $fileUploadContainer = $(this);
                var $fakeButton = $fileUploadContainer.find('button');
                var $realInput = $fileUploadContainer.find('input');
                var $spanText = $fileUploadContainer.find('span');

                var elmObject = {
                    "$button": $fakeButton,
                    "$input": $realInput,
                    "$span": $spanText
                };

                // Bind the button click event
                $fakeButton.on('click', elmObject, _events.fileUploadButton);
                $realInput.on('change', elmObject, _events.fileUploadInput);
            });
        }

        function setupFrameworkErrors($frameworkErrors, options) {
            $frameworkErrors.each(function () {
                $frameworkErrors.on('click', _events.frameworkError);
            });
        }

        if (section instanceof jQuery) {
            $section = section;

            //Find elements within the section
            $searchBox = $section.find('#form_search');
            $headerID = $section.find('#headerID');
            $searchClearButton = $section.find('.emp-button-search-clear');
            $searchClearAllButton = $section.find('.emp-button-search-clear-all');
            $tables = $section.find('.emp-table table');
            $dateInputs = $section.find('.emp-date');
            $dateCalenders = $section.find('.cui-c-datepicker');
            $selectOtherBoxes = $section.find('.emp-select-other-selectbox select');
            $fileUploads = $section.find('.emp-file-upload');
            $frameworkErrors = $section.find('.emp-icon-ghost');
            $tooltips = $section.find('.emp-tooltip');
            $ajaxTooltips = $('.emp-ajax-tooltip');
            $printIcon = $section.find('.emp-icon-print');
            $groupSection = $section.find('section');
            $employeeSearch = $section.find('.emp-employee-search .employee-search-select');
        }

        if ($tables && $tables.length) {
            setupTables($tables, options);
        }

        // Select other page binding
        if ($selectOtherBoxes && $selectOtherBoxes.length) {
            setupSelectOtherBoxes($selectOtherBoxes, options);
        }

        // Add custom binding for when user types dates to auto add '/'s
        if ($dateInputs && $dateInputs.length) {
            setupDateInputs($dateInputs, options);
        }

        // Bind the date picker to all date inputs.
        if ($dateCalenders && $dateCalenders.length) {
            setupCalendars($dateCalenders, options);
        }

        // Check for tooltips on the page
        // If any tooltips are send them to the popover component for binding.
        if ($tooltips && $tooltips.length) {
            setupTooltips($tooltips, options);
        }

        //Ajax Tooltips
        if ($ajaxTooltips && $ajaxTooltips.length) {
            setupAjaxTooltips($ajaxTooltips, options);
        }

        // Employee Search
        if ($employeeSearch && $employeeSearch.length) {
            setupEmployeeSearch($employeeSearch, options);
        }

        // File Uploads
        if ($fileUploads && $fileUploads.length) {
            setupFileUploads($fileUploads, options);
        }

        // Framework Errors
        if ($frameworkErrors && $frameworkErrors.length) {
            setupFrameworkErros($frameworkErrors, options);
        }
    };

    /**
     * Pull date from table hidden fields and fill in other elements with those values
     * @param   {string}    name        OPTIONAL - string name
     * @param   {object}    map         The object ins dest:source format
     * @param   {jQuery}    $source     jQuery reference for a `<table>` element
     * @param   {function}  function    OPTIONAL - callback function
     * @return  {boolean}               return true if it finishes without issue otherwise false
     */
    _priv.dataMap = function _priv_data_map(map, cb) {
        // Stubbing out for now.
    };

    // Sourcer map create an object key value pairs string for all input declared within a given section. Only inputs care collected
    _priv.sourceMap = function _priv_sourceMap($section) {

        var sectionMap = {};

        // We have a form so lets get all of the field
        var $inputs = $section.find('input, select, textarea');

        $inputs.each(function (i) {

            var $input = $(this);

            if ($input[0].nodeName === "INPUT") {

                var type = $input.attr('type');

                // Filter out check and radio
                if ((type === "checkbox" || type === "radio")) {

                    // Check to see if its checked
                    if ($input.is(':checked')) {

                        // Use the name as the key and value as value
                        sectionMap[$input.attr('name')] = $input.val();
                    }
                }
                else {

                    // Use the name as the key and value as value
                    sectionMap[$input.attr('name')] = $input.val();
                }
            }
            else {

                // Use the name as the key and value as value
                sectionMap[$input.attr('name')] = $input.val();
            }


        });

        return sectionMap;
    };

    // Element map is used to update an key value pair object where the current value is the id of an element on the page that holds the true value for the given key.
    _priv.elementMap = function _priv_elementMap(elmMap) {

        function getValue(lookup) {

            var $source = $('#' + lookup);

            if ($source.length === 1) {

                var value;

                switch ($source[0].nodeName) {

                    case 'INPUT':
                    case 'SELECT':
                    case 'TEXTAREA':
                        value = $source.val().trim();
                        break;

                    default:
                        value = $source.text().trim();
                        break;
                }

                return value;

            }
            else {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: '', func: 'elementMap' }, 'Element Map failed, manual source map could not find refernce for source: ', lookup);

                return undefined;
            }

        }

        var returnMap = {};
        var value = null;

        if (Array.isArray(elmMap)) {

            for (var i = 0, len = elmMap.length; i < len; i++) {

                value = getValue(elmMap[i]);

                if (value === undefined) {

                    return false;
                }
                else {

                    returnMap[elmMap[i]] = value;
                }

            }

        }
        else if (typeof elmMap === "object") {

            //  We need to process the source map before making the data request
            for (var key in elmMap) {

                value = getValue(elmMap[key]);

                if (value === undefined) {

                    return false;
                }
                else {

                    returnMap[key] = value;
                }
            }

        }

        return returnMap;
    };

    _priv.processValidation = function _priv_processValidation(validationObj) {

        function processField(field, id) {
            var test;

            var $messageLoc;

            if (field.$reference && field.$reference[0]) {

                $messageParent = $(field.$reference[0]).parent();

                if (field.$reference[0].nodeName === 'TABLE') {
                    $messageParent = field.$reference.parents('.emp-table').eq(0);
                }
                else if (field.$reference[0].nodeName === 'FIELDSET') {
                    $messageParent = field.$reference.find('.emp-fieldset-contents .cui-data').eq(0);
                }

                if ($messageParent.find('.cui-messages')[0] || $messageParent.parent('.cui-data').find('.cui-messages')[0]) {

                    $messageLoc = $($messageParent.find('.cui-messages')[0]);
                }
                else {

                    $messageLoc = $('<ul/>', {
                        'class': 'cui-hidden cui-messages cui-field-message'
                    });

                    if (field.$reference[0].nodeName === 'TABLE') {

                        $messageParent.prepend($messageLoc);
                    }
                    else if (field.$reference[0].nodeName === 'FIELDSET') {

                        $messageParent.append($messageLoc);
                    }
                    else {

                        //append to cui-data instead
                        if($messageParent.hasClass('emp-password-wrapper')){

                            $messageParent =  $($messageParent.parent());

                            $messageParent.append($messageLoc);

                        }else{

                            $messageParent.append($messageLoc);
                        }
                    }
                }
            }

            // check to see if the field is in the reference
            if (!reference.fields.hasOwnProperty(id)) {

                // This field reference is not currently known so add it
                reference.fields[id] = field;

                field = reference.fields[id];

                // Check to see if the field failed validation
                if (!field.result) {

                    // loop through all of the test related to the field.
                    for (test in field.tests) {

                        if (typeof field.tests[test].message === 'string') {

                            if ($messageLoc) {
                                field.tests[test].message = empMessage.createMessage({ text: field.tests[test].message, type: "error" }, { scroll: true, field: id, msgLocation: $messageLoc });
                            }
                            else {
                                // field.tests[test].message = _priv.pageMessage({text:field.tests[test].message, type:"error"}, true);
                                field.tests[test].message = empMessage.createMessage({ text: field.tests[test].message, type: "error" });
                            }
                        }
                    }
                }
            }
            else {

                // Get a reference to each set of tests
                var oldResult = reference.fields[id];
                var newResult = field;
                var oldTests = [];
                var newTests = [];
                var oldOnly = [];
                var newOnly = [];
                var commonTest = [];
                var len;
                var i;

                var changeFieldResult = false;

                // Get the name of all the test in the previous run
                for (test in oldResult.tests) {
                    oldTests.push(test);

                    if (test in newResult.tests) {
                        commonTest.push(test);
                    }
                    else {
                        oldOnly.push(test);
                    }
                }

                // Get the name of all the test in the current run
                for (test in newResult.tests) {
                    newTests.push(test);

                    if (!(test in oldResult.tests)) {
                        newOnly.push(test);
                    }
                }

                // Start by looping common tests
                for (i = 0, len = commonTest.length; i < len; i++) {

                    test = commonTest[i];

                    $parentSections = false;

                    //Add test to determine if result or message has changed or been updated. Navivate the newResult.tests[test] message and determine if it is present on the screen, if not rebuild the message.

                    // Check if this status has changes
                    if (oldResult.tests[test].result !== newResult.tests[test].result) {

                        if (typeof oldResult.tests[test].result === 'boolean' && typeof newResult.tests[test].result === 'boolean') {

                            changeFieldResult = true;

                            // The test state changed, check to see if its now false
                            if (newResult.tests[test].result) {

                                // Since the test is now true, remove the old message
                                empMessage.removeMessage(oldResult.tests[test].message, $messageLoc);

                                //If there are still error messages present, scroll back to the top
                                empMessage.scrollToMessage();
                            }
                            else {

                                if ($messageLoc) {
                                    newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" }, { scroll: false, field: id, msgLocation: $messageLoc });
                                }
                                else {
                                    newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" });
                                }
                            }
                        } // Check to see if the string error is just another string error
                        else if (typeof oldResult.tests[test].result === 'string' && typeof newResult.tests[test].result === 'string') {
                            // Remove the old message first
                            empMessage.removeMessage(oldResult.tests[test].message, $messageLoc);

                            // Generate the new message
                            if ($messageLoc) {
                                newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" }, { scroll: false, field: id, msgLocation: $messageLoc });
                            }
                            else {
                                newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" });
                            }
                        }
                        else if (typeof oldResult.tests[test].result === 'string' && typeof newResult.tests[test].result === 'boolean') {
                            // This condition should only bee meet when the string error value is returning true.
                            if (newResult.tests[test].result) {

                                // Remove the old message first
                                empMessage.removeMessage(oldResult.tests[test].message, $messageLoc);

                                //If there are still error messages present, scroll back to the top
                                empMessage.scrollToMessage();
                            }
                            else {
                                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'processValidation' }, 'Validation change from string code to false boolean');
                            }
                        }
                        else if (typeof oldResult.tests[test].result === 'boolean' && typeof newResult.tests[test].result === 'string') {
                            // This condition should only bee meet when old message was true.
                            if (oldResult.tests[test].result) {
                                // Remove the old message first

                                if ($messageLoc) {
                                    newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" }, { scroll: false, field: id, msgLocation: $messageLoc });
                                }
                                else {
                                    newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" });
                                }
                            }
                            else {
                                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'processValidation' }, 'Validation change from string code to false boolean');
                            }
                        }

                        // Update the old reference with the new info
                        oldResult.tests[test] = newResult.tests[test];
                    }
                    else if (!newResult.tests[test].result) {

                        var message = oldResult.tests[test].message;
                        var messageExists;

                        if(field.$reference.hasClass('emp-password-input')){

                            //cui-data
                            messageExists = field.$reference.parents().eq(1).find(message[0]);

                        }else{

                            messageExists = field.$reference.parent().find(message[0]);
                        }

                        //Verify that page message is still set
                        if (messageExists.length === 0 && message) {
                            changeFieldResult = true;
                            if ($messageLoc) {
                                newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" }, { scroll: false, field: id, msgLocation: $messageLoc });
                            }
                            else {
                                newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" });
                            }
                            // Update the old reference with the new info
                            oldResult.tests[test].message = newResult.tests[test].message;
                        }
                        else {
                            // make sure field level notifier is present.
                            empMessage.scrollToMessage();
                        }
                    }
                }

                // Now we to look over any new injected tests
                if (newOnly.length > 0) {
                    for (i = 0, len = newOnly.length; i < len; i++) {
                        test = newOnly[i];

                        // Check to see if this new test failed
                        if (!newResult.tests[test].result) {
                            // Mark the overall change to failed
                            changeFieldResult = true;

                            if ($messageLoc) {
                                newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" }, { scroll: false, field: id, msgLocation: $messageLoc });
                            }
                            else {
                                newResult.tests[test].message = empMessage.createMessage({ text: newResult.tests[test].message, type: "error" });
                            }
                        }

                        // Add the new test.
                        oldResult.tests[test] = newResult.tests[test];
                    }
                }

                // Now we to look over any test that may have been dynamically removed
                if (oldOnly.length > 0) {

                    for (i = 0, len = oldOnly.length; i < len; i++) {

                        test = oldOnly[i];

                        // Check to see if this new test failed
                        if (!oldResult.tests[test].result) {

                            // Since the test is now invalid, remove the old message
                            empMessage.removeMessage(oldResult.tests[test].message, $messageLoc);

                            //If there are still error messages present, scroll back to the top
                            empMessage.scrollToMessage($messageLoc);
                        }

                        // Dump the old test reference
                        delete oldResult.tests[test];

                    }

                }

                if (changeFieldResult) {

                    // Update the over all
                    oldResult.result = newResult.result;
                }
            }
        }

        var field;
        var fieldID;

        var $messageLoc = $('#body-wrapper').find('ul.cui-messages.emp-messages').eq(0);

        // Check to see if this is an array/form of fields
        if (validationObj.fields) {

            // Loop through every field in validation object.
            var fields = validationObj.fields;

            for (var i = 0, len = fields.length; i < len; i++) {

                field = fields[i];
                fieldID = field.$reference.attr('id');

                processField(field, fieldID);

                if (!fields[i].result) {

                    $parentSections = fields[i].$reference.parents('section.emp-collapse');

                    if ($parentSections.length) {

                        $parentSections.each(function () {

                            $(this).removeClass('emp-collapse');
                        });
                    }
                }

            }

        }
        else if (validationObj.$reference) {

            field = validationObj;
            fieldID = field.$reference.attr('id');

            processField(field, fieldID);

            if (!field.result) {

                $parentSections = field.$reference.parents('section.emp-collapse');

                if ($parentSections.length) {

                    $parentSections.each(function () {

                        $(this).removeClass('emp-collapse');
                    });
                }
            }
        }
    };

    _priv.insertCharIntoString = function _priv_insertCharIntoString(pos, source, insertChar) {

        return source.substring(0, pos) + insertChar + source.substring(pos, source.length);
    };

    /**
     * Fills in missing properties of the `fwData` global
     */
    _priv.stubOutFwData = function _stubOutFwData() {
        // Main container
        if (!window.fwData) {
            window.fwData = {};
            window.fwData.context = {};
        }

        if (!window.fwData.context) {
            window.fwData.context = {};
        }

        // Tabset
        if (!window.fwData.context.tabset) {
            window.fwData.context.tabset = {};
        }

        if (!window.fwData.context.tabset.id) {
            window.fwData.context.tabset.id = window.location.href.replace(/\W/g, '_');
        }

        if (!window.fwData.context.tabset.url) {
            window.fwData.context.tabset.url = window.location.pathname;
        }

        if (!window.fwData.context.tabset.name) {
            window.fwData.context.tabset.name = $('.emp-header-tabset-title').find('h1').text();
        }

        // Screen (page)
        if (!window.fwData.context.screen) {
            window.fwData.context.screen = {
                type: "missing"
            };
        }

        if (!window.fwData.context.screen.id) {
            // Try to get a reasonable ID from the URL
            if (window.location.pathname.indexOf('/') !== -1) {
                // The end of the URL after the last slash (i.e. file name)
                window.fwData.context.screen.id = window.location.pathname.substr(window.location.pathname.lastIndexOf('/') + 1);
            }
            else {
                window.fwData.context.screen.id = window.location.pathname;
            }

            window.fwData.context.screen.id = window.fwData.context.screen.id.replace(/\W/g, '_');
        }

        // Notifications
        if (!window.fwData.notifications) {
            window.fwData.notifications = {
                messages: [],
            };
        }

        // Menu
        if (!window.fwData.menus) {
            window.fwData.menus = {};
            window.fwData.menus.global = {};
        }

    };

    _priv.printFormContents = function _print_form_contents ($form) {
        var $inputs = $form.find('input, select, textarea');

        if ($inputs.length > 0) {
            $inputs.each(function (i) {
                var $input = $(this);
                var name = $input.attr('name');
                var value = $input.val();

                if (typeof value === "string") {
                    value = value.trim();
                }

                journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: '', func: 'printFormContents' }, 'Form input: ', name, ' with value', ((value === '') ? '(empty string)' : value));
            });
        }
        else {
            journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: '', func: 'printFormContents' }, 'Form contained no contents.');
        }
    };

    /*
     * _priv.setInputSelection and _priv.setInputPos modified from:
     * http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area
     */
    _priv.setInputSelection = function _set_input_selection(input, selectionStart, selectionEnd) {

        if (input.setSelectionRange) {
            input.focus();
            input.setSelectionRange(selectionStart, selectionEnd);
        }
        else if (input.createTextRange) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveEnd('character', selectionEnd);
            range.moveStart('character', selectionStart);
            range.select();
        }
    };

    _priv.setInputPos = function _set_input_pos(input, pos) {

        _priv.setInputSelection(input, pos, pos);
    };

    _priv.selectionListSetup = function _selection_list_setup(){
    	var selectionListItems = document.querySelectorAll(".emp-selection-list-field-container");

    	for(var i=0; i < selectionListItems.length; i++){
    		var listItem = selectionListItems[i];
    		listItem.addEventListener('expandableChange', function (e) {

    			var selectedRadio = e.target;
    			var radioName = selectedRadio.getAttribute('name').trim();

                // Get all radio groups with this name
                var familyRadios = document.querySelectorAll('input[name="' + radioName + '"]');

                for(var j=0;j<familyRadios.length;j++){
                	var currentRadio = familyRadios[j];
                	var parentSection = $(currentRadio).closest(".emp-selection-list-field-container").get(0);

                	if(parentSection){
                		if(currentRadio.getAttribute("aria-expanded") == "true"){
                			parentSection.classList.add("emp-selection-list-active");
	                	}
	                	else{
	                		parentSection.classList.remove("emp-selection-list-active");
	                	}
                	}
                }
    		}, false);
    	}
    };

    _priv.removeLoadingSplash = function _remove_loading_splash(){
    	var loadingSplash = document.querySelector('#emp-page-loading');

    	if(loadingSplash){
    		loadingSplash.parentNode.removeChild(loadingSplash);
    	}
    };

    // Event driven functions
    var _events = {};

    _events.entityChange = function (evt, $select) {

        // Get current selected value
        var selectedValue = $select.val();

        var $parentContainer = $select.parents('.emp-composite.emp-entity-lookup').eq(0);
        var $containerRoot = $parentContainer.children('.emp-entity-containers');

        // Try and find the container with the same select value as data-entity-key;
        var $openSection = $containerRoot.children('div[data-entity-key="' + selectedValue + '"]');

        if (!$openSection.hasClass('emp-show-container')) {

            var $alreadyOpenContainers = $containerRoot.children('.emp-show-container');

            $alreadyOpenContainers.removeClass('emp-show-container');

            $openSection.addClass('emp-show-container');
        }
        else {

            journal.log({ type: 'info', owner: 'UI', module: 'emp', func: '_events.entityChange' }, 'entity change blocked because section is already open');
        }

    };

    // Formats a date with slashes
    _events.dateMasking = function (evt, $input) {

        if (evt.keyCode >= 35 && evt.keyCode <= 40 || evt.keyCode == 16) {
            // Skip arrow keys, home/end and shift. Allows for highlighting contents within the date field.
        } else {

            // Get the current input value
            var originalText = $input.val().trim();
            var inputText = originalText + '';
            var parts;
            var month;
            var day;
            var year;
            var pressedNonNumber = ((evt.keyCode < 48 || evt.keyCode > 57) && (evt.keyCode < 96 || evt.keyCode > 105));
            var cursorPos;

            currentCursorPos = $input.getCursorPosition();

            if (currentCursorPos !== $input.val().length) {

                cursorPos = true;
            }
            else {

                cursorPos = false;
            }

            //If the user entered two "//" remove the last slash and return.
            if (originalText.length > 1 && ((originalText.substr(originalText.length - 2, 2)) == "//")) {
                evt.target.value = evt.target.value.slice(0, evt.target.value.length - 1);
                if (cursorPos) {

                    _priv.setInputPos($input[0], currentCursorPos);
                }

                return true;
            }


            // Only continue if the user just typed a number. If they pressed any other key (slash, arrow key, backspace) then they are most likely editing the field so we should stay out of the way.
            if (pressedNonNumber || originalText.length === 0 || (originalText.length !== $input.getCursorPosition())) {

                // Remove any stray character keys from the match input
                evt.target.value = evt.target.value.replace(/[^0-9\.\/]/g, '');

                if (cursorPos) {

                    _priv.setInputPos($input[0], currentCursorPos);
                }

                return true;
            }

            // Remove any consecutive slashes
            inputText = inputText.replace(/\/+/g, '/');

            // 1 number typed
            if (/^\d$/.test(inputText)) {
                parts = /^\d$/.exec(inputText);
                month = parseInt(parts[1], 10);
            }
            // 2 numbers typed without a slash
            else if (/^(\d)(\d)$/.test(inputText)) {
                parts = /^(\d)(\d)$/.exec(inputText);
                month = parseInt(parts[1], 10);
            }
            // 3 numbers typed without a slash
            else if (/^\d{3}$/.test(inputText)) {
                // The value could be a month and partial day, or a month and day, or a month and day and partial year (`552` = `05/05/2___`)
                // We need to insert a slash somewhere

                // Split up the digits
                parts = inputText.split('');
                // These variables don't necessarily correspond to the month, day, and year. We're just reusing the variable names for easy access to the individual characters.
                month = parseInt(parts[0], 10);
                day = parseInt(parts[1], 10);
                year = parts[2];

                // Value represents the month plus a partial day (`012` => `01/2_` or `123` => `12/3`)
                if (month === 0 || parseInt(parts[0] + parts[1], 10) < 13) {
                    inputText = '' + month + day + '/'; // Starts out with an empty string to make sure `month + day` is treated as a string concatenation rather than a numerical operation

                    inputText += year;
                }
                // Value represents the month plus the full day (`412` => `04/12`)
                else if (month > 1 || parseInt(parts[1] + year, 10) < 32) {
                    inputText = month + '/' + day + year;
                }
            }
            // 4+ numbers typed without a slash
            else if (/^\d{4,}$/.test(inputText)) {
                // This condition doesn't happen often, but if you press the keys quickly enough in just the right manner it can happen. (Normally, typing 4 numbers would have triggered one of the conditions above which would insert a slash so this condition shouldn't be possible.) For example, you can type `1245` by placing two fingers on the `1` and `1` keys, pressing down on them separately, but releasing both at the same time. Repeat this with `4` and `5` and you will only have triggered two `keyup` events: one after typing `12` (which isn't enough to warrant adding a slash) and the second one after the `45`.

                // We can't say for sure what the user is trying to type. `1111` could be `11/11` or `11/1/1___` or `1/11/1___` or `1/1/11___`. So we just have to make our best guess.
                // Methodology: try to extract the month first, modifying `inputText` to contain the leftovers. Then extract the day from that, and so on.

                // Get the first digit
                parts = parseInt(inputText.substr(0, 1), 10);

                // Month is just the first digit
                // First digit is greater than 1 (Feb-Sep) or the first two characters combined are greater than 12
                if (parts > 1 || (parts === 1 && parseInt(inputText.substr(1, 1), 10) > 2)) {
                    month = parts;

                    // Remove this digit from the rest of the value
                    inputText = inputText.substr(1);
                }
                // Month is formed by the first two characters together
                else {
                    month = inputText.substr(0, 2);

                    // Remove these characters from the rest of the value
                    inputText = inputText.substr(2);
                }

                // Get the new 'first' digit
                parts = parseInt(inputText.substr(0, 1), 10);

                // Day is just the first digit
                // First digit is greater than 3
                if (parts > 3) {
                    day = parts;

                    // Remove this digit from the rest of the value
                    inputText = inputText.substr(1);
                }
                // Day is formed by the first two characters together
                else {
                    day = inputText.substr(0, 2);

                    // Remove these characters from the rest of the value
                    inputText = inputText.substr(2);
                }

                // The rest of the characters, if any, must represent the year
                year = inputText;

                // Reconstruct the date
                inputText = month + '/' + day + '/' + year;
            }
            // 2-4 numbers typed with a slash
            else if (/^(\d{1,2})\/(\d{1,2})$/.test(inputText)) {

            }
            // 3-10 numbers typed with two slashes
            else if (/^(\d{1,2})\/(\d{1,2})\/(\d{1,4})$/.test(inputText)) {

            }
            // 4-10 numbers typed with one slashes
            else if (/^(\d{1,2})\/(\d{3,})$/.test(inputText)) {
                // The value must be month/day and a year, so it needs a slash inserted in front of the year
                parts = /^(\d{1,2})\/(\d{3,})$/.exec(inputText);
                month = parts[1];
                day = parts[2];
                year = '';


                //If the date part is longer than 2 characters, insert the final slash and start the year value.
                if (day.length > 2) {
                    year = day.substr(2);
                    day = day.substr(0, 2);
                }

                inputText = month + '/' + day + '/' + year;
            }
            // Else: it's an invalid format at the moment and/or there's nothing we can do

            if (inputText.length > 10) {
                inputText = inputText.substring(0, 10);
            }

            // Update the input field only if we've changed the value
            if (originalText !== inputText) {
                $input.val(inputText);
            }

        }
    };

    _events.searchHeaderTypeChange = function _search_header_type_change(newValue, type) {

        var ctrl = $('#HEADER_ID_TYPE');

        // Get the searchbox location
        var target = document.getElementById('search-box-inputs');

        // Get the values out of the data store sent with page load
        var headerData = ds.getStore('globalHeader');

        var data = {};

        if (newValue !== undefined && type !== undefined) {

            data = {
                template: 'partialCaller',
                partialTemp: 'searchInputBox',
                arguments: {
                    selection: type,
                    values: newValue,
                },
            };

            render.section(null, data, 'return', function (html) {

                // Apply the new searchbox
                $('#search-box-inputs').html(html);

                ctrl.val(type);

                $('#HEADER_ID_NUMBER').val(newValue);

                if (headerData.search.showDup) {
                    var $showDup = $('#emp-showDup-container');

                    if (headerData.search.showDupApplicable.indexOf(selected) !== -1) {
                        // Check to see if its already hidden and needs to be show
                        if ($showDup.hasClass('cui-hidden')) {
                            $showDup.removeClass('cui-hidden');
                        }
                    }
                    else {
                        // Check to see if its already visible and needs to be hidden
                        if (!$showDup.hasClass('cui-hidden')) {
                            $showDup.addClass('cui-hidden');
                        }
                    }
                }

            });

        }
        else {

            var selected = ctrl.val();

            var inputValues = {};

            // Get a closer look at the default values stored in the orignal header
            var headerDefaults = headerData.search.headerID.defaultValues;

            // Check to see if the header has
            if (headerDefaults.hasOwnProperty(selected)) {
                inputValues = headerDefaults[selected];
            }

            data = {
                template: 'partialCaller',
                partialTemp: 'searchInputBox',
                arguments: {
                    selection: selected,
                    values: inputValues,
                },
            };

            render.section(null, data, 'return', function (html) {
                $('#search-box-inputs').html(html);

                if (headerData.search.showDup) {
                    var $showDup = $('#emp-showDup-container');

                    if (headerData.search.showDupApplicable.indexOf(selected) !== -1) {
                        // Check to see if its already hidden and needs to be show
                        if ($showDup.hasClass('cui-hidden')) {
                            $showDup.removeClass('cui-hidden');
                        }
                    }
                    else {
                        // Check to see if its already visible and needs to be hidden
                        if (!$showDup.hasClass('cui-hidden')) {
                            $showDup.addClass('cui-hidden');
                        }
                    }
                }
            });
        }
    };

    _events.employeeSearchDropDown = function (evt) {

        var $typeDropDown = $(evt.target);

        // Find the parnet container
        var $employeeSearchContainer = $typeDropDown.parents('.emp-employee-search').eq(0);

        var $idInput = $employeeSearchContainer.find('.emp-id-search');
        var $nameInput = $employeeSearchContainer.find('.emp-name-search');

        if ($typeDropDown.val() === 'id') {

            $idInput.removeClass('cui-hidden');
            $nameInput.addClass('cui-hidden');
        }
        else {

            $idInput.addClass('cui-hidden');
            $nameInput.removeClass('cui-hidden');
        }
    };

    _events.employeeLookup = function (evt, mapping) {

        var $button = $(evt.target);
        var $fieldSet = $button.parents('.emp-employee-search');
        var $dropdown = $fieldSet.find('.emp-employee-search');
        var $idContainer = $fieldSet.find('.emp-id-lookup-container');
        var $nameContainer = $fieldSet.find('.emp-name-lookup-container');

        var $id = $idContainer.find('.employee-lookup-id');

        var $fname = $nameContainer.find('.employee-lookup-fname');
        var $mname = $nameContainer.find('.employee-lookup-mname');
        var $lname = $nameContainer.find('.employee-lookup-lname');

        var ajaxURL = $button.attr('data-ajaxurl') || false;


        if (ajaxURL) {

            var req = {
                url: ajaxURL,
                method: 'POST',
                data: {}
            };

            if ($dropdown.val() === "id") {

                req.data.id = $id.val();
            }
            else {

                req.data.fname = $fname.val();
                req.data.mname = $mname.val();
                req.data.lname = $lname.val();
            }

            specialSelectionPopup(evt, req, mapping, false, false, { "type": "employeeLookup" });

        }
        else {

            journal.log({ type: 'error', owner: 'UI', module: 'emp', func: 'employeeLookup' }, 'Employee search button was clicked but does not have teh value for data-ajaxurl');
        }
    };

    _events.frameworkError = function (evt) {

        var $target = $(evt.target);

        function createModal(text) {

            var modal = $.modal({
                autoOpen: true,
                html: text,
                closeDestroy: true,
            });

        }

        // Check to see if the require module
        if (require.defined('modal')) {

            // Create the modal
            createModal($target.text());
        }
        else {

            // Load the require module and then create the modal
            cui.load('modal', function _selection_modal() {
                createModal($target.text());
            });
        }
    };

    _events.checkOther = function(evt) {

        var $checkbox = $(evt.target);
        var $checkboxDiv = $checkbox.parents('.emp-check-other-checkbox').eq(0);
        var $otherDiv = $checkboxDiv.next();

        if ($checkbox.is(':checked')) {

            $otherDiv.removeClass('cui-hidden');
        }
        else {
            $otherDiv.addClass('cui-hidden');
        }

    };

    _events.fileUploadButton = function (evt) {

        evt.preventDefault();

        var elms = evt.data;

        if (elms.$button.val() === undefined || elms.$button.val() === "") {

            elms.$input.trigger('click');
        }
        else {

            elms.$input.val('').trigger('change');
        }
    };

    _events.fileUploadInput = function (evt) {

        var elms = evt.data;

        // Check to see if a file was selected
        if (evt.target.value) {
            //Using files[0].name instead of value to resolve fakepath issue.
            elms.$span.text(evt.target.files[0].name);

            elms.$button.text("Clear");
            elms.$button.val(true);
        }
        else {

            elms.$span.text("Select a file");

            elms.$button.text("Browse");
            elms.$button.val("");
        }
    };

    _events.resizeDocumentViewer = function (evt) {

        evt.preventDefault();
        evt.stopPropagation();

        $button = $(evt.target);

        var $viewerSection = $button.parents('section.emp-document-viewer').eq(0);

        if ($viewerSection.length === 1) {

            var classes = $viewerSection.attr('class').split(/\s+/);

            var size = false;

            for (var i = 0, len = classes.length; i < len; i++) {

                if (classes[i].indexOf('emp-viewer-size-') !== -1) {

                    size = classes[i];
                    break;
                }

            }

            if (size) {

                size = size.replace('emp-viewer-size-', '');
            }

            switch (size) {

                case "small":

                    $viewerSection.removeClass('emp-viewer-size-' + size);
                    $viewerSection.addClass('emp-viewer-size-medium');
                    break;

                case "medium":

                    $viewerSection.removeClass('emp-viewer-size-' + size);
                    $viewerSection.addClass('emp-viewer-size-large');
                    break;

                case "large":

                    $viewerSection.removeClass('emp-viewer-size-' + size);
                    $viewerSection.addClass('emp-viewer-size-small');
                    break;
            }

        }
    };

    //////////////////////
    // Public Functions //
    //////////////////////
    var init = function init(options, cb) {

        if (options === undefined) {
            options = {};
        }

        if (!_priv.isInitialized) {

            var scripts = require.s.contexts._.config.paths;
            var pageScript = false;

            var targets = {
                header: document.getElementById('header-wrapper'),
                page: document.getElementById('body-wrapper'),
                footer: document.getElementById('footer-wrapper')
            };

            var renderData = {
                header: (fwData.header) ? fwData.header : false,
                page: fwData.page,
                footer: (fwData.footer) ? fwData.footer : false
            };

            // Start by rendering the global page
            if (window.fwData && (window.fwData.page || window.fwData.header || window.fwData.footer)) {

                if (fwData && fwData.context && fwData.context.screen && fwData.context.screen.id && scripts[fwData.context.screen.id]) {

                    cui.load(fwData.context.screen.id, function (script) {

                        // Expose all the scripts
                        emp.pageScripts = script;

                        pageScript = script;

                        function renderPage() {
                            render.page(targets, renderData, function _renderPage() {

                                _priv.pageSetup(options, function() {

                                    // Check for an init function
                                    if (pageScript.init) {

                                        pageScript.init();

                                        journal.log({ type: 'info', owner: 'UI', module: 'emp', func: 'init' }, 'Page script was executed!');
                                    }

                                    setTimeout(function() {

                                        _priv.removeLoadingSplash();

                                    }, 1000);

                                });
                            });
                        }
                        
                        if (pageScript && pageScript.preRender) {

                            pageScript.preRender(function() {
                                renderPage();
                                
                                if (pageScript && pageScript.postRender()) {

                                    pageScript.postRender();
                                }
                                
                            });

                        }
                        else{
                            renderPage();

                            if (pageScript && pageScript.postRender()) {

                                pageScript.postRender();
                            }

                        }

                    });

                }
                else {

                    // Expose all the scripts
                    emp.pageScripts = false;

                    render.page(targets, renderData, function _renderPage() {

                        _priv.pageSetup(options, function() {

                            // Check for an init function
                            if (pageScript.init) {

                                script.init();

                                journal.log({ type: 'info', owner: 'UI', module: 'emp', func: 'init' }, 'Page script was executed!');

                            }

                            setTimeout(function () {

                                _priv.removeLoadingSplash();

                            }, 1000);

                            console.log("Finished setup!");

                        });

                    });

                }

            }
            else {

                // This could be a mockup, which would not utilize the renderer, so setup the page immediately
                _priv.pageSetup(options, function() {

                    setTimeout(function () {

						_priv.removeLoadingSplash();

                    }, 1000);
                });
            }

            // Make it so init can not be call so easily.
            _priv.isInitialized = true;

            if (typeof cb === "function") {

                cb();
            }

        }
    };

    /*
     * References
     */
    var reference = {
        fields: {},
        tables: {}
    };

    /**
     * Ajax functionality
     * @type  {Object}
     */
    var ajax = {};

    /*
     * Ajax Request
     * ===========
     * req - object
     *         url - [required] - string - valid request url
     *         method - string - either GET or POST
     *         data - object - key value pair of values
     *
     * res - object
     *        done - function - function that executes when a response returns with no errors
     *        fail - function - funtion that executes on connection based errors
     *        always - function - function that executes no matter the type of response and is always last.
     *
     */
    ajax.request = function _request(req, res, noPageWrap, disableRedirect) {

        var ajaxSessionTimeout = function () {

            var href = window.location.href;
            var domain = window.location.host;
            var port = window.location.port;
            var path = "";

            var protocol = href.split(domain)[0];

            var contents = href.split(domain)[1].split('/')[1];

            if (port !== 80 && port !== 443) {

                path = protocol + domain + "/" + contents + "/SessionExplorer.jsp";
            }
            else {

                path = protocol + domain + ":" + port + "/" + context + "/SessionExplorer.jsp";
            }

            window.location.replace(path);
        };

        // The default actions do nothing, Developer must overide these
        var orig = {
            done: function done() {
                try {

                } catch (e) {

                }
            },
            fail: function fail() {
                try {

                } catch (e) {

                }
            },
            always: function always() {
                try {

                } catch (e) {

                }
            }
        };

        var response = {};

        // Function cleans up ajax responses an removes unneeded arrays if they are found
        function cleanResponse(data, cb) {

            if (typeof data === "object") {

                // Check for the status/response attributes
                if ((data.response && data.result) || (data.status && data.result)) {

                    // New standard return everything to the handler function as of 1/4/2017 JAH
                    if (data.status) {

                        cb(undefined, data);
                    }

                    if (data.response) {

                        journal.log({ type: 'warning', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'request => cleanResponse' }, 'AJAX request was wrapped but its using the older standard! This should be updated!');

                        if (data.response === "success") {

                            cb(undefined, data.result);
                        }
                        else {

                            cb(true, data.result);
                        }

                    }

                }
                else {

                    journal.log({ type: 'warning', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'request => cleanResponse' }, 'AJAX request was returned that did not meet the new response.result wrapping standard');

                    cb(undefined, data);
                }

            }
            else if (Array.isArray(data)) {

                if (data.length === 1) {

                    data = data.shift();
                }

                cb(undefined, data);
            }
            else {

                cb(true, false);
            }
        }

        function removePageWrapper(data) {

            // Check to make sure data was recieved, that the page object property exists and it has contes
            if (data && data.hasOwnProperty('page') && data.page.hasOwnProperty('contents')) {

                if (data.page.contents.length === 1) {

                    // Remove the page layer.
                    data = data.page.contents[0];

                    // Check to see if we have a pagebody layer
                    if (data.hasOwnProperty('template') && data.template === 'pagebody' && data.hasOwnProperty('contents')) {

                        if (Array.isArray(data.contents)) {

                            return data.contents;
                        }

                    }

                }

            }

            return data;
        }

        if (typeof req === "string") {

            req = {
                url: req,
                cache: false,
                method: "POST"
            };
        }

        // Make sure there is a request URL provided
        if (typeof req === 'object' && req.hasOwnProperty('url')) {

            if (res === undefined) {
                res = {};
            }

            // Merge the default ajax response actions with any user defined actions
            response = $.extend(true, response, orig, res);

            // Request Cleanup
            // Check to see if the user provided data
            if (req.hasOwnProperty('data')) {

                // Do req.data cleanup
                if (typeof req.data !== 'object') {

                    // We have a data parameter defintion, but its not an object
                    if (typeof req.data === 'string') {

                        // Check to see if we have a form element reference
                        var $section = $('#' + req.data);

                        if ($section.length === 1) {
                            // Get the parameter source map
                            // Change req.data back to an object
                            req.data = _priv.sourceMap($section);
                        }
                        else {
                            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'request' }, 'Request data parameter referenced unknown section or form: ', req.data);

                            return false;
                        }
                    }
                }
                else {
                    // Check to see if the source map has been defined and not an hard coded set of values
                    if (req.hasOwnProperty('sourceMap')) {
                        var elementMap = _priv.elementMap(req.data);

                        if (elementMap !== false) {
                            req.data = elementMap;
                        }
                        else {
                            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'request' }, 'Request data parameter failed because of invalid source map');

                            return false;
                        }
                    }
                }
            }
            else {

                req.data = null;
            }

            // Build the basis request object
            var request = {
                url: req.url,
                data: req.data,
            };

            if (!req.cache) {
                request.cahce = false;
            }

            if ((location.hostname === "localhost" || location.hostname === "127.0.0.1") && location.port === "8888") {

                journal.log({ type: 'warning', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'request' }, 'Request method being forced to "GET"');

                req.method = 'GET';
            }
            else {

                // Add method only if needed
                if (req.method) {
                    request.method = req.method;
                }
                else {
                    request.method = "POST";
                }
            }

            if (!_disableAjax) {

                // Make the request
                $.ajax(request)
                    .done(function (data, status, ajaxObj) {

                        if (data !== undefined) {

                            // Cleaup the data before callback
                            cleanResponse(data, function (err, data) {

                                if (err) {

                                    response.done(data);
                                }
                                else {

                                    if (noPageWrap) {
                                        data = removePageWrapper(data);
                                    }

                                    // Call the done callback
                                    response.done(data);
                                }
                            });
                        }
                        else {

                            console.log("Undefined ajax returned!");
                        }


                    })
                    .fail(function (ajaxObj, status) {

                        switch (ajaxObj.status) {

                            case 0:
                            case 440:

                                if (!disableRedirect) {

                                    ajaxSessionTimeout();
                                }
                                else {

                                    response.fail(ajaxObj);
                                }


                                break;

                            default:

                                if (ajaxObj !== undefined) {

                                    // Cleaup the data before callback
                                    cleanResponse(ajaxObj, function (err, data) {

                                        if (err) {

                                            response.fail(ajaxObj);
                                        }
                                        else {

                                            // Call the done callback
                                            response.fail(ajaxObj);
                                        }
                                    });
                                }
                                else {

                                    response.fail(ajaxObj);
                                }


                                break;
                        }

                    })
                    .always(function (data) {

                        // Cleaup the data before callback
                        cleanResponse(data, function (err, data) {

                            if (err) {

                                response(data);
                            }
                            else {

                                // Call the done callback
                                response.always(data);
                            }
                        });
                    });
            }
            else {

                journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'ajax', func: 'request' }, 'Ajax Request blocked by developer.', request);

            }

        }
    };

    ajax.requestData = function _requestData(req, res) {

        // Check to see if we need to use our own res object
        if (res === undefined) {

            // Create our own res
            res = {};

            res.done = function _done(data) {

                if (data.body) {
                    data = data.body;
                }

                if (!Array.isArray(data)) {
                    data = [data];
                }

                // Loop through all of the responses
                for (var i = 0, len = data.length; i < len; i++) {

                    var response = data[i];

                    switch (response.type) {

                        case 'data':


                            if (response.strict) {

                                // Execute the process map
                                _priv.processMap(undefined, response.contents, ":strict:", function (result) {
                                    if (!result) {
                                        journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'requestData' }, 'Error when processing returned ajax requested data');
                                        return false;
                                    }
                                });

                            }
                            else {

                                // Execute the process map
                                _priv.processMap(response.contents, function (result) {
                                    if (!result) {
                                        journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'requestData' }, 'Error when processing returned ajax requested data');
                                        return false;
                                    }
                                });
                            }


                            break;

                        // Check for the possible respons object
                        case 'message':

                            // _priv.pageMessage(response.contents, false, false);
                            empMessage.createMessage(response.contents, { scroll: false });

                            break;

                        case 'error':

                            // _priv.pageMessage(response.contents, true, false);
                            empMessage.createMessage(response.contents, { scroll: true });

                            break;

                        default:
                            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'requestData' }, 'Unknown problem or response has been encountered');

                            break;

                    }

                }

            };

            res.fail = function _fail() {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'requestData' }, 'Request data failed');

                return false;
            };

        }

        ajax.request(req, res);
    };

    ajax.requestSection = function _requestSection(req, target, method) {
        // Create our own res
        var res = {};

        res.done = function _done(data) {

            if (data.body) {
                data = data.body;
            }

            // Force into array format
            if (!Array.isArray(data)) {
                data = [data];
            }

            for (var i = 0, len = data.length; i < len; i++) {
                var response = data[i];

                switch (response.type) {
                    case 'section':
                        // Call the render module and build the section out
                        render.section(response.contents, function (html) {
                            if (html !== false) {
                                switch (method) {
                                    case 'prepend':
                                        $target.prepend(html);

                                        break;

                                    case 'replace':

                                        // Special rules on replace
                                        switch ($target[0].nodeName) {
                                            case 'TABLE':
                                                // Flush this reference.
                                                var tableID = $target.attr('id');
                                                var tableDS = $target.attr('data-store-id');

                                                // Remove the old reference as we are replacing the table.
                                                if (emp.reference.tables.hasOwnProperty[tableID]) {
                                                    delete emp.reference.tables[tableID];
                                                }

                                                // Remove the old datastore reference as well
                                                if (ds.hasStore(tableDS)) {
                                                    ds.deleteStore(tableDS);
                                                }

                                                // Update target
                                                $target = $target.parents('.emp-table').eq(0);

                                                // Find the new table reference
                                                var $newTable = $(html).find('table');

                                                $target.replaceWith(html);

                                                // Setup the new table
                                                $newTable.table();

                                                break;

                                            case 'INPUT':
                                            case 'SELECT':
                                            case 'TEXTAREA':
                                                $target = $target.parents('.emp-field').eq(0);

                                                $target.replaceWith(html);

                                                break;

                                            // All 'normal elements that can be simply replaced'
                                            default:

                                                $target.replaceWith(html);

                                                break;
                                        }

                                        break;

                                    case 'append':
                                    case undefined:

                                        break;

                                    default:

                                        $target.append(html);

                                        break;
                                }
                            }
                            else {
                                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'requestData' }, 'Request section failed. Renderer returned false');
                            }
                        });

                        break;

                    // Check for the possible respons object
                    case 'message':

                        // _priv.pageMessage(response.contents, false, true);
                        empMessage.createMessage(response.contents, { scroll: false });

                        break;

                    case 'error':

                        // _priv.pageMessage(response.contents, true, true);
                        empMessage.pageMessage(response.contents, { scroll: true });

                        break;

                    default:
                        journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'requestData' }, 'Unknown problem or response has been encountered');

                        break;
                }
            }
        };

        res.fail = function _fail() {
            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'responseFail' }, 'Request section failed');

            return false;
        };

        var $target = (target instanceof jQuery) ? target : $('#' + target);

        if ($target.length === 1) {
            ajax.request(req, res);
        }
        else {
            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'ajax', func: 'responseFail' }, 'Request section failed. Unknown ID specified: "', target, '"');
        }
    };

    var ajaxSection = function (evt, source, method, req) {

        var $srcControl = $(evt.target);

        if (typeof method !== "string" || ['replace', 'insertBefore', 'insertAfter'].indexOf(method) === -1) {
            req = method;
            method = undefined;
        }

        if (typeof req === "string") {

            req = {
                url: req
            };
        }

        if (req.url) {

            // Check for submit method
            if (req.method) {
                req.method = "POST";
            }

            req.cache = false;

            // We already have a function that will scrap (_priv.sourceMap)
            req.data = source;

            // Build Response object
            var res = {};

            res.done = function _done(data) {

                if (typeof data === "object") {

                    if (data.status) {

                        if (data.status === "success") {

                            // Check for body contents
                            if (data.result && data.result.body) {

                                journal.log({ type: 'info', owner: 'UI', module: 'emp', func: 'ajaxSection' }, 'Response contained new body contents');

                                render.section(source, data.result.body, data.result.method, function (html) {

                                    var $section = null;

                                    if (data.result.method === "replace") {

                                        $section = $('#' + source);
                                    }
                                    else if (data.result.method === "insertBefore") {

                                        $section = $('#' + source).prev();
                                    }
                                    else {

                                        $section = $('#' + source).next();
                                    }

                                    if ($section !== null && $section.length === 1) {

                                        sectionSetup($section);
                                    }

                                });

                            }

                            if (data.result && data.result.message) {
                                _priv.pageMessage(data.result.message, true);
                            }

                        }
                        else if (data.status === "error") {

                            console.log("An error with AJAXSection has occured");

                        }
                        else {

                            journal.log({ type: 'error', owner: 'DEV|FRW', module: 'emp', func: 'ajaxSection' }, 'Response object return unknown response type: ' + data.response);
                        }

                    }
                    else {

                        journal.log({ type: 'error', owner: 'DEV|FRW', module: 'emp', func: 'ajaxSection' }, 'Response object was returned but missing valid response code.');
                    }

                }
                else {
                    journal.log({ type: 'error', owner: 'DEV|FRW', module: 'emp', func: 'ajaxSection' }, 'Request returned but it was not an object');
                }

            };

            res.fail = function _fail(data) {
            };

            ajax.request(req, res);

        }
        else {

            journal.log({ type: 'error', owner: 'DEV|FRW', module: 'emp', func: 'ajaxSection' }, 'Request failed because no URL was provided');
        }
    };

    /*
     * openWindow
     * ==========
     * url - [required] - string - page url
     * title - [required] - string - window title
     * features - [required] - string - window specail features
     */
    var openWindow = function openWindow(url, title, features) {

        // Polyfill missing features with defaults
        if (features === undefined) {
            features = 'scrollbars=yes,menubar=yes,resizable=yes,toolbar=no,width=900,height=700';
        }

        window.open(url, title, features);

        return true;
    };

    /*
     * functionCall
     * ============
     * evt - [required] - object - object event
     * funcName - [required] - string - name of the function to be called
     * args - array - arguments that will be passed to the function
     */
    var functionCall = function functionCall(evt, funcName, args, settings) {

        // Shift variables just in case the event object is not included
        if (typeof evt === 'string' && (Array.isArray(funcName) || funcName === undefined)) {
            // Shift all the variables.
            settings = args;
            args = funcName;
            funcName = evt;
            evt = false;
        }

        // If event exists prevent the default action
        if (evt) {
            evt.preventDefault();
        }

        if (args === undefined) {
            args = [];
        }
        else {
            //console.log(args);
        }

        function callFunction(evt, funcName, args, settings, remainingSteps) {

            var $srcControl = $(evt.target);

            // Check to see if they function is in a namespace
            if (funcName.indexOf('.') === -1) {

                // No namespace assume this is a global (window) function
                // Check to make sure we are calling a real function first.
                if (typeof (window[funcName]) === 'function') {

                    return window[funcName].apply(this, args);
                }
                else {
                    console.error('window[' + funcName + '] is not a function');
                }
            }
            else {

                var context = window;
                var namespace = funcName.split('.');
                var firstPart = namespace.shift();

                if (context[firstPart]) {
                    var textContext = firstPart;

                    context = context[firstPart];

                    // Loop through remaining spaces
                    for (var i = 0, len = namespace.length; i < len; i++) {

                        var testSpace = context[namespace[i]];

                        if (testSpace) {
                            // Update context and text name
                            context = testSpace;
                            textContext += '.' + namespace[i];
                        }
                        else {
                            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'Namespace breaks down at depth: "', textContext + '.' + namespace[i], '"');

                            return false;
                        }

                    }

                    // We reached the end make sure the namespace is a function
                    if (typeof context === 'function') {

                        switch (funcName) {

                            // Functions that need to include the event.
                            case 'emp.form.submit':                                                        

                                // Check to make sure only one argument (the submit options object) is currently in places
                                if (args.length === 1) {

                                    // See if special emp.functionCall setting were past in we can extend.
                                    if (typeof args[0] === 'object' && typeof settings === 'object') {
                                        args[0] = $.extend({}, args[0], settings);
                                    }

                                    // Include the event instance.
                                    args.unshift(evt);

                                }
                                else {
                                    journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'callFunction', func: 'emp.form.submit' }, 'This function should only have 1 argument being passed to it via the arguments array');

                                    return false;
                                }

                                break;

                            case 'emp.confirm':
                            case 'emp.tableConfirm':
                            case 'emp.tableState':

                                // add on the original event object
                                args.unshift(evt);
                                args.push(remainingSteps);

                                break;

                            //case 'emp.processMap':
                            case 'emp.selectionPopup':
                            case 'emp.specialSelectionPopup':
                            case 'emp.referenceCall':
                            case 'emp.download':
                            case 'emp.dropdown':
                            case 'emp.ajaxSection':
                            case 'emp.link.newWindow':
                            case 'emp.form.virtual':
                            case 'emp.fileUploadModal.fileUploadRequest':

                                args.unshift(evt);
                                break;

                        }

                        var returnCode = context.apply(this, args);

                        return returnCode;
                    }
                    else {
                        journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'Window namespace is not a function: ', textContext);
                    }

                }
                else {
                    journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'Window namespace does not exist');
                }
            }
        }

        // Check to see what the function call type is.
        if (typeof funcName === 'string') {

            journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'Calling function: ' + funcName);

            result = callFunction(evt, funcName, args, settings);

            // Bypass error message
            if (funcName.indexOf('validation') === -1 && funcName.indexOf('validate') === -1) {

                if (!result) {
                    //empMessage.createMessage({ text: "Please review the highlighted messages shown below before continuing", type: "error" }, { scroll: true });
                }
            }

            return result;
        }
        else {

            if (typeof funcName === 'object') {

                // Make a copy of the object of functions
                var functionCalls = $.extend({}, funcName);
                var functionKeys = [];

                for (var func in functionCalls) {
                    functionKeys.push(func);
                }

                var priorReturn;
                var currentIndex = 0;
                var priorReturns = [];

                (function callFunctions(keys) {

                    // Get a copy of the function object
                    var funcObj = functionCalls[keys.shift()];

                    var remainingSteps = {};

                    for (var i = 0, len = keys.length; i < len; i++) {
                        remainingSteps[i] = functionCalls[keys[i]];
                    }

                    // Check to see if we can include the prior return
                    if (priorReturn !== undefined) {

                        if (Array.isArray(funcObj.args)) {
                            funcObj.args.push();
                        }
                        else if (typeof funcObj.args === 'object') {
                            funcObj.args.priorReturn = priorReturn;
                        }
                        else {
                            funcObj.args = [priorReturn];
                        }
                    }

                    try {

                        // Call the function and get its return type
                        var funcReturn = callFunction(evt, funcObj.function, funcObj.args, settings, remainingSteps);

                        priorReturn = funcReturn;
                        priorReturns.push(funcReturn);

                        // Check to see if the return failed.
                        if (funcReturn === false) {
                            // Override the array and make it blank to force the function execution to stop
                            keys = [];

                            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'EventScript failed - Function ', funcObj.function, ' returned a failure code: ', funcReturn, '. Stoping eventScript execution loop.');

                            empMessage.createMessage({ text: "Please review the highlighted messages shown below before continuing", type: "error" }, { scroll: true });
                        }
                        else if (funcReturn === "stop") {

                            keys = [];
                        }
                    }
                    catch (e) {

                        keys = [];

                        journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'EventScript failed - Function ', funcObj.function, ' execution failed.', e);
                    }

                    if (keys.length) {

                        // Update the index
                        currentIndex += 1;

                        callFunctions(keys);
                    }
                    else {

                        if (typeof priorReturn === "boolean" || (typeof priorReturn === "object" && !priorReturn.preserveBlocker)) {

                            if (clkblocker.check) {

                                journal.log({ type: 'warning', owner: 'UI', module: 'emp', submodule: 'callFunction' }, 'Removing click blocker because prevereBlocker was not part of the return.');

                                clkblocker.remove();
                            }
                        }

                        return priorReturns;
                    }

                })(functionKeys);
            }
        }
    };

    var referenceCall = function referenceCall(evt, refType, refId, func, args) {

        if (this.emp.reference.hasOwnProperty(refType)) {
            var reference = emp.reference[refType];

            if (reference.hasOwnProperty(refId)) {
                // Update references.
                reference = reference[refId];

                // Check the refernce arguments quick,
                //if (args.length === 0) {

                // Push the event object
                args.unshift(evt);

                // Push the referenced object
                //args.push(reference);
                //}

                // Call the reference function and pass remaining args
                reference[func].apply(reference, args);
            }
            else {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'referenceCall' }, 'Reference call requested a reference not currently in the reference context "', refId, '". Please verify that an element with that reference ID exists');

                return false;
            }
        }
        else {
            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'referenceCall' }, 'Reference call for type "', refType, '" failed because it does not exist');

            return false;
        }
    };

    /*
     * Download Control
     * ================
     */
    var download = function _download(evt, url, readyText) {
        var spinnerOpts = {
            lines: 7, // The number of lines to draw
            length: 3, // The length of each line
            width: 2, // The line thickness
            radius: 3, // The radius of the inner circle
            corners: 0.5, // Corner roundness (0..1)
            rotate: 75, // The rotation offset
            color: '#000', // #rgb or #rrggbb
            speed: 1, // Rounds per second
            trail: 75, // Afterglow percentage
            shadow: false, // Whether to render a shadow
            hwaccel: true, // Whether to use hardware acceleration
            className: 'spinner', // The CSS class to assign to the spinner
            zIndex: 2e9, // The z-index (defaults to 2000000000)
            top: '50%', // Top position relative to parent in px
            left: '13px', // Left position relative to parent in px
        };

        // Get the sourc control
        var $control = $(evt.target);

        // Remove the original onlcikc as it shouldnt be needed
        $control.removeAttr('onclick');
        $control.addClass('emp-active-spinner');

        window.spin = spin;

        var spinner = new spin(spinnerOpts).spin();

        $control[0].appendChild(spinner.el);

        var req = {};

        // Check to see if we have a string url or object
        if (typeof url === 'string') {
            req.url = url;
        }
        else if (typeof url === 'object') {
            req = $.extend(true, {}, url);
        }

        var res = {
            done: function (data) {

                if (data.body) {
                    data = data.body;
                }

                if (data.url) {
                    // window.location = data.url;
                    setTimeout(function () {
                        // Mark the control as finished
                        $control.text(readyText).removeClass('emp-active-spinner');

                        // Stop/remove the spinner
                        spinner.stop();

                        $control.text('Download Letter').on('click', function () {
                            window.location = data.url;
                        });

                        // Initial call to download the generate file.
                        window.location = data.url;
                    }, 2000);
                }
            },
            fail: function () {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'download' }, 'Ajax request failed');
            }
        };

        ajax.request(req, res, false);
    };

    /*
     * Displays upload file progress modal
     */
    var fileUploadModal = {};

    fileUploadModal.fileUploadRequest = function _file_upload_request(evt, url){
        fileUploadProgressModal.setup(evt, url);
    };

    /*
     * Override Private
     * ================
     * name - [require] - string - name of private variable
     * value - [require] - any -  replacement value
     * cb - function - function to execute after change is complete
     */
    var overridePrivate = function overridePrivate(name, value, cb) {

        if (_priv[name]) {

            // Reset private value
            _priv[name] = value;

            if (typeof cb === 'function') {

                cb();

            }
            else {
                return true;
            }

        }
        else {

            return false;
        }
    };

    var specialSelectionPopup = function _special_selection_popup(event, settings) {

        var skipRequest = false;

        if (settings) {

            var selectionPopupPageMessages = function (msgArray) {

                for (var m = 0, mLen = msgArray.length; m < mLen; m++) {

                    if (!msgArray[m].template) {
                        msgArray[m].template = 'message';
                    }

                    empMessage.createMessage(msgArray[m], {});
                }
            };

            var sendIDSecondRequest = function _send_id_second_request(type, modal, table) {

                var req = {
                    url: false,
                    method: false,
                    data: {}
                };

                var $form = modal.$self.find('form');

                // Get the URL
                req.url = $form.attr('action');
                req.method = $form.attr('method');

                req.data.userId = modal.$self.find('#sendIdResults_userId').val();
                req.data.mnemonic = modal.$self.find('#sendIdResults_mnemonicId').val();
                req.data.network = modal.$self.find('#sendIdResults_netNameId').val();
                req.data.empId = modal.$self.find('#sendIdResults_empId').val();
                req.data.intTpId = modal.$self.find('#sendIdResults_intTpId').val();
                req.data.extTpId = modal.$self.find('#sendIdResults_extTpId').val();
                req.data.rowId = modal.$self.find('#sendIdResults_rowId').val();

                return req;
            };

            var getIDSecondRequest = function _get_id_second_request(type, modal, table) {

                var req = {
                    url: false,
                    method: false,
                    data: {}
                };

                var $form = modal.$self.find('form');

                // Get the URL
                req.url = $form.attr('action');
                req.method = $form.attr('method');

                req.data.id = modal.$self.find('#getIdResults_id').val();
                req.data.legalName = modal.$self.find('#getIdResults_legalName').val();
                req.data.tpType = modal.$self.find('#getIdResults_tpType').val();

                return req;
            };

            switch (settings.type) {

                case 'associateSelection':

                    // New selection function
                    settings.selectFunc = function _select_func(event, modal, table, settings) {

                        if (settings && settings.secondRequest && settings.secondRequest.request) {

                            var req = {};

                            var sr = settings.secondRequest;

                            if (typeof sr.request === "string") {

                                req.url = sr.request;
                            }
                            else if (typeof sr.request === "object" && sr.request.url) {

                                req.url = sr.request.url;
                            }

                            var columnValues = table.getHiddenInputValues();

                            for (var col in columnValues) {

                                if (col.indexOf('_temp') === -1 && col.indexOf('_checked_index') === -1 && col.indexOf('_selected_index') === -1) {

                                    if (!req.data) {
                                        req.data = {};
                                    }

                                    req.data[col] = columnValues[col];

                                }
                            }

                            requestAssociate(req, modal, table);

                        }
                        else {

                            journal.log({ type: 'error', owner: 'FW', module: 'emp', func: 'specialSelectionPopup' }, 'Associate Selection failed as its missing the secondRequest Object or secondRequest.request property.');
                        }

                    };

                    // Change a few settings before executing the first request
                    settings.autoSingleSelect = false;

                    if (!settings.removeClear) {
                        settings.removeClear = true;
                    }

                    break;

                case 'duplicatePopup':

                    // New selection function
                    settings.selectFunc = function _select_func(event, modal, table, mapping) {

                        var req = {};
                        var settings = {};

                        if (specialActions.redirect) {
                            settings.redirect = specialActions.redirect;
                        }

                        if (specialActions.url) {

                            req.url = specialActions.url;
                        }
                        else {

                            journal.log({ type: 'error', owner: 'FW', module: 'emp', func: 'specialSelectionPopup' }, 'Sepcial Selection Popup function requires that a url be passed with part of the specialActions object.');

                            return false;
                        }

                        if (specialActions.mapping) {

                            // Loop each column
                            for (var dest in specialActions.mapping) {

                                var value = specialActions.mapping[dest];

                                if (table.config.colmap[value]) {

                                    var name = table.config.colmap[value];

                                    specialActions.mapping[dest] = table.config.hiddenInputs.current[name].val();

                                }
                                else {

                                    journal.log({ type: 'error', owner: 'FW', module: 'emp', func: 'specialSelectionPopup' }, 'Sepcial Selection Popup associate function requested an invalid column from the selection popup table.');
                                }

                            }

                            req.data = specialActions.mapping;

                        }

                        // Pass the ajax request to the associate request
                        requestDuplicate(req, specialActions.action, mapping, modal, table, settings);

                    };

                    if (!settings.removeClear) {
                        settings.removeClear = true;
                    }

                    break;
            }

            if (!skipRequest) {
                selectionPopup(event, settings);
            }

        }
        else {

            journal.log({ type: 'error', owner: 'Developer', module: 'emp', func: 'specialSelectionPopup' }, 'Sepcial Selection Popup function was called, but the additional specialActions parameters is missing. Routing request to the original selectionPopup function.');
        }
    };

    var requestTooltip = function requestTooltip($ajaxTooltip) {

        var spinnerOpts = {
            lines: 7,      // The number of lines to draw
            length: 3,     // The length of each line
            width: 2,      // The line thickness
            radius: 3,     // The radius of the inner circle
            corners: 0.5,  // Corner roundness (0..1)
            rotate: 75,    // The rotation offset
            color: '#000', // #rgb or #rrggbb
            speed: 1,      // Rounds per second
            trail: 75,     // Afterglow percentage
            shadow: false, // Whether to render a shadow
            hwaccel: true, // Whether to use hardware acceleration
            className: 'spinner', // The CSS class to assign to the spinner
            zIndex: 900,   // The z-index (defaults to 2000000000)
            left: '0px',
        };

        var defaultInitialTitleText = "Click to load data.";

        var loadingClass = 'emp-ajax-tooltip-loading';
        var ajaxTooltipClass = 'emp-ajax-tooltip-style';
        var ajaxErrorClass = 'emp-ajax-error';
        var ajaxURL = $ajaxTooltip.attr('data-tooltip-url');

        var retrievalMessages = {};
        retrievalMessages.seeMore = 'Click to see more.';
        retrievalMessages.noData = 'UI: Invalid data returned.';
        retrievalMessages.error = 'UI: Ajax endpoint is down.';

        //Takes a standard ajax messages object. If valid will display the message on the field.
        var showResponseMessages = function (messages) {
            var messageDisplayed = false;
            var messageType = "message";
            var messageOptions = {
                scroll: false,
                field: $ajaxTooltip,
                pageNotifier: false
            };

            for (var m = 0; m < messages.length; m++) {

                if (messages[m].text && (messages[m].text !== "" && messages[m].text !== null)) {

                    messageType = "message";

                    //Set Message Type
                    if (messages[m].type) {
                        messageType = messages[m].type;
                    }

                    //Create Message
                    empMessage.createMessage({ text: messages[m].text, type: messageType }, messageOptions);
                    messageDisplayed = true;
                }
            }
            return messageDisplayed;
        };

        if (ajaxURL !== undefined) {

            var req = {};
            req.url = ajaxURL;
            req.cache = false;

            //Add Default title to tooltip if none is set
            if ($ajaxTooltip.attr('title') === undefined) {
                $ajaxTooltip.attr('title', defaultInitialTitleText);
            }

            var $ajaxTooltipParent = $ajaxTooltip.parent();

            var ajaxRequestValue = $ajaxTooltip.text().trim();

            req.data = { 'entityId': ajaxRequestValue };

            $ajaxTooltip.on('click', function () {
                var messageOptions;

                $ajaxTooltipParent.addClass('emp-ajax-tooltip-loading');
                $ajaxTooltip.removeAttr('title');

                //Setup Spinner
                var spinner = new spin(spinnerOpts).spin();

                fastdom.mutate(function () {
                    $ajaxTooltipParent[0].appendChild(spinner.el);
                });

                var res = {

                    done: function (data) {

                        //Unbind the ajax build click event
                        $ajaxTooltip.unbind('click');

                        var $messageLoc;
                        var messages = false;
                        var messageType;

                        //Check status
                        if (data.status && data.status === "success" && data.result.length === 1) {
                            var tooltipContent = '';

                            data = data.result[0];

                            //Grab employee information
                            tooltipContent = data.body;

                            if (tooltipContent !== '') {
                                cui.load('popover', function _loadPopover() {
                                    $ajaxTooltip.popover({
                                        display: {
                                            className: ajaxTooltipClass
                                        },
                                        html: '<span>' + tooltipContent.trim() + '</span>'
                                    });
                                });

                                $ajaxTooltip.attr('title', tooltipContent.trim());
                            }
                            else {

                                //Check for any second level messages
                                if (data.messages && data.messages.length >= 1) {
                                    //Determine if messages were displayed from the reponse.
                                    if (showResponseMessages(data.messages)) {
                                        messages = true;
                                    }
                                }

                                //No messages were displayed from the ajax response so create an appropriate error message
                                if (!messages) {
                                    messageOptions = {
                                        scroll: false,
                                        field: $ajaxTooltip,
                                        pageNotifier: false
                                    };

                                    empMessage.createMessage({ text: retrievalMessages.noData, type: "error" }, messageOptions);
                                }

                                //Ajax call failed to return valid data, add ajax error class
                                $ajaxTooltip.addClass(ajaxErrorClass);
                            }
                        }
                        else {

                            // If there are any top level messages display them
                            if (data.messages && data.messages.length >= 1) {
                                //Determine if messages were displayed from the reponse.
                                if (showResponseMessages(data.messages)) {
                                    messages = true;
                                }
                            }

                            // If there are any internal messages display them
                            if (data.result) {
                                for (var i = 0; i < data.result.length; i++) {
                                    if (data.result[i].messages && data.result[i].messages.length >= 1) {
                                        if (showResponseMessages(data.result[i].messages)) {
                                            messages = true;
                                        }
                                    }
                                }
                            }

                            //No messages were displayed from the ajax response so create an appropriate error message
                            if (!messages) {
                                messageOptions = {
                                    scroll: false,
                                    field: $ajaxTooltip,
                                    pageNotifier: false
                                };

                                empMessage.createMessage({ text: retrievalMessages.error, type: "error" }, messageOptions);
                            }

                            //Ajax call failed to return valid data, add ajax error class
                            $ajaxTooltip.addClass(ajaxErrorClass);
                        }

                        fastdom.mutate(function () {
                            $ajaxTooltipParent.find('.spinner').remove();
                        });

                        //Loading complete, remove the loading class
                        $ajaxTooltipParent.removeClass('emp-ajax-tooltip-loading');
                    },

                    fail: function (data) {
                        //Unbind the ajax build click event
                        $ajaxTooltip.unbind('click');

                        messageOptions = {
                            scroll: false,
                            field: $ajaxTooltip,
                            pageNotifier: false
                        };

                        empMessage.createMessage({ text: retrievalMessages.error, type: "error" }, messageOptions);

                        $ajaxTooltip.addClass(ajaxErrorClass);

                        fastdom.mutate(function () {
                            $ajaxTooltipParent.find('.spinner').remove();
                        });

                        $ajaxTooltipParent.removeClass('emp-ajax-tooltip-loading');
                    }
                };

                ajax.request(req, res, true);
            });
        }
    };

    /**
     * Use a browser confrim message
     * @param   {string}    msg        Message that should be displayed
     * @param   {function}  yesFunc    OPTIONAL - Function to execute if the user selectes ok
     * @return  {boolean}              return true if it finishes without issue otherwise false
     */
    var confirm = function confirm(origEvt, msg, yesFuncObject) {

        function create_modal() {

            var $confirm;

            // Message
            var $message = $('<p>').text(msg);

            // Button Row
            var $yesButton = $('<button/>', {
                'type': 'button',
                'id': 'emp-confirm-yes-button',
                'class': 'emp-confirm-yes-button'
            }).text('Yes');

            var $noButton = $('<button/>', {
                'type': 'button',
                'id': 'emp-confirm-no-button',
                'class': 'cui-button-primary emp-confirm-no-button'
            })
                .text('No');

            // Create the button container and put it all together
            var $buttonContainer = $('<div/>', {
                "class": "emp-confirm-button-container"
            })
                .append($noButton)
                .append($yesButton);

            var _priv = {};

            _priv.destroyModal = function _destory_modal($modal) {

                $modal.hide();
            };

            _priv.setupModal = function _setup_modal($modal) {

                $modal.$self.find('.emp-confirm-yes-button').on('click', { modal: $modal }, _event.yes);
                $modal.$self.find('.emp-confirm-no-button').on('click', { modal: $modal }, _event.no).focus();
            };

            _priv.onHide = function _on_hide_modal($modal) {
            };

            var _event = {};

            _event.no = function _event_no(event) {

                var $modal = event.data.modal;

                _priv.destroyModal($modal);
            };

            _event.yes = function _event_yes(event) {

                var $modal = event.data.modal;

                _priv.destroyModal($modal);

                if (typeof yesFuncObject === "function") {

                    yesFuncObject();
                }
                else {

                    functionCall(origEvt, yesFuncObject);
                }
            };

            $confirm = $.modal({
                html: $message,
                footer: {
                    "html": $buttonContainer.html()
                },
                modalClass: 'emp-confirm-modal',
                onCreate: function (modal) {

                    _priv.setupModal(modal);
                },
                //onHide: _priv.onHide,
                hideDestroy: true
            });

            $confirm.show();

            // Special return function that will prevent the rest of the functionCall functions from running.
            return "stop";
        }

        // check and load modal if needed
        if (require.defined('modal')) {

            create_modal();
        }
        else{

            cui.load('modal', function _error_report_modal() {

                create_modal();
            });
        }

        return "stop";
    };

    /**
     * Validates table state and confirm user selection
     *
     */
    var tableConfirm = function table_confirm(origEvt, msg, yesFuncObject){

        var evtTargetOffsetParent = origEvt.target.offsetParent;

        var tableID = evtTargetOffsetParent.querySelector('table').getAttribute('id');

        var selectElemID = evtTargetOffsetParent.querySelector('select').getAttribute('id');

        var cuiMessage = evtTargetOffsetParent.querySelector('.' + 'cui-messages');

        var checkedIndex = emp.reference.tables[tableID].getCheckedIndex();

        if(checkedIndex){

            //remove msg
            if(cuiMessage){

                var $cuiEror = $(cuiMessage.children[0]);

                empMessage.removeMessage($cuiEror);

                cuiMessage.parentElement.removeChild(cuiMessage);
            }

            emp.confirm(origEvt, msg, yesFuncObject);

        }else{

            if(!cuiMessage){

                empMessage.createMessage({ text: 'Please select a row. [UI040]', type: "error" }, {field: selectElemID});
            }
        }

        // Special return function that will prevent the rest of the functionCall functions from running.
        return "stop";
    };

    /**
     * Validates table state and footer control action
     *
     */
    var tableState = function _table_state(evt){

        var evtTargetOffsetParent = evt.target.offsetParent;

        var selectElem = evtTargetOffsetParent.querySelector('select');

        var tableID = evtTargetOffsetParent.querySelector('table').getAttribute('id');
        var selectElemID = selectElem.getAttribute('id');

        var cuiMessage = evtTargetOffsetParent.querySelector('.' + 'cui-messages');

        var checkedIndex = emp.reference.tables[tableID].getCheckedIndex();
        var firstSelectOpt = selectElem.querySelector('option');

        if(!checkedIndex || firstSelectOpt.selected){

            //append msg
            if(!cuiMessage){

                empMessage.createMessage({ text: 'Please verify a row and a valid dropdown option is selected. [UI040]', type: "error" }, {field: selectElemID});
            }

            // Special return function that will prevent the rest of the functionCall functions from running.
            return "stop";
        }else{

            //remove msg
            if(cuiMessage){

                var $cuiEror = $(cuiMessage.children[0]);

                empMessage.removeMessage($cuiEror);

                cuiMessage.parentElement.removeChild(cuiMessage);
            }
        }
    };

    var print = function _print(evt) {
    	window.print();
    };

    /**
     * Adds masking (automatic slashes) to a date input
     *
     * @param   {jQuery}  $input  Input element
     * @return  {Boolean}         Success/failure
     */
    var dateMask = function _dateMask($input) {

        if (typeof $input !== 'object' || !($input instanceof jQuery)) {
            journal.log({ type: 'error', module: 'emp', owner: 'UI', func: 'dateMask' }, 'Input must be a jQuery object');

            return false;
        }

        $input.on('keyup', function _dateMask_onKeyup(evt) {
            _events.dateMasking(evt, $(this));
        });

        return true;
    };

    ///////////
    // Forms //
    ///////////

    var form = {};

    _priv.childWindow = false;

    form.virtual = forms.virtual;

    /**
     * Submits a form
     *
     * @param   {Event}   evt      User event (click, etc)
     * @param   {Object}  options  Includes the form's ID and action
     *
     * @return  {boolean}          Success/failure
     */
    form.submit = function _submit(evt, options, settings) {

        journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'form', func: 'submit' }, "Submit called: ", arguments);

        var frm = false;
        var validation = true;

        if (evt && evt.target) {

            if (!evt.target.hasAttribute('data-skip-blocker')) {
                clkblocker.add($(evt.target));
            }
            else {
                journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'form', func: 'submit' }, "Click blocker skipped per developer as data-skip-blocker attribute on element.");
            }

        }
        else {

            clkblocker.add();
        }

        // Look over the event object and verify that it is not an event type object or a jquery event object.
        if (!(evt instanceof Event) && typeof evt !== 'object' && (typeof evt === 'object' && !evt.hasOwnProperty('target'))) {
            options = evt;
            evt = undefined;
        }

        // Extend setting wit options
        var submitSettings = $.extend({}, { id: '', action: '' }, options);

        // Identify the proper form by option id or by the buttons native form
        if (options.id && typeof options.id === 'string') {

            frm = document.getElementById(options.id);
        }
        else if (evt instanceof Event) {

            frm = evt.target.form;

            // default blocker incase the
            evt.preventDefault();
        }

        // Get the event type and use it to get a reference to what was just clicked.
        if (evt instanceof Event || evt instanceof jQuery.Event) {
            var validAttr = $(evt.target).attr('data-validation');

            if (validAttr === false || validAttr === 'false') {
                validation = false;
            }
        }

        if (frm) {

            journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'form', func: 'submit' }, "Submitting form:", frm);


            

            if (submitSettings.action && submitSettings.action !== '') {

                frm.setAttribute('action', submitSettings.action);
            }

            if (submitSettings.preventSubmit) {

                clkblocker.remove();

                // Report that the action still completed.
                return true;
            }
            else {

                // Forces validation to false!
                validation = false;

                // Check to see if the form can be validated
                if (validation) {

                    journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Running validation on form.");

                    // validate the form
                    var formValidation = validate.form(frm);

                    // If the results passed, allow the form to submit.
                    if (formValidation) {

                        if (!_disableForms) {

                            _priv.printFormContents($(frm));

                            journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Form Submittion Executing!");

                            frm.submit();

                            return true;
                        }
                        else {
                            journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Form Submittion blocked by developer, form:", options.id);

                            _priv.printFormContents($(frm));

                            clkblocker.remove();

                            return true;
                        }
                    }
                    else {

                        clkblocker.remove();

                        return true;
                    }
                }
                else {

                    journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Validation skipped!");

                    if (!_disableForms) {

                        if(evt.target && evt.target.dataset.uploadAjax == 'true'){
                            var fileInput = frm.querySelector('input[type=file]');

                            if(fileInput && fileInput.dataset.uploadUrl && fileInput.dataset.uploadUrl !== ""){
                               
                               //Call function to handle the ajax file chunking and continue with the rest of the form submit. 
                                form.processFileUploadAjax(frm);

                                return true;
                            }
                            else{
                                _priv.printFormContents($(frm));

                                journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Form Submittion Executing!");

                                frm.submit();
                            }
                        }                       
                        
                        else{
                            _priv.printFormContents($(frm));

                            journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Form Submittion Executing!");

                            frm.submit();
                        }

                        return true;
                    }
                    else {
                        journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Form Submittion blocked by developer, form settings:", options.id);

                        _priv.printFormContents($(frm));

                        clkblocker.remove();

                        return true;
                    }
                }

            }

        }
        else {
            // Log the error and quit
            if (submitSettings.id !== '') {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, 'No form with ID "', submitSettings.id, '"');
            }
            else if (evt instanceof Event) {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, 'Unable to find form related to "#', evt.target.id, '" from element ', evt.target);
            }
            else {
                journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, 'Unable to find form ', submitSettings);
            }

            return false;
        }
    };

     /**
     * Called in the middle of standard form submission where input fields and upload URL are detected. 
     *
     * @param   {Event}   evt      User event (click, etc)
     * @param   {Object}  options  Includes the form's ID and action
     *
     * @return  {boolean}          Success/failure
     */
    form.processFileUploadAjax = function _processFileUploadAjax(frm){
        var fileUploadIdList = [];
        var fileInputs = frm.querySelectorAll("input[type=file");
        var fileList = [];        
        
        var uploadUrl; //Derived from data attribute on file input, should only need to pull value from one as all inputs should be using the same end point.  
        var uploadAbortUrl; //Derived from data attribute on file input, should only need to pull value from one as all inputs should be using the same end point.  

        var progressBarEnabled = false; // Should eventually come from a property on the form/input. 
        var progressBarOverrideInputCount = 2;
        var progressBarOverrideFileCount = 2;
        var progressBarOverrideFileSize = 100;

        var chunkSize = 1024 * 1024 * 1024; 
        
        var requestList = [];        
        var retryLimit = 3;
        var uploadSuccess = false;
        var $confirm;       

        var checkProgressBarOverride = function _checkProgressBarOverride(fileInputs){ 
            if(fileInputs.length > progressBarOverrideInputCount){
                return true;
            } 
            else{
                for(var i = 0; i < fileInputs.length; i++){
                    var fileInput = fileInputs[i];
                        
                    if(fileInput.files && fileInput.files.length > 0){                

                        if(fileInput.files.length > progressBarOverrideFileCount){
                            return true;
                        }
                        else{
                            for(var f=0; f<fileInput.files.length; f++){                    
                                if(fileInput.files[f].size > progressBarOverrideFileSize){
                                    return true;
                                }
                            }    
                        }                        
                    }
                }        
            }

            return false;
        };

        var getFormattedFileSize = function _getFormattedFileSize(bytes){
            //Reurns display formatted filesize. If less than 10 units will include one decimal place. 
            var units = ['bytes', 'KB', 'MB', 'GB'];
           
            var l = 0;
            var n = parseInt(bytes, 10) || 0;

            while(n >= 1024 && ++l){
                n = n/1024;
            }
          
            return(n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l]);        
        };

        var processFileInputs = function _processFileInputs(fileInputs){  
            //Set upload urls based off first file input in form. 
            uploadUrl = fileInputs[0].dataset.uploadUrl;
            uploadAbortUrl = fileInputs[0].dataset.uploadAbortUrl;

            var messages = [];

            for(var i = fileInputs.length-1; i >= 0 ; i--){
                var fileInput = fileInputs[i];
                var fileInputMaxSize = fileInput.dataset.uploadMaxFileSize;
                    

                if(fileInput.files && fileInput.files.length > 0){                
                    for(var f=fileInput.files.length-1; f>=0; f--){    
                        if(fileInputMaxSize && (fileInput.files[f].size > fileInputMaxSize)){    
                            messages.push({"type":"error","text": "The file you have selected exceeds the "+getFormattedFileSize(fileInputMaxSize)+" limit."});
                        }
                        else if(fileInput.files[f].name.indexOf('.')==-1){
                            messages.push({"type":"error","text": "This online service only accepts files that have a file extension."});
                        }
                        else{
                            fileList.push(fileInput.files[f]);    
                        }                        
                    }   
                }
            }   
            if(messages.length>0){
                for(var m=0; m<messages.length;m++){
                    empMessage.createMessage(messages[m]);
                }
            }
            else{
                if(fileList.length > 0){
                    sendFile(fileList.pop());
                }    
            }            
        };

        var sendFile = function _sendFile(file){
            var chunkCount = 0;
            var totalChunks;
            var retryCount = 0;            
            var fileSize = file.size;
            var fileName = file.name;
            var fileId;
            var transferComplete = false;
            var requestAborted = false;

            var calculateChunks = function _calculateChunks(){
                totalChunks = Math.ceil(fileSize / chunkSize);              
            };

            var uploadFileChunks = function _uploadFileChunks(){
                var chunk;
                var formData = new FormData();
                var start = (chunkCount == 0) ? 0 : (chunkCount * chunkSize);
                var end = ((start + chunkSize) < fileSize-1) ? (start + chunkSize) : (fileSize);

                chunk = file.slice(start, end);
                formData.append('file', chunk, fileName);

                if(fileId){
                    formData.append("fileId", fileId);
                }

                chunkCount++;
          
                makeAjaxRequest(formData, start, end);
            };

            var makeAjaxRequest = function _makeAjaxRequest(formData, blobStart, blobEnd){
               
                function handleResponseMessages(messages){
                    var messageType = "message";
                    var messageOptions = {
                        scroll: false,
                        // field: $ajaxTooltip,
                        pageNotifier: false
                    };
                    var messageDisplayed = false;

                    for (var m = 0; m < messages.length; m++) {

                        if (messages[m].text && (messages[m].text !== "" && messages[m].text !== null)) {

                            messageType = "message";

                            //Set Message Type
                            if (messages[m].type) {
                                messageType = messages[m].type;
                            }

                            //Create Message
                            empMessage.createMessage({ text: messages[m].text, type: messageType }, messageOptions);
                            messageDisplayed = true;
                        }
                    }

                    if(messageDisplayed){
                        if(clkblocker){
                            clkblocker.remove();            
                        }

                        if($confirm){
                            $confirm.destroy();  
                            $confirm = null;  
                        }
                    }
                }

                function updateProgressPopup(){
                    if(!$confirm){
                        initProgressPopup();
                    }
                    else{
                        // Update the file name and file count. 
                        var progressBarFileName = document.getElementById('upload-modal-progress-bar-text');
                        progressBarFileName.textContent = "File name: " + fileName;
                        var cancelButton = document.getElementById('upload-modal-cancel-button');
                        cancelButton.dataset.fileId = fileId;
                    }
                }

                function initProgressPopup(){
                    var progressBar = document.createElement('span');
                    progressBar.id = 'upload-modal-progress-bar';
                    progressBar.classList.add('upload-modal-progress-bar');

                    var progressBarWrapper = document.createElement('div');
                    progressBarWrapper.id = "upload-modal-progress-bar-wrapper";
                    progressBarWrapper.classList.add("upload-modal-progress-bar-wrapper");
                    
                    var progressBarFileName = document.createElement('span');
                    progressBarFileName.id = "upload-modal-progress-bar-text";
                    progressBarFileName.classList.add("upload-modal-progress-bar-text");
                    progressBarFileName.textContent = "File name: " + fileName;
                    
                    var progressBarTextWrapper = document.createElement('div');
                    progressBarTextWrapper.id = "upload-modal-progress-bar-text-wrapper";
                    progressBarTextWrapper.classList.add("upload-modal-progress-bar-text-wrapper");
                    progressBarTextWrapper.appendChild(progressBarFileName);

                    var progressBarBody = document.createElement('div');        
                    progressBarBody.id = "upload-modal-progress-bar-body";                        
                    progressBarBody.classList.add("upload-modal-progress-bar-body");                        

                    var progressBarFillPercent = document.createElement('div');
                    progressBarFillPercent.id = "upload-modal-progress-bar-fill-percent";
                    progressBarFillPercent.classList.add("upload-modal-progress-bar-fill-percent");
                    progressBarFillPercent.textContent = "0.00%";
                    
                    var progressBarFill = document.createElement('div');
                    progressBarFill.id = "upload-modal-progress-bar-fill";
                    progressBarFill.classList.add("upload-modal-progress-bar-fill");

                    progressBarBody.appendChild(progressBarFillPercent);
                    progressBarBody.appendChild(progressBarFill);
                    progressBarWrapper.appendChild(progressBarTextWrapper);
                    progressBarWrapper.appendChild(progressBarBody);

                    var cancelButton = document.createElement('button');
                    cancelButton.id = "upload-modal-cancel-button";
                    cancelButton.textContent = "Cancel Upload";
                    cancelButton.type = "button";

                    cancelButton.onclick = function(){
                        for(var i=0;i<requestList.length;i++){
                            if(requestList[i].status == 0){
                                requestList[i].abort();
                            }                           
                        }
                        
                        clkblocker.remove();        
                        $confirm.hide();    
                        requestAborted = true;                                

                        var cancelButton = document.getElementById('upload-modal-cancel-button');
                        var fileId = cancelButton.dataset.fileId;

                        var abortFormData = new FormData();
                        abortFormData.append("fileId", fileId);      

                        var oAbortReq = new XMLHttpRequest();
                        oAbortReq.open("POST", uploadAbortUrl, true);  
                        oAbortReq.send(abortFormData);
                    };

                    var footerWrapper = document.createElement('div');
                    footerWrapper.classList.add('upload-modal-footer-wrapper');
                    footerWrapper.appendChild(cancelButton);

                    var headerText = document.createElement('span');
                    headerText.textContent = "Uploading...";

                    var headerWrapper = document.createElement('div');
                    headerWrapper.classList.add('upload-modal-header-wrapper');
                    headerWrapper.appendChild(headerText);

                    $confirm = $.modal({
                        html: progressBarWrapper,
                        header:{
                            "html": headerWrapper
                        },
                        footer: {
                            "html": footerWrapper
                        },
                        hideOnEscape: false,
                        display:{
                            closeButton:false
                        },
                        overlay:{
                            closeOnClick: false
                        },
                        hideDestroy: true,
                        modalClass:"upload-modal"
                    });

                    $confirm.show();
                }


                function retryUpload(){
                    if(requestAborted){
                        return;
                    }

                    if(retryCount < retryLimit){
                        journal.log({ type: 'info', owner: 'UI', module: 'form', submodule: 'processFileUploadAjax' }, 'Retrying file upload.');                   
                        retryCount++;
                        makeAjaxRequest(formData, blobStart, blobEnd);
                    }
                    else{
                        journal.log({ type: 'info', owner: 'UI', module: 'form', submodule: 'processFileUploadAjax' }, 'Retry limit reached.');
                        
                        handleResponseMessages([{
                           "type":"error",
                           "text":"There was an issue with the upload. Please try again later."
                        }]);          
                    }
                }

                function requestLoad(evt){
                    
                    try{
                        var response = this.responseText;
                       
                        if(response){                            
                            response = JSON.parse(response);
                        }
                       
                        if(response.status == "success"){

                            if(response.result && response.result.length > 0){

                                if(response.result[0].messages && response.result[0].messages.length > 0){
                                    handleResponseMessages(response.result[0].messages);
                                }
                                else{ 

                                    if(response.result[0].body && response.result[0].body.fileId){
                                        if(!fileId){
                                            fileId = response.result[0].body.fileId;  

                                            //Update file ID in   
                                            var cancelButton = document.getElementById('upload-modal-cancel-button');
                                            cancelButton.dataset.fileId = response.result[0].body.fileId;
                                        }
                                    } 
                                    if(!requestAborted){
                                        if(chunkCount < totalChunks){
                                            uploadFileChunks();    
                                        }
                                        else{         

                                            addUploadedFileId(fileId);
                                            
                                            finishFileUpload();
                                        } 
                                    }
                                }
                            }
                        }
                        else{
                            // Display any server messages
                            if(response.messages && response.messages.length > 0){
                                handleResponseMessages(response.messages);
                            }
                            else if(response.result && response.result.length > 0 && response.result[0].messages && response.result[0].messages.length > 0){
                                handleResponseMessages(response.result[0].messages);   
                            }
                        }
                    }
                    catch(e){
                        journal.log({ type: 'error', owner: 'UI', module: 'form', submodule: 'processFileUploadAjax' }, 'Failed to handle file upload response.', e);  
                        retryUpload();                        
                    }
                }

                function requestProgress (evt) {
                    var progressBarText = document.getElementById('upload-modal-progress-bar-text');
                    var progressBarFill = document.getElementById('upload-modal-progress-bar-fill');
                    var progressBarFillPercent = document.getElementById('upload-modal-progress-bar-fill-percent');
                    var totalSize = evt.total;
                    var loadedAmount = evt.loaded;
                    
                    if (evt.lengthComputable) {  
                        if(loadedAmount <= totalSize){       
                            
                            var chunkValue = 1/totalChunks;
                            var fileTransferProgress = loadedAmount / totalSize; 

                            var completedChunkProgress = ((chunkCount -1)*chunkValue);
                            var currentChunkProgess = fileTransferProgress * chunkValue;

                            var totalProgressPercentage = (completedChunkProgress + currentChunkProgess) * 100;
                          
                            progressBarFillPercent.textContent = totalProgressPercentage.toFixed(0) + "%";
                            progressBarFill.style.width = totalProgressPercentage.toFixed(0)+"%";                                    
                        } 
                    }               
                }

                function requestError(evt){
                    retryUpload();                
                }

                function requestAbort(evt){                
                }

                updateProgressPopup();

                var oReq = new XMLHttpRequest();
                
                // Add events
                oReq.upload.addEventListener("progress", requestProgress);
                oReq.addEventListener('loadend', requestLoad);
                oReq.addEventListener('progress', requestProgress);
                oReq.addEventListener('error', requestError);
                oReq.addEventListener('abort', requestAbort);

                // Open request
                oReq.open("POST", uploadUrl, true);  

                // Set any additional properties
                var contentRange = "bytes " + blobStart + "-" + (blobEnd-1) + "/" + file.size;
                oReq.setRequestHeader("Content-Range", contentRange);
                
                if(!requestAborted){
                    requestList.push(oReq);
                    oReq.send(formData);
                }
            };

            calculateChunks();            

            // check and load modal if needed
            if (require.defined('modal')) {
                uploadFileChunks();
            }
            else{
                cui.load('modal', function _error_report_modal() {
                    uploadFileChunks();
                });
            }
        };

        var addUploadedFileId = function _addUploadedFileId(fileId){
            fileUploadIdList.push(fileId);
        };

        var finishFileUpload = function _finishFileUpload(){
            if(fileList.length >0){
                sendFile(fileList.pop());
            }
            else{
                fileInputCleanup();
            }
        };


        var fileInputCleanup = function _fileInputCleanup(){
            //Check if progress bar is still active, if so max the value while the form finshes submitting.
            var progressBarFill = document.getElementById('upload-modal-progress-bar-fill');
            var progressBarFillPercent = document.getElementById('upload-modal-progress-bar-fill-percent');

            if(progressBarFill && progressBarFillPercent){
                progressBarFillPercent.textContent = "100%";    
                progressBarFill.style.width = "100%";   
            }

            // May also want to disable cancel upload button at this stage. 

            //Remove files from file inputs
            for(var i = fileInputs.length-1; i >= 0 ; i--){
                var fileInput = fileInputs[i];
                fileInput.value = null;
            }

            //Create hidden field and append to form. 
            var hiddenUploadIds = document.createElement('input');
            hiddenUploadIds.type = "hidden";
            hiddenUploadIds.id = "uploaded-file-ids";
            hiddenUploadIds.name = "uploaded-file-ids";
            hiddenUploadIds.value = fileUploadIdList.join(',');

            frm.appendChild(hiddenUploadIds);

            submitForm();
        };


        var submitForm = function _submitForm(){
            _priv.printFormContents($(frm));

            journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'submit' }, "Form Submittion Executing!");

            frm.submit();                          
        };

        var checkValidateForm = function _checkValidForm(){
            var formValidation = validate.form(frm);

            return formValidation;
        };

        var clearErrorMessages = function _clearErrorMessages(){
            
            if(emp.reference && emp.reference.message && emp.reference.message.length > 0){
                messageList = emp.reference.message;    

                for(var i=0; i<messageList.length; i++){
                    var message = messageList[i];
                    
                    if(message.ref[0].classList.contains('cui-error')){
                        empMessage.removeMessage((message.ref));
                    }
                }
            }         
        };

        //If progress bar isn't enabled by default, crawl all file inputs and determine if it should be displayed based on override values. 
        if(!progressBarEnabled){
            if(checkProgressBarOverride(fileInputs)){
                progressBarEnabled = true;

                journal.log({ type: 'info', owner: 'UI', module: 'emp', submodule: 'form', func: 'processFileUploadAjax' }, '"Progress bar display overridden');
            }
        }

        if(clkblocker){
            clkblocker.remove();            
        }

        if($confirm){
            $confirm.destroy();  
            $confirm = null;  
        }

        clearErrorMessages();

        if(checkValidateForm()){
            processFileInputs(fileInputs);
        }        
    };

    var showChild = function _show_child() {

        if (_priv.childWindow) {

            _priv.childWindow.focus();
        }
    };

    // Gets form names and values and submits them via POST to a new window
    //
    // Description:
    //
    // Functionality:
    //  - Breaks down the action into an action and parameters and their values
    //  - Submits the new form via POST into a new popup window
    //  - Updates the values of parameters in the action with new values specified in the sourceForm
    //  - Applies values to parameters that are mapped elsewhere in the sourceForm, denoted by curly braces
    //    Example:     action -> A=1&B=2&C=3
    //                 params -> A=5&C={D}&D=7
    //        Result: A is updated to 5, B is left at 2,
    //                C becomes 7 because it is mapped to D's value, and
    //                D itself is not added to the targetForm because it does not exist in the action initially
    //
    form.externalSubmit = function _externalSubmit(options) {
        var i;
        var temp = [];
        var form = document.createElement('form'); // The form to be submitted
        var defaults = {
            src: '',         // Pre-existing `<form>` element (or the `name` attribute of a form) which will provide the new values
            params: '',      // References to fields in the action which should be updated with values in the `src` form
            dest: '',        // `name` attribute of new `<form>` to which all values are submitted
            action: '',      // URL to be split into form fields and values, as well as the `dest` form's action
            returnURL: false // Whether to return the new URL instead of creating a form and submitting it
        };
        var settings = $.extend({}, defaults, options);

        // Remove braces from a string
        var removeBraces = function removeBraces(s) {
            return s.replace(/\{/, '')
                .replace(/\}/, '');
        };

        // Split a string into the parameters and values and return one of them
        //
        // The string is split on ampersands, followed by equals signs. The 'side'
        // argument dictates whether to return an array of the values on the 'left'
        // or 'right' side of the equals sign.
        //
        var splitContents = function splitContents(stringToSplit, side) {
            var contents = [];
            var theSide = [];
            var i;
            var temp;

            if (stringToSplit) {
                contents = stringToSplit.split('&');

                if (side === 'left') {
                    side = 0;
                }
                else if (side === 'right') {
                    side = 1;
                }

                for (i = 0; i < contents.length; i++) {
                    temp = contents[i].split('=');
                    theSide[i] = temp[side];
                }

                return theSide;
            }
            else {
                return 0;
            }
        };

        // Get parameters or values from a form element
        var getFormData = function getFormData(theForm, mapping) {
            // Get the data from the form
            for (var i = 0; i < theForm.elements.length; i++) {
                if (theForm.elements[i].name === mapping) {
                    if (theForm.elements[i].value) {
                        return theForm.elements[i].value;
                    }
                    else {
                        return '';
                    }
                }
            }
        };

        // Opens a new window and submits the final form
        var openInNewWindow = function openInNewWindow(form) {
            // Create a name for a window so we can target it
            var winName = 'NewWindow_' + getCookie('JSESSIONID').replace(/\W/g, 'a');

            // Open a blank window
            window.open('', winName, 'scrollbars=yes,menubar=yes,resizable=yes,toolbar=no,width=900,height=700');

            // Set the target to the blank window
            form.target = winName;

            // Submit
            form.submit();
        };

        var actn;              // the target form's 'action' value (a URL)
        var urlParamList = []; // stores the parameters only, from the URL, to be passed to the final form
        var urlValueList = []; // stores the values only, from the URL, to be passed to the final form

        // Checks to see if settings.returnURL was sent as a parameter or not (no method overloading in JavaScript - so optional param used)
        if (!settings.returnURL) {
            settings.returnURL = false;
        }

        // Check arguments
        if ((!settings.dest && !settings.returnURL) || !settings.action) {
            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'form', func: 'externalSubmit' }, 'Missing required arguments');

            return;
        }

        // Check for the source `<form>`
        var srcForm;

        if (typeof settings.src === 'string') {
            srcForm = document.forms[settings.src];
        }
        else {
            srcForm = settings.src;
        }

        if (kind(srcForm) !== 'element') {
            journal.log({ type: 'error', owner: 'UI', module: 'emp', submodule: 'form', func: 'externalSubmit' }, 'Source form not provided');

            return false;
        }

        //
        // Get base URL for form's action
        //

        // Set the action to everything before the question mark
        if (settings.action.substr(0, settings.action.indexOf('?') - 1)) {
            actn = settings.action.substr(0, settings.action.indexOf('?'));
        }
        else if (settings.action) {
            actn = settings.action;
        }

        // Get parameters

        // targetUrl (get everything after the equals sign)
        temp = settings.action.split('?');

        // Parameters and values are present in the URL
        if (temp[1]) {
            urlParamList = temp[1];
            urlValueList = temp[1];
            urlParamList = splitContents(urlParamList, 'left');
            urlValueList = splitContents(urlValueList, 'right');
        }
        // No parameters, so just open the URL as-is without creating or submitting a form
        else if (!settings.params || !settings.params.length) {
            window.open(settings.action, 'window_name_' + getCookie('JSESSIONID').replace(/\W/g, 'a'));

            return;
        }

        // Check to see if the settings.action contained any braced values
        // If so, replaced it with an empty string
        for (i = 0; i < urlValueList.length; i++) {
            if (urlValueList[i].match(/\{/) && urlValueList[i].match(/\}/)) {
                urlValueList[i] = '';
            }
        }

        // Update targetUrl values based on sourceMappingParameters
        //    Check for references to targetUrl parameters in the
        //    sourceMappingParameters. When a reference is found,
        //    update the value that was assigned to the parameter by
        //    the targetUrl.
        //

        // Check that the form was actually found and mappings are defined
        if (settings.params && srcForm) {
            // Create arrays of params/values
            var srcParamList = settings.params;
            var srcValueList = settings.params;
            srcParamList = splitContents(settings.params, 'left');
            srcValueList = splitContents(settings.params, 'right');

            // Find and update values
            for (i = 0; i < srcValueList.length; i++) {
                // If it's just a constant value (no braces)
                if (!(/\{/.test(srcValueList[i]) && /\}/.test(srcValueList[i]))) {
                    // Check that the parameter was in the targetUrl
                    if (urlParamList.indexOf(srcParamList[i]) > -1) {
                        urlValueList[urlParamList.indexOf(srcParamList[i])] = srcValueList[i];
                    }
                    // Otherwise, add it to the list
                    else {
                        urlParamList[urlParamList.length] = srcParamList[i];
                        urlValueList[urlValueList.length] = srcValueList[i];
                    }
                }
                // If it's a mapped value (in braces)
                else if (/\{/.test(srcValueList[i]) && /\}/.test(srcValueList[i])) {
                    // Get the value from the sourceForm, if a value exists, and apply it to the parameter in targetUrl
                    if (getFormData(srcForm, removeBraces(srcValueList[i]))) {
                        urlValueList[urlParamList.indexOf(srcParamList[i])] = getFormData(srcForm, removeBraces(srcValueList[i]));
                    }
                    // If the parameter has no value, assign an empty string
                    else {
                        urlValueList[urlParamList.indexOf(srcParamList[i])] = '';
                    }
                }
            }
        }

        if (settings.returnURL) {
            // Create URL
            //  - Use previously gathered parameters and values
            //  - Returns built URL

            //parameters variable
            var queryString = '?';

            //create <input>s and set attributes
            for (i = 0; i < urlParamList.length; i++) {
                queryString += urlParamList[i] + '=' + urlValueList[i] + '&';
            }

            // Get rid of last empty parameter concatenator
            if (queryString.charAt(queryString.length - 1) === '&') {
                queryString = queryString.substr(0, queryString.length - 1);
            }

            // Return URL with parameters
            return (actn + queryString);
        }
        else {
            // Create form:
            //  - Use previously gathered parameters and values
            //  - One line of HTML for each set of data
            //  - POST method

            var input;

            // Reset and empty the form object
            while (form.hasChildNodes()) {
                form.removeChild(form.firstChild);
            }

            // Set up the form
            form.setAttribute('name', settings.dest);
            form.setAttribute('method', 'post');
            form.setAttribute('target', 'newwindow');
            form.setAttribute('action', actn);

            // Create <input>s and set attributes
            for (i = 0; i < urlParamList.length; i++) {
                input = document.createElement('input');
                input.setAttribute('name', urlParamList[i]);
                input.setAttribute('value', urlValueList[i]);
                input.setAttribute('type', 'hidden');
                form.appendChild(input);
                input = null;
            }

            // Append the form to the document
            document.body.appendChild(form);

            // Open the submitted form in a new window
            openInNewWindow(form);
        }
    };

    var link = {};

    link.newWindow = function _link_new_window(evt) {

        var $link = $(evt.target);

        if (!$link.hasClass('emp-header-preferences')) {
            clkblocker.add($link);
        }


        var dest = false;

        if (arguments.length > 1 && typeof arguments[1] === "object" && arguments[1].url) {

            dest = arguments[1].url;

        }
        else {

            var href = $link.attr('href');

            if (href.length) {
                dest = href;
            }

        }

        if (dest) {

            openWindow(dest);
        }

        if (!$link.hasClass('emp-header-preferences')) {
            clkblocker.remove();
        }

        return true;
    };

    var validate = {};

    validate.field = function _validateField(field) {
        var results = validation.field(field);

        _priv.processValidation(results);

        if (results.result) {
            return true;
        }
        else {
            return false;
        }
    };

    validate.form = function _validateForm(form, skipProc) {

        var results = validation.form(form);

        if (!skipProc) {
            _priv.processValidation(results);
        }

        if (results.endResult) {
            return true;
        }
        else {
            return false;
        }
    };

    // cui load passthrough
    var load = function _load() {

        cui.load.apply(cui, arguments);
    };

    // Utility function for test pages
    var getProperty = function (name) {

        switch (name) {

            case '_disableForms':

                return _disableForms;

            case '_disableAjax':

                return _disableAjax;

            default:

                return null;
        }
    };

    var disable = {};

    disable.form = function _disable_form(bool) {

        if (typeof bool === 'boolean') {
            _disableForms = bool;

            forms.setDisable(bool);
        }
        // Check for string equivalent
        else if (typeof bool === 'string') {

            if (bool === "true") {

                bool = true;
            }

            if (bool === "false") {

                bool = false;
            }

            _disableForms = bool;

            forms.setDisable(bool);
        }

        if (bool) {

            journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'disable', func: 'form' }, 'Forms submits disabled by the developer.');
        }
        else {

            journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'disable', func: 'form' }, 'Forms submits enabled by the developer.');
        }

        return true;
    };

    disable.ajax = function _disable_ajax(bool) {

        if (typeof bool === 'boolean') {
            _disableAjax = bool;

        }
        // Check for string equivalent
        else if (typeof bool === 'string') {

            if (bool === "true") {

                bool = true;
            }

            if (bool === "false") {

                bool = false;
            }

            _disableAjax = bool;

        }

        if (_disableAjax) {

            journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'disable', func: 'ajax' }, 'Ajax submits disabled by the developer.');
        }
        else {

            journal.log({ type: 'info', owner: 'Developer', module: 'emp', submodule: 'disable', func: 'ajax' }, 'Ajax submits enabled by the developer.');
        }

        return true;
    };

    var tracker = {};

    var getPreformance = function _get_preformance(name) {

        if (!tracker[name]) {

            tracker[name] = {
                start: performance.now(),
                end: false
            };
        }
        else {

            tracker[name].end = performance.now();

        }

        if (tracker[name].start && tracker[name].end) {
            console.log("Preformance Tracker for", name, tracker[name].end - tracker[name].start, " in milliseconds.");

            delete tracker[name];
        }

    };

    //flush localStorage -tabsetPrefs
    var flushLocalStorage = function(str, customObj){
        var lStorage = store;

        if(lStorage){
            //remove localStorage tabsetprefs
            lStorage.remove(str);
        }
        //set custom tabsetPrefs to localStages
        lStorage.set('tabsetPrefs', customObj);
    };

    if (!window.cui) {
        window.cui = cui;
    }

    ////////////////
    // Public API //
    ////////////////

    return {
        ajax: {
            request: ajax.request,
            requestData: ajax.requestData,
            requestSection: ajax.requestSection
        },
        ajaxSection: ajaxSection,
        clickblocker: clkblocker,
        confirm: confirm,
        tableConfirm: tableConfirm,
        tableState: tableState,
        dateMask: dateMask,

        // External flag
        external: externalEmpire,
        fw: fw,

        // Exposing for table filters till we can write date.js component
        dateMasking: _events.dateMasking,
        dropdown: dyncDD.dropdown,
        download: download,
        ds: ds,
        load: load,
        functionCall: functionCall,
        referenceCall: referenceCall,

        // Testing item
        getPreformance: getPreformance,
        flushLocalStorage: flushLocalStorage,

        init: init,
        reference: reference,
        selectionPopup: selectionPopup,
        specialSelectionPopup: specialSelectionPopup,
        overridePrivate: overridePrivate,
        openWindow: openWindow,
        //processMap: processMap,
        processMap: processM.directMap,
        form: {
            externalSubmit: form.externalSubmit,
            submit: form.submit,            
            virtual: form.virtual,
        },
        disable: {
            ajax: disable.ajax,
            form: disable.form
        },
        validate: {
            form: validate.form,
            field: validate.field
        },

        link: link,

        windows: windowsM,

        showChild: showChild,
        getCookie: getCookie,
        getProperty: getProperty,

        uiPopup: uiPopup,

        defaultErrorMessage: "Our system can't display these contents at this time.",

        print: print,

        pageScripts: pageScripts,
        sectionSetup: sectionSetup,

        isPage: ((protocol) ? true : false),
        isFile: ((!protocol) ? true : false),

        // Cached elements
        $body: $body,
        $window: $window,

        // Expose modules through `emp`
        cui: cui,
        render: render,

        //Message Plugin exposed for testing pages
        empMessage: empMessage,
        store: store,
        platform: "ecore",

        fileUploadModal: {
            fileUploadRequest: fileUploadModal.fileUploadRequest
        }

        //manualInit: manualInit
    };
});

/* var fileUploadModal = {};

fileUploadModal.fileUploadRequest = function _file_upload_request(evt, url){
    fileUploadProgressModal.setup(evt, url);
}; */;

/**
 * @license RequireJS domReady 2.0.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/domReady for details
 */
/*jslint */
/*global require: false, define: false, requirejs: false,
  window: false, clearInterval: false, document: false,
  self: false, setInterval: false */


define('domReady',[],function () {
    'use strict';

    var isTop, testDiv, scrollIntervalId,
        isBrowser = typeof window !== "undefined" && window.document,
        isPageLoaded = !isBrowser,
        doc = isBrowser ? document : null,
        readyCalls = [];

    function runCallbacks(callbacks) {
        var i;
        for (i = 0; i < callbacks.length; i += 1) {
            callbacks[i](doc);
        }
    }

    function callReady() {
        var callbacks = readyCalls;

        if (isPageLoaded) {
            //Call the DOM ready callbacks
            if (callbacks.length) {
                readyCalls = [];
                runCallbacks(callbacks);
            }
        }
    }

    /**
     * Sets the page as loaded.
     */
    function pageLoaded() {
        if (!isPageLoaded) {
            isPageLoaded = true;
            if (scrollIntervalId) {
                clearInterval(scrollIntervalId);
            }

            callReady();
        }
    }

    if (isBrowser) {
        if (document.addEventListener) {
            //Standards. Hooray! Assumption here that if standards based,
            //it knows about DOMContentLoaded.
            document.addEventListener("DOMContentLoaded", pageLoaded, false);
            window.addEventListener("load", pageLoaded, false);
        } else if (window.attachEvent) {
            window.attachEvent("onload", pageLoaded);

            testDiv = document.createElement('div');
            try {
                isTop = window.frameElement === null;
            } catch (e) {}

            //DOMContentLoaded approximation that uses a doScroll, as found by
            //Diego Perini: http://javascript.nwbox.com/IEContentLoaded/,
            //but modified by other contributors, including jdalton
            if (testDiv.doScroll && isTop && window.external) {
                scrollIntervalId = setInterval(function () {
                    try {
                        testDiv.doScroll();
                        pageLoaded();
                    } catch (e) {}
                }, 30);
            }
        }

        //Check if document already complete, and if so, just trigger page load
        //listeners. Latest webkit browsers also use "interactive", and
        //will fire the onDOMContentLoaded before "interactive" but not after
        //entering "interactive" or "complete". More details:
        //http://dev.w3.org/html5/spec/the-end.html#the-end
        //http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded
        //Hmm, this is more complicated on further use, see "firing too early"
        //bug: https://github.com/requirejs/domReady/issues/1
        //so removing the || document.readyState === "interactive" test.
        //There is still a window.onload binding that should get fired if
        //DOMContentLoaded is missed.
        if (document.readyState === "complete") {
            pageLoaded();
        }
    }

    /** START OF PUBLIC API **/

    /**
     * Registers a callback for DOM ready. If DOM is already ready, the
     * callback is called immediately.
     * @param {Function} callback
     */
    function domReady(callback) {
        if (isPageLoaded) {
            callback(doc);
        } else {
            readyCalls.push(callback);
        }
        return domReady;
    }

    domReady.version = '2.0.1';

    /**
     * Loader Plugin API method
     */
    domReady.load = function (name, req, onLoad, config) {
        if (config.isBuild) {
            onLoad(null);
        } else {
            domReady(onLoad);
        }
    };

    /** END OF PUBLIC API **/

    return domReady;
});


(function () {

    var scripts = document.getElementById("require"),
        src = scripts.src,
        baseUrl = src.substring(src.indexOf(document.location.pathname),src.lastIndexOf("/js/main.js"));

    require.config({
        baseUrl: baseUrl,
        paths:{
            "modal-styles": "css/components/modal",
            "modal": "js/components/modal",
            "appScripts": "js/components/TESTAPP",
            "d3": "js/components/d3",
            "d3draw": "js/components/d3draw",
            "htmlToDataStore": "js/components/htmlToDataStore",
            "modal2-styles": "css/components/modal2",
            "modal2": "js/components/modal2",
            "pageScripts-camerajs": "js/components/camera",
            "pageScripts-elec-comm-spajs": "js/components/elec-comm-spa",
            "pageScripts-mapTestjs": "js/components/mapTest",
            "pageScripts-mapTest2js": "js/components/mapTest2",
            "pageScripts-ORLA_01js": "js/components/ORLA_01",
            "pageScripts-_map_nys_albany_countyjs": "js/components/_map_nys_albany_county",
            "pageScripts-_map_nys_countiesjs": "js/components/_map_nys_counties",
            "pageScripts-_map_nys_statejs": "js/components/_map_nys_state",
            "pageScripts-_map_statesjs": "js/components/_map_states",
            "topoClient": "js/components/topoClient",
            "uimockup": "js/components/uimockup",
            "TESTAPP": "js/scripts/TESTAPP",
            "mapTest": "js/scripts/mapTest",
            "mapTest2": "js/scripts/mapTest2",
            "elec-comm-spa": "js/scripts/elec-comm-spa",
            "_map_nys_counties": "js/scripts/_map_nys_counties",
            "_map_nys_albany_county": "js/scripts/_map_nys_albany_county",
            "QRUP_O1": "js/scripts/camera",
            "QRUP_O2": "js/scripts/camera",
            "ORLA_01": "js/scripts/ORLA_01"
        }
    });

    require(['jquery', 'cui', 'emp', 'domReady!'], function ($, cui, empImport) {

    var cuiInitParams = {
        optIns:{
            iOSFix: true,
        },
    };

    // Init Core UI First
    cui.init(cuiInitParams, function () {

        // Make `emp` a global object
        if (!window.emp) {
            window.emp = empImport;
        }
        // Copy properties from the global `emp` object that was created by grunt-concat into our "real" emp object that we've imported via RequireJS
        else {
            // Currently the only property we use is `version` so we'll just check for that specifically. If we add more, we could loop through window.emp's properties and add them all to empImport. (CP 05/04/2016)
            if (window.emp.version) {
                empImport.version = window.emp.version;
            }

            // Replace the global `emp` object with our "real" version now that it has all of the properties in place
            window.emp = empImport;
        }

        // Initialize the `emp` module
        if (window.fwData) {
            empImport.init();
        }
    });
});


})();

define("../tasks/libs/requireManager/temp/settings", function(){});

/*
 * Require-CSS RequireJS css! loader plugin
 * 0.1.8
 * Guy Bedford 2014
 * MIT
 */

/*
 *
 * Usage:
 *  require(['css!./mycssFile']);
 *
 * Tested and working in (up to latest versions as of March 2013):
 * Android
 * iOS 6
 * IE 6 - 10
 * Chome 3 - 26
 * Firefox 3.5 - 19
 * Opera 10 - 12
 *
 * browserling.com used for virtual testing environment
 *
 * Credit to B Cavalier & J Hann for the IE 6 - 9 method,
 * refined with help from Martin Cermak
 *
 * Sources that helped along the way:
 * - https://developer.mozilla.org/en-US/Browser_detection_using_the_user_agent
 * - http://www.phpied.com/when-is-a-stylesheet-really-loaded/
 * - https://github.com/cujojs/curl/blob/master/src/curl/plugin/css.js
 *
 */

define('css',[],function() {

  if (typeof window == 'undefined')
    return { load: function(n, r, load){ load() } };

  var head = document.getElementsByTagName('head')[0];

  var engine = window.navigator.userAgent.match(/Trident\/([^ ;]*)|AppleWebKit\/([^ ;]*)|Opera\/([^ ;]*)|rv\:([^ ;]*)(.*?)Gecko\/([^ ;]*)|MSIE\s([^ ;]*)|AndroidWebKit\/([^ ;]*)/) || 0;

  // use <style> @import load method (IE < 9, Firefox < 18)
  var useImportLoad = false;

  // set to false for explicit <link> load checking when onload doesn't work perfectly (webkit)
  var useOnload = true;

  // trident / msie
  if (engine[1] || engine[7])
    useImportLoad = parseInt(engine[1]) < 6 || parseInt(engine[7]) <= 9;
  // webkit
  else if (engine[2] || engine[8])
    useOnload = false;
  // gecko
  else if (engine[4])
    useImportLoad = parseInt(engine[4]) < 18;

  //main api object
  var cssAPI = {};

  cssAPI.pluginBuilder = './css-builder';

  // <style> @import load method
  var curStyle, curSheet;
  var createStyle = function () {
    curStyle = document.createElement('style');
    head.appendChild(curStyle);
    curSheet = curStyle.styleSheet || curStyle.sheet;
  }
  var ieCnt = 0;
  var ieLoads = [];
  var ieCurCallback;

  var createIeLoad = function(url) {
    ieCnt++;
    if (ieCnt == 32) {
      createStyle();
      ieCnt = 0;
    }
    curSheet.addImport(url);
    curStyle.onload = function(){ processIeLoad() };
  }
  var processIeLoad = function() {
    ieCurCallback();

    var nextLoad = ieLoads.shift();

    if (!nextLoad) {
      ieCurCallback = null;
      return;
    }

    ieCurCallback = nextLoad[1];
    createIeLoad(nextLoad[0]);
  }
  var importLoad = function(url, callback) {
    if (!curSheet || !curSheet.addImport)
      createStyle();

    if (curSheet && curSheet.addImport) {
      // old IE
      if (ieCurCallback) {
        ieLoads.push([url, callback]);
      }
      else {
        createIeLoad(url);
        ieCurCallback = callback;
      }
    }
    else {
      // old Firefox
      curStyle.textContent = '@import "' + url + '";';

      var loadInterval = setInterval(function() {
        try {
          curStyle.sheet.cssRules;
          clearInterval(loadInterval);
          callback();
        } catch(e) {}
      }, 10);
    }
  }

  // <link> load method
  var linkLoad = function(url, callback) {
    var link = document.createElement('link');
    link.type = 'text/css';
    link.rel = 'stylesheet';
    if (useOnload)
      link.onload = function() {
        link.onload = function() {};
        // for style dimensions queries, a short delay can still be necessary
        setTimeout(callback, 7);
      }
    else
      var loadInterval = setInterval(function() {
        for (var i = 0; i < document.styleSheets.length; i++) {
          var sheet = document.styleSheets[i];
          if (sheet.href == link.href) {
            clearInterval(loadInterval);
            return callback();
          }
        }
      }, 10);
    link.href = url;
    head.appendChild(link);
  }

  cssAPI.normalize = function(name, normalize) {
    if (name.substr(name.length - 4, 4) == '.css')
      name = name.substr(0, name.length - 4);

    return normalize(name);
  }

  cssAPI.load = function(cssId, req, load, config) {

    // Test for a non -style
    // This patch is to allow for common css/js names like css!module to work instead of doing css!module-styles
    if (cssId.indexOf('-styles') === -1) {
        if (config.paths.hasOwnProperty(cssId + "-styles")) {
            cssId = cssId + "-styles";
        }
    }

    (useImportLoad ? importLoad : linkLoad)(req.toUrl(cssId + '.css'), load);
  }

  return cssAPI;
});

/**
 * @license RequireJS text 2.0.14 Copyright (c) 2010-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.14',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});
/** @license
 * RequireJS plugin for loading JSON files
 * - depends on Text plugin and it was HEAVILY "inspired" by it as well.
 * Author: Miller Medeiros
 * Version: 0.4.0 (2014/04/10)
 * Released under the MIT license
 */
define('json',['text'], function(text){

    var CACHE_BUST_QUERY_PARAM = 'bust',
        CACHE_BUST_FLAG = '!bust',
        jsonParse = (typeof JSON !== 'undefined' && typeof JSON.parse === 'function')? JSON.parse : function(val){
            return eval('('+ val +')'); //quick and dirty
        },
        buildMap = {};

    function cacheBust(url){
        url = url.replace(CACHE_BUST_FLAG, '');
        url += (url.indexOf('?') < 0)? '?' : '&';
        return url + CACHE_BUST_QUERY_PARAM +'='+ Math.round(2147483647 * Math.random());
    }

    //API
    return {

        load : function(name, req, onLoad, config) {
            if (( config.isBuild && (config.inlineJSON === false || name.indexOf(CACHE_BUST_QUERY_PARAM +'=') !== -1)) || (req.toUrl(name).indexOf('empty:') === 0)) {
                //avoid inlining cache busted JSON or if inlineJSON:false
                //and don't inline files marked as empty!
                onLoad(null);
            } else {
                text.get(req.toUrl(name), function(data){
                    var parsed;
                    if (config.isBuild) {
                        buildMap[name] = data;
                        onLoad(data);
                    } else {
                        try {
                            parsed = jsonParse(data);
                        } catch (e) {
                            onLoad.error(e);
                        }
                        onLoad(parsed);
                    }
                },
                    onLoad.error, {
                        accept: 'application/json'
                    }
                );
            }
        },

        normalize : function (name, normalize) {
            // used normalize to avoid caching references to a "cache busted" request
            if (name.indexOf(CACHE_BUST_FLAG) !== -1) {
                name = cacheBust(name);
            }
            // resolve any relative paths
            return normalize(name);
        },

        //write method based on RequireJS official text plugin by James Burke
        //https://github.com/jrburke/requirejs/blob/master/text.js
        write : function(pluginName, moduleName, write){
            if(moduleName in buildMap){
                var content = buildMap[moduleName];
                write('define("'+ pluginName +'!'+ moduleName +'", function(){ return '+ content +';});\n');
            }
        }

    };
});

define('getIndex',['kind'], function (kind) {
    // Private method namespace
    var priv = {};

    ///////////////////
    // Public method //
    ///////////////////

    /**
     * Validates the input and calls a helper method to determine the item's index in the array
     *
     * @param   {Array}   array   The array of objects to search within (required)
     * @param   {Mixed}   value   The value of the property to look for (required)
     * @param   {String}  prop    Name of the property to check in each object (optional; defaults to `id`)
     *
     * @return  {Number}          Array index of the matching item, or `-1` if the arguments were invalid
     */
    var _getIndex = function _getIndex (array, value, prop) {
        // Verify parameters

        // Only arrays are supported at this time
        if (kind(array) !== 'array' || array.length === 0) {
            return -1;
        }

        // Fill in the optional parameter
        if (typeof prop !== 'string' || prop.length === 0) {
            prop = 'id';
        }

        return priv.getArrayIndex(array, value, prop);
    };

    /////////////////////
    // Private methods //
    /////////////////////

    /**
     * Returns the index of an object in an array based on a value inside the object
     *
     * @param   {Array}   array   The array of objects to search within (required)
     * @param   {Mixed}   value   The value of the property to look for (required)
     * @param   {String}  prop    Name of the property to check in each object (required)
     *
     * @return  {Number}          Array index of the matching item
     */
    priv.getArrayIndex = function _getArrayIndex (array, value, prop) {
        return array
                .map(
                    function _getArrayIndex_map (item) {
                        return item[prop];
                    }
                )
                .indexOf(value);
    };

    /////////////////////
    // Expose publicly //
    /////////////////////

    return _getIndex;
});

define('cuiEditor',[], function() {
    console.log("Editor!");
});

// jshint ignore: start
define('ecAddGroupComp',['render'], function(render) {


    var ecAddGroupComp = function _ec_add_group_component(oConfig, aData, dTargat) {

        var dActualComponent = null;
        var dEditControl = null;
        var dAddButton = null;
        var dAddInput = null;
        var dPillList = null;
        var aData = aData;

        var _priv = {
            _this: null
        };

        _priv.stringReplace = function _sub_header_replace(sBase, sCount, sReplaceChar, bRemoveLast) {

            var sReturn = sBase.replace(sReplaceChar, sCount).trim();

            if (bRemoveLast) {
                sReturn = sReturn.slice(0, sReturn.length -1);
            }

            return sReturn;
        }

        _priv.newPill = function _create_new_pill(sValue) {

            var dNewPill = document.createElement('li');

            var dNewPillWrapper = document.createElement('span');
                dNewPillWrapper.classList.add('ec-pill');

            var dNewPillTextWrapper = document.createElement('span');
                dNewPillTextWrapper.classList.add('ec-pill-item-text');
                dNewPillTextWrapper.appendChild(document.createTextNode(sValue));

            var dNewButton = document.createElement('button');
                dNewButtonText = document.createElement('span');
                dNewButtonText.innerHTML = '&times;';

                dNewButton.appendChild(dNewButtonText);

            dNewPillWrapper.appendChild(dNewPillTextWrapper);
            dNewPillWrapper.appendChild(dNewButton);

            dNewPill.appendChild(dNewPillWrapper);

            return dNewPill;
        }

        _priv.generateShell = function(oConfig, aData, dTarget, cb) {

            let oRenderTemplate = {
                "template": "ec-add-group-component",
                "sAddLabel": _priv.stringReplace("Add $", oConfig.sNotItemName, '$', true) + ":",
                "sAddId": (oConfig.sNotItemName + "-input").toLowerCase(),
                "sTitle": oConfig.sTitle,
                "sSubTitle": _priv.stringReplace(oConfig.sSubTitle, aData.length, '$'),
                "sContentHeader": _priv.stringReplace("Current $", oConfig.sNotItemName, '$'),
                "sNoItemsText": _priv.stringReplace("No $ provided", oConfig.sNotItemName, '$'),
                "aItems": aData
            }

            render.section(dTarget, oRenderTemplate, 'append', function (html) {
                cb(dTarget.firstElementChild);
            });

        }

        var _events = {};

        _events.clickEditLink = function _click_edit_link(evt) {

            evt.preventDefault();

            if (dActualComponent.classList.contains('emp-collapse')) {

                dActualComponent.classList.remove('emp-collapse');
                evt.target.textContent = "Close";
            }
            else {

                dActualComponent.classList.add('emp-collapse');
                evt.target.textContent = "Edit";
            }

        };

        _events.removePill = function _click_remove_pill(evt) {

            var dCurrentElem = null;
            var dRemoveTarget = null;
            var dRemoveLIElem = null;
            var sPillText = null;
            var dPillList = null;
            var bContinue = false;

            dCurrentElem = evt.target;

            while (true) {

                if (dCurrentElem && dCurrentElem.nodeName === "body") {
                    break;
                }

                if (bContinue === true) {
                    break;
                }

                // Choice what we are looking for
                if (!dRemoveTarget) {

                    if (dCurrentElem.nodeName !== "BUTTON") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dRemoveTarget = dCurrentElem;

                        sPillText = dRemoveTarget.previousElementSibling.textContent.trim();
                    }

                }
                else if (!dRemoveLIElem) {

                    if (dCurrentElem.nodeName !== "LI") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dRemoveLIElem = dCurrentElem;
                    }

                }
                else if (!dPillList) {

                    if (dCurrentElem.nodeName !== "UL") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dPillList = dCurrentElem;
                        bContinue = true;
                    }

                }

            }

            if (bContinue) {

                oSettings = {
                    fCancel: function() {
                        console.log("Do nothing!");
                    },
                    fConfirm: function() {

                        dPillList.removeChild(dRemoveLIElem);
                    }
                }

                var dModalContents = null;

                // Fake out a check for the demo
                if (sPillText === "jsmith1950@gmail.com") {

                    var sRemoveMessage = "Are you sure you want to remove " + sPillText + "?";

                    dModalContents = document.createElement('p');
                    dModalContents.appendChild(document.createTextNode(sRemoveMessage));
                }
                else {

                    var dP1 = document.createElement('p');
                        dP1.appendChild(document.createTextNode("Are you sure you want to remove " + sPillText + "? This email is currently being used for the following subscriptions:"));

                    var dUl = document.createElement('ul');
                    var dLi = document.createElement('li');
                        dLi.appendChild(document.createTextNode('Installment payment agreement'));
                        dUl.appendChild(dLi);

                    dModalContents = document.createElement('div');

                    dModalContents.appendChild(dP1);
                    dModalContents.appendChild(dUl);


                }


                if (require.s.contexts._.defined['modal2']) {

                    var modal2 = require.s.contexts._.defined['modal2'];

                    new modal2(evt.target, oSettings, dModalContents);
                }
                else {

                    emp.load('modal2', function(modal2) {;

                        new modal2(evt.target, oSettings, dModalContents);

                    })

                }

                if (dPillList.children.length === 1) {
                    dPillList.firstElementChild.classList.remove('cui-hide-from-screen');
                }

            }

        };

        _events.addControl = function _click_add_control(evt) {

            var sValue = dAddInput.value;

            if (sValue && sValue.length) {

                oSettings = {
                    fCancel: function() {
                        console.log("Do nothing!");
                    },
                    fConfirm: function() {

                        var dNewPill = _priv.newPill(sValue)

                        dPillList.appendChild(dNewPill);

                        dAddInput.value = "";

                        if (dPillList.children.length > 1) {
                            dPillList.firstElementChild.classList.add('cui-hide-from-screen');
                        }

                    }
                }

                if (require.s.contexts._.defined['modal2']) {

                    var modal2 = require.s.contexts._.defined['modal2'];

                    var dModalContents = document.createElement('p');
                    dModalContents.appendChild(document.createTextNode(oConfig.sAddParagraph));

                    var dModal = new modal2(evt.target, oSettings, dModalContents);

                }
                else {

                    emp.load('modal2', function(modal2) {

                        var dModalContents = document.createElement('p');
                        dModalContents.appendChild(document.createTextNode(oConfig.sAddParagraph));

                        var dModal = new modal2(evt.target, oSettings, dModalContents);

                    })

                }

            }

        };

        // Call the render function
        _priv.generateShell(oConfig, aData, dTargat, function(dComponent) {

            dActualComponent = dComponent;

            dEditControl = dActualComponent.querySelector('.ec-add-edit-control');
            dEditControl.addEventListener('click', _events.clickEditLink);

            adPills = dActualComponent.querySelectorAll('.ec-pill button');

            for (var p = 0, pLen = adPills.length; p < pLen; p++) {
                adPills[p].addEventListener('click', _events.removePill);
            }

            dPillList = dActualComponent.querySelector('.ec-pill-list');

            dAddInput = dActualComponent.querySelector('.add-input');
            dAddButton = dActualComponent.querySelector('.add-button');
            dAddButton.addEventListener('click', _events.addControl);


        });


        return dActualComponent;

    }

    var init = function init(oConfig, aData, dTargat) {

        return new ecAddGroupComp(oConfig, aData, dTargat);

    };

    return {
        init: init
    };

});

// jshint ignore: start
define('ecManageGroupComp',['render'], function(render) {


    var ecManageGroupComp = function _ec_manage_group_component(oConfig, oData, dTargat) {

        var dActualComponent = null;
        var dEditControl = null;
        var dAddEmailButton = null;
        var dAddEmailInput = null;
        var dAddPhoneButton = null;
        var dAddPhoneInput = null;
        var dEmailPillList = null;
        var dPhonePillList = null;
        var aData = aData;

        var _priv = {
            _this: null
        };

        _priv.stringReplace = function _sub_header_replace(sBase, sCount, sReplaceChar, bRemoveLast) {

            var sReturn = sBase.replace(sReplaceChar, sCount).trim();

            if (bRemoveLast) {
                sReturn = sReturn.slice(0, sReturn.length -1);
            }

            return sReturn;
        }

        _priv.newPill = function _create_new_pill(sValue, bEmail) {

            var dNewPill = document.createElement('li');

            var dNewPillWrapper = document.createElement('span');
                dNewPillWrapper.classList.add('ec-pill');

            var dNewPillTextWrapper = document.createElement('span');
                dNewPillTextWrapper.classList.add('ec-pill-item-text');
                dNewPillTextWrapper.appendChild(document.createTextNode(sValue));

            var dNewButton = document.createElement('button');
                dNewButtonText = document.createElement('span');
                dNewButtonText.innerHTML = '&times;';

                dNewButton.appendChild(dNewButtonText);

            if (bEmail) {
                dNewButton.addEventListener('click', _events.removeEmailPill);
            }
            else {
                dNewButton.addEventListener('click', _events.removePhonePill);
            }

            dNewPillWrapper.appendChild(dNewPillTextWrapper);
            dNewPillWrapper.appendChild(dNewButton);

            dNewPill.appendChild(dNewPillWrapper);

            return dNewPill;
        }

        _priv.generateShell = function(oConfig, oData, dTarget, cb) {

            let oRenderTemplate = {
                "template": "ec-manage-group-component",
                "sTitle": oConfig.sTitle,
                "aEmails": [],
                "aEmailAvaliable": [],
                "aPhones": [],
                "aPhoneAvaliable": []
            }

            if (oData.oSubscriptions[oConfig.sSubId]) {

                if (oData.oSubscriptions[oConfig.sSubId].email) {

                    // Loop through all the phones and match the appropriate bucket
                    for (var e = 0, eLen = oData.aEmailItems.length; e < eLen; e++) {

                        if (oData.oSubscriptions[oConfig.sSubId].email.indexOf(oData.aEmailItems[e].id) !== -1) {

                            oRenderTemplate.aEmails.push(oData.aEmailItems[e]);
                        }
                        else {

                            oRenderTemplate.aEmailAvaliable.push(oData.aEmailItems[e]);
                        }

                    }

                }
                else {

                    oRenderTemplate.aEmailAvaliable = [].concat(oData.aEmailItems);
                }

                if (oData.oSubscriptions[oConfig.sSubId].phone) {

                    // Loop through all the phones and match the appropriate bucket
                    for (var p = 0, pLen = oData.aPhoneItems.length; p < pLen; p++) {

                        if (oData.oSubscriptions[oConfig.sSubId].phone.indexOf(oData.aPhoneItems[p].id) !== -1) {

                            oRenderTemplate.aPhones.push(oData.aPhoneItems[p]);
                        }
                        else {

                            oRenderTemplate.aPhoneAvaliable.push(oData.aPhoneItems[p]);
                        }

                    }

                }
                else {

                    oRenderTemplate.aPhoneAvaliable = [].concat(oData.aPhoneItems);
                }

            }
            else {

                oRenderTemplate.aEmailAvaliable = [].concat(oData.aEmailItems);
                oRenderTemplate.aPhoneAvaliable = [].concat(oData.aPhoneItems);

            }

            while(dTargat.firstElementChild) {
                dTargat.removeChild(dTargat.firstElementChild);
            }

            render.section(dTarget, oRenderTemplate, 'append', function() {

                var dShortContainer = dTargat.querySelector('.ec-short-instructions');

                if (oConfig.adShortInstructions.children) {

                    while (oConfig.adShortInstructions.firstElementChild) {

                        dShortContainer.appendChild(oConfig.adShortInstructions.firstElementChild.cloneNode(true));
                        oConfig.adShortInstructions.removeChild(oConfig.adShortInstructions.firstElementChild);
                    }

                }

                var dLongContainer = dTarget.querySelector('.ec-long-instructions');

                if (oConfig.adLongInstructions.children) {

                    while (oConfig.adLongInstructions.firstElementChild) {

                        dLongContainer.appendChild(oConfig.adLongInstructions.firstElementChild.cloneNode(true));
                        oConfig.adLongInstructions.removeChild(oConfig.adLongInstructions.firstElementChild);
                    }

                }

                dTarget.classList.remove('cui-hide-from-screen');

                dActualComponent = dTargat.firstElementChild;

                // Collapse/Expand
                dEditControl = dActualComponent.querySelector('.ec-manage-edit-control');
                dEditControl.addEventListener('click', _events.clickEditLink);

                dAddEmailInput = dActualComponent.querySelector('.add-email-input');
                dAddEmailButton = dActualComponent.querySelector('.add-email-button');
                dEmailPillList = dActualComponent.querySelector('.email-subscriptions');

                dAddEmailButton.addEventListener('click', _events.clickAddEmailButton);

                var adPills = dActualComponent.querySelectorAll('.email-subscriptions .ec-pill button');

                for (var p = 0, pLen = adPills.length; p < pLen; p++) {
                    adPills[p].addEventListener('click', _events.removeEmailPill);
                }


                dAddPhoneInput = dActualComponent.querySelector('.add-phone-input');
                dAddPhoneButton = dActualComponent.querySelector('.add-phone-button');
                dPhonePillList = dActualComponent.querySelector('.phone-subscriptions');

                dAddPhoneButton.addEventListener('click', _events.clickAddPhoneButton);

                adPills = dActualComponent.querySelectorAll('.phone-subscriptions .ec-pill button');

                for (var p = 0, pLen = adPills.length; p < pLen; p++) {
                    adPills[p].addEventListener('click', _events.removePhonePill);
                }

            });

        }

        var _events = {};

        _events.clickEditLink = function _click_edit_link(evt) {

            evt.preventDefault();

            if (dActualComponent.classList.contains('emp-collapse')) {

                dActualComponent.classList.remove('emp-collapse');
                evt.target.textContent = "Close";
            }
            else {
                dActualComponent.classList.add('emp-collapse');
                evt.target.textContent = "Edit";
            }

        };

        _events.clickAddEmailButton = function _click_add_email_button(evt) {

            sValue = dAddEmailInput.value;

            if (sValue && sValue.length) {

                oSettings = {
                    fCancel: function() {
                        console.log("Do nothing!");
                    },
                    fConfirm: function() {

                        var dNewPill = _priv.newPill(sValue)

                        dEmailPillList.appendChild(dNewPill);

                        dAddEmailInput.value = "";

                        if (dEmailPillList.children.length > 1) {
                            dEmailPillList.firstElementChild.classList.add('cui-hide-from-screen');
                        }

                    }
                }

                var sEmailModal = "You are about to add a new email subscription. You should receive a welcome email shortly.";

                if (require.s.contexts._.defined['modal2']) {

                    var modal2 = require.s.contexts._.defined['modal2'];

                    var dModalContents = document.createElement('p');
                    dModalContents.appendChild(document.createTextNode(sEmailModal));

                    new modal2(evt.target, oSettings, dModalContents);

                }
                else {

                    emp.load('modal2', function(modal2) {

                        var dModalContents = document.createElement('p');
                        dModalContents.appendChild(document.createTextNode(sEmailModal));

                        new modal2(evt.target, oSettings, dModalContents);

                    })

                }

            }

        };

        _events.clickAddPhoneButton = function _click_add_phone_button(evt) {

            sValue = dAddPhoneInput.value;

            if (sValue && sValue.length) {

                oSettings = {
                    fCancel: function() {
                        console.log("Do nothing!");
                    },
                    fConfirm: function() {

                        var dNewPill = _priv.newPill(sValue)

                        dPhonePillList.appendChild(dNewPill);

                        dAddPhoneInput.value = "";

                        if (dPhonePillList.children.length > 1) {
                            dPhonePillList.firstElementChild.classList.add('cui-hide-from-screen');
                        }

                    }
                }

                var sPhoneModal = "By adding this phone subscription you agree to receive SMS reminders sent to this phone number " + dAddPhoneInput.value + ". Data rates and fees may apply. A confirmation will be sent after subscription is added.";

                if (require.s.contexts._.defined['modal2']) {

                    var modal2 = require.s.contexts._.defined['modal2'];

                    var dModalContents = document.createElement('p');
                    dModalContents.appendChild(document.createTextNode(sPhoneModal));

                    new modal2(evt.target, oSettings, dModalContents);

                }
                else {

                    emp.load('modal2', function(modal2) {

                        var dModalContents = document.createElement('p');
                        dModalContents.appendChild(document.createTextNode(sPhoneModal));

                        new modal2(evt.target, oSettings, dModalContents);

                    })

                }

            }

        };

        _events.removeEmailPill = function _click_remove_email_pill(evt) {

            var dCurrentElem = null;
            var dRemoveTarget = null;
            var dRemoveLIElem = null;
            var sPillText = null;
            var dPillList = null;
            var bContinue = false;

            dCurrentElem = evt.target;

            while (true) {

                if (dCurrentElem && dCurrentElem.nodeName === "body") {
                    break;
                }

                if (bContinue === true) {
                    break;
                }

                // Choice what we are looking for
                if (!dRemoveTarget) {

                    if (dCurrentElem.nodeName !== "BUTTON") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dRemoveTarget = dCurrentElem;

                        sPillText = dRemoveTarget.previousElementSibling.textContent.trim();
                    }

                }
                else if (!dRemoveLIElem) {

                    if (dCurrentElem.nodeName !== "LI") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dRemoveLIElem = dCurrentElem;
                    }

                }
                else if (!dPillList) {

                    if (dCurrentElem.nodeName !== "UL") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dPillList = dCurrentElem;
                        bContinue = true;
                    }

                }

            }

            if (bContinue) {

                oSettings = {
                    fCancel: function() {
                        console.log("Do nothing!");
                    },
                    fConfirm: function() {

                        dEmailPillList.removeChild(dRemoveLIElem);

                        if (dEmailPillList.children.length === 1) {
                            dEmailPillList.firstElementChild.classList.remove('cui-hide-from-screen');
                        }
                    }
                }

                var sRemoveMessage = "Are you sure you want to discontunue your subscription with: " + sPillText + "?";

                if (require.s.contexts._.defined['modal2']) {

                    var modal2 = require.s.contexts._.defined['modal2'];

                    var dModalContents = document.createElement('p');
                    dModalContents.appendChild(document.createTextNode(sRemoveMessage));

                    new modal2(evt.target, oSettings, dModalContents);

                }
                else {

                    emp.load('modal2', function(modal2) {

                        var dModalContents = document.createElement('p');
                        dModalContents.appendChild(document.createTextNode(sRemoveMessage));

                        new modal2(evt.target, oSettings, dModalContents);

                    })

                }

            }

        };

        _events.removePhonePill = function _click_remove_phone_pill(evt) {

            var dCurrentElem = null;
            var dRemoveTarget = null;
            var dRemoveLIElem = null;
            var sPillText = null;
            var dPillList = null;
            var bContinue = false;

            dCurrentElem = evt.target;

            while (true) {

                if (dCurrentElem && dCurrentElem.nodeName === "body") {
                    break;
                }

                if (bContinue === true) {
                    break;
                }

                // Choice what we are looking for
                if (!dRemoveTarget) {

                    if (dCurrentElem.nodeName !== "BUTTON") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dRemoveTarget = dCurrentElem;

                        sPillText = dRemoveTarget.previousElementSibling.textContent.trim();
                    }

                }
                else if (!dRemoveLIElem) {

                    if (dCurrentElem.nodeName !== "LI") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dRemoveLIElem = dCurrentElem;
                    }

                }
                else if (!dPillList) {

                    if (dCurrentElem.nodeName !== "UL") {
                        dCurrentElem = dCurrentElem.parentNode;
                    }
                    else {
                        dPillList = dCurrentElem;
                        bContinue = true;
                    }

                }

            }

            if (bContinue) {

                oSettings = {
                    fCancel: function() {
                        console.log("Do nothing!");
                    },
                    fConfirm: function() {

                        dEmailPillList.removeChild(dRemoveLIElem);

                        if (dEmailPillList.children.length === 1) {
                            dEmailPillList.firstElementChild.classList.remove('cui-hide-from-screen');
                        }
                    }
                }

                var sRemoveMessage = "Are you sure you want to discontunue your subscription with: " + sPillText + "?";

                if (require.s.contexts._.defined['modal2']) {

                    var modal2 = require.s.contexts._.defined['modal2'];

                    var dModalContents = document.createElement('p');
                    dModalContents.appendChild(document.createTextNode(sRemoveMessage));

                    new modal2(evt.target, oSettings, dModalContents);

                }
                else {

                    emp.load('modal2', function(modal2) {

                        var dModalContents = document.createElement('p');
                        dModalContents.appendChild(document.createTextNode(sRemoveMessage));

                        new modal2(evt.target, oSettings, dModalContents);

                    })

                }

            }

        };

        _priv.generateShell(oConfig, oData, dTargat);


        return dActualComponent;

    }

    var init = function init(oData, fCB) {

        var adSubscriptions = document.querySelectorAll('#subscriptions .ec-sub-component-source');

        for (var s = 0, sLen = adSubscriptions.length; s < sLen; s++) {

            var sSubId = adSubscriptions[s].getAttribute('id');

            var dShortSection = adSubscriptions[s].querySelector(".ec-short-section");
            var dLongSection = adSubscriptions[s].querySelector(".ec-long-section");

            if (dShortSection && dLongSection) {

                var oConfig = {
                    sTitle: dLongSection.querySelector('header .emp-section-title h3').textContent,
                    adLongInstructions: dLongSection.querySelector('.emp-section-instructions').cloneNode(true),
                    adShortInstructions: dShortSection.querySelector('.emp-section-instructions').cloneNode(true),
                    sSubId: sSubId
                }

                new ecManageGroupComp(oConfig, oData, adSubscriptions[s]);
            }

        }

    };

    return {
        init: init
    };

});

/* Detect-zoom
 * -----------
 * Cross Browser Zoom and Pixel Ratio Detector
 * Version 1.0.0 | Feb 5 2013
 * dual-licensed under the WTFPL and MIT license
 * Maintained by https://github/tombigel
 * Original developer https://github.com/yonran
 */

//AMD and CommonJS initialization copied from https://github.com/zohararad/audio5js
(function (root, ns, factory) {
    "use strict";

    if (typeof (module) !== 'undefined' && module.exports) { // CommonJS
        module.exports = factory(ns, root);
    } else if (typeof (define) === 'function' && define.amd) { // AMD
        define('detectZoom',[],function () {
            return factory(ns, root);
        });
    } else {
        root[ns] = factory(ns, root);
    }

}(window, 'detectZoom', function () {

    /**
     * Use devicePixelRatio if supported by the browser
     * @return {Number}
     * @private
     */
    var devicePixelRatio = function () {
        return window.devicePixelRatio || 1;
    };

    /**
     * Fallback function to set default values
     * @return {Object}
     * @private
     */
    var fallback = function () {
        return {
            zoom: 1,
            devicePxPerCssPx: 1
        };
    };
    /**
     * IE 8+: no trick needed!
     * TODO: Test on IE10 and Windows 8 RT
     * @return {Object}
     * @private
     **/
    var ie8 = function () {
        var zoom = Math.round((screen.deviceXDPI / screen.logicalXDPI) * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Mobile WebKit
     * the trick: window.innerWIdth is in CSS pixels, while
     * screen.width and screen.height are in system pixels.
     * And there are no scrollbars to mess up the measurement.
     * @return {Object}
     * @private
     */
    var webkitMobile = function () {
        var deviceWidth = (Math.abs(window.orientation) == 90) ? screen.height : screen.width;
        var zoom = deviceWidth / window.innerWidth;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Desktop Webkit
     * the trick: an element's clientHeight is in CSS pixels, while you can
     * set its line-height in system pixels using font-size and
     * -webkit-text-size-adjust:none.
     * device-pixel-ratio: http://www.webkit.org/blog/55/high-dpi-web-sites/
     *
     * Previous trick (used before http://trac.webkit.org/changeset/100847):
     * documentElement.scrollWidth is in CSS pixels, while
     * document.width was in system pixels. Note that this is the
     * layout width of the document, which is slightly different from viewport
     * because document width does not include scrollbars and might be wider
     * due to big elements.
     * @return {Object}
     * @private
     */
    var webkit = function () {
        var important = function (str) {
            return str.replace(/;/g, " !important;");
        };

        var div = document.createElement('div');
        div.innerHTML = "1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0";
        div.setAttribute('style', important('font: 100px/1em sans-serif; -webkit-text-size-adjust: none; height: auto; width: 1em; padding: 0; overflow: visible;'));

        // The container exists so that the div will be laid out in its own flow
        // while not impacting the layout, viewport size, or display of the
        // webpage as a whole.
        // Add !important and relevant CSS rule resets
        // so that other rules cannot affect the results.
        var container = document.createElement('div');
        container.setAttribute('style', important('width:0; height:0; overflow:hidden; visibility:hidden; position: absolute;'));
        container.appendChild(div);

        document.body.appendChild(container);
        var zoom = 1000 / div.clientHeight;
        zoom = Math.round(zoom * 100) / 100;
        document.body.removeChild(container);

        return{
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * no real trick; device-pixel-ratio is the ratio of device dpi / css dpi.
     * (Note that this is a different interpretation than Webkit's device
     * pixel ratio, which is the ratio device dpi / system dpi).
     *
     * Also, for Mozilla, there is no difference between the zoom factor and the device ratio.
     *
     * @return {Object}
     * @private
     */
    var firefox4 = function () {
        var zoom = mediaQueryBinarySearch('min--moz-device-pixel-ratio', '', 0, 10, 20, 0.0001);
        zoom = Math.round(zoom * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom
        };
    };

    /**
     * Firefox 18.x
     * Mozilla added support for devicePixelRatio to Firefox 18,
     * but it is affected by the zoom level, so, like in older
     * Firefox we can't tell if we are in zoom mode or in a device
     * with a different pixel ratio
     * @return {Object}
     * @private
     */
    var firefox18 = function () {
        return {
            zoom: firefox4().zoom,
            devicePxPerCssPx: devicePixelRatio()
        };
    };

    /**
     * works starting Opera 11.11
     * the trick: outerWidth is the viewport width including scrollbars in
     * system px, while innerWidth is the viewport width including scrollbars
     * in CSS px
     * @return {Object}
     * @private
     */
    var opera11 = function () {
        var zoom = window.outerWidth / window.innerWidth;
        zoom = Math.round(zoom * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Use a binary search through media queries to find zoom level in Firefox
     * @param property
     * @param unit
     * @param a
     * @param b
     * @param maxIter
     * @param epsilon
     * @return {Number}
     */
    var mediaQueryBinarySearch = function (property, unit, a, b, maxIter, epsilon) {
        var matchMedia;
        var head, style, div;
        if (window.matchMedia) {
            matchMedia = window.matchMedia;
        } else {
            head = document.getElementsByTagName('head')[0];
            style = document.createElement('style');
            head.appendChild(style);

            div = document.createElement('div');
            div.className = 'mediaQueryBinarySearch';
            div.style.display = 'none';
            document.body.appendChild(div);

            matchMedia = function (query) {
                style.sheet.insertRule('@media ' + query + '{.mediaQueryBinarySearch ' + '{text-decoration: underline} }', 0);
                var matched = getComputedStyle(div, null).textDecoration == 'underline';
                style.sheet.deleteRule(0);
                return {matches: matched};
            };
        }
        var ratio = binarySearch(a, b, maxIter);
        if (div) {
            head.removeChild(style);
            document.body.removeChild(div);
        }
        return ratio;

        function binarySearch(a, b, maxIter) {
            var mid = (a + b) / 2;
            if (maxIter <= 0 || b - a < epsilon) {
                return mid;
            }
            var query = "(" + property + ":" + mid + unit + ")";
            if (matchMedia(query).matches) {
                return binarySearch(mid, b, maxIter - 1);
            } else {
                return binarySearch(a, mid, maxIter - 1);
            }
        }
    };

    /**
     * Generate detection function
     * @private
     */
    var detectFunction = (function () {
        var func = fallback;
        //IE8+
        if (!isNaN(screen.logicalXDPI) && !isNaN(screen.systemXDPI)) {
            func = ie8;
        }
        //Mobile Webkit
        else if ('ontouchstart' in window && typeof document.body.style.webkitTextSizeAdjust === 'string') {
            func = webkitMobile;
        }
        //WebKit
        else if (typeof document.body.style.webkitTextSizeAdjust === 'string') {
            func = webkit;
        }
        //Opera
        else if (navigator.userAgent.indexOf('Opera') >= 0) {
            func = opera11;
        }
        //Last one is Firefox
        //FF 18.x
        else if (window.devicePixelRatio) {
            func = firefox18;
        }
        //FF 4.0 - 17.x
        else if (firefox4().zoom > 0.001) {
            func = firefox4;
        }

        return func;
    }());


    return ({

        /**
         * Ratios.zoom shorthand
         * @return {Number} Zoom level
         */
        zoom: function () {
            return detectFunction().zoom;
        },

        /**
         * Ratios.devicePxPerCssPx shorthand
         * @return {Number} devicePxPerCssPx level
         */
        device: function () {
            return detectFunction().devicePxPerCssPx;
        }
    });
}));


(function(self) {
    'use strict';
  
    if (self.fetch) {
      return
    }
  
    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && (function() {
        try {
          new Blob()
          return true
        } catch(e) {
          return false
        }
      })(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    }
  
    if (support.arrayBuffer) {
      var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
      ]
  
      var isDataView = function(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj)
      }
  
      var isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      }
    }
  
    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name)
      }
      if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name')
      }
      return name.toLowerCase()
    }
  
    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value)
      }
      return value
    }
  
    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function() {
          var value = items.shift()
          return {done: value === undefined, value: value}
        }
      }
  
      if (support.iterable) {
        iterator[Symbol.iterator] = function() {
          return iterator
        }
      }
  
      return iterator
    }
  
    function Headers(headers) {
      this.map = {}
  
      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value)
        }, this)
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          this.append(header[0], header[1])
        }, this)
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name])
        }, this)
      }
    }
  
    Headers.prototype.append = function(name, value) {
      name = normalizeName(name)
      value = normalizeValue(value)
      var oldValue = this.map[name]
      this.map[name] = oldValue ? oldValue+','+value : value
    }
  
    Headers.prototype['delete'] = function(name) {
      delete this.map[normalizeName(name)]
    }
  
    Headers.prototype.get = function(name) {
      name = normalizeName(name)
      return this.has(name) ? this.map[name] : null
    }
  
    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name))
    }
  
    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value)
    }
  
    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this)
        }
      }
    }
  
    Headers.prototype.keys = function() {
      var items = []
      this.forEach(function(value, name) { items.push(name) })
      return iteratorFor(items)
    }
  
    Headers.prototype.values = function() {
      var items = []
      this.forEach(function(value) { items.push(value) })
      return iteratorFor(items)
    }
  
    Headers.prototype.entries = function() {
      var items = []
      this.forEach(function(value, name) { items.push([name, value]) })
      return iteratorFor(items)
    }
  
    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries
    }
  
    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'))
      }
      body.bodyUsed = true
    }
  
    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result)
        }
        reader.onerror = function() {
          reject(reader.error)
        }
      })
    }
  
    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader()
      var promise = fileReaderReady(reader)
      reader.readAsArrayBuffer(blob)
      return promise
    }
  
    function readBlobAsText(blob) {
      var reader = new FileReader()
      var promise = fileReaderReady(reader)
      reader.readAsText(blob)
      return promise
    }
  
    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf)
      var chars = new Array(view.length)
  
      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i])
      }
      return chars.join('')
    }
  
    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0)
      } else {
        var view = new Uint8Array(buf.byteLength)
        view.set(new Uint8Array(buf))
        return view.buffer
      }
    }
  
    function Body() {
      this.bodyUsed = false
  
      this._initBody = function(body) {
        this._bodyInit = body
        if (!body) {
          this._bodyText = ''
        } else if (typeof body === 'string') {
          this._bodyText = body
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString()
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer)
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer])
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body)
        } else {
          throw new Error('unsupported BodyInit type')
        }
  
        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8')
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type)
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
          }
        }
      }
  
      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this)
          if (rejected) {
            return rejected
          }
  
          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob')
          } else {
            return Promise.resolve(new Blob([this._bodyText]))
          }
        }
  
        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
          } else {
            return this.blob().then(readBlobAsArrayBuffer)
          }
        }
      }
  
      this.text = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }
  
        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      }
  
      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode)
        }
      }
  
      this.json = function() {
        return this.text().then(JSON.parse)
      }
  
      return this
    }
  
    // HTTP methods whose capitalization should be normalized
    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
  
    function normalizeMethod(method) {
      var upcased = method.toUpperCase()
      return (methods.indexOf(upcased) > -1) ? upcased : method
    }
  
    function Request(input, options) {
      options = options || {}
      var body = options.body
  
      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read')
        }
        this.url = input.url
        this.credentials = input.credentials
        if (!options.headers) {
          this.headers = new Headers(input.headers)
        }
        this.method = input.method
        this.mode = input.mode
        if (!body && input._bodyInit != null) {
          body = input._bodyInit
          input.bodyUsed = true
        }
      } else {
        this.url = String(input)
      }
  
      this.credentials = options.credentials || this.credentials || 'omit'
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers)
      }
      this.method = normalizeMethod(options.method || this.method || 'GET')
      this.mode = options.mode || this.mode || null
      this.referrer = null
  
      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests')
      }
      this._initBody(body)
    }
  
    Request.prototype.clone = function() {
      return new Request(this, { body: this._bodyInit })
    }
  
    function decode(body) {
      var form = new FormData()
      body.trim().split('&').forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=')
          var name = split.shift().replace(/\+/g, ' ')
          var value = split.join('=').replace(/\+/g, ' ')
          form.append(decodeURIComponent(name), decodeURIComponent(value))
        }
      })
      return form
    }
  
    function parseHeaders(rawHeaders) {
      var headers = new Headers()
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
      preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
        var parts = line.split(':')
        var key = parts.shift().trim()
        if (key) {
          var value = parts.join(':').trim()
          headers.append(key, value)
        }
      })
      return headers
    }
  
    Body.call(Request.prototype)
  
    function Response(bodyInit, options) {
      if (!options) {
        options = {}
      }
  
      this.type = 'default'
      this.status = options.status === undefined ? 200 : options.status
      this.ok = this.status >= 200 && this.status < 300
      this.statusText = 'statusText' in options ? options.statusText : 'OK'
      this.headers = new Headers(options.headers)
      this.url = options.url || ''
      this._initBody(bodyInit)
    }
  
    Body.call(Response.prototype)
  
    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      })
    }
  
    Response.error = function() {
      var response = new Response(null, {status: 0, statusText: ''})
      response.type = 'error'
      return response
    }
  
    var redirectStatuses = [301, 302, 303, 307, 308]
  
    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code')
      }
  
      return new Response(null, {status: status, headers: {location: url}})
    }
  
    self.Headers = Headers
    self.Request = Request
    self.Response = Response
  
    self.fetch = function(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init)
        var xhr = new XMLHttpRequest()
  
        xhr.onload = function() {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          }
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
          var body = 'response' in xhr ? xhr.response : xhr.responseText
          resolve(new Response(body, options))
        }
  
        xhr.onerror = function() {
          reject(new TypeError('Network request failed'))
        }
  
        xhr.ontimeout = function() {
          reject(new TypeError('Network request failed'))
        }
  
        xhr.open(request.method, request.url, true)
  
        if (request.credentials === 'include') {
          xhr.withCredentials = true
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false
        }
  
        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob'
        }
  
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value)
        })
  
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
      })
    }
    self.fetch.polyfill = true
  })(typeof self !== 'undefined' ? self : this);
define("fetch", function(){});

// Found at http://stackoverflow.com/a/6416477/348995
/*
 * getStyleObject Plugin for jQuery JavaScript Library
 * From: http://upshots.org/?p=112
 *
 * Copyright: Unknown, see source link
 * Plugin version by Dakota Schneider (http://hackthetruth.org)
 */
(function ($){
    $.fn.getStyleObject = function () {
        var dom = this.get(0);
        var style;
        var returns = {};

        if (window.getComputedStyle) {
            var camelize = function (a, b) {
                return b.toUpperCase();
            }

            style = window.getComputedStyle(dom, null);

            for (var i = 0; i < style.length; i++){
                var prop = style[i];
                var camel = prop.replace(/\-([a-z])/g, camelize);
                var val = style.getPropertyValue(prop);
                returns[camel] = val;
            }

            return returns;
        }

        if (dom.currentStyle){
            style = dom.currentStyle;

            for (var prop in style) {
                returns[prop] = style[prop];
            }

            return returns;
        }
        return this.css();
    }
}(jQuery));

define("getStyleObject", function(){});

/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript */
var _self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{},Prism=function(){var e=/\blang(?:uage)?-(\w+)\b/i,t=0,n=_self.Prism={util:{encode:function(e){return e instanceof a?new a(e.type,n.util.encode(e.content),e.alias):"Array"===n.util.type(e)?e.map(n.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).match(/\[object (\w+)\]/)[1]},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function(e){var t=n.util.type(e);switch(t){case"Object":var a={};for(var r in e)e.hasOwnProperty(r)&&(a[r]=n.util.clone(e[r]));return a;case"Array":return e.map&&e.map(function(e){return n.util.clone(e)})}return e}},languages:{extend:function(e,t){var a=n.util.clone(n.languages[e]);for(var r in t)a[r]=t[r];return a},insertBefore:function(e,t,a,r){r=r||n.languages;var l=r[e];if(2==arguments.length){a=arguments[1];for(var i in a)a.hasOwnProperty(i)&&(l[i]=a[i]);return l}var o={};for(var s in l)if(l.hasOwnProperty(s)){if(s==t)for(var i in a)a.hasOwnProperty(i)&&(o[i]=a[i]);o[s]=l[s]}return n.languages.DFS(n.languages,function(t,n){n===r[e]&&t!=e&&(this[t]=o)}),r[e]=o},DFS:function(e,t,a,r){r=r||{};for(var l in e)e.hasOwnProperty(l)&&(t.call(e,l,e[l],a||l),"Object"!==n.util.type(e[l])||r[n.util.objId(e[l])]?"Array"!==n.util.type(e[l])||r[n.util.objId(e[l])]||(r[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,l,r)):(r[n.util.objId(e[l])]=!0,n.languages.DFS(e[l],t,null,r)))}},plugins:{},highlightAll:function(e,t){var a={callback:t,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};n.hooks.run("before-highlightall",a);for(var r,l=a.elements||document.querySelectorAll(a.selector),i=0;r=l[i++];)n.highlightElement(r,e===!0,a.callback)},highlightElement:function(t,a,r){for(var l,i,o=t;o&&!e.test(o.className);)o=o.parentNode;o&&(l=(o.className.match(e)||[,""])[1],i=n.languages[l]),t.className=t.className.replace(e,"").replace(/\s+/g," ")+" language-"+l,o=t.parentNode,/pre/i.test(o.nodeName)&&(o.className=o.className.replace(e,"").replace(/\s+/g," ")+" language-"+l);var s=t.textContent,u={element:t,language:l,grammar:i,code:s};if(!s||!i)return n.hooks.run("complete",u),void 0;if(n.hooks.run("before-highlight",u),a&&_self.Worker){var c=new Worker(n.filename);c.onmessage=function(e){u.highlightedCode=e.data,n.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r&&r.call(u.element),n.hooks.run("after-highlight",u),n.hooks.run("complete",u)},c.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else u.highlightedCode=n.highlight(u.code,u.grammar,u.language),n.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r&&r.call(t),n.hooks.run("after-highlight",u),n.hooks.run("complete",u)},highlight:function(e,t,r){var l=n.tokenize(e,t);return a.stringify(n.util.encode(l),r)},tokenize:function(e,t){var a=n.Token,r=[e],l=t.rest;if(l){for(var i in l)t[i]=l[i];delete t.rest}e:for(var i in t)if(t.hasOwnProperty(i)&&t[i]){var o=t[i];o="Array"===n.util.type(o)?o:[o];for(var s=0;s<o.length;++s){var u=o[s],c=u.inside,g=!!u.lookbehind,h=!!u.greedy,f=0,d=u.alias;u=u.pattern||u;for(var p=0;p<r.length;p++){var m=r[p];if(r.length>e.length)break e;if(!(m instanceof a)){u.lastIndex=0;var y=u.exec(m),v=1;if(!y&&h&&p!=r.length-1){var b=r[p+1].matchedStr||r[p+1],k=m+b;if(p<r.length-2&&(k+=r[p+2].matchedStr||r[p+2]),u.lastIndex=0,y=u.exec(k),!y)continue;var w=y.index+(g?y[1].length:0);if(w>=m.length)continue;var _=y.index+y[0].length,P=m.length+b.length;if(v=3,P>=_){if(r[p+1].greedy)continue;v=2,k=k.slice(0,P)}m=k}if(y){g&&(f=y[1].length);var w=y.index+f,y=y[0].slice(f),_=w+y.length,S=m.slice(0,w),O=m.slice(_),j=[p,v];S&&j.push(S);var A=new a(i,c?n.tokenize(y,c):y,d,y,h);j.push(A),O&&j.push(O),Array.prototype.splice.apply(r,j)}}}}}return r},hooks:{all:{},add:function(e,t){var a=n.hooks.all;a[e]=a[e]||[],a[e].push(t)},run:function(e,t){var a=n.hooks.all[e];if(a&&a.length)for(var r,l=0;r=a[l++];)r(t)}}},a=n.Token=function(e,t,n,a,r){this.type=e,this.content=t,this.alias=n,this.matchedStr=a||null,this.greedy=!!r};if(a.stringify=function(e,t,r){if("string"==typeof e)return e;if("Array"===n.util.type(e))return e.map(function(n){return a.stringify(n,t,e)}).join("");var l={type:e.type,content:a.stringify(e.content,t,r),tag:"span",classes:["token",e.type],attributes:{},language:t,parent:r};if("comment"==l.type&&(l.attributes.spellcheck="true"),e.alias){var i="Array"===n.util.type(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(l.classes,i)}n.hooks.run("wrap",l);var o="";for(var s in l.attributes)o+=(o?" ":"")+s+'="'+(l.attributes[s]||"")+'"';return"<"+l.tag+' class="'+l.classes.join(" ")+'" '+o+">"+l.content+"</"+l.tag+">"},!_self.document)return _self.addEventListener?(_self.addEventListener("message",function(e){var t=JSON.parse(e.data),a=t.language,r=t.code,l=t.immediateClose;_self.postMessage(n.highlight(r,n.languages[a],a)),l&&_self.close()},!1),_self.Prism):_self.Prism;var r=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return r&&(n.filename=r.src,document.addEventListener&&!r.hasAttribute("data-manual")&&document.addEventListener("DOMContentLoaded",n.highlightAll)),_self.Prism}();"undefined"!=typeof module&&module.exports&&(module.exports=Prism),"undefined"!=typeof global&&(global.Prism=Prism);
Prism.languages.markup={comment:/<!--[\w\W]*?-->/,prolog:/<\?[\w\W]+?\?>/,doctype:/<!DOCTYPE[\w\W]+?>/,cdata:/<!\[CDATA\[[\w\W]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=.$<]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,inside:{punctuation:/[=>"']/}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},Prism.hooks.add("wrap",function(a){"entity"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,"&"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;
Prism.languages.css={comment:/\/\*[\w\W]*?\*\//,atrule:{pattern:/@[\w-]+?.*?(;|(?=\s*\{))/i,inside:{rule:/@[\w-]+/}},url:/url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,selector:/[^\{\}\s][^\{\};]*?(?=\s*\{)/,string:/("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/,property:/(\b|\B)[\w-]+(?=\s*:)/i,important:/\B!important\b/i,"function":/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.util.clone(Prism.languages.css),Prism.languages.markup&&(Prism.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\w\W]*?>)[\w\W]*?(?=<\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:"language-css"}}),Prism.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|').*?\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:Prism.languages.css}},alias:"language-css"}},Prism.languages.markup.tag));
Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\w\W]*?\*\//,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0}],string:{pattern:/(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,lookbehind:!0,inside:{punctuation:/(\.|\\)/}},keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,"boolean":/\b(true|false)\b/,"function":/[a-z0-9_]+(?=\()/i,number:/\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/};
Prism.languages.javascript=Prism.languages.extend("clike",{keyword:/\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b/,number:/\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,"function":/[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i}),Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/(^|[^\/])\/(?!\/)(\[.+?]|\\.|[^\/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,lookbehind:!0,greedy:!0}}),Prism.languages.insertBefore("javascript","class-name",{"template-string":{pattern:/`(?:\\\\|\\?[^\\])*?`/,greedy:!0,inside:{interpolation:{pattern:/\$\{[^}]+\}/,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:Prism.languages.javascript}},string:/[\s\S]+/}}}),Prism.languages.markup&&Prism.languages.insertBefore("markup","tag",{script:{pattern:/(<script[\w\W]*?>)[\w\W]*?(?=<\/script>)/i,lookbehind:!0,inside:Prism.languages.javascript,alias:"language-javascript"}}),Prism.languages.js=Prism.languages.javascript;

define("prism", function(){});

/**!
 * Sortable
 * @author  RubaXa   <trash@rubaxa.org>
 * @license MIT
 * @version 1.4.2
 *
 * https://github.com/RubaXa/Sortable
 * Downloaded 1/20/2016
 */

(function (factory) {
    "use strict";

    if (typeof define === "function" && define.amd) {
        define('sortable',factory);
    }
    else if (typeof module != "undefined" && typeof module.exports != "undefined") {
        module.exports = factory();
    }
    else if (typeof Package !== "undefined") {
        Sortable = factory();  // export for Meteor.js
    }
    else {
        /* jshint sub:true */
        window["Sortable"] = factory();
    }
})(function () {
    "use strict";

    if (typeof window == "undefined" || typeof window.document == "undefined") {
        return function() {
            throw new Error( "Sortable.js requires a window with a document" );
        }
    }

    var dragEl,
        parentEl,
        ghostEl,
        cloneEl,
        rootEl,
        nextEl,

        scrollEl,
        scrollParentEl,

        lastEl,
        lastCSS,
        lastParentCSS,

        oldIndex,
        newIndex,

        activeGroup,
        autoScroll = {},

        tapEvt,
        touchEvt,

        moved,

        /** @const */
        RSPACE = /\s+/g,

        expando = 'Sortable' + (new Date).getTime(),

        win = window,
        document = win.document,
        parseInt = win.parseInt,

        supportDraggable = !!('draggable' in document.createElement('div')),
        supportCssPointerEvents = (function (el) {
            el = document.createElement('x');
            el.style.cssText = 'pointer-events:auto';
            return el.style.pointerEvents === 'auto';
        })(),

        _silent = false,

        abs = Math.abs,
        slice = [].slice,

        touchDragOverListeners = [],

        _autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {
            // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
            if (rootEl && options.scroll) {
                var el,
                    rect,
                    sens = options.scrollSensitivity,
                    speed = options.scrollSpeed,

                    x = evt.clientX,
                    y = evt.clientY,

                    winWidth = window.innerWidth,
                    winHeight = window.innerHeight,

                    vx,
                    vy
                ;

                // Delect scrollEl
                if (scrollParentEl !== rootEl) {
                    scrollEl = options.scroll;
                    scrollParentEl = rootEl;

                    if (scrollEl === true) {
                        scrollEl = rootEl;

                        do {
                            if ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||
                                (scrollEl.offsetHeight < scrollEl.scrollHeight)
                            ) {
                                break;
                            }
                            /* jshint boss:true */
                        } while (scrollEl = scrollEl.parentNode);
                    }
                }

                if (scrollEl) {
                    el = scrollEl;
                    rect = scrollEl.getBoundingClientRect();
                    vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
                    vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
                }


                if (!(vx || vy)) {
                    vx = (winWidth - x <= sens) - (x <= sens);
                    vy = (winHeight - y <= sens) - (y <= sens);

                    /* jshint expr:true */
                    (vx || vy) && (el = win);
                }


                if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
                    autoScroll.el = el;
                    autoScroll.vx = vx;
                    autoScroll.vy = vy;

                    clearInterval(autoScroll.pid);

                    if (el) {
                        autoScroll.pid = setInterval(function () {
                            if (el === win) {
                                win.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);
                            } else {
                                vy && (el.scrollTop += vy * speed);
                                vx && (el.scrollLeft += vx * speed);
                            }
                        }, 24);
                    }
                }
            }
        }, 30),

        _prepareGroup = function (options) {
            var group = options.group;

            if (!group || typeof group != 'object') {
                group = options.group = {name: group};
            }

            ['pull', 'put'].forEach(function (key) {
                if (!(key in group)) {
                    group[key] = true;
                }
            });

            options.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';
        }
    ;



    /**
     * @class  Sortable
     * @param  {HTMLElement}  el
     * @param  {Object}       [options]
     */
    function Sortable(el, options) {
        if (!(el && el.nodeType && el.nodeType === 1)) {
            throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
        }

        this.el = el; // root element
        this.options = options = _extend({}, options);


        // Export instance
        el[expando] = this;


        // Default options
        var defaults = {
            group: Math.random(),
            sort: true,
            disabled: false,
            store: null,
            handle: null,
            scroll: true,
            scrollSensitivity: 30,
            scrollSpeed: 10,
            draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            ignore: 'a, img',
            filter: null,
            animation: 0,
            setData: function (dataTransfer, dragEl) {
                dataTransfer.setData('Text', dragEl.textContent);
            },
            dropBubble: false,
            dragoverBubble: false,
            dataIdAttr: 'data-id',
            delay: 0,
            forceFallback: false,
            fallbackClass: 'sortable-fallback',
            fallbackOnBody: false
        };


        // Set default options
        for (var name in defaults) {
            !(name in options) && (options[name] = defaults[name]);
        }

        _prepareGroup(options);

        // Bind all private methods
        for (var fn in this) {
            if (fn.charAt(0) === '_') {
                this[fn] = this[fn].bind(this);
            }
        }

        // Setup drag mode
        this.nativeDraggable = options.forceFallback ? false : supportDraggable;

        // Bind events
        _on(el, 'mousedown', this._onTapStart);
        _on(el, 'touchstart', this._onTapStart);

        if (this.nativeDraggable) {
            _on(el, 'dragover', this);
            _on(el, 'dragenter', this);
        }

        touchDragOverListeners.push(this._onDragOver);

        // Restore sorting
        options.store && this.sort(options.store.get(this));
    }


    Sortable.prototype = /** @lends Sortable.prototype */ {
        constructor: Sortable,

        _onTapStart: function (/** Event|TouchEvent */evt) {
            var _this = this,
                el = this.el,
                options = this.options,
                type = evt.type,
                touch = evt.touches && evt.touches[0],
                target = (touch || evt).target,
                originalTarget = target,
                filter = options.filter;


            if (type === 'mousedown' && evt.button !== 0 || options.disabled) {
                return; // only left button or enabled
            }

            target = _closest(target, options.draggable, el);

            if (!target) {
                return;
            }

            // get the index of the dragged element within its parent
            oldIndex = _index(target, options.draggable);

            // Check filter
            if (typeof filter === 'function') {
                if (filter.call(this, evt, target, this)) {
                    _dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);
                    evt.preventDefault();
                    return; // cancel dnd
                }
            }
            else if (filter) {
                filter = filter.split(',').some(function (criteria) {
                    criteria = _closest(originalTarget, criteria.trim(), el);

                    if (criteria) {
                        _dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);
                        return true;
                    }
                });

                if (filter) {
                    evt.preventDefault();
                    return; // cancel dnd
                }
            }


            if (options.handle && !_closest(originalTarget, options.handle, el)) {
                return;
            }


            // Prepare `dragstart`
            this._prepareDragStart(evt, touch, target);
        },

        _prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target) {
            var _this = this,
                el = _this.el,
                options = _this.options,
                ownerDocument = el.ownerDocument,
                dragStartFn;

            if (target && !dragEl && (target.parentNode === el)) {
                tapEvt = evt;

                rootEl = el;
                dragEl = target;
                parentEl = dragEl.parentNode;
                nextEl = dragEl.nextSibling;
                activeGroup = options.group;

                dragStartFn = function () {
                    // Delayed drag has been triggered
                    // we can re-enable the events: touchmove/mousemove
                    _this._disableDelayedDrag();

                    // Make the element draggable
                    dragEl.draggable = true;

                    // Chosen item
                    _toggleClass(dragEl, _this.options.chosenClass, true);

                    // Bind the events: dragstart/dragend
                    _this._triggerDragStart(touch);
                };

                // Disable "draggable"
                options.ignore.split(',').forEach(function (criteria) {
                    _find(dragEl, criteria.trim(), _disableDraggable);
                });

                _on(ownerDocument, 'mouseup', _this._onDrop);
                _on(ownerDocument, 'touchend', _this._onDrop);
                _on(ownerDocument, 'touchcancel', _this._onDrop);

                if (options.delay) {
                    // If the user moves the pointer or let go the click or touch
                    // before the delay has been reached:
                    // disable the delayed drag
                    _on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
                    _on(ownerDocument, 'touchend', _this._disableDelayedDrag);
                    _on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
                    _on(ownerDocument, 'mousemove', _this._disableDelayedDrag);
                    _on(ownerDocument, 'touchmove', _this._disableDelayedDrag);

                    _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
                } else {
                    dragStartFn();
                }
            }
        },

        _disableDelayedDrag: function () {
            var ownerDocument = this.el.ownerDocument;

            clearTimeout(this._dragStartTimer);
            _off(ownerDocument, 'mouseup', this._disableDelayedDrag);
            _off(ownerDocument, 'touchend', this._disableDelayedDrag);
            _off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
            _off(ownerDocument, 'mousemove', this._disableDelayedDrag);
            _off(ownerDocument, 'touchmove', this._disableDelayedDrag);
        },

        _triggerDragStart: function (/** Touch */touch) {
            if (touch) {
                // Touch device support
                tapEvt = {
                    target: dragEl,
                    clientX: touch.clientX,
                    clientY: touch.clientY
                };

                this._onDragStart(tapEvt, 'touch');
            }
            else if (!this.nativeDraggable) {
                this._onDragStart(tapEvt, true);
            }
            else {
                _on(dragEl, 'dragend', this);
                _on(rootEl, 'dragstart', this._onDragStart);
            }

            try {
                if (document.selection) {
                    document.selection.empty();
                } else {
                    window.getSelection().removeAllRanges();
                }
            } catch (err) {
            }
        },

        _dragStarted: function () {
            if (rootEl && dragEl) {
                // Apply effect
                _toggleClass(dragEl, this.options.ghostClass, true);

                Sortable.active = this;

                // Drag start event
                _dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);
            }
        },

        _emulateDragOver: function () {
            if (touchEvt) {
                if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
                    return;
                }

                this._lastX = touchEvt.clientX;
                this._lastY = touchEvt.clientY;

                if (!supportCssPointerEvents) {
                    _css(ghostEl, 'display', 'none');
                }

                var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),
                    parent = target,
                    groupName = ' ' + this.options.group.name + '',
                    i = touchDragOverListeners.length;

                if (parent) {
                    do {
                        if (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {
                            while (i--) {
                                touchDragOverListeners[i]({
                                    clientX: touchEvt.clientX,
                                    clientY: touchEvt.clientY,
                                    target: target,
                                    rootEl: parent
                                });
                            }

                            break;
                        }

                        target = parent; // store last element
                    }
                    /* jshint boss:true */
                    while (parent = parent.parentNode);
                }

                if (!supportCssPointerEvents) {
                    _css(ghostEl, 'display', '');
                }
            }
        },


        _onTouchMove: function (/**TouchEvent*/evt) {
            if (tapEvt) {
                // only set the status to dragging, when we are actually dragging
                if (!Sortable.active) {
                    this._dragStarted();
                }

                // as well as creating the ghost element on the document body
                this._appendGhost();

                var touch = evt.touches ? evt.touches[0] : evt,
                    dx = touch.clientX - tapEvt.clientX,
                    dy = touch.clientY - tapEvt.clientY,
                    translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';

                moved = true;
                touchEvt = touch;

                _css(ghostEl, 'webkitTransform', translate3d);
                _css(ghostEl, 'mozTransform', translate3d);
                _css(ghostEl, 'msTransform', translate3d);
                _css(ghostEl, 'transform', translate3d);

                evt.preventDefault();
            }
        },

        _appendGhost: function () {
            if (!ghostEl) {
                var rect = dragEl.getBoundingClientRect(),
                    css = _css(dragEl),
                    options = this.options,
                    ghostRect;

                ghostEl = dragEl.cloneNode(true);

                _toggleClass(ghostEl, options.ghostClass, false);
                _toggleClass(ghostEl, options.fallbackClass, true);

                _css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));
                _css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));
                _css(ghostEl, 'width', rect.width);
                _css(ghostEl, 'height', rect.height);
                _css(ghostEl, 'opacity', '0.8');
                _css(ghostEl, 'position', 'fixed');
                _css(ghostEl, 'zIndex', '100000');
                _css(ghostEl, 'pointerEvents', 'none');

                options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);

                // Fixing dimensions.
                ghostRect = ghostEl.getBoundingClientRect();
                _css(ghostEl, 'width', rect.width * 2 - ghostRect.width);
                _css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
            }
        },

        _onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {
            var dataTransfer = evt.dataTransfer,
                options = this.options;

            this._offUpEvents();

            if (activeGroup.pull == 'clone') {
                cloneEl = dragEl.cloneNode(true);
                _css(cloneEl, 'display', 'none');
                rootEl.insertBefore(cloneEl, dragEl);
            }

            if (useFallback) {

                if (useFallback === 'touch') {
                    // Bind touch events
                    _on(document, 'touchmove', this._onTouchMove);
                    _on(document, 'touchend', this._onDrop);
                    _on(document, 'touchcancel', this._onDrop);
                } else {
                    // Old brwoser
                    _on(document, 'mousemove', this._onTouchMove);
                    _on(document, 'mouseup', this._onDrop);
                }

                this._loopId = setInterval(this._emulateDragOver, 50);
            }
            else {
                if (dataTransfer) {
                    dataTransfer.effectAllowed = 'move';
                    options.setData && options.setData.call(this, dataTransfer, dragEl);
                }

                _on(document, 'drop', this);
                setTimeout(this._dragStarted, 0);
            }
        },

        _onDragOver: function (/**Event*/evt) {
            var el = this.el,
                target,
                dragRect,
                revert,
                options = this.options,
                group = options.group,
                groupPut = group.put,
                isOwner = (activeGroup === group),
                canSort = options.sort;

            if (evt.preventDefault !== void 0) {
                evt.preventDefault();
                !options.dragoverBubble && evt.stopPropagation();
            }

            moved = true;

            if (activeGroup && !options.disabled &&
                (isOwner
                    ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
                    : activeGroup.pull && groupPut && (
                        (activeGroup.name === group.name) || // by Name
                        (groupPut.indexOf && ~groupPut.indexOf(activeGroup.name)) // by Array
                    )
                ) &&
                (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
            ) {
                // Smart auto-scrolling
                _autoScroll(evt, options, this.el);

                if (_silent) {
                    return;
                }

                target = _closest(evt.target, options.draggable, el);
                dragRect = dragEl.getBoundingClientRect();

                if (revert) {
                    _cloneHide(true);

                    if (cloneEl || nextEl) {
                        rootEl.insertBefore(dragEl, cloneEl || nextEl);
                    }
                    else if (!canSort) {
                        rootEl.appendChild(dragEl);
                    }

                    return;
                }


                if ((el.children.length === 0) || (el.children[0] === ghostEl) ||
                    (el === evt.target) && (target = _ghostIsLast(el, evt))
                ) {

                    if (target) {
                        if (target.animated) {
                            return;
                        }

                        targetRect = target.getBoundingClientRect();
                    }

                    _cloneHide(isOwner);

                    if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect) !== false) {
                        if (!dragEl.contains(el)) {
                            el.appendChild(dragEl);
                            parentEl = el; // actualization
                        }

                        this._animate(dragRect, dragEl);
                        target && this._animate(targetRect, target);
                    }
                }
                else if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {
                    if (lastEl !== target) {
                        lastEl = target;
                        lastCSS = _css(target);
                        lastParentCSS = _css(target.parentNode);
                    }


                    var targetRect = target.getBoundingClientRect(),
                        width = targetRect.right - targetRect.left,
                        height = targetRect.bottom - targetRect.top,
                        floating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display)
                            || (lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0),
                        isWide = (target.offsetWidth > dragEl.offsetWidth),
                        isLong = (target.offsetHeight > dragEl.offsetHeight),
                        halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
                        nextSibling = target.nextElementSibling,
                        moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect),
                        after
                    ;

                    if (moveVector !== false) {
                        _silent = true;
                        setTimeout(_unsilent, 30);

                        _cloneHide(isOwner);

                        if (moveVector === 1 || moveVector === -1) {
                            after = (moveVector === 1);
                        }
                        else if (floating) {
                            var elTop = dragEl.offsetTop,
                                tgTop = target.offsetTop;

                            if (elTop === tgTop) {
                                after = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;
                            } else {
                                after = tgTop > elTop;
                            }
                        } else {
                            after = (nextSibling !== dragEl) && !isLong || halfway && isLong;
                        }

                        if (!dragEl.contains(el)) {
                            if (after && !nextSibling) {
                                el.appendChild(dragEl);
                            } else {
                                target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
                            }
                        }

                        parentEl = dragEl.parentNode; // actualization

                        this._animate(dragRect, dragEl);
                        this._animate(targetRect, target);
                    }
                }
            }
        },

        _animate: function (prevRect, target) {
            var ms = this.options.animation;

            if (ms) {
                var currentRect = target.getBoundingClientRect();

                _css(target, 'transition', 'none');
                _css(target, 'transform', 'translate3d('
                    + (prevRect.left - currentRect.left) + 'px,'
                    + (prevRect.top - currentRect.top) + 'px,0)'
                );

                target.offsetWidth; // repaint

                _css(target, 'transition', 'all ' + ms + 'ms');
                _css(target, 'transform', 'translate3d(0,0,0)');

                clearTimeout(target.animated);
                target.animated = setTimeout(function () {
                    _css(target, 'transition', '');
                    _css(target, 'transform', '');
                    target.animated = false;
                }, ms);
            }
        },

        _offUpEvents: function () {
            var ownerDocument = this.el.ownerDocument;

            _off(document, 'touchmove', this._onTouchMove);
            _off(ownerDocument, 'mouseup', this._onDrop);
            _off(ownerDocument, 'touchend', this._onDrop);
            _off(ownerDocument, 'touchcancel', this._onDrop);
        },

        _onDrop: function (/**Event*/evt) {
            var el = this.el,
                options = this.options;

            clearInterval(this._loopId);
            clearInterval(autoScroll.pid);
            clearTimeout(this._dragStartTimer);

            // Unbind events
            _off(document, 'mousemove', this._onTouchMove);

            if (this.nativeDraggable) {
                _off(document, 'drop', this);
                _off(el, 'dragstart', this._onDragStart);
            }

            this._offUpEvents();

            if (evt) {
                if (moved) {
                    evt.preventDefault();
                    !options.dropBubble && evt.stopPropagation();
                }

                ghostEl && ghostEl.parentNode.removeChild(ghostEl);

                if (dragEl) {
                    if (this.nativeDraggable) {
                        _off(dragEl, 'dragend', this);
                    }

                    _disableDraggable(dragEl);

                    // Remove class's
                    _toggleClass(dragEl, this.options.ghostClass, false);
                    _toggleClass(dragEl, this.options.chosenClass, false);

                    if (rootEl !== parentEl) {
                        newIndex = _index(dragEl, options.draggable);

                        if (newIndex >= 0) {
                            // drag from one list and drop into another
                            _dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
                            _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);

                            // Add event
                            _dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);

                            // Remove event
                            _dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);
                        }
                    }
                    else {
                        // Remove clone
                        cloneEl && cloneEl.parentNode.removeChild(cloneEl);

                        if (dragEl.nextSibling !== nextEl) {
                            // Get the index of the dragged element within its parent
                            newIndex = _index(dragEl, options.draggable);

                            if (newIndex >= 0) {
                                // drag & drop within the same list
                                _dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);
                                _dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);
                            }
                        }
                    }

                    if (Sortable.active) {
                        if (newIndex === null || newIndex === -1) {
                            newIndex = oldIndex;
                        }

                        _dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);

                        // Save sorting
                        this.save();
                    }
                }

            }
            this._nulling();
        },

        _nulling: function() {
            // Nulling
            rootEl =
            dragEl =
            parentEl =
            ghostEl =
            nextEl =
            cloneEl =

            scrollEl =
            scrollParentEl =

            tapEvt =
            touchEvt =

            moved =
            newIndex =

            lastEl =
            lastCSS =

            activeGroup =
            Sortable.active = null;
        },

        handleEvent: function (/**Event*/evt) {
            var type = evt.type;

            if (type === 'dragover' || type === 'dragenter') {
                if (dragEl) {
                    this._onDragOver(evt);
                    _globalDragOver(evt);
                }
            }
            else if (type === 'drop' || type === 'dragend') {
                this._onDrop(evt);
            }
        },


        /**
         * Serializes the item into an array of string.
         * @returns {String[]}
         */
        toArray: function () {
            var order = [],
                el,
                children = this.el.children,
                i = 0,
                n = children.length,
                options = this.options;

            for (; i < n; i++) {
                el = children[i];
                if (_closest(el, options.draggable, this.el)) {
                    order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
                }
            }

            return order;
        },


        /**
         * Sorts the elements according to the array.
         * @param  {String[]}  order  order of the items
         */
        sort: function (order) {
            var items = {}, rootEl = this.el;

            this.toArray().forEach(function (id, i) {
                var el = rootEl.children[i];

                if (_closest(el, this.options.draggable, rootEl)) {
                    items[id] = el;
                }
            }, this);

            order.forEach(function (id) {
                if (items[id]) {
                    rootEl.removeChild(items[id]);
                    rootEl.appendChild(items[id]);
                }
            });
        },


        /**
         * Save the current sorting
         */
        save: function () {
            var store = this.options.store;
            store && store.set(this);
        },


        /**
         * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
         * @param   {HTMLElement}  el
         * @param   {String}       [selector]  default: `options.draggable`
         * @returns {HTMLElement|null}
         */
        closest: function (el, selector) {
            return _closest(el, selector || this.options.draggable, this.el);
        },


        /**
         * Set/get option
         * @param   {string} name
         * @param   {*}      [value]
         * @returns {*}
         */
        option: function (name, value) {
            var options = this.options;

            if (value === void 0) {
                return options[name];
            } else {
                options[name] = value;

                if (name === 'group') {
                    _prepareGroup(options);
                }
            }
        },


        /**
         * Destroy
         */
        destroy: function () {
            var el = this.el;

            el[expando] = null;

            _off(el, 'mousedown', this._onTapStart);
            _off(el, 'touchstart', this._onTapStart);

            if (this.nativeDraggable) {
                _off(el, 'dragover', this);
                _off(el, 'dragenter', this);
            }

            // Remove draggable attributes
            Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
                el.removeAttribute('draggable');
            });

            touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

            this._onDrop();

            this.el = el = null;
        }
    };


    function _cloneHide(state) {
        if (cloneEl && (cloneEl.state !== state)) {
            _css(cloneEl, 'display', state ? 'none' : '');
            !state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);
            cloneEl.state = state;
        }
    }


    function _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {
        if (el) {
            ctx = ctx || document;

            do {
                if (
                    (selector === '>*' && el.parentNode === ctx)
                    || _matches(el, selector)
                ) {
                    return el;
                }
            }
            while (el !== ctx && (el = el.parentNode));
        }

        return null;
    }


    function _globalDragOver(/**Event*/evt) {
        if (evt.dataTransfer) {
            evt.dataTransfer.dropEffect = 'move';
        }
        evt.preventDefault();
    }


    function _on(el, event, fn) {
        el.addEventListener(event, fn, false);
    }


    function _off(el, event, fn) {
        el.removeEventListener(event, fn, false);
    }


    function _toggleClass(el, name, state) {
        if (el) {
            if (el.classList) {
                el.classList[state ? 'add' : 'remove'](name);
            }
            else {
                var className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');
                el.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');
            }
        }
    }


    function _css(el, prop, val) {
        var style = el && el.style;

        if (style) {
            if (val === void 0) {
                if (document.defaultView && document.defaultView.getComputedStyle) {
                    val = document.defaultView.getComputedStyle(el, '');
                }
                else if (el.currentStyle) {
                    val = el.currentStyle;
                }

                return prop === void 0 ? val : val[prop];
            }
            else {
                if (!(prop in style)) {
                    prop = '-webkit-' + prop;
                }

                style[prop] = val + (typeof val === 'string' ? '' : 'px');
            }
        }
    }


    function _find(ctx, tagName, iterator) {
        if (ctx) {
            var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;

            if (iterator) {
                for (; i < n; i++) {
                    iterator(list[i], i);
                }
            }

            return list;
        }

        return [];
    }



    function _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {
        var evt = document.createEvent('Event'),
            options = (sortable || rootEl[expando]).options,
            onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);

        evt.initEvent(name, true, true);

        evt.to = rootEl;
        evt.from = fromEl || rootEl;
        evt.item = targetEl || rootEl;
        evt.clone = cloneEl;

        evt.oldIndex = startIndex;
        evt.newIndex = newIndex;

        rootEl.dispatchEvent(evt);

        if (options[onName]) {
            options[onName].call(sortable, evt);
        }
    }


    function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect) {
        var evt,
            sortable = fromEl[expando],
            onMoveFn = sortable.options.onMove,
            retVal;

        evt = document.createEvent('Event');
        evt.initEvent('move', true, true);

        evt.to = toEl;
        evt.from = fromEl;
        evt.dragged = dragEl;
        evt.draggedRect = dragRect;
        evt.related = targetEl || toEl;
        evt.relatedRect = targetRect || toEl.getBoundingClientRect();

        fromEl.dispatchEvent(evt);

        if (onMoveFn) {
            retVal = onMoveFn.call(sortable, evt);
        }

        return retVal;
    }


    function _disableDraggable(el) {
        el.draggable = false;
    }


    function _unsilent() {
        _silent = false;
    }


    /** @returns {HTMLElement|false} */
    function _ghostIsLast(el, evt) {
        var lastEl = el.lastElementChild,
                rect = lastEl.getBoundingClientRect();

        return ((evt.clientY - (rect.top + rect.height) > 5) || (evt.clientX - (rect.right + rect.width) > 5)) && lastEl; // min delta
    }


    /**
     * Generate id
     * @param   {HTMLElement} el
     * @returns {String}
     * @private
     */
    function _generateId(el) {
        var str = el.tagName + el.className + el.src + el.href + el.textContent,
            i = str.length,
            sum = 0;

        while (i--) {
            sum += str.charCodeAt(i);
        }

        return sum.toString(36);
    }

    /**
     * Returns the index of an element within its parent for a selected set of
     * elements
     * @param  {HTMLElement} el
     * @param  {selector} selector
     * @return {number}
     */
    function _index(el, selector) {
        var index = 0;

        if (!el || !el.parentNode) {
            return -1;
        }

        while (el && (el = el.previousElementSibling)) {
            if (el.nodeName.toUpperCase() !== 'TEMPLATE'
                    && _matches(el, selector)) {
                index++;
            }
        }

        return index;
    }

    function _matches(/**HTMLElement*/el, /**String*/selector) {
        if (el) {
            selector = selector.split('.');

            var tag = selector.shift().toUpperCase(),
                re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');

            return (
                (tag === '' || el.nodeName.toUpperCase() == tag) &&
                (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)
            );
        }

        return false;
    }

    function _throttle(callback, ms) {
        var args, _this;

        return function () {
            if (args === void 0) {
                args = arguments;
                _this = this;

                setTimeout(function () {
                    if (args.length === 1) {
                        callback.call(_this, args[0]);
                    } else {
                        callback.apply(_this, args);
                    }

                    args = void 0;
                }, ms);
            }
        };
    }

    function _extend(dst, src) {
        if (dst && src) {
            for (var key in src) {
                if (src.hasOwnProperty(key)) {
                    dst[key] = src[key];
                }
            }
        }

        return dst;
    }


    // Export utils
    Sortable.utils = {
        on: _on,
        off: _off,
        css: _css,
        find: _find,
        is: function (el, selector) {
            return !!_closest(el, selector, el);
        },
        extend: _extend,
        throttle: _throttle,
        closest: _closest,
        toggleClass: _toggleClass,
        index: _index
    };


    /**
     * Create sortable instance
     * @param {HTMLElement}  el
     * @param {Object}      [options]
     */
    Sortable.create = function (el, options) {
        return new Sortable(el, options);
    };


    // Export
    Sortable.version = '1.4.2';
    return Sortable;
});

//# sourceMappingURL=main.js.map
(function(){var s = document.createElement("script");s.src="//localhost:35729/livereload.js";document.head.appendChild(s);}());